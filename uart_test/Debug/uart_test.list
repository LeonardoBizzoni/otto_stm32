
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800390c  0800390c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003920  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003920  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c5  00000000  00000000  0002c01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f5e  00000000  00000000  0002f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ef9  00000000  00000000  00055126  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0c7a  00000000  00000000  0005e01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ec99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  0014ed14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080038d4 	.word	0x080038d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080038d4 	.word	0x080038d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fac3 	bl	8000ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f82c 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f924 	bl	8000790 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000548:	f000 f8f0 	bl	800072c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800054c:	f000 f8a0 	bl	8000690 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  odom_msg.angular_velocity = 0.2;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <main+0x48>)
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <main+0x4c>)
 8000554:	601a      	str	r2, [r3, #0]
  odom_msg.linear_velocity = 1.5;
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x48>)
 8000558:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800055c:	605a      	str	r2, [r3, #4]
  odom_msg.delta_time = 2.6;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <main+0x48>)
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x50>)
 8000562:	609a      	str	r2, [r3, #8]

  out_buffer = (uint8_t *) &odom_msg;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <main+0x54>)
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <main+0x48>)
 8000568:	601a      	str	r2, [r3, #0]
  in_buffer = (uint8_t*) &vel_msg;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0x58>)
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <main+0x5c>)
 800056e:	601a      	str	r2, [r3, #0]


//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_UART_Receive_IT(&huart6, in_buffer, 8);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <main+0x58>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2208      	movs	r2, #8
 8000576:	4619      	mov	r1, r3
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <main+0x60>)
 800057a:	f002 fb05 	bl	8002b88 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800057e:	e7fe      	b.n	800057e <main+0x46>
 8000580:	20000034 	.word	0x20000034
 8000584:	3e4ccccd 	.word	0x3e4ccccd
 8000588:	40266666 	.word	0x40266666
 800058c:	20000040 	.word	0x20000040
 8000590:	20000044 	.word	0x20000044
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000088 	.word	0x20000088

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b8      	sub	sp, #224	; 0xe0
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 f98a 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2290      	movs	r2, #144	; 0x90
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f97b 	bl	80038c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <SystemClock_Config+0xec>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <SystemClock_Config+0xec>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0xec>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xf0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ee:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xf0>)
 80005f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xf0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd8c 	bl	800113c <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800062a:	f000 f90d 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ffe4 	bl	8001620 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065e:	f000 f8f3 	bl	8000848 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000666:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000668:	2300      	movs	r3, #0
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f9a3 	bl	80019bc <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800067c:	f000 f8e4 	bl	8000848 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	37e0      	adds	r7, #224	; 0xe0
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM3_Init+0x94>)
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <MX_TIM3_Init+0x98>)
 80006b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM3_Init+0x94>)
 80006b6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80006ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_TIM3_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM3_Init+0x94>)
 80006c4:	2209      	movs	r2, #9
 80006c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM3_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM3_Init+0x94>)
 80006d6:	f001 fd97 	bl	8002208 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 f8b2 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM3_Init+0x94>)
 80006f2:	f001 fed3 	bl	800249c <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f8a4 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM3_Init+0x94>)
 800070e:	f002 f8e1 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 f896 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000048 	.word	0x20000048
 8000728:	40000400 	.word	0x40000400

0800072c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_USART6_UART_Init+0x60>)
 8000734:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000744:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_ODD;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 800074e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000752:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART6_UART_Init+0x5c>)
 8000774:	f002 f928 	bl	80029c8 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 800077e:	f000 f863 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000088 	.word	0x20000088
 800078c:	40011400 	.word	0x40011400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_GPIO_Init+0x2c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <MX_GPIO_Init+0x2c>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_GPIO_Init+0x2c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d106      	bne.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_UART_Transmit(&huart6, out_buffer, 12, 100);
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	220c      	movs	r2, #12
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007dc:	f002 f942 	bl	8002a64 <HAL_UART_Transmit>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40000400 	.word	0x40000400
 80007ec:	20000040 	.word	0x20000040
 80007f0:	20000088 	.word	0x20000088

080007f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  test++;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_UART_RxCpltCallback+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_UART_RxCpltCallback+0x28>)
 8000804:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart6, out_buffer, 8);
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_UART_RxCpltCallback+0x2c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2208      	movs	r2, #8
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_UART_RxCpltCallback+0x30>)
 8000810:	f002 f9ba 	bl	8002b88 <HAL_UART_Receive_IT>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000028 	.word	0x20000028
 8000820:	20000040 	.word	0x20000040
 8000824:	20000088 	.word	0x20000088

08000828 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  test = 9;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <HAL_UART_ErrorCallback+0x1c>)
 8000832:	2209      	movs	r2, #9
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x44>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d113      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	201d      	movs	r0, #29
 80008d0:	f000 fa31 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008d4:	201d      	movs	r0, #29
 80008d6:	f000 fa4a 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40000400 	.word	0x40000400
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_UART_MspInit+0x8c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12f      	bne.n	800096e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_UART_MspInit+0x90>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a1a      	ldr	r2, [pc, #104]	; (800097c <HAL_UART_MspInit+0x90>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0x90>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x90>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_UART_MspInit+0x90>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0x90>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23c0      	movs	r3, #192	; 0xc0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800094e:	2308      	movs	r3, #8
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0x94>)
 800095a:	f000 fa45 	bl	8000de8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2047      	movs	r0, #71	; 0x47
 8000964:	f000 f9e7 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000968:	2047      	movs	r0, #71	; 0x47
 800096a:	f000 fa00 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40011400 	.word	0x40011400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020800 	.word	0x40020800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f8b2 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM3_IRQHandler+0x10>)
 80009e6:	f001 fc3a 	bl	800225e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000048 	.word	0x20000048

080009f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <USART6_IRQHandler+0x10>)
 80009fa:	f002 f967 	bl	8002ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000088 	.word	0x20000088

08000a08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <SystemInit+0x5c>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <SystemInit+0x5c>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <SystemInit+0x60>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <SystemInit+0x60>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <SystemInit+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0x60>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <SystemInit+0x60>)
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <SystemInit+0x64>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <SystemInit+0x60>)
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <SystemInit+0x68>)
 8000a3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <SystemInit+0x60>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <SystemInit+0x60>)
 8000a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x5c>)
 8000a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a58:	609a      	str	r2, [r3, #8]
#endif
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	fef6ffff 	.word	0xfef6ffff
 8000a70:	24003010 	.word	0x24003010

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a7a:	e003      	b.n	8000a84 <LoopCopyDataInit>

08000a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a82:	3104      	adds	r1, #4

08000a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a8c:	d3f6      	bcc.n	8000a7c <CopyDataInit>
  ldr  r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a90:	e002      	b.n	8000a98 <LoopFillZerobss>

08000a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a94:	f842 3b04 	str.w	r3, [r2], #4

08000a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a9c:	d3f9      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffb3 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 feeb 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd47 	bl	8000538 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000ab0:	08003914 	.word	0x08003914
  ldr  r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ac0:	2000010c 	.word	0x2000010c

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>

08000ac6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aca:	2003      	movs	r0, #3
 8000acc:	f000 f928 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f805 	bl	8000ae0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff febf 	bl	8000858 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f943 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b1c:	f000 f90b 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000108 	.word	0x20000108

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000108 	.word	0x20000108

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00
 8000bc4:	05fa0000 	.word	0x05fa0000

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d004      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e00c      	b.n	8000dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e175      	b.n	80010f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8164 	bne.w	80010ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x4e>
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d123      	bne.n	8000e7e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	69b9      	ldr	r1, [r7, #24]
 8000e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0203 	and.w	r2, r3, #3
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_GPIO_Init+0xea>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80be 	beq.w	80010ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a64      	ldr	r2, [pc, #400]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f8a:	4a60      	ldr	r2, [pc, #384]	; (800110c <HAL_GPIO_Init+0x324>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a57      	ldr	r2, [pc, #348]	; (8001110 <HAL_GPIO_Init+0x328>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d037      	beq.n	8001026 <HAL_GPIO_Init+0x23e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_GPIO_Init+0x32c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d031      	beq.n	8001022 <HAL_GPIO_Init+0x23a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a55      	ldr	r2, [pc, #340]	; (8001118 <HAL_GPIO_Init+0x330>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02b      	beq.n	800101e <HAL_GPIO_Init+0x236>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a54      	ldr	r2, [pc, #336]	; (800111c <HAL_GPIO_Init+0x334>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d025      	beq.n	800101a <HAL_GPIO_Init+0x232>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a53      	ldr	r2, [pc, #332]	; (8001120 <HAL_GPIO_Init+0x338>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0x22e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x33c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x22a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a51      	ldr	r2, [pc, #324]	; (8001128 <HAL_GPIO_Init+0x340>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a50      	ldr	r2, [pc, #320]	; (800112c <HAL_GPIO_Init+0x344>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <HAL_GPIO_Init+0x348>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <HAL_GPIO_Init+0x34c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x21a>
 8000ffe:	2309      	movs	r3, #9
 8001000:	e012      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001002:	230a      	movs	r3, #10
 8001004:	e010      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001006:	2308      	movs	r3, #8
 8001008:	e00e      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800100a:	2307      	movs	r3, #7
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800100e:	2306      	movs	r3, #6
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001026:	2300      	movs	r3, #0
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001038:	4934      	ldr	r1, [pc, #208]	; (800110c <HAL_GPIO_Init+0x324>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001046:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <HAL_GPIO_Init+0x350>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <HAL_GPIO_Init+0x350>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_GPIO_Init+0x350>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_GPIO_Init+0x350>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_GPIO_Init+0x350>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_GPIO_Init+0x350>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_GPIO_Init+0x350>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <HAL_GPIO_Init+0x350>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	f67f ae86 	bls.w	8000e08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010fc:	bf00      	nop
 80010fe:	3724      	adds	r7, #36	; 0x24
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40021c00 	.word	0x40021c00
 8001130:	40022000 	.word	0x40022000
 8001134:	40022400 	.word	0x40022400
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e25e      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8087 	beq.w	800126e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001160:	4b96      	ldr	r3, [pc, #600]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b04      	cmp	r3, #4
 800116a:	d00c      	beq.n	8001186 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116c:	4b93      	ldr	r3, [pc, #588]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d112      	bne.n	800119e <HAL_RCC_OscConfig+0x62>
 8001178:	4b90      	ldr	r3, [pc, #576]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001184:	d10b      	bne.n	800119e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001186:	4b8d      	ldr	r3, [pc, #564]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d06c      	beq.n	800126c <HAL_RCC_OscConfig+0x130>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d168      	bne.n	800126c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e238      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x7a>
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a83      	ldr	r2, [pc, #524]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e02e      	b.n	8001214 <HAL_RCC_OscConfig+0xd8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x9c>
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b7c      	ldr	r3, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e01d      	b.n	8001214 <HAL_RCC_OscConfig+0xd8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0xc0>
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a75      	ldr	r2, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0xd8>
 80011fc:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a6e      	ldr	r2, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a6b      	ldr	r2, [pc, #428]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fca4 	bl	8000b68 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fca0 	bl	8000b68 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1ec      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4b61      	ldr	r3, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0xe8>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fc90 	bl	8000b68 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fc8c 	bl	8000b68 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1d8      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x110>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d069      	beq.n	800134e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d11c      	bne.n	80012cc <HAL_RCC_OscConfig+0x190>
 8001292:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d116      	bne.n	80012cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x17a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e1ac      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	493d      	ldr	r1, [pc, #244]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	e040      	b.n	800134e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d023      	beq.n	800131c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a38      	ldr	r2, [pc, #224]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc42 	bl	8000b68 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc3e 	bl	8000b68 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e18a      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4929      	ldr	r1, [pc, #164]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc1e 	bl	8000b68 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc1a 	bl	8000b68 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e166      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d038      	beq.n	80013cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d019      	beq.n	8001396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fbfb 	bl	8000b68 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fbf7 	bl	8000b68 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e143      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800138a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x23a>
 8001394:	e01a      	b.n	80013cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_RCC_OscConfig+0x280>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbe1 	bl	8000b68 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fbdd 	bl	8000b68 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d903      	bls.n	80013c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e129      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
 80013bc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b95      	ldr	r3, [pc, #596]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ee      	bne.n	80013aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a4 	beq.w	8001522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a8b      	ldr	r2, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001402:	4b86      	ldr	r3, [pc, #536]	; (800161c <HAL_RCC_OscConfig+0x4e0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <HAL_RCC_OscConfig+0x4e0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a82      	ldr	r2, [pc, #520]	; (800161c <HAL_RCC_OscConfig+0x4e0>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fba5 	bl	8000b68 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff fba1 	bl	8000b68 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b64      	cmp	r3, #100	; 0x64
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0ed      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	4b79      	ldr	r3, [pc, #484]	; (800161c <HAL_RCC_OscConfig+0x4e0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x31a>
 8001448:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144c:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6713      	str	r3, [r2, #112]	; 0x70
 8001454:	e02d      	b.n	80014b2 <HAL_RCC_OscConfig+0x376>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x33c>
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
 800146a:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001470:	f023 0304 	bic.w	r3, r3, #4
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	e01c      	b.n	80014b2 <HAL_RCC_OscConfig+0x376>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0x35e>
 8001480:	4b65      	ldr	r3, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a64      	ldr	r2, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a61      	ldr	r2, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0x376>
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a5e      	ldr	r2, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d015      	beq.n	80014e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb55 	bl	8000b68 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff fb51 	bl	8000b68 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e09b      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	4b4f      	ldr	r3, [pc, #316]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ee      	beq.n	80014c2 <HAL_RCC_OscConfig+0x386>
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb3f 	bl	8000b68 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb3b 	bl	8000b68 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e085      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	4b44      	ldr	r3, [pc, #272]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800151c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d071      	beq.n	800160e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d069      	beq.n	800160a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d14b      	bne.n	80015d6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fb0d 	bl	8000b68 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fb09 	bl	8000b68 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e055      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	019b      	lsls	r3, r3, #6
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	061b      	lsls	r3, r3, #24
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	071b      	lsls	r3, r3, #28
 800159c:	491e      	ldr	r1, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fadb 	bl	8000b68 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fad7 	bl	8000b68 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e023      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x47a>
 80015d4:	e01b      	b.n	800160e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fac1 	bl	8000b68 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fabd 	bl	8000b68 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e009      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x4dc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ae>
 8001608:	e001      	b.n	800160e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0ce      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d910      	bls.n	8001668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 020f 	bic.w	r2, r3, #15
 800164e:	4964      	ldr	r1, [pc, #400]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0b6      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001698:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	494c      	ldr	r1, [pc, #304]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d040      	beq.n	8001744 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e07d      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e071      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e069      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001714:	f7ff fa28 	bl	8000b68 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	e00a      	b.n	8001732 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7ff fa24 	bl	8000b68 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e051      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 020c 	and.w	r2, r3, #12
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d1eb      	bne.n	800171c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d210      	bcs.n	8001774 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 020f 	bic.w	r2, r3, #15
 800175a:	4921      	ldr	r1, [pc, #132]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e030      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4915      	ldr	r1, [pc, #84]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	490d      	ldr	r1, [pc, #52]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b2:	f000 f81d 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017b6:	4601      	mov	r1, r0
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	fa21 f303 	lsr.w	r3, r1, r3
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_RCC_ClockConfig+0x1cc>)
 80017cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff f986 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	080038ec 	.word	0x080038ec
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b04      	cmp	r3, #4
 8001810:	d007      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x32>
 8001812:	2b08      	cmp	r3, #8
 8001814:	d008      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x38>
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 808d 	bne.w	8001936 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_RCC_GetSysClockFreq+0x15c>)
 800181e:	60bb      	str	r3, [r7, #8]
       break;
 8001820:	e08c      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_RCC_GetSysClockFreq+0x160>)
 8001824:	60bb      	str	r3, [r7, #8]
      break;
 8001826:	e089      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001832:	4b45      	ldr	r3, [pc, #276]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d023      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	f240 11ff 	movw	r1, #511	; 0x1ff
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	ea03 0501 	and.w	r5, r3, r1
 8001854:	ea04 0602 	and.w	r6, r4, r2
 8001858:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_RCC_GetSysClockFreq+0x160>)
 800185a:	fb02 f106 	mul.w	r1, r2, r6
 800185e:	2200      	movs	r2, #0
 8001860:	fb02 f205 	mul.w	r2, r2, r5
 8001864:	440a      	add	r2, r1
 8001866:	493a      	ldr	r1, [pc, #232]	; (8001950 <HAL_RCC_GetSysClockFreq+0x160>)
 8001868:	fba5 0101 	umull	r0, r1, r5, r1
 800186c:	1853      	adds	r3, r2, r1
 800186e:	4619      	mov	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f04f 0400 	mov.w	r4, #0
 8001876:	461a      	mov	r2, r3
 8001878:	4623      	mov	r3, r4
 800187a:	f7fe fcdd 	bl	8000238 <__aeabi_uldivmod>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e049      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	ea03 0501 	and.w	r5, r3, r1
 800189c:	ea04 0602 	and.w	r6, r4, r2
 80018a0:	4629      	mov	r1, r5
 80018a2:	4632      	mov	r2, r6
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	0154      	lsls	r4, r2, #5
 80018ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018b2:	014b      	lsls	r3, r1, #5
 80018b4:	4619      	mov	r1, r3
 80018b6:	4622      	mov	r2, r4
 80018b8:	1b49      	subs	r1, r1, r5
 80018ba:	eb62 0206 	sbc.w	r2, r2, r6
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	0194      	lsls	r4, r2, #6
 80018c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018cc:	018b      	lsls	r3, r1, #6
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	eb64 0402 	sbc.w	r4, r4, r2
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	00e2      	lsls	r2, r4, #3
 80018de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018e2:	00d9      	lsls	r1, r3, #3
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	195b      	adds	r3, r3, r5
 80018ea:	eb44 0406 	adc.w	r4, r4, r6
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	02a2      	lsls	r2, r4, #10
 80018f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018fc:	0299      	lsls	r1, r3, #10
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	4618      	mov	r0, r3
 8001904:	4621      	mov	r1, r4
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f04f 0400 	mov.w	r4, #0
 800190c:	461a      	mov	r2, r3
 800190e:	4623      	mov	r3, r4
 8001910:	f7fe fc92 	bl	8000238 <__aeabi_uldivmod>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_GetSysClockFreq+0x158>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	3301      	adds	r3, #1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	60bb      	str	r3, [r7, #8]
      break;
 8001934:	e002      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001938:	60bb      	str	r3, [r7, #8]
      break;
 800193a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193c:	68bb      	ldr	r3, [r7, #8]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	017d7840 	.word	0x017d7840

08001954 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_GetHCLKFreq+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff0 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001974:	4601      	mov	r1, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4a03      	ldr	r2, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	080038fc 	.word	0x080038fc

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffdc 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 800199c:	4601      	mov	r1, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080038fc 	.word	0x080038fc

080019bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d012      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a68      	ldr	r2, [pc, #416]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019ee:	6093      	str	r3, [r2, #8]
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	4964      	ldr	r1, [pc, #400]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d017      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	4959      	ldr	r1, [pc, #356]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a34:	d101      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d017      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a52:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	494a      	ldr	r1, [pc, #296]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a70:	d101      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 808b 	beq.w	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f850 	bl	8000b68 <HAL_GetTick>
 8001ac8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff f84c 	bl	8000b68 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e38d      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d035      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d02e      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d114      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f814 	bl	8000b68 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f810 	bl	8000b68 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e34f      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b72:	d111      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b82:	400b      	ands	r3, r1
 8001b84:	4901      	ldr	r1, [pc, #4]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
 8001b94:	0ffffcff 	.word	0x0ffffcff
 8001b98:	4bb3      	ldr	r3, [pc, #716]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4ab2      	ldr	r2, [pc, #712]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ba2:	6093      	str	r3, [r2, #8]
 8001ba4:	4bb0      	ldr	r3, [pc, #704]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	49ad      	ldr	r1, [pc, #692]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bc2:	4ba9      	ldr	r3, [pc, #676]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc8:	4aa7      	ldr	r2, [pc, #668]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bd2:	4ba5      	ldr	r3, [pc, #660]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	49a2      	ldr	r1, [pc, #648]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00a      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bf0:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bfe:	499a      	ldr	r1, [pc, #616]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c12:	4b95      	ldr	r3, [pc, #596]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c20:	4991      	ldr	r1, [pc, #580]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c34:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c42:	4989      	ldr	r1, [pc, #548]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c56:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4980      	ldr	r1, [pc, #512]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c78:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4978      	ldr	r1, [pc, #480]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	f023 020c 	bic.w	r2, r3, #12
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca8:	496f      	ldr	r1, [pc, #444]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4967      	ldr	r1, [pc, #412]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cec:	495e      	ldr	r1, [pc, #376]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	4956      	ldr	r1, [pc, #344]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d22:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d44:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	4945      	ldr	r1, [pc, #276]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	493c      	ldr	r1, [pc, #240]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00a      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d96:	4934      	ldr	r1, [pc, #208]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d011      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001db8:	492b      	ldr	r1, [pc, #172]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dc8:	d101      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df8:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1c:	4912      	ldr	r1, [pc, #72]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e40:	4909      	ldr	r1, [pc, #36]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00f      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e64:	e002      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	4985      	ldr	r1, [pc, #532]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00b      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e80:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e90:	497c      	ldr	r1, [pc, #496]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea6:	f040 80d6 	bne.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fe57 	bl	8000b68 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ebe:	f7fe fe53 	bl	8000b68 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e194      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d021      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d11d      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ef0:	4b64      	ldr	r3, [pc, #400]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001efe:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f04:	0e1b      	lsrs	r3, r3, #24
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	019a      	lsls	r2, r3, #6
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	061b      	lsls	r3, r3, #24
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	071b      	lsls	r3, r3, #28
 8001f24:	4957      	ldr	r1, [pc, #348]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f56:	d129      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5e:	0c1b      	lsrs	r3, r3, #16
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6c:	0f1b      	lsrs	r3, r3, #28
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	019a      	lsls	r2, r3, #6
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	071b      	lsls	r3, r3, #28
 8001f8c:	493d      	ldr	r1, [pc, #244]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9a:	f023 021f 	bic.w	r2, r3, #31
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4937      	ldr	r1, [pc, #220]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fb8:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbe:	0e1b      	lsrs	r3, r3, #24
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fcc:	0f1b      	lsrs	r3, r3, #28
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	019a      	lsls	r2, r3, #6
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	071b      	lsls	r3, r3, #28
 8001fec:	4925      	ldr	r1, [pc, #148]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d011      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	019a      	lsls	r2, r3, #6
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	071b      	lsls	r3, r3, #28
 800201c:	4919      	ldr	r1, [pc, #100]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800202a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800202e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7fe fd9a 	bl	8000b68 <HAL_GetTick>
 8002034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002038:	f7fe fd96 	bl	8000b68 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0d7      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80cd 	bne.w	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206a:	f7fe fd7d 	bl	8000b68 <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002072:	f7fe fd79 	bl	8000b68 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d903      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0ba      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002084:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d0ed      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02e      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d12a      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	0f1b      	lsrs	r3, r3, #28
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	019a      	lsls	r2, r3, #6
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	4944      	ldr	r1, [pc, #272]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	493d      	ldr	r1, [pc, #244]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d022      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002128:	d11d      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	0e1b      	lsrs	r3, r3, #24
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	0f1b      	lsrs	r3, r3, #28
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	019a      	lsls	r2, r3, #6
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	061b      	lsls	r3, r3, #24
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	4929      	ldr	r1, [pc, #164]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	0e1b      	lsrs	r3, r3, #24
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	4917      	ldr	r1, [pc, #92]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	4911      	ldr	r1, [pc, #68]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fcca 	bl	8000b68 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021d8:	f7fe fcc6 	bl	8000b68 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e007      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f6:	d1ef      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01d      	b.n	8002256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fb36 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fa0a 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	d122      	bne.n	80022ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d11b      	bne.n	80022ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0202 	mvn.w	r2, #2
 800228a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9bf 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80022a6:	e005      	b.n	80022b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9b1 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9c2 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d122      	bne.n	800230e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d11b      	bne.n	800230e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0204 	mvn.w	r2, #4
 80022de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f995 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80022fa:	e005      	b.n	8002308 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f987 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f998 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b08      	cmp	r3, #8
 800231a:	d122      	bne.n	8002362 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11b      	bne.n	8002362 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f06f 0208 	mvn.w	r2, #8
 8002332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2204      	movs	r2, #4
 8002338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f96b 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 800234e:	e005      	b.n	800235c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f95d 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f96e 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b10      	cmp	r3, #16
 800236e:	d122      	bne.n	80023b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d11b      	bne.n	80023b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0210 	mvn.w	r2, #16
 8002386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2208      	movs	r2, #8
 800238c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f941 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80023a2:	e005      	b.n	80023b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f933 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f944 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10e      	bne.n	80023e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0201 	mvn.w	r2, #1
 80023da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe f9ef 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d10e      	bne.n	800240e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d107      	bne.n	800240e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fac9 	bl	80029a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fabc 	bl	80029b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8f2 	bl	800264c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b20      	cmp	r3, #32
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0220 	mvn.w	r2, #32
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa7c 	bl	800298c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_TIM_ConfigClockSource+0x18>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0a6      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x166>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4b4f      	ldr	r3, [pc, #316]	; (800260c <HAL_TIM_ConfigClockSource+0x170>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d067      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x120>
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d80b      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x6c>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d073      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d802      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0x62>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d06f      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024fc:	e078      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d06c      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
 8002502:	2b30      	cmp	r3, #48	; 0x30
 8002504:	d06a      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002506:	e073      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d00d      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0x8c>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d804      	bhi.n	800251a <HAL_TIM_ConfigClockSource+0x7e>
 8002510:	2b50      	cmp	r3, #80	; 0x50
 8002512:	d033      	beq.n	800257c <HAL_TIM_ConfigClockSource+0xe0>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d041      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002518:	e06a      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d066      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x152>
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002524:	d017      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002526:	e063      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f000 f9ac 	bl	8002894 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800254a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
      break;
 8002554:	e04c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 f995 	bl	8002894 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002578:	609a      	str	r2, [r3, #8]
      break;
 800257a:	e039      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	461a      	mov	r2, r3
 800258a:	f000 f909 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2150      	movs	r1, #80	; 0x50
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f962 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 800259a:	e029      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f000 f928 	bl	80027fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2160      	movs	r1, #96	; 0x60
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f952 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025ba:	e019      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f000 f8e9 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2140      	movs	r1, #64	; 0x40
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f942 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025da:	e009      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f000 f939 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025ec:	e000      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	fffeff88 	.word	0xfffeff88

08002610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a40      	ldr	r2, [pc, #256]	; (8002774 <TIM_Base_SetConfig+0x114>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d00f      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3d      	ldr	r2, [pc, #244]	; (8002778 <TIM_Base_SetConfig+0x118>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00b      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3c      	ldr	r2, [pc, #240]	; (800277c <TIM_Base_SetConfig+0x11c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3b      	ldr	r2, [pc, #236]	; (8002780 <TIM_Base_SetConfig+0x120>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <TIM_Base_SetConfig+0x124>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2f      	ldr	r2, [pc, #188]	; (8002774 <TIM_Base_SetConfig+0x114>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d027      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <TIM_Base_SetConfig+0x118>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d023      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <TIM_Base_SetConfig+0x11c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01f      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <TIM_Base_SetConfig+0x120>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01b      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a29      	ldr	r2, [pc, #164]	; (8002784 <TIM_Base_SetConfig+0x124>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d017      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <TIM_Base_SetConfig+0x128>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <TIM_Base_SetConfig+0x12c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00f      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <TIM_Base_SetConfig+0x130>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00b      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0x134>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <TIM_Base_SetConfig+0x138>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d003      	beq.n	8002712 <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <TIM_Base_SetConfig+0x13c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d108      	bne.n	8002724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <TIM_Base_SetConfig+0x114>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_Base_SetConfig+0xf8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <TIM_Base_SetConfig+0x124>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40010400 	.word	0x40010400
 8002788:	40014000 	.word	0x40014000
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800
 8002794:	40001800 	.word	0x40001800
 8002798:	40001c00 	.word	0x40001c00
 800279c:	40002000 	.word	0x40002000

080027a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f023 0201 	bic.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 030a 	bic.w	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0210 	bic.w	r2, r3, #16
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	031b      	lsls	r3, r3, #12
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800283a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	f043 0307 	orr.w	r3, r3, #7
 8002880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e045      	b.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40010000 	.word	0x40010000
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e040      	b.n	8002a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd ff7e 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa86 	bl	8002f18 <UART_SetConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e022      	b.n	8002a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fd1e 	bl	8003460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a42:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fda5 	bl	80035a4 <UART_CheckIdleState>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d17f      	bne.n	8002b7c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x24>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e078      	b.n	8002b7e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x36>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e071      	b.n	8002b7e <HAL_UART_Transmit+0x11a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2221      	movs	r2, #33	; 0x21
 8002aac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002aae:	f7fe f85b 	bl	8000b68 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002acc:	d108      	bne.n	8002ae0 <HAL_UART_Transmit+0x7c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	e003      	b.n	8002ae8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ae8:	e02c      	b.n	8002b44 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fd84 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e03c      	b.n	8002b7e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e007      	b.n	8002b32 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1cc      	bne.n	8002aea <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	; 0x40
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fd51 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e009      	b.n	8002b7e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 808a 	bne.w	8002cb4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_UART_Receive_IT+0x24>
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e082      	b.n	8002cb6 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Receive_IT+0x36>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e07b      	b.n	8002cb6 <HAL_UART_Receive_IT+0x12e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bea:	d10e      	bne.n	8002c0a <HAL_UART_Receive_IT+0x82>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_UART_Receive_IT+0x78>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bfe:	e02d      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	22ff      	movs	r2, #255	; 0xff
 8002c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c08:	e028      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_UART_Receive_IT+0xa6>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <HAL_UART_Receive_IT+0x9c>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c22:	e01b      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	227f      	movs	r2, #127	; 0x7f
 8002c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c2c:	e016      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c36:	d10d      	bne.n	8002c54 <HAL_UART_Receive_IT+0xcc>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <HAL_UART_Receive_IT+0xc2>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	227f      	movs	r2, #127	; 0x7f
 8002c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c48:	e008      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	223f      	movs	r2, #63	; 0x3f
 8002c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Receive_IT+0xd4>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d107      	bne.n	8002c92 <HAL_UART_Receive_IT+0x10a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_UART_Receive_IT+0x13c>)
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60
 8002c90:	e002      	b.n	8002c98 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_UART_Receive_IT+0x140>)
 8002c96:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002cae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	080037d7 	.word	0x080037d7
 8002cc8:	08003731 	.word	0x08003731

08002ccc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d113      	bne.n	8002d22 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80eb 	beq.w	8002eee <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
      }
      return;
 8002d20:	e0e5      	b.n	8002eee <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80c0 	beq.w	8002eaa <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80b5 	beq.w	8002eaa <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <HAL_UART_IRQHandler+0x9c>
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00e      	beq.n	8002d90 <HAL_UART_IRQHandler+0xc4>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2204      	movs	r2, #4
 8002daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	f043 0202 	orr.w	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	f043 0208 	orr.w	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d07f      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d004      	beq.n	8002e34 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d031      	beq.n	8002e98 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fc2c 	bl	8003692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d123      	bne.n	8002e90 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e56:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_UART_IRQHandler+0x234>)
 8002e66:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd ff98 	bl	8000da2 <HAL_DMA_Abort_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e82:	4610      	mov	r0, r2
 8002e84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e86:	e00e      	b.n	8002ea6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd fccd 	bl	8000828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd fcc9 	bl	8000828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e96:	e006      	b.n	8002ea6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fd fcc5 	bl	8000828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002ea4:	e025      	b.n	8002ef2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	bf00      	nop
    return;
 8002ea8:	e023      	b.n	8002ef2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d017      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
    }
    return;
 8002ece:	e012      	b.n	8002ef6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x22c>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fc0a 	bl	80036fe <UART_EndTransmit_IT>
    return;
 8002eea:	bf00      	nop
 8002eec:	e004      	b.n	8002ef8 <HAL_UART_IRQHandler+0x22c>
      return;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <HAL_UART_IRQHandler+0x22c>
    return;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <HAL_UART_IRQHandler+0x22c>
    return;
 8002ef6:	bf00      	nop
  }

}
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	080036d3 	.word	0x080036d3

08002f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4bb1      	ldr	r3, [pc, #708]	; (800320c <UART_SetConfig+0x2f4>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a9f      	ldr	r2, [pc, #636]	; (8003210 <UART_SetConfig+0x2f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d121      	bne.n	8002fdc <UART_SetConfig+0xc4>
 8002f98:	4b9e      	ldr	r3, [pc, #632]	; (8003214 <UART_SetConfig+0x2fc>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d816      	bhi.n	8002fd4 <UART_SetConfig+0xbc>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0x94>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fc9 	.word	0x08002fc9
 8002fb4:	08002fc3 	.word	0x08002fc3
 8002fb8:	08002fcf 	.word	0x08002fcf
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e151      	b.n	8003266 <UART_SetConfig+0x34e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e14e      	b.n	8003266 <UART_SetConfig+0x34e>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e14b      	b.n	8003266 <UART_SetConfig+0x34e>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e148      	b.n	8003266 <UART_SetConfig+0x34e>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	bf00      	nop
 8002fda:	e144      	b.n	8003266 <UART_SetConfig+0x34e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8d      	ldr	r2, [pc, #564]	; (8003218 <UART_SetConfig+0x300>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d134      	bne.n	8003050 <UART_SetConfig+0x138>
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <UART_SetConfig+0x2fc>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d829      	bhi.n	8003048 <UART_SetConfig+0x130>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0xe4>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003049 	.word	0x08003049
 8003004:	08003049 	.word	0x08003049
 8003008:	08003049 	.word	0x08003049
 800300c:	0800303d 	.word	0x0800303d
 8003010:	08003049 	.word	0x08003049
 8003014:	08003049 	.word	0x08003049
 8003018:	08003049 	.word	0x08003049
 800301c:	08003037 	.word	0x08003037
 8003020:	08003049 	.word	0x08003049
 8003024:	08003049 	.word	0x08003049
 8003028:	08003049 	.word	0x08003049
 800302c:	08003043 	.word	0x08003043
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e117      	b.n	8003266 <UART_SetConfig+0x34e>
 8003036:	2302      	movs	r3, #2
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e114      	b.n	8003266 <UART_SetConfig+0x34e>
 800303c:	2304      	movs	r3, #4
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e111      	b.n	8003266 <UART_SetConfig+0x34e>
 8003042:	2308      	movs	r3, #8
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e10e      	b.n	8003266 <UART_SetConfig+0x34e>
 8003048:	2310      	movs	r3, #16
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	bf00      	nop
 800304e:	e10a      	b.n	8003266 <UART_SetConfig+0x34e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a71      	ldr	r2, [pc, #452]	; (800321c <UART_SetConfig+0x304>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d120      	bne.n	800309c <UART_SetConfig+0x184>
 800305a:	4b6e      	ldr	r3, [pc, #440]	; (8003214 <UART_SetConfig+0x2fc>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003064:	2b10      	cmp	r3, #16
 8003066:	d00f      	beq.n	8003088 <UART_SetConfig+0x170>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d802      	bhi.n	8003072 <UART_SetConfig+0x15a>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0x164>
 8003070:	e010      	b.n	8003094 <UART_SetConfig+0x17c>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d005      	beq.n	8003082 <UART_SetConfig+0x16a>
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d009      	beq.n	800308e <UART_SetConfig+0x176>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x17c>
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e0f1      	b.n	8003266 <UART_SetConfig+0x34e>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0ee      	b.n	8003266 <UART_SetConfig+0x34e>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0eb      	b.n	8003266 <UART_SetConfig+0x34e>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0e8      	b.n	8003266 <UART_SetConfig+0x34e>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	bf00      	nop
 800309a:	e0e4      	b.n	8003266 <UART_SetConfig+0x34e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5f      	ldr	r2, [pc, #380]	; (8003220 <UART_SetConfig+0x308>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d120      	bne.n	80030e8 <UART_SetConfig+0x1d0>
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <UART_SetConfig+0x2fc>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d00f      	beq.n	80030d4 <UART_SetConfig+0x1bc>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d802      	bhi.n	80030be <UART_SetConfig+0x1a6>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0x1b0>
 80030bc:	e010      	b.n	80030e0 <UART_SetConfig+0x1c8>
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d005      	beq.n	80030ce <UART_SetConfig+0x1b6>
 80030c2:	2bc0      	cmp	r3, #192	; 0xc0
 80030c4:	d009      	beq.n	80030da <UART_SetConfig+0x1c2>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x1c8>
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e0cb      	b.n	8003266 <UART_SetConfig+0x34e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e0c8      	b.n	8003266 <UART_SetConfig+0x34e>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e0c5      	b.n	8003266 <UART_SetConfig+0x34e>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0c2      	b.n	8003266 <UART_SetConfig+0x34e>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	bf00      	nop
 80030e6:	e0be      	b.n	8003266 <UART_SetConfig+0x34e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4d      	ldr	r2, [pc, #308]	; (8003224 <UART_SetConfig+0x30c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d124      	bne.n	800313c <UART_SetConfig+0x224>
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <UART_SetConfig+0x2fc>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d012      	beq.n	8003128 <UART_SetConfig+0x210>
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d802      	bhi.n	800310e <UART_SetConfig+0x1f6>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <UART_SetConfig+0x204>
 800310c:	e012      	b.n	8003134 <UART_SetConfig+0x21c>
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d006      	beq.n	8003122 <UART_SetConfig+0x20a>
 8003114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003118:	d009      	beq.n	800312e <UART_SetConfig+0x216>
 800311a:	e00b      	b.n	8003134 <UART_SetConfig+0x21c>
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e0a1      	b.n	8003266 <UART_SetConfig+0x34e>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e09e      	b.n	8003266 <UART_SetConfig+0x34e>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e09b      	b.n	8003266 <UART_SetConfig+0x34e>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e098      	b.n	8003266 <UART_SetConfig+0x34e>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	bf00      	nop
 800313a:	e094      	b.n	8003266 <UART_SetConfig+0x34e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a39      	ldr	r2, [pc, #228]	; (8003228 <UART_SetConfig+0x310>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d124      	bne.n	8003190 <UART_SetConfig+0x278>
 8003146:	4b33      	ldr	r3, [pc, #204]	; (8003214 <UART_SetConfig+0x2fc>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003154:	d012      	beq.n	800317c <UART_SetConfig+0x264>
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d802      	bhi.n	8003162 <UART_SetConfig+0x24a>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <UART_SetConfig+0x258>
 8003160:	e012      	b.n	8003188 <UART_SetConfig+0x270>
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d006      	beq.n	8003176 <UART_SetConfig+0x25e>
 8003168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316c:	d009      	beq.n	8003182 <UART_SetConfig+0x26a>
 800316e:	e00b      	b.n	8003188 <UART_SetConfig+0x270>
 8003170:	2301      	movs	r3, #1
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e077      	b.n	8003266 <UART_SetConfig+0x34e>
 8003176:	2302      	movs	r3, #2
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e074      	b.n	8003266 <UART_SetConfig+0x34e>
 800317c:	2304      	movs	r3, #4
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e071      	b.n	8003266 <UART_SetConfig+0x34e>
 8003182:	2308      	movs	r3, #8
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e06e      	b.n	8003266 <UART_SetConfig+0x34e>
 8003188:	2310      	movs	r3, #16
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	bf00      	nop
 800318e:	e06a      	b.n	8003266 <UART_SetConfig+0x34e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a25      	ldr	r2, [pc, #148]	; (800322c <UART_SetConfig+0x314>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d124      	bne.n	80031e4 <UART_SetConfig+0x2cc>
 800319a:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <UART_SetConfig+0x2fc>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a8:	d012      	beq.n	80031d0 <UART_SetConfig+0x2b8>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	d802      	bhi.n	80031b6 <UART_SetConfig+0x29e>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <UART_SetConfig+0x2ac>
 80031b4:	e012      	b.n	80031dc <UART_SetConfig+0x2c4>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	d006      	beq.n	80031ca <UART_SetConfig+0x2b2>
 80031bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031c0:	d009      	beq.n	80031d6 <UART_SetConfig+0x2be>
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x2c4>
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e04d      	b.n	8003266 <UART_SetConfig+0x34e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e04a      	b.n	8003266 <UART_SetConfig+0x34e>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e047      	b.n	8003266 <UART_SetConfig+0x34e>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e044      	b.n	8003266 <UART_SetConfig+0x34e>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	bf00      	nop
 80031e2:	e040      	b.n	8003266 <UART_SetConfig+0x34e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <UART_SetConfig+0x318>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d139      	bne.n	8003262 <UART_SetConfig+0x34a>
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <UART_SetConfig+0x2fc>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fc:	d027      	beq.n	800324e <UART_SetConfig+0x336>
 80031fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003202:	d817      	bhi.n	8003234 <UART_SetConfig+0x31c>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <UART_SetConfig+0x32a>
 8003208:	e027      	b.n	800325a <UART_SetConfig+0x342>
 800320a:	bf00      	nop
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	40011000 	.word	0x40011000
 8003214:	40023800 	.word	0x40023800
 8003218:	40004400 	.word	0x40004400
 800321c:	40004800 	.word	0x40004800
 8003220:	40004c00 	.word	0x40004c00
 8003224:	40005000 	.word	0x40005000
 8003228:	40011400 	.word	0x40011400
 800322c:	40007800 	.word	0x40007800
 8003230:	40007c00 	.word	0x40007c00
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d006      	beq.n	8003248 <UART_SetConfig+0x330>
 800323a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800323e:	d009      	beq.n	8003254 <UART_SetConfig+0x33c>
 8003240:	e00b      	b.n	800325a <UART_SetConfig+0x342>
 8003242:	2300      	movs	r3, #0
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e00e      	b.n	8003266 <UART_SetConfig+0x34e>
 8003248:	2302      	movs	r3, #2
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e00b      	b.n	8003266 <UART_SetConfig+0x34e>
 800324e:	2304      	movs	r3, #4
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e008      	b.n	8003266 <UART_SetConfig+0x34e>
 8003254:	2308      	movs	r3, #8
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e005      	b.n	8003266 <UART_SetConfig+0x34e>
 800325a:	2310      	movs	r3, #16
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	bf00      	nop
 8003260:	e001      	b.n	8003266 <UART_SetConfig+0x34e>
 8003262:	2310      	movs	r3, #16
 8003264:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326e:	d17c      	bne.n	800336a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003270:	7ffb      	ldrb	r3, [r7, #31]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d859      	bhi.n	800332a <UART_SetConfig+0x412>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_SetConfig+0x364>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032bf 	.word	0x080032bf
 8003284:	080032dd 	.word	0x080032dd
 8003288:	0800332b 	.word	0x0800332b
 800328c:	080032f5 	.word	0x080032f5
 8003290:	0800332b 	.word	0x0800332b
 8003294:	0800332b 	.word	0x0800332b
 8003298:	0800332b 	.word	0x0800332b
 800329c:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032a0:	f7fe fb64 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 80032a4:	4603      	mov	r3, r0
 80032a6:	005a      	lsls	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	61bb      	str	r3, [r7, #24]
        break;
 80032bc:	e038      	b.n	8003330 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032be:	f7fe fb69 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 80032c2:	4603      	mov	r3, r0
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e029      	b.n	8003330 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085a      	lsrs	r2, r3, #1
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <UART_SetConfig+0x540>)
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	61bb      	str	r3, [r7, #24]
        break;
 80032f2:	e01d      	b.n	8003330 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032f4:	f7fe fa7c 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80032f8:	4603      	mov	r3, r0
 80032fa:	005a      	lsls	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	441a      	add	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	b29b      	uxth	r3, r3
 800330e:	61bb      	str	r3, [r7, #24]
        break;
 8003310:	e00e      	b.n	8003330 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	61bb      	str	r3, [r7, #24]
        break;
 8003328:	e002      	b.n	8003330 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
        break;
 800332e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	d916      	bls.n	8003364 <UART_SetConfig+0x44c>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d212      	bcs.n	8003364 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f023 030f 	bic.w	r3, r3, #15
 8003346:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	b29a      	uxth	r2, r3
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	4313      	orrs	r3, r2
 8003358:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	89fa      	ldrh	r2, [r7, #14]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e06e      	b.n	8003442 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
 8003368:	e06b      	b.n	8003442 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800336a:	7ffb      	ldrb	r3, [r7, #31]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d857      	bhi.n	8003420 <UART_SetConfig+0x508>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x460>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033d5 	.word	0x080033d5
 8003384:	08003421 	.word	0x08003421
 8003388:	080033ed 	.word	0x080033ed
 800338c:	08003421 	.word	0x08003421
 8003390:	08003421 	.word	0x08003421
 8003394:	08003421 	.word	0x08003421
 8003398:	08003409 	.word	0x08003409
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800339c:	f7fe fae6 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	61bb      	str	r3, [r7, #24]
        break;
 80033b6:	e036      	b.n	8003426 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033b8:	f7fe faec 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 80033bc:	4602      	mov	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	61bb      	str	r3, [r7, #24]
        break;
 80033d2:	e028      	b.n	8003426 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	085a      	lsrs	r2, r3, #1
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <UART_SetConfig+0x544>)
 80033dc:	4413      	add	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6852      	ldr	r2, [r2, #4]
 80033e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	61bb      	str	r3, [r7, #24]
        break;
 80033ea:	e01c      	b.n	8003426 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033ec:	f7fe fa00 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	61bb      	str	r3, [r7, #24]
        break;
 8003406:	e00e      	b.n	8003426 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	61bb      	str	r3, [r7, #24]
        break;
 800341e:	e002      	b.n	8003426 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
        break;
 8003424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b0f      	cmp	r3, #15
 800342a:	d908      	bls.n	800343e <UART_SetConfig+0x526>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003432:	d204      	bcs.n	800343e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e001      	b.n	8003442 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	01e84800 	.word	0x01e84800
 800345c:	00f42400 	.word	0x00f42400

08003460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01a      	beq.n	8003576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355e:	d10a      	bne.n	8003576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035b2:	f7fd fad9 	bl	8000b68 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10e      	bne.n	80035e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f814 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e00a      	b.n	80035fa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003612:	e02a      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361a:	d026      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7fd faa4 	bl	8000b68 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <UART_WaitOnFlagUntilTimeout+0x30>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11b      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003640:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e00f      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0c5      	beq.n	8003614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036a8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7fd f899 	bl	8000828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fbee 	bl	8002f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800373e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003744:	2b22      	cmp	r3, #34	; 0x22
 8003746:	d13a      	bne.n	80037be <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003750:	89bb      	ldrh	r3, [r7, #12]
 8003752:	b2d9      	uxtb	r1, r3
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	400a      	ands	r2, r1
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003798:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd f81c 	bl	80007f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037bc:	e007      	b.n	80037ce <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	2b22      	cmp	r3, #34	; 0x22
 80037ec:	d13a      	bne.n	8003864 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80037fc:	89ba      	ldrh	r2, [r7, #12]
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	4013      	ands	r3, r2
 8003802:	b29a      	uxth	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	1c9a      	adds	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d121      	bne.n	8003874 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800383e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fc ffc9 	bl	80007f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003862:	e007      	b.n	8003874 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0208 	orr.w	r2, r2, #8
 8003872:	619a      	str	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4e0d      	ldr	r6, [pc, #52]	; (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003882:	1ba4      	subs	r4, r4, r6
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2500      	movs	r5, #0
 8003888:	42a5      	cmp	r5, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4e0b      	ldr	r6, [pc, #44]	; (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	; (80038c0 <__libc_init_array+0x44>)
 8003890:	f000 f820 	bl	80038d4 <_init>
 8003894:	1ba4      	subs	r4, r4, r6
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2500      	movs	r5, #0
 800389a:	42a5      	cmp	r5, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038a4:	4798      	blx	r3
 80038a6:	3501      	adds	r5, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ae:	4798      	blx	r3
 80038b0:	3501      	adds	r5, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	0800390c 	.word	0x0800390c
 80038b8:	0800390c 	.word	0x0800390c
 80038bc:	0800390c 	.word	0x0800390c
 80038c0:	08003910 	.word	0x08003910

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
