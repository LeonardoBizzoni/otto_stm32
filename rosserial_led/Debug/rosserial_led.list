
rosserial_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800612c  0800612c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006134  08006134  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000074  080061b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080061b4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002779  00000000  00000000  0003306b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b2b6  00000000  00000000  00037568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1b0  00000000  00000000  0006281e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fabdc  00000000  00000000  0006d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001685aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  00168628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	08005ea8 	.word	0x08005ea8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	08005ea8 	.word	0x08005ea8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f94b 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f005 f92c 	bl	80057b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f965 	bl	8000852 <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a0:	f000 f92d 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	2000023c 	.word	0x2000023c

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000023c 	.word	0x2000023c

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <__NVIC_SetPriorityGrouping+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	4313      	orrs	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x40>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	05fa0000 	.word	0x05fa0000

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff29 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff3e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff8e 	bl	800073c <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff31 	bl	80006ac <__NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffa2 	bl	80007a4 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff feb8 	bl	80005ec <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e099      	b.n	80009bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a8:	e00f      	b.n	80008ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008aa:	f7ff fe9f 	bl	80005ec <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d908      	bls.n	80008ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2220      	movs	r2, #32
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e078      	b.n	80009bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e8      	bne.n	80008aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_DMA_Init+0x158>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	2b04      	cmp	r3, #4
 8000922:	d107      	bne.n	8000934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4313      	orrs	r3, r2
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa99 	bl	8000ea8 <DMA_CheckFifoParam>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800098a:	2301      	movs	r3, #1
 800098c:	e016      	b.n	80009bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa50 	bl	8000e3c <DMA_CalcBaseAndBitshift>
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	e010803f 	.word	0xe010803f

080009c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d101      	bne.n	80009ee <HAL_DMA_Start_IT+0x26>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e048      	b.n	8000a80 <HAL_DMA_Start_IT+0xb8>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d137      	bne.n	8000a72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f9e2 	bl	8000de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a20:	223f      	movs	r2, #63	; 0x3f
 8000a22:	409a      	lsls	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0216 	orr.w	r2, r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a46:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0201 	orr.w	r2, r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e005      	b.n	8000a7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d004      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00c      	b.n	8000ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x258>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_DMA_IRQHandler+0x25c>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0a9b      	lsrs	r3, r3, #10
 8000ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	2208      	movs	r2, #8
 8000af8:	409a      	lsls	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01a      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	2208      	movs	r2, #8
 8000b26:	409a      	lsls	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b66:	f043 0202 	orr.w	r2, r3, #2
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b72:	2204      	movs	r2, #4
 8000b74:	409a      	lsls	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	2204      	movs	r2, #4
 8000b92:	409a      	lsls	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9c:	f043 0204 	orr.w	r2, r3, #4
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	2210      	movs	r2, #16
 8000baa:	409a      	lsls	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d043      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d018      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d024      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	4798      	blx	r3
 8000bfa:	e01f      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
 8000c0c:	e016      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0208 	bic.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	2220      	movs	r2, #32
 8000c42:	409a      	lsls	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 808e 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8086 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c62:	2220      	movs	r2, #32
 8000c64:	409a      	lsls	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d136      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0216 	bic.w	r2, r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_DMA_IRQHandler+0x1da>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0208 	bic.w	r2, r2, #8
 8000cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cba:	223f      	movs	r2, #63	; 0x3f
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d07d      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	4798      	blx	r3
        }
        return;
 8000ce2:	e078      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01c      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d108      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d030      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
 8000d10:	e02b      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d027      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
 8000d22:	e022      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
 8000d24:	20000008 	.word	0x20000008
 8000d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0210 	bic.w	r2, r2, #16
 8000d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d032      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d307      	bcc.n	8000db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f2      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x2ca>
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4798      	blx	r3
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd6:	bf00      	nop
    }
  }
}
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop

08000de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b40      	cmp	r3, #64	; 0x40
 8000e0c:	d108      	bne.n	8000e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1e:	e007      	b.n	8000e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b10      	subs	r3, #16
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <DMA_CalcBaseAndBitshift+0x60>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d908      	bls.n	8000e7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	1d1a      	adds	r2, r3, #4
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	659a      	str	r2, [r3, #88]	; 0x58
 8000e7a:	e006      	b.n	8000e8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	08006008 	.word	0x08006008
 8000ea4:	fffffc00 	.word	0xfffffc00

08000ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11f      	bne.n	8000f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d855      	bhi.n	8000f74 <DMA_CheckFifoParam+0xcc>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DMA_CheckFifoParam+0x28>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ef3 	.word	0x08000ef3
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000f75 	.word	0x08000f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d045      	beq.n	8000f78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ef0:	e042      	b.n	8000f78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000efa:	d13f      	bne.n	8000f7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f00:	e03c      	b.n	8000f7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0a:	d121      	bne.n	8000f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d836      	bhi.n	8000f80 <DMA_CheckFifoParam+0xd8>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <DMA_CheckFifoParam+0x70>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f2f 	.word	0x08000f2f
 8000f20:	08000f29 	.word	0x08000f29
 8000f24:	08000f41 	.word	0x08000f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2c:	e02f      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3e:	e021      	b.n	8000f84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f48:	d11e      	bne.n	8000f88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4e:	e01b      	b.n	8000f88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d902      	bls.n	8000f5c <DMA_CheckFifoParam+0xb4>
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d003      	beq.n	8000f62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f5a:	e018      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f60:	e015      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00e      	beq.n	8000f8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
      break;
 8000f72:	e00b      	b.n	8000f8c <DMA_CheckFifoParam+0xe4>
      break;
 8000f74:	bf00      	nop
 8000f76:	e00a      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e008      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e006      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;   
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f8c:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e175      	b.n	80012a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8164 	bne.w	80012a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x4e>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	69b9      	ldr	r1, [r7, #24]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d00b      	beq.n	8001086 <HAL_GPIO_Init+0xea>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	2b11      	cmp	r3, #17
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b12      	cmp	r3, #18
 8001084:	d130      	bne.n	80010e8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80be 	beq.w	80012a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <HAL_GPIO_Init+0x320>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800113e:	4a60      	ldr	r2, [pc, #384]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_GPIO_Init+0x328>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d037      	beq.n	80011da <HAL_GPIO_Init+0x23e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d031      	beq.n	80011d6 <HAL_GPIO_Init+0x23a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x236>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x232>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x338>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x33c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x22a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x340>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x348>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x34c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x21a>
 80011b2:	2309      	movs	r3, #9
 80011b4:	e012      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011b6:	230a      	movs	r3, #10
 80011b8:	e010      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ec:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_GPIO_Init+0x350>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_GPIO_Init+0x350>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_GPIO_Init+0x350>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_GPIO_Init+0x350>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae86 	bls.w	8000fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	3724      	adds	r7, #36	; 0x24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40022000 	.word	0x40022000
 80012e8:	40022400 	.word	0x40022400
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800130c:	e003      	b.n	8001316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	401a      	ands	r2, r3
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	429a      	cmp	r2, r3
 800133a:	d104      	bne.n	8001346 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001344:	e002      	b.n	800134c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e25e      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001388:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
 8001394:	4b90      	ldr	r3, [pc, #576]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b8d      	ldr	r3, [pc, #564]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x130>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e238      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x7a>
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a83      	ldr	r2, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x9c>
 80013da:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b7c      	ldr	r3, [pc, #496]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xc0>
 80013fe:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b73      	ldr	r3, [pc, #460]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a72      	ldr	r2, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 8001418:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff f8d8 	bl	80005ec <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff f8d4 	bl	80005ec <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1ec      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff f8c4 	bl	80005ec <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f8c0 	bl	80005ec <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1d8      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x110>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d069      	beq.n	800156a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
 80014ae:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1ac      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	493d      	ldr	r1, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e040      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff f876 	bl	80005ec <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff f872 	bl	80005ec <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e18a      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4929      	ldr	r1, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff f852 	bl	80005ec <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff f84e 	bl	80005ec <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e166      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d038      	beq.n	80015e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff f82f 	bl	80005ec <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff f82b 	bl	80005ec <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e143      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x23a>
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff f815 	bl	80005ec <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff f811 	bl	80005ec <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d903      	bls.n	80015dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e129      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
 80015d8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a4 	beq.w	800173e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a8b      	ldr	r2, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_RCC_OscConfig+0x4e0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800162a:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x4e0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a82      	ldr	r2, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x4e0>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7fe ffd9 	bl	80005ec <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7fe ffd5 	bl	80005ec <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0ed      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b79      	ldr	r3, [pc, #484]	; (8001838 <HAL_RCC_OscConfig+0x4e0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x31a>
 8001664:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x33c>
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a6d      	ldr	r2, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x35e>
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a64      	ldr	r2, [pc, #400]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a61      	ldr	r2, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7fe ff89 	bl	80005ec <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7fe ff85 	bl	80005ec <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e09b      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x386>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7fe ff73 	bl	80005ec <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7fe ff6f 	bl	80005ec <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e085      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a3f      	ldr	r2, [pc, #252]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d071      	beq.n	800182a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d069      	beq.n	8001826 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d14b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7fe ff41 	bl	80005ec <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe ff3d 	bl	80005ec <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e055      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	071b      	lsls	r3, r3, #28
 80017b8:	491e      	ldr	r1, [pc, #120]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7fe ff0f 	bl	80005ec <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7fe ff0b 	bl	80005ec <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e023      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x47a>
 80017f0:	e01b      	b.n	800182a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7fe fef5 	bl	80005ec <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7fe fef1 	bl	80005ec <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e009      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x4dc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x4ae>
 8001824:	e001      	b.n	800182a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0ce      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b69      	ldr	r3, [pc, #420]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d910      	bls.n	8001884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 020f 	bic.w	r2, r3, #15
 800186a:	4964      	ldr	r1, [pc, #400]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b6      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494c      	ldr	r1, [pc, #304]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d040      	beq.n	8001960 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07d      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e071      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e069      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4935      	ldr	r1, [pc, #212]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001930:	f7fe fe5c 	bl	80005ec <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7fe fe58 	bl	80005ec <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e051      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d210      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 020f 	bic.w	r2, r3, #15
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e030      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4915      	ldr	r1, [pc, #84]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490d      	ldr	r1, [pc, #52]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f81d 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019d2:	4601      	mov	r1, r0
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	fa21 f303 	lsr.w	r3, r1, r3
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_RCC_ClockConfig+0x1cc>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7fe fdba 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08006114 	.word	0x08006114
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a22:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x32>
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d008      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x38>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 808d 	bne.w	8001b52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a3a:	60bb      	str	r3, [r7, #8]
       break;
 8001a3c:	e08c      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a40:	60bb      	str	r3, [r7, #8]
      break;
 8001a42:	e089      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a4e:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d023      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	ea03 0501 	and.w	r5, r3, r1
 8001a70:	ea04 0602 	and.w	r6, r4, r2
 8001a74:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a76:	fb02 f106 	mul.w	r1, r2, r6
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	fb02 f205 	mul.w	r2, r2, r5
 8001a80:	440a      	add	r2, r1
 8001a82:	493a      	ldr	r1, [pc, #232]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a84:	fba5 0101 	umull	r0, r1, r5, r1
 8001a88:	1853      	adds	r3, r2, r1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	f7fe fbd7 	bl	8000248 <__aeabi_uldivmod>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e049      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	ea03 0501 	and.w	r5, r3, r1
 8001ab8:	ea04 0602 	and.w	r6, r4, r2
 8001abc:	4629      	mov	r1, r5
 8001abe:	4632      	mov	r2, r6
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f04f 0400 	mov.w	r4, #0
 8001ac8:	0154      	lsls	r4, r2, #5
 8001aca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ace:	014b      	lsls	r3, r1, #5
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	1b49      	subs	r1, r1, r5
 8001ad6:	eb62 0206 	sbc.w	r2, r2, r6
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f04f 0400 	mov.w	r4, #0
 8001ae2:	0194      	lsls	r4, r2, #6
 8001ae4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ae8:	018b      	lsls	r3, r1, #6
 8001aea:	1a5b      	subs	r3, r3, r1
 8001aec:	eb64 0402 	sbc.w	r4, r4, r2
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	00e2      	lsls	r2, r4, #3
 8001afa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001afe:	00d9      	lsls	r1, r3, #3
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	195b      	adds	r3, r3, r5
 8001b06:	eb44 0406 	adc.w	r4, r4, r6
 8001b0a:	f04f 0100 	mov.w	r1, #0
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	02a2      	lsls	r2, r4, #10
 8001b14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b18:	0299      	lsls	r1, r3, #10
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f04f 0400 	mov.w	r4, #0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	f7fe fb8c 	bl	8000248 <__aeabi_uldivmod>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	3301      	adds	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	60bb      	str	r3, [r7, #8]
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b54:	60bb      	str	r3, [r7, #8]
      break;
 8001b56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b58:	68bb      	ldr	r3, [r7, #8]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	017d7840 	.word	0x017d7840

08001b70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4601      	mov	r1, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08006124 	.word	0x08006124

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08006124 	.word	0x08006124

08001bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d012      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c00:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a68      	ldr	r2, [pc, #416]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0a:	6093      	str	r3, [r2, #8]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4964      	ldr	r1, [pc, #400]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d017      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	4959      	ldr	r1, [pc, #356]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c50:	d101      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d017      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	494a      	ldr	r1, [pc, #296]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 808b 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fc84 	bl	80005ec <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe fc80 	bl	80005ec <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e38d      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d035      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d02e      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d114      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe fc48 	bl	80005ec <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe fc44 	bl	80005ec <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e34f      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	4901      	ldr	r1, [pc, #4]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000
 8001db0:	0ffffcff 	.word	0x0ffffcff
 8001db4:	4bb3      	ldr	r3, [pc, #716]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4ab2      	ldr	r2, [pc, #712]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	4bb0      	ldr	r3, [pc, #704]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	49ad      	ldr	r1, [pc, #692]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dde:	4ba9      	ldr	r3, [pc, #676]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de4:	4aa7      	ldr	r2, [pc, #668]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dee:	4ba5      	ldr	r3, [pc, #660]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	49a2      	ldr	r1, [pc, #648]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1a:	499a      	ldr	r1, [pc, #616]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e2e:	4b95      	ldr	r3, [pc, #596]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3c:	4991      	ldr	r1, [pc, #580]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5e:	4989      	ldr	r1, [pc, #548]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e72:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4980      	ldr	r1, [pc, #512]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e94:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4978      	ldr	r1, [pc, #480]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f023 020c 	bic.w	r2, r3, #12
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	496f      	ldr	r1, [pc, #444]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4967      	ldr	r1, [pc, #412]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efa:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	495e      	ldr	r1, [pc, #376]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	4956      	ldr	r1, [pc, #344]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	494d      	ldr	r1, [pc, #308]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	4945      	ldr	r1, [pc, #276]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	493c      	ldr	r1, [pc, #240]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fb2:	4934      	ldr	r1, [pc, #208]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd4:	492b      	ldr	r1, [pc, #172]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	491b      	ldr	r1, [pc, #108]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002038:	4912      	ldr	r1, [pc, #72]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205c:	4909      	ldr	r1, [pc, #36]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00f      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	e002      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	4985      	ldr	r1, [pc, #532]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800209c:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800209e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ac:	497c      	ldr	r1, [pc, #496]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020c2:	f040 80d6 	bne.w	8002272 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d2:	f7fe fa8b 	bl	80005ec <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020da:	f7fe fa87 	bl	80005ec <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e194      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d021      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11d      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	0e1b      	lsrs	r3, r3, #24
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	019a      	lsls	r2, r3, #6
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4957      	ldr	r1, [pc, #348]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002172:	d129      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002174:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	0f1b      	lsrs	r3, r3, #28
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	019a      	lsls	r2, r3, #6
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	071b      	lsls	r3, r3, #28
 80021a8:	493d      	ldr	r1, [pc, #244]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b6:	f023 021f 	bic.w	r2, r3, #31
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e8:	0f1b      	lsrs	r3, r3, #28
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	019a      	lsls	r2, r3, #6
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	431a      	orrs	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	431a      	orrs	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	071b      	lsls	r3, r3, #28
 8002208:	4925      	ldr	r1, [pc, #148]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d011      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	019a      	lsls	r2, r3, #6
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	071b      	lsls	r3, r3, #28
 8002238:	4919      	ldr	r1, [pc, #100]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800224a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7fe f9ce 	bl	80005ec <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002254:	f7fe f9ca 	bl	80005ec <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0d7      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 80cd 	bne.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002286:	f7fe f9b1 	bl	80005ec <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228e:	f7fe f9ad 	bl	80005ec <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d903      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0ba      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80022a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b0:	d0ed      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d02e      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12a      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	0f1b      	lsrs	r3, r3, #28
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	019a      	lsls	r2, r3, #6
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	4944      	ldr	r1, [pc, #272]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002316:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	3b01      	subs	r3, #1
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	493d      	ldr	r1, [pc, #244]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d022      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002344:	d11d      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	0f1b      	lsrs	r3, r3, #28
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	019a      	lsls	r2, r3, #6
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	4929      	ldr	r1, [pc, #164]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d028      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	0e1b      	lsrs	r3, r3, #24
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	019a      	lsls	r2, r3, #6
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	071b      	lsls	r3, r3, #28
 80023c2:	4917      	ldr	r1, [pc, #92]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	4911      	ldr	r1, [pc, #68]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe f8fe 	bl	80005ec <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023f4:	f7fe f8fa 	bl	80005ec <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e007      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800240e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002412:	d1ef      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e01d      	b.n	8002472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f003 f9d6 	bl	80057fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 f8ee 	bl	8002644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_TIM_Base_Start+0x50>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d00b      	beq.n	80024b6 <HAL_TIM_Base_Start+0x3a>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d007      	beq.n	80024b6 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	00010007 	.word	0x00010007

080024d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_ConfigClockSource+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0a6      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_TIM_ConfigClockSource+0x170>)
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d067      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0x120>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d80b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x6c>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d073      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d802      	bhi.n	8002532 <HAL_TIM_ConfigClockSource+0x62>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06f      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002530:	e078      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002532:	2b20      	cmp	r3, #32
 8002534:	d06c      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d06a      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800253a:	e073      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d00d      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x8c>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d804      	bhi.n	800254e <HAL_TIM_ConfigClockSource+0x7e>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d033      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xe0>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d041      	beq.n	80025d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800254c:	e06a      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d066      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x152>
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d017      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800255a:	e063      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 f984 	bl	8002878 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e04c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f000 f96d 	bl	8002878 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e039      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f000 f8e1 	bl	8002784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2150      	movs	r1, #80	; 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f93a 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 80025ce:	e029      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	461a      	mov	r2, r3
 80025de:	f000 f900 	bl	80027e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2160      	movs	r1, #96	; 0x60
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f92a 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e019      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f000 f8c1 	bl	8002784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f91a 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 800260e:	e009      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 f911 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	fffeff88 	.word	0xfffeff88

08002644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a40      	ldr	r2, [pc, #256]	; (8002758 <TIM_Base_SetConfig+0x114>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d013      	beq.n	8002684 <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002662:	d00f      	beq.n	8002684 <TIM_Base_SetConfig+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3d      	ldr	r2, [pc, #244]	; (800275c <TIM_Base_SetConfig+0x118>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00b      	beq.n	8002684 <TIM_Base_SetConfig+0x40>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <TIM_Base_SetConfig+0x11c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <TIM_Base_SetConfig+0x120>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_Base_SetConfig+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <TIM_Base_SetConfig+0x124>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d108      	bne.n	8002696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <TIM_Base_SetConfig+0x114>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d027      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2c      	ldr	r2, [pc, #176]	; (800275c <TIM_Base_SetConfig+0x118>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d023      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <TIM_Base_SetConfig+0x11c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <TIM_Base_SetConfig+0x120>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01b      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a29      	ldr	r2, [pc, #164]	; (8002768 <TIM_Base_SetConfig+0x124>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d017      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a28      	ldr	r2, [pc, #160]	; (800276c <TIM_Base_SetConfig+0x128>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <TIM_Base_SetConfig+0x12c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00f      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a26      	ldr	r2, [pc, #152]	; (8002774 <TIM_Base_SetConfig+0x130>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a25      	ldr	r2, [pc, #148]	; (8002778 <TIM_Base_SetConfig+0x134>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <TIM_Base_SetConfig+0x138>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <TIM_Base_SetConfig+0x13c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <TIM_Base_SetConfig+0x114>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0xf8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <TIM_Base_SetConfig+0x124>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	615a      	str	r2, [r3, #20]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40010400 	.word	0x40010400
 800276c:	40014000 	.word	0x40014000
 8002770:	40014400 	.word	0x40014400
 8002774:	40014800 	.word	0x40014800
 8002778:	40001800 	.word	0x40001800
 800277c:	40001c00 	.word	0x40001c00
 8002780:	40002000 	.word	0x40002000

08002784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f023 030a 	bic.w	r3, r3, #10
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0210 	bic.w	r2, r3, #16
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800280c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800281e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	f043 0307 	orr.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	431a      	orrs	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e045      	b.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800290a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40010000 	.word	0x40010000
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e040      	b.n	8002a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f002 ff50 	bl	8005838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2224      	movs	r2, #36	; 0x24
 800299c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa7a 	bl	8002ea8 <UART_SetConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fd12 	bl	80033f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fd99 	bl	8003534 <UART_CheckIdleState>
 8002a02:	4603      	mov	r3, r0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d164      	bne.n	8002aec <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_Transmit_DMA+0x22>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e05d      	b.n	8002aee <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit_DMA+0x34>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e056      	b.n	8002aee <HAL_UART_Transmit_DMA+0xe2>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	; 0x21
 8002a68:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d02a      	beq.n	8002ac8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a76:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <HAL_UART_Transmit_DMA+0xec>)
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_UART_Transmit_DMA+0xf0>)
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_UART_Transmit_DMA+0xf4>)
 8002a88:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a8e:	2200      	movs	r2, #0
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3328      	adds	r3, #40	; 0x28
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f7fd ff8f 	bl	80009c8 <HAL_DMA_Start_IT>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e012      	b.n	8002aee <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800368d 	.word	0x0800368d
 8002afc:	080036dd 	.word	0x080036dd
 8002b00:	08003779 	.word	0x08003779

08002b04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d16c      	bne.n	8002bf4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Receive_DMA+0x22>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e065      	b.n	8002bf6 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Receive_DMA+0x34>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e05e      	b.n	8002bf6 <HAL_UART_Receive_DMA+0xf2>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2222      	movs	r2, #34	; 0x22
 8002b58:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02a      	beq.n	8002bb8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_UART_Receive_DMA+0xfc>)
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_UART_Receive_DMA+0x100>)
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_UART_Receive_DMA+0x104>)
 8002b78:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	2200      	movs	r2, #0
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	461a      	mov	r2, r3
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f7fd ff17 	bl	80009c8 <HAL_DMA_Start_IT>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e01e      	b.n	8002bf6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bee:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	080036f9 	.word	0x080036f9
 8002c04:	0800375d 	.word	0x0800375d
 8002c08:	08003779 	.word	0x08003779

08002c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80eb 	beq.w	8002e2e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
      }
      return;
 8002c60:	e0e5      	b.n	8002e2e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80c0 	beq.w	8002dea <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80b5 	beq.w	8002dea <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x9c>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xc4>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_UART_IRQHandler+0xec>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf0:	f043 0202 	orr.w	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d104      	bne.n	8002d16 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07f      	beq.n	8002e32 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d004      	beq.n	8002d74 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fc69 	bl	800364c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d123      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d96:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_UART_IRQHandler+0x234>)
 8002da6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fe6b 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc6:	e00e      	b.n	8002de6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f863 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dce:	e00a      	b.n	8002de6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f85f 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	e006      	b.n	8002de6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f85b 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002de4:	e025      	b.n	8002e32 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de6:	bf00      	nop
    return;
 8002de8:	e023      	b.n	8002e32 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
    }
    return;
 8002e0e:	e012      	b.n	8002e36 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <HAL_UART_IRQHandler+0x22c>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fcf9 	bl	800381c <UART_EndTransmit_IT>
    return;
 8002e2a:	bf00      	nop
 8002e2c:	e004      	b.n	8002e38 <HAL_UART_IRQHandler+0x22c>
      return;
 8002e2e:	bf00      	nop
 8002e30:	e002      	b.n	8002e38 <HAL_UART_IRQHandler+0x22c>
    return;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <HAL_UART_IRQHandler+0x22c>
    return;
 8002e36:	bf00      	nop
  }

}
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	080037f1 	.word	0x080037f1

08002e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4bb1      	ldr	r3, [pc, #708]	; (800319c <UART_SetConfig+0x2f4>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a9f      	ldr	r2, [pc, #636]	; (80031a0 <UART_SetConfig+0x2f8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d121      	bne.n	8002f6c <UART_SetConfig+0xc4>
 8002f28:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <UART_SetConfig+0x2fc>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d816      	bhi.n	8002f64 <UART_SetConfig+0xbc>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <UART_SetConfig+0x94>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f59 	.word	0x08002f59
 8002f44:	08002f53 	.word	0x08002f53
 8002f48:	08002f5f 	.word	0x08002f5f
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e151      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e14e      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e14b      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e148      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002f64:	2310      	movs	r3, #16
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	bf00      	nop
 8002f6a:	e144      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a8d      	ldr	r2, [pc, #564]	; (80031a8 <UART_SetConfig+0x300>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d134      	bne.n	8002fe0 <UART_SetConfig+0x138>
 8002f76:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <UART_SetConfig+0x2fc>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d829      	bhi.n	8002fd8 <UART_SetConfig+0x130>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0xe4>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fd9 	.word	0x08002fd9
 8002f94:	08002fd9 	.word	0x08002fd9
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fcd 	.word	0x08002fcd
 8002fa0:	08002fd9 	.word	0x08002fd9
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	08002fd9 	.word	0x08002fd9
 8002fac:	08002fc7 	.word	0x08002fc7
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fd9 	.word	0x08002fd9
 8002fbc:	08002fd3 	.word	0x08002fd3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e117      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e114      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e111      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e10e      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	bf00      	nop
 8002fde:	e10a      	b.n	80031f6 <UART_SetConfig+0x34e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a71      	ldr	r2, [pc, #452]	; (80031ac <UART_SetConfig+0x304>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d120      	bne.n	800302c <UART_SetConfig+0x184>
 8002fea:	4b6e      	ldr	r3, [pc, #440]	; (80031a4 <UART_SetConfig+0x2fc>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d00f      	beq.n	8003018 <UART_SetConfig+0x170>
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d802      	bhi.n	8003002 <UART_SetConfig+0x15a>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <UART_SetConfig+0x164>
 8003000:	e010      	b.n	8003024 <UART_SetConfig+0x17c>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d005      	beq.n	8003012 <UART_SetConfig+0x16a>
 8003006:	2b30      	cmp	r3, #48	; 0x30
 8003008:	d009      	beq.n	800301e <UART_SetConfig+0x176>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x17c>
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e0f1      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003012:	2302      	movs	r3, #2
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e0ee      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003018:	2304      	movs	r3, #4
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e0eb      	b.n	80031f6 <UART_SetConfig+0x34e>
 800301e:	2308      	movs	r3, #8
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e0e8      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003024:	2310      	movs	r3, #16
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	bf00      	nop
 800302a:	e0e4      	b.n	80031f6 <UART_SetConfig+0x34e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <UART_SetConfig+0x308>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d120      	bne.n	8003078 <UART_SetConfig+0x1d0>
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <UART_SetConfig+0x2fc>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d00f      	beq.n	8003064 <UART_SetConfig+0x1bc>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d802      	bhi.n	800304e <UART_SetConfig+0x1a6>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <UART_SetConfig+0x1b0>
 800304c:	e010      	b.n	8003070 <UART_SetConfig+0x1c8>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d005      	beq.n	800305e <UART_SetConfig+0x1b6>
 8003052:	2bc0      	cmp	r3, #192	; 0xc0
 8003054:	d009      	beq.n	800306a <UART_SetConfig+0x1c2>
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x1c8>
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e0cb      	b.n	80031f6 <UART_SetConfig+0x34e>
 800305e:	2302      	movs	r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e0c8      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003064:	2304      	movs	r3, #4
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e0c5      	b.n	80031f6 <UART_SetConfig+0x34e>
 800306a:	2308      	movs	r3, #8
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e0c2      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003070:	2310      	movs	r3, #16
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	bf00      	nop
 8003076:	e0be      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <UART_SetConfig+0x30c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d124      	bne.n	80030cc <UART_SetConfig+0x224>
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <UART_SetConfig+0x2fc>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	d012      	beq.n	80030b8 <UART_SetConfig+0x210>
 8003092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003096:	d802      	bhi.n	800309e <UART_SetConfig+0x1f6>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <UART_SetConfig+0x204>
 800309c:	e012      	b.n	80030c4 <UART_SetConfig+0x21c>
 800309e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a2:	d006      	beq.n	80030b2 <UART_SetConfig+0x20a>
 80030a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a8:	d009      	beq.n	80030be <UART_SetConfig+0x216>
 80030aa:	e00b      	b.n	80030c4 <UART_SetConfig+0x21c>
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e0a1      	b.n	80031f6 <UART_SetConfig+0x34e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e09e      	b.n	80031f6 <UART_SetConfig+0x34e>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e09b      	b.n	80031f6 <UART_SetConfig+0x34e>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e098      	b.n	80031f6 <UART_SetConfig+0x34e>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	bf00      	nop
 80030ca:	e094      	b.n	80031f6 <UART_SetConfig+0x34e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <UART_SetConfig+0x310>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d124      	bne.n	8003120 <UART_SetConfig+0x278>
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <UART_SetConfig+0x2fc>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e4:	d012      	beq.n	800310c <UART_SetConfig+0x264>
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d802      	bhi.n	80030f2 <UART_SetConfig+0x24a>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <UART_SetConfig+0x258>
 80030f0:	e012      	b.n	8003118 <UART_SetConfig+0x270>
 80030f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f6:	d006      	beq.n	8003106 <UART_SetConfig+0x25e>
 80030f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030fc:	d009      	beq.n	8003112 <UART_SetConfig+0x26a>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x270>
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e077      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e074      	b.n	80031f6 <UART_SetConfig+0x34e>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e071      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e06e      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	bf00      	nop
 800311e:	e06a      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <UART_SetConfig+0x314>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d124      	bne.n	8003174 <UART_SetConfig+0x2cc>
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <UART_SetConfig+0x2fc>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d012      	beq.n	8003160 <UART_SetConfig+0x2b8>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	d802      	bhi.n	8003146 <UART_SetConfig+0x29e>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <UART_SetConfig+0x2ac>
 8003144:	e012      	b.n	800316c <UART_SetConfig+0x2c4>
 8003146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314a:	d006      	beq.n	800315a <UART_SetConfig+0x2b2>
 800314c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003150:	d009      	beq.n	8003166 <UART_SetConfig+0x2be>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x2c4>
 8003154:	2300      	movs	r3, #0
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e04d      	b.n	80031f6 <UART_SetConfig+0x34e>
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e04a      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003160:	2304      	movs	r3, #4
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e047      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003166:	2308      	movs	r3, #8
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e044      	b.n	80031f6 <UART_SetConfig+0x34e>
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	bf00      	nop
 8003172:	e040      	b.n	80031f6 <UART_SetConfig+0x34e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <UART_SetConfig+0x318>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d139      	bne.n	80031f2 <UART_SetConfig+0x34a>
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <UART_SetConfig+0x2fc>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318c:	d027      	beq.n	80031de <UART_SetConfig+0x336>
 800318e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003192:	d817      	bhi.n	80031c4 <UART_SetConfig+0x31c>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <UART_SetConfig+0x32a>
 8003198:	e027      	b.n	80031ea <UART_SetConfig+0x342>
 800319a:	bf00      	nop
 800319c:	efff69f3 	.word	0xefff69f3
 80031a0:	40011000 	.word	0x40011000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40007800 	.word	0x40007800
 80031c0:	40007c00 	.word	0x40007c00
 80031c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c8:	d006      	beq.n	80031d8 <UART_SetConfig+0x330>
 80031ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031ce:	d009      	beq.n	80031e4 <UART_SetConfig+0x33c>
 80031d0:	e00b      	b.n	80031ea <UART_SetConfig+0x342>
 80031d2:	2300      	movs	r3, #0
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e00e      	b.n	80031f6 <UART_SetConfig+0x34e>
 80031d8:	2302      	movs	r3, #2
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e00b      	b.n	80031f6 <UART_SetConfig+0x34e>
 80031de:	2304      	movs	r3, #4
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e008      	b.n	80031f6 <UART_SetConfig+0x34e>
 80031e4:	2308      	movs	r3, #8
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e005      	b.n	80031f6 <UART_SetConfig+0x34e>
 80031ea:	2310      	movs	r3, #16
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	bf00      	nop
 80031f0:	e001      	b.n	80031f6 <UART_SetConfig+0x34e>
 80031f2:	2310      	movs	r3, #16
 80031f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fe:	d17c      	bne.n	80032fa <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d859      	bhi.n	80032ba <UART_SetConfig+0x412>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <UART_SetConfig+0x364>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003231 	.word	0x08003231
 8003210:	0800324f 	.word	0x0800324f
 8003214:	0800326d 	.word	0x0800326d
 8003218:	080032bb 	.word	0x080032bb
 800321c:	08003285 	.word	0x08003285
 8003220:	080032bb 	.word	0x080032bb
 8003224:	080032bb 	.word	0x080032bb
 8003228:	080032bb 	.word	0x080032bb
 800322c:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003230:	f7fe fcaa 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8003234:	4603      	mov	r3, r0
 8003236:	005a      	lsls	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	441a      	add	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	b29b      	uxth	r3, r3
 800324a:	61bb      	str	r3, [r7, #24]
        break;
 800324c:	e038      	b.n	80032c0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800324e:	f7fe fcaf 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 8003252:	4603      	mov	r3, r0
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	61bb      	str	r3, [r7, #24]
        break;
 800326a:	e029      	b.n	80032c0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	085a      	lsrs	r2, r3, #1
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <UART_SetConfig+0x540>)
 8003274:	4413      	add	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6852      	ldr	r2, [r2, #4]
 800327a:	fbb3 f3f2 	udiv	r3, r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	61bb      	str	r3, [r7, #24]
        break;
 8003282:	e01d      	b.n	80032c0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003284:	f7fe fbc2 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8003288:	4603      	mov	r3, r0
 800328a:	005a      	lsls	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	441a      	add	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	b29b      	uxth	r3, r3
 800329e:	61bb      	str	r3, [r7, #24]
        break;
 80032a0:	e00e      	b.n	80032c0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	61bb      	str	r3, [r7, #24]
        break;
 80032b8:	e002      	b.n	80032c0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
        break;
 80032be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d916      	bls.n	80032f4 <UART_SetConfig+0x44c>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d212      	bcs.n	80032f4 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f023 030f 	bic.w	r3, r3, #15
 80032d6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	89fa      	ldrh	r2, [r7, #14]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e06e      	b.n	80033d2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
 80032f8:	e06b      	b.n	80033d2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d857      	bhi.n	80033b0 <UART_SetConfig+0x508>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0x460>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003349 	.word	0x08003349
 8003310:	08003365 	.word	0x08003365
 8003314:	080033b1 	.word	0x080033b1
 8003318:	0800337d 	.word	0x0800337d
 800331c:	080033b1 	.word	0x080033b1
 8003320:	080033b1 	.word	0x080033b1
 8003324:	080033b1 	.word	0x080033b1
 8003328:	08003399 	.word	0x08003399
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800332c:	f7fe fc2c 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	61bb      	str	r3, [r7, #24]
        break;
 8003346:	e036      	b.n	80033b6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003348:	f7fe fc32 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	61bb      	str	r3, [r7, #24]
        break;
 8003362:	e028      	b.n	80033b6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	085a      	lsrs	r2, r3, #1
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <UART_SetConfig+0x544>)
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	fbb3 f3f2 	udiv	r3, r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	61bb      	str	r3, [r7, #24]
        break;
 800337a:	e01c      	b.n	80033b6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800337c:	f7fe fb46 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	61bb      	str	r3, [r7, #24]
        break;
 8003396:	e00e      	b.n	80033b6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	61bb      	str	r3, [r7, #24]
        break;
 80033ae:	e002      	b.n	80033b6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
        break;
 80033b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d908      	bls.n	80033ce <UART_SetConfig+0x526>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d204      	bcs.n	80033ce <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e001      	b.n	80033d2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	01e84800 	.word	0x01e84800
 80033ec:	00f42400 	.word	0x00f42400

080033f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01a      	beq.n	8003506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ee:	d10a      	bne.n	8003506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003542:	f7fd f853 	bl	80005ec <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d10e      	bne.n	8003574 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f814 	bl	8003592 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e00a      	b.n	800358a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a2:	e02a      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035aa:	d026      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7fd f81e 	bl	80005ec <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11b      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0c5      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003638:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003662:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d014      	beq.n	80036ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036cc:	e002      	b.n	80036d4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fbb8 	bl	8002e44 <HAL_UART_TxCpltCallback>
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fbb4 	bl	8002e58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370e:	d01e      	beq.n	800374e <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003746:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff fb8c 	bl	8002e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff fb88 	bl	8002e80 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003790:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d109      	bne.n	80037b4 <UART_DMAError+0x3c>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b21      	cmp	r3, #33	; 0x21
 80037a4:	d106      	bne.n	80037b4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff37 	bl	8003622 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d109      	bne.n	80037d6 <UART_DMAError+0x5e>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b22      	cmp	r3, #34	; 0x22
 80037c6:	d106      	bne.n	80037d6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80037d0:	6978      	ldr	r0, [r7, #20]
 80037d2:	f7ff ff3b 	bl	800364c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037da:	f043 0210 	orr.w	r2, r3, #16
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e2:	6978      	ldr	r0, [r7, #20]
 80037e4:	f7ff fb56 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e8:	bf00      	nop
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fb40 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003832:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff faff 	bl	8002e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <_ZN3ros3MsgC1Ev+0x1c>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	08006104 	.word	0x08006104

08003870 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
      data(0)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffe8 	bl	8003850 <_ZN3ros3MsgC1Ev>
 8003880:	4a05      	ldr	r2, [pc, #20]	; (8003898 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	711a      	strb	r2, [r3, #4]
    {
    }
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	080060ec 	.word	0x080060ec

0800389c <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	7912      	ldrb	r2, [r2, #4]
 80038b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80038bc:	68fb      	ldr	r3, [r7, #12]
    }
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4413      	add	r3, r2
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80038ea:	68fb      	ldr	r3, [r7, #12]
    }
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	08005ec0 	.word	0x08005ec0

08003914 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	08005ed0 	.word	0x08005ed0

08003930 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
      data()
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff76 	bl	8003850 <_ZN3ros3MsgC1Ev>
 8003964:	4a06      	ldr	r2, [pc, #24]	; (8003980 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ffde 	bl	8003930 <_ZN3ros4TimeC1Ev>
    {
    }
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	080060d4 	.word	0x080060d4

08003984 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	4413      	add	r3, r2
 800399c:	b2ca      	uxtb	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0a19      	lsrs	r1, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	b2ca      	uxtb	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0c19      	lsrs	r1, r3, #16
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3302      	adds	r3, #2
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	b2ca      	uxtb	r2, r1
 80039c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0e19      	lsrs	r1, r3, #24
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3303      	adds	r3, #3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	4413      	add	r3, r2
 80039d2:	b2ca      	uxtb	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	b2ca      	uxtb	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a19      	lsrs	r1, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3301      	adds	r3, #1
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	b2ca      	uxtb	r2, r1
 80039fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	0c19      	lsrs	r1, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3302      	adds	r3, #2
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	4413      	add	r3, r2
 8003a0a:	b2ca      	uxtb	r2, r1
 8003a0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0e19      	lsrs	r1, r3, #24
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3303      	adds	r3, #3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b2ca      	uxtb	r2, r1
 8003a1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3304      	adds	r3, #4
 8003a24:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a26:	68fb      	ldr	r3, [r7, #12]
    }
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3301      	adds	r3, #1
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	440b      	add	r3, r1
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	440b      	add	r3, r1
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3303      	adds	r3, #3
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	440b      	add	r3, r1
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	440b      	add	r3, r1
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	440b      	add	r3, r1
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3303      	adds	r3, #3
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	440b      	add	r3, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3304      	adds	r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
     return offset;
 8003aee:	68fb      	ldr	r3, [r7, #12]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	08005ef4 	.word	0x08005ef4

08003b18 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	08005f04 	.word	0x08005f04

08003b34 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe86 	bl	8003850 <_ZN3ros3MsgC1Ev>
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	809a      	strh	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b54:	609a      	str	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
    {
    }
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	080060bc 	.word	0x080060bc
 8003b78:	08005f28 	.word	0x08005f28

08003b7c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8899      	ldrh	r1, [r3, #4]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	b2ca      	uxtb	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	889b      	ldrh	r3, [r3, #4]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	b299      	uxth	r1, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b2ca      	uxtb	r2, r1
 8003baa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fb3e 	bl	8000238 <strlen>
 8003bbc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 ffe5 	bl	8004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	18d0      	adds	r0, r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4619      	mov	r1, r3
 8003be0:	f002 f81a 	bl	8005c18 <memcpy>
      offset += length_topic_name;
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4413      	add	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fb21 	bl	8000238 <strlen>
 8003bf6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 ffc8 	bl	8004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	18d0      	adds	r0, r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f001 fffd 	bl	8005c18 <memcpy>
      offset += length_message_type;
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fb04 	bl	8000238 <strlen>
 8003c30:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	6939      	ldr	r1, [r7, #16]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 ffab 	bl	8004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3304      	adds	r3, #4
 8003c44:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	18d0      	adds	r0, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4619      	mov	r1, r3
 8003c54:	f001 ffe0 	bl	8005c18 <memcpy>
      offset += length_md5sum;
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2ca      	uxtb	r2, r1
 8003c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0a19      	lsrs	r1, r3, #8
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2ca      	uxtb	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0c19      	lsrs	r1, r3, #16
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b2ca      	uxtb	r2, r1
 8003c90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	0e19      	lsrs	r1, r3, #24
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3303      	adds	r3, #3
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b2ca      	uxtb	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	61fb      	str	r3, [r7, #28]
      return offset;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b08a      	sub	sp, #40	; 0x28
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	889b      	ldrh	r3, [r3, #4]
 8003cd2:	b21a      	sxth	r2, r3
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	440b      	add	r3, r1
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	b21b      	sxth	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	441a      	add	r2, r3
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ff67 	bl	8004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	3304      	adds	r3, #4
 8003d08:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	441a      	add	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	3b01      	subs	r3, #1
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	440b      	add	r3, r1
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	3301      	adds	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e7ec      	b.n	8003d0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4413      	add	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 ff34 	bl	8004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d20c      	bcs.n	8003d9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	441a      	add	r2, r3
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	440b      	add	r3, r1
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	3301      	adds	r3, #1
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	e7ec      	b.n	8003d74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3b01      	subs	r3, #1
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 ff01 	bl	8004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d20c      	bcs.n	8003e00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	441a      	add	r2, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	440b      	add	r3, r1
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e7ec      	b.n	8003dda <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	3b01      	subs	r3, #1
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	440a      	add	r2, r1
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	440b      	add	r3, r1
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	440b      	add	r3, r1
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3303      	adds	r3, #3
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	440b      	add	r3, r1
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3304      	adds	r3, #4
 8003e76:	61bb      	str	r3, [r7, #24]
     return offset;
 8003e78:	69bb      	ldr	r3, [r7, #24]
    }
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	08005f2c 	.word	0x08005f2c

08003ea0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	08005f48 	.word	0x08005f48

08003ebc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fcc2 	bl	8003850 <_ZN3ros3MsgC1Ev>
 8003ecc:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	711a      	strb	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a04      	ldr	r2, [pc, #16]	; (8003eec <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003edc:	609a      	str	r2, [r3, #8]
    {
    }
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	080060a4 	.word	0x080060a4
 8003eec:	08005f28 	.word	0x08005f28

08003ef0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	7912      	ldrb	r2, [r2, #4]
 8003f08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc f98f 	bl	8000238 <strlen>
 8003f1a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fe36 	bl	8004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	18d0      	adds	r0, r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f001 fe6b 	bl	8005c18 <memcpy>
      offset += length_msg;
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4413      	add	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	3301      	adds	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	441a      	add	r2, r3
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fe26 	bl	8004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d20c      	bcs.n	8003fb6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	441a      	add	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	6839      	ldr	r1, [r7, #0]
 8003fa8:	440b      	add	r3, r1
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e7ec      	b.n	8003f90 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
     return offset;
 8003fda:	693b      	ldr	r3, [r7, #16]
    }
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	08005f6c 	.word	0x08005f6c

08004000 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	08005f80 	.word	0x08005f80

0800401c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fc12 	bl	8003850 <_ZN3ros3MsgC1Ev>
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	61da      	str	r2, [r3, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0800608c 	.word	0x0800608c

08004064 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	b2ca      	uxtb	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0a19      	lsrs	r1, r3, #8
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	3301      	adds	r3, #1
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	b2ca      	uxtb	r2, r1
 8004090:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	0c19      	lsrs	r1, r3, #16
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	3302      	adds	r3, #2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	b2ca      	uxtb	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	0e19      	lsrs	r1, r3, #24
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	3303      	adds	r3, #3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	b2ca      	uxtb	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	3304      	adds	r3, #4
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d22b      	bcs.n	8004122 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80040d8:	6939      	ldr	r1, [r7, #16]
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	b2ca      	uxtb	r2, r1
 80040e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	0a19      	lsrs	r1, r3, #8
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	3301      	adds	r3, #1
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	b2ca      	uxtb	r2, r1
 80040f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	0c19      	lsrs	r1, r3, #16
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3302      	adds	r3, #2
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	b2ca      	uxtb	r2, r1
 8004102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	0e19      	lsrs	r1, r3, #24
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	3303      	adds	r3, #3
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	b2ca      	uxtb	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	3304      	adds	r3, #4
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	3301      	adds	r3, #1
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	e7ce      	b.n	80040c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	b2ca      	uxtb	r2, r1
 800412e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	0a19      	lsrs	r1, r3, #8
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	b2ca      	uxtb	r2, r1
 8004140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	0c19      	lsrs	r1, r3, #16
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	3302      	adds	r3, #2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4413      	add	r3, r2
 8004150:	b2ca      	uxtb	r2, r1
 8004152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	0e19      	lsrs	r1, r3, #24
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	3303      	adds	r3, #3
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4413      	add	r3, r2
 8004162:	b2ca      	uxtb	r2, r1
 8004164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	3304      	adds	r3, #4
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	429a      	cmp	r2, r3
 8004178:	d22b      	bcs.n	80041d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	4413      	add	r3, r2
 8004190:	b2ca      	uxtb	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	0a19      	lsrs	r1, r3, #8
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	3301      	adds	r3, #1
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	b2ca      	uxtb	r2, r1
 80041a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0c19      	lsrs	r1, r3, #16
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	3302      	adds	r3, #2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	b2ca      	uxtb	r2, r1
 80041b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0e19      	lsrs	r1, r3, #24
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	3303      	adds	r3, #3
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	3304      	adds	r3, #4
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e7ce      	b.n	8004170 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69d9      	ldr	r1, [r3, #28]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	b2ca      	uxtb	r2, r1
 80041de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	0a19      	lsrs	r1, r3, #8
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	3301      	adds	r3, #1
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	b2ca      	uxtb	r2, r1
 80041f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	0c19      	lsrs	r1, r3, #16
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	3302      	adds	r3, #2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	b2ca      	uxtb	r2, r1
 8004202:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	0e19      	lsrs	r1, r3, #24
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	3303      	adds	r3, #3
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4413      	add	r3, r2
 8004212:	b2ca      	uxtb	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	3304      	adds	r3, #4
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800421c:	2300      	movs	r3, #0
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	429a      	cmp	r2, r3
 8004228:	d228      	bcs.n	800427c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fb fffe 	bl	8000238 <strlen>
 800423c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4413      	add	r3, r2
 8004244:	6979      	ldr	r1, [r7, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fca5 	bl	8004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	3304      	adds	r3, #4
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	18d0      	adds	r0, r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4619      	mov	r1, r3
 8004268:	f001 fcd6 	bl	8005c18 <memcpy>
      offset += length_stringsi;
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4413      	add	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	3301      	adds	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e7d1      	b.n	8004220 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800427e:	4618      	mov	r0, r3
 8004280:	3728      	adds	r7, #40	; 0x28
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004286:	b580      	push	{r7, lr}
 8004288:	b08e      	sub	sp, #56	; 0x38
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	3301      	adds	r3, #1
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	3302      	adds	r3, #2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	4313      	orrs	r3, r2
 80042c0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	3303      	adds	r3, #3
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	3304      	adds	r3, #4
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d90a      	bls.n	80042fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f001 fca6 	bl	8005c40 <realloc>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004300:	2300      	movs	r3, #0
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	429a      	cmp	r2, r3
 800430c:	d236      	bcs.n	800437c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	440a      	add	r2, r1
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	3301      	adds	r3, #1
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	440b      	add	r3, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	3302      	adds	r3, #2
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	440b      	add	r3, r1
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	3303      	adds	r3, #3
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	440b      	add	r3, r1
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	3304      	adds	r3, #4
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	3208      	adds	r2, #8
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	3301      	adds	r3, #1
 8004378:	633b      	str	r3, [r7, #48]	; 0x30
 800437a:	e7c3      	b.n	8004304 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	3301      	adds	r3, #1
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4413      	add	r3, r2
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	4313      	orrs	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	3302      	adds	r3, #2
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	4413      	add	r3, r2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	3303      	adds	r3, #3
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	3304      	adds	r3, #4
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d90a      	bls.n	80043e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f001 fc32 	bl	8005c40 <realloc>
 80043dc:	4602      	mov	r2, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d236      	bcs.n	8004464 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	440a      	add	r2, r1
 8004402:	7812      	ldrb	r2, [r2, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	3301      	adds	r3, #1
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	440b      	add	r3, r1
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	3302      	adds	r3, #2
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	440b      	add	r3, r1
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	3303      	adds	r3, #3
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	440b      	add	r3, r1
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	3304      	adds	r3, #4
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	3214      	adds	r2, #20
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	3301      	adds	r3, #1
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004462:	e7c3      	b.n	80043ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	3301      	adds	r3, #1
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	4413      	add	r3, r2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	3302      	adds	r3, #2
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	4413      	add	r3, r2
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	3303      	adds	r3, #3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4413      	add	r3, r2
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	3304      	adds	r3, #4
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d90a      	bls.n	80044ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f001 fbbe 	bl	8005c40 <realloc>
 80044c4:	4602      	mov	r2, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80044d0:	2300      	movs	r3, #0
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044da:	429a      	cmp	r2, r3
 80044dc:	d23f      	bcs.n	800455e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	441a      	add	r2, r3
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb71 	bl	8004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	3304      	adds	r3, #4
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	429a      	cmp	r2, r3
 8004504:	d20c      	bcs.n	8004520 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	441a      	add	r2, r3
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	3b01      	subs	r3, #1
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	440b      	add	r3, r1
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e7ec      	b.n	80044fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	3b01      	subs	r3, #1
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	4413      	add	r3, r2
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004532:	3b01      	subs	r3, #1
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	441a      	add	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800453c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	3220      	adds	r2, #32
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	3301      	adds	r3, #1
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
 800455c:	e7ba      	b.n	80044d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004560:	4618      	mov	r0, r3
 8004562:	3738      	adds	r7, #56	; 0x38
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08006010 	.word	0x08006010

08004584 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	08005fa4 	.word	0x08005fa4

080045a0 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
  }
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 128;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	425b      	negs	r3, r3
 80045cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 256;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
      htim(&htim2), huart(&huart3), rind(0), twind(0), tfind(0){
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <_ZN13STM32HardwareC1Ev+0x3c>)
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a0b      	ldr	r2, [pc, #44]	; (800461c <_ZN13STM32HardwareC1Ev+0x40>)
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    }
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000094 	.word	0x20000094
 800461c:	200000d4 	.word	0x200000d4

08004620 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(TIM_HandleTypeDef *htim_, UART_HandleTypeDef *huart_):
      htim(htim_), huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f809 	bl	8004640 <_ZN13STM32Hardware10reset_rbufEv>

      HAL_TIM_Base_Start(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd ff22 	bl	800247c <HAL_TIM_Base_Start>
    }
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6858      	ldr	r0, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3308      	adds	r3, #8
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	4619      	mov	r1, r3
 8004654:	f7fe fa56 	bl	8002b04 <HAL_UART_Receive_DMA>
    }
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZN13STM32Hardware4readEv>:

    int read(){
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff9f 	bl	80045b8 <_ZN13STM32Hardware10getRdmaIndEv>
 800467a:	4603      	mov	r3, r0
 800467c:	429c      	cmp	r4, r3
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d012      	beq.n	80046b0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4413      	add	r3, r2
 800469c:	7a1b      	ldrb	r3, [r3, #8]
 800469e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
      return c;
 80046b0:	68fb      	ldr	r3, [r7, #12]
    }
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}
	...

080046bc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d108      	bne.n	80046e0 <_ZN13STM32Hardware5flushEv+0x24>
 80046ce:	4b27      	ldr	r3, [pc, #156]	; (800476c <_ZN13STM32Hardware5flushEv+0xb0>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <_ZN13STM32Hardware5flushEv+0x24>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <_ZN13STM32Hardware5flushEv+0x26>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03e      	beq.n	8004764 <_ZN13STM32Hardware5flushEv+0xa8>
        mutex = true;
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <_ZN13STM32Hardware5flushEv+0xb0>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d030      	beq.n	800475e <_ZN13STM32Hardware5flushEv+0xa2>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004708:	429a      	cmp	r2, r3
 800470a:	d20a      	bcs.n	8004722 <_ZN13STM32Hardware5flushEv+0x66>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800471a:	b29b      	uxth	r3, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	e006      	b.n	8004730 <_ZN13STM32Hardware5flushEv+0x74>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004728:	b29b      	uxth	r3, r3
 800472a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800472e:	b29b      	uxth	r3, r3
 8004730:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6858      	ldr	r0, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800473c:	3388      	adds	r3, #136	; 0x88
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	3304      	adds	r3, #4
 8004744:	89fa      	ldrh	r2, [r7, #14]
 8004746:	4619      	mov	r1, r3
 8004748:	f7fe f960 	bl	8002a0c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8004752:	89fb      	ldrh	r3, [r7, #14]
 8004754:	4413      	add	r3, r2
 8004756:	b2da      	uxtb	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
        }
        mutex = false;
 800475e:	4b03      	ldr	r3, [pc, #12]	; (800476c <_ZN13STM32Hardware5flushEv+0xb0>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
      }
    }
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000090 	.word	0x20000090

08004770 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]


      int n = length;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	bfa8      	it	ge
 8004788:	f44f 7380 	movge.w	r3, #256	; 0x100
 800478c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004794:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4293      	cmp	r3, r2
 800479c:	bf28      	it	cs
 800479e:	4613      	movcs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80047a8:	3388      	adds	r3, #136	; 0x88
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	3304      	adds	r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 fa2f 	bl	8005c18 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

      if(n != n_tail){
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d00b      	beq.n	80047ec <_ZN13STM32Hardware5writeEPhi+0x7c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	18d1      	adds	r1, r2, r3
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	f001 fa16 	bl	8005c18 <memcpy>
      }

      flush();
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ff65 	bl	80046bc <_ZN13STM32Hardware5flushEv>
    }
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick(); }
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	f7fb fef3 	bl	80005ec <HAL_GetTick>
 8004806:	4603      	mov	r3, r0
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_Z6led_cbRKN8std_msgs5UInt8E>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);

void led_cb(const std_msgs::UInt8& msg){
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	int i = msg.data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_15);
 800481e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004822:	4808      	ldr	r0, [pc, #32]	; (8004844 <_Z6led_cbRKN8std_msgs5UInt8E+0x34>)
 8004824:	f7fc fd7d 	bl	8001322 <HAL_GPIO_TogglePin>
	HAL_Delay(i);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb feea 	bl	8000604 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_15);
 8004830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004834:	4803      	ldr	r0, [pc, #12]	; (8004844 <_Z6led_cbRKN8std_msgs5UInt8E+0x34>)
 8004836:	f7fc fd74 	bl	8001322 <HAL_GPIO_TogglePin>

}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021400 	.word	0x40021400

08004848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	f5ad 6dd8 	sub.w	sp, sp, #1728	; 0x6c0
 800484e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004850:	f7fb fe7a 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004854:	f000 f818 	bl	8004888 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004858:	f000 f956 	bl	8004b08 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800485c:	f000 f92e 	bl	8004abc <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8004860:	f000 f89c 	bl	800499c <_ZL12MX_TIM2_Initv>
  MX_USART3_UART_Init();
 8004864:	f000 f8f6 	bl	8004a54 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
	ros::NodeHandle nh;
 8004868:	463b      	mov	r3, r7
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fa1a 	bl	8004ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

	nh.initNode();
 8004870:	463b      	mov	r3, r7
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fa96 	bl	8004da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(led_sub);
 8004878:	463b      	mov	r3, r7
 800487a:	4902      	ldr	r1, [pc, #8]	; (8004884 <main+0x3c>)
 800487c:	4618      	mov	r0, r3
 800487e:	f000 faae 	bl	8004dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004882:	e7fe      	b.n	8004882 <main+0x3a>
 8004884:	20000214 	.word	0x20000214

08004888 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b0b8      	sub	sp, #224	; 0xe0
 800488c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800488e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004892:	2234      	movs	r2, #52	; 0x34
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f001 f9c9 	bl	8005c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800489c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048ac:	f107 0308 	add.w	r3, r7, #8
 80048b0:	2290      	movs	r2, #144	; 0x90
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f9ba 	bl	8005c2e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <_Z18SystemClock_Configv+0x10c>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a35      	ldr	r2, [pc, #212]	; (8004994 <_Z18SystemClock_Configv+0x10c>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <_Z18SystemClock_Configv+0x10c>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80048d2:	4b31      	ldr	r3, [pc, #196]	; (8004998 <_Z18SystemClock_Configv+0x110>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80048da:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <_Z18SystemClock_Configv+0x110>)
 80048dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <_Z18SystemClock_Configv+0x110>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048ee:	2302      	movs	r3, #2
 80048f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048fa:	2310      	movs	r3, #16
 80048fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004900:	2300      	movs	r3, #0
 8004902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004906:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc fd24 	bl	8001358 <HAL_RCC_OscConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8004920:	f000 f932 	bl	8004b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004924:	230f      	movs	r3, #15
 8004926:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f7fc ff77 	bl	800183c <HAL_RCC_ClockConfig>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800495e:	f000 f913 	bl	8004b88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004966:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004968:	2300      	movs	r3, #0
 800496a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	4618      	mov	r0, r3
 8004972:	f7fd f931 	bl	8001bd8 <HAL_RCCEx_PeriphCLKConfig>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8004986:	f000 f8ff 	bl	8004b88 <Error_Handler>
  }
}
 800498a:	bf00      	nop
 800498c:	37e0      	adds	r7, #224	; 0xe0
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	40007000 	.word	0x40007000

0800499c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049e0:	481b      	ldr	r0, [pc, #108]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 80049e2:	f7fd fd1f 	bl	8002424 <HAL_TIM_Base_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80049f6:	f000 f8c7 	bl	8004b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4619      	mov	r1, r3
 8004a06:	4812      	ldr	r0, [pc, #72]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a08:	f7fd fd62 	bl	80024d0 <HAL_TIM_ConfigClockSource>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8004a1c:	f000 f8b4 	bl	8004b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a20:	2300      	movs	r3, #0
 8004a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4808      	ldr	r0, [pc, #32]	; (8004a50 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a2e:	f7fd ff43 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8004a42:	f000 f8a1 	bl	8004b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a46:	bf00      	nop
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000094 	.word	0x20000094

08004a54 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a58:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8004a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a96:	4807      	ldr	r0, [pc, #28]	; (8004ab4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004a98:	f7fd ff6a 	bl	8002970 <HAL_UART_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8004aac:	f000 f86c 	bl	8004b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200000d4 	.word	0x200000d4
 8004ab8:	40004800 	.word	0x40004800

08004abc <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <_ZL11MX_DMA_Initv+0x48>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <_ZL11MX_DMA_Initv+0x48>)
 8004ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <_ZL11MX_DMA_Initv+0x48>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	200c      	movs	r0, #12
 8004ae0:	f7fb fe8d 	bl	80007fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004ae4:	200c      	movs	r0, #12
 8004ae6:	f7fb fea6 	bl	8000836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	200e      	movs	r0, #14
 8004af0:	f7fb fe85 	bl	80007fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004af4:	200e      	movs	r0, #14
 8004af6:	f7fb fe9e 	bl	8000836 <HAL_NVIC_EnableIRQ>

}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b1e:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b24:	f043 0320 	orr.w	r3, r3, #32
 8004b28:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <_ZL12MX_GPIO_Initv+0x78>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <_ZL12MX_GPIO_Initv+0x7c>)
 8004b56:	f7fc fbcb 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b60:	2301      	movs	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	4619      	mov	r1, r3
 8004b72:	4804      	ldr	r0, [pc, #16]	; (8004b84 <_ZL12MX_GPIO_Initv+0x7c>)
 8004b74:	f7fc fa12 	bl	8000f9c <HAL_GPIO_Init>

}
 8004b78:	bf00      	nop
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40021400 	.word	0x40021400

08004b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d80d      	bhi.n	8004bc6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	fa22 f103 	lsr.w	r1, r2, r3
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	b2ca      	uxtb	r2, r1
 8004bbc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e7ee      	b.n	8004ba4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d811      	bhi.n	8004c10 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	00d2      	lsls	r2, r2, #3
 8004bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e7ea      	b.n	8004be6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	08006060 	.word	0x08006060

08004c3c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ffe5 	bl	8004c1c <_ZN3ros11Subscriber_C1Ev>
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fe07 	bl	8003870 <_ZN8std_msgs5UInt8C1Ev>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	615a      	str	r2, [r3, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
  };
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	08006048 	.word	0x08006048

08004c84 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	08006078 	.word	0x08006078

08004ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ffe8 	bl	8004c84 <_ZN3ros15NodeHandleBase_C1Ev>
 8004cb4:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fc8c 	bl	80045dc <_ZN13STM32HardwareC1Ev>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff f9a2 	bl	800401c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2b18      	cmp	r3, #24
 8004ce0:	d80a      	bhi.n	8004cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8004cea:	2100      	movs	r1, #0
 8004cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e7f1      	b.n	8004cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b18      	cmp	r3, #24
 8004d00:	d80b      	bhi.n	8004d1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3301      	adds	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e7f0      	b.n	8004cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d20a      	bcs.n	8004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e7f0      	b.n	8004d1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d46:	d20a      	bcs.n	8004d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	e7f0      	b.n	8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
    req_param_resp.ints = NULL;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    req_param_resp.floats_length = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
    req_param_resp.floats = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
    req_param_resp.ints_length = 0;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
    req_param_resp.ints = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4

    spin_timeout_ = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	08006034 	.word	0x08006034

08004da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fc35 	bl	8004620 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
    bytes_ = 0;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
    index_ = 0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
    topic_ = 0;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
  };
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b18      	cmp	r3, #24
 8004df0:	dc1b      	bgt.n	8004e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10e      	bne.n	8004e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
        return true;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e004      	b.n	8004e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e7e0      	b.n	8004dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8004e2a:	2300      	movs	r3, #0
  }
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_Z41__static_initialization_and_destruction_0ii>:
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10a      	bne.n	8004e5e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d105      	bne.n	8004e5e <_Z41__static_initialization_and_destruction_0ii+0x26>
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);
 8004e52:	2301      	movs	r3, #1
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004e56:	4905      	ldr	r1, [pc, #20]	; (8004e6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004e58:	4805      	ldr	r0, [pc, #20]	; (8004e70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004e5a:	f7ff feef 	bl	8004c3c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	08004811 	.word	0x08004811
 8004e6c:	08005fc8 	.word	0x08005fc8
 8004e70:	20000214 	.word	0x20000214

08004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b63      	cmp	r3, #99	; 0x63
 8004e84:	dd09      	ble.n	8004e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004e8c:	f083 0301 	eor.w	r3, r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e077      	b.n	8004f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	f502 726a 	add.w	r2, r2, #936	; 0x3a8
 8004ea6:	3207      	adds	r2, #7
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
    message_out[1] = PROTOCOL_VER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	22fe      	movs	r2, #254	; 0xfe
 8004ebc:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	121b      	asrs	r3, r3, #8
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 23aa 	ldrb.w	r2, [r3, #938]	; 0x3aa
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f883 23ad 	strb.w	r2, [r3, #941]	; 0x3ad
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	121b      	asrs	r3, r3, #8
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae

    /* calculate checksum */
    int chk = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004f0e:	2305      	movs	r3, #5
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	3307      	adds	r3, #7
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	da0d      	bge.n	8004f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e7ec      	b.n	8004f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3307      	adds	r3, #7
 8004f3c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	425a      	negs	r2, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	bf58      	it	pl
 8004f48:	4253      	negpl	r3, r2
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	6179      	str	r1, [r7, #20]
 8004f52:	43d2      	mvns	r2, r2
 8004f54:	b2d1      	uxtb	r1, r2
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

    if (l <= OUTPUT_SIZE)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	dc0a      	bgt.n	8004f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1d18      	adds	r0, r3, #4
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7ff fbfb 	bl	8004770 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e005      	b.n	8004f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004f7e:	4905      	ldr	r1, [pc, #20]	; (8004f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fa2f 	bl	80053e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08005fcc 	.word	0x08005fcc

08004f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fc28 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 8004faa:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 368c 	ldr.w	r3, [r3, #1676]	; 0x68c
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d903      	bls.n	8004fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
    if (mode_ != MODE_FIRST_FF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3690 	ldr.w	r3, [r3, #1680]	; 0x690
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d903      	bls.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
      if (spin_timeout_ > 0)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fc01 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad2      	subs	r2, r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005004:	429a      	cmp	r2, r3
 8005006:	bf8c      	ite	hi
 8005008:	2301      	movhi	r3, #1
 800500a:	2300      	movls	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005012:	f06f 0301 	mvn.w	r3, #1
 8005016:	e197      	b.n	8005348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fb1f 	bl	8004660 <_ZN13STM32Hardware4readEv>
 8005022:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f2c0 8177 	blt.w	800531a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 2680 	ldr.w	r2, [r3, #1664]	; 0x680
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005042:	2b07      	cmp	r3, #7
 8005044:	d11e      	bne.n	8005084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	f8c2 167c 	str.w	r1, [r2, #1660]	; 0x67c
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	b2d1      	uxtb	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	460a      	mov	r2, r1
 800505e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
        bytes_--;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1b4      	bne.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8005082:	e7af      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800508a:	2b00      	cmp	r3, #0
 800508c:	d128      	bne.n	80050e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d10d      	bne.n	80050b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f103 0214 	add.w	r2, r3, #20
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8c3 2690 	str.w	r2, [r3, #1680]	; 0x690
 80050ae:	e799      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fba0 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf8c      	ite	hi
 80050c8:	2301      	movhi	r3, #1
 80050ca:	2300      	movls	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d088      	beq.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
          return SPIN_TIMEOUT;
 80050da:	f06f 0301 	mvn.w	r3, #1
 80050de:	e133      	b.n	8005348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11b      	bne.n	8005122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2bfe      	cmp	r3, #254	; 0xfe
 80050ee:	d107      	bne.n	8005100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 80050fe:	e771      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
          if (configured_ == false)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 800510e:	f083 0301 	eor.w	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f43f af65 	beq.w	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f970 	bl	8005400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005120:	e760      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005128:	2b02      	cmp	r3, #2
 800512a:	d113      	bne.n	8005154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        index_ = 0;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
        mode_++;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        checksum_ = data;               /* first byte for calculating size checksum */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
 8005152:	e747      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800515a:	2b03      	cmp	r3, #3
 800515c:	d110      	bne.n	8005180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 2674 	ldr.w	r2, [r3, #1652]	; 0x674
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 800517e:	e731      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005186:	2b04      	cmp	r3, #4
 8005188:	d116      	bne.n	80051b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 8005190:	425a      	negs	r2, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	bf58      	it	pl
 8005198:	4253      	negpl	r3, r2
 800519a:	2bff      	cmp	r3, #255	; 0xff
 800519c:	d107      	bne.n	80051ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 80051ac:	e71a      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 80051b6:	e715      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d10f      	bne.n	80051e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        checksum_ = data;               /* first byte included in checksum */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
 80051e0:	e700      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d117      	bne.n	800521c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 2678 	ldr.w	r2, [r3, #1656]	; 0x678
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_ = MODE_MESSAGE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2207      	movs	r2, #7
 8005202:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if (bytes_ == 0)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f aee9 	bne.w	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 800521a:	e6e3      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005222:	2b08      	cmp	r3, #8
 8005224:	f47f aede 	bne.w	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if ((checksum_ % 256) == 255)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 8005236:	425a      	negs	r2, r3
 8005238:	b2db      	uxtb	r3, r3
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	bf58      	it	pl
 800523e:	4253      	negpl	r3, r2
 8005240:	2bff      	cmp	r3, #255	; 0xff
 8005242:	f47f aecf 	bne.w	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800524c:	2b00      	cmp	r3, #0
 800524e:	d110      	bne.n	8005272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8d5 	bl	8005400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8f0 	bl	800543c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            last_sync_receive_time = c_time;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
            return SPIN_ERR;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005270:	e06a      	b.n	8005348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005278:	2b0a      	cmp	r3, #10
 800527a:	d107      	bne.n	800528c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9b9 	bl	80055fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800528a:	e6ab      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005292:	2b06      	cmp	r3, #6
 8005294:	d10e      	bne.n	80052b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7fe ffee 	bl	8004286 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 80052b2:	e697      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80052ba:	2b0b      	cmp	r3, #11
 80052bc:	d104      	bne.n	80052c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 80052c6:	e68d      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80052ce:	3b64      	subs	r3, #100	; 0x64
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f43f ae81 	beq.w	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80052e8:	3b64      	subs	r3, #100	; 0x64
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	6858      	ldr	r0, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80052fc:	3b64      	subs	r3, #100	; 0x64
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	f502 72d4 	add.w	r2, r2, #424	; 0x1a8
 8005314:	4611      	mov	r1, r2
 8005316:	4798      	blx	r3
    while (true)
 8005318:	e664      	b.n	8004fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800531a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00f      	beq.n	8005346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005334:	4293      	cmp	r3, r2
 8005336:	d906      	bls.n	8005346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f861 	bl	8005400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
    return SPIN_OK;
 8005346:	2300      	movs	r3, #0
  }
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    return configured_;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
  };
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	330c      	adds	r3, #12
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe faa5 	bl	80038ca <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	320c      	adds	r2, #12
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
  }
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
  }
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	330c      	adds	r3, #12
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe fa9d 	bl	80038f8 <_ZN8std_msgs5UInt87getTypeEv>
 80053be:	4603      	mov	r3, r0
  }
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	330c      	adds	r3, #12
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fa9d 	bl	8003914 <_ZN8std_msgs5UInt86getMD5Ev>
 80053da:	4603      	mov	r3, r0
  }
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	2103      	movs	r1, #3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f94e 	bl	8005694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe faa1 	bl	8003954 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f107 020c 	add.w	r2, r7, #12
 800541c:	210a      	movs	r1, #10
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
    rt_time = hardware_.time();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff f9e7 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  }
 8005434:	bf00      	nop
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b08b      	sub	sp, #44	; 0x2c
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8005444:	f107 030c 	add.w	r3, r7, #12
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe fb73 	bl	8003b34 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	2b18      	cmp	r3, #24
 8005456:	dc5b      	bgt.n	8005510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
      if (publishers[i] != 0) // non-empty slot
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545c:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d04f      	beq.n	8005508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
        ti.topic_id = publishers[i]->id_;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	b29b      	uxth	r3, r3
 8005478:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3308      	adds	r3, #8
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4608      	mov	r0, r1
 80054ae:	4798      	blx	r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b8:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	6859      	ldr	r1, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 80054ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4608      	mov	r0, r1
 80054d8:	4798      	blx	r3
 80054da:	4603      	mov	r3, r0
 80054dc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80054de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f852 	bl	80045a0 <_ZN3ros9Publisher15getEndpointTypeEv>
 80054fc:	4601      	mov	r1, r0
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	461a      	mov	r2, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	3301      	adds	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	e7a0      	b.n	8005452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005510:	2300      	movs	r3, #0
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2b18      	cmp	r3, #24
 8005518:	dc68      	bgt.n	80055ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
      if (subscribers[i] != 0) // non-empty slot
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d05b      	beq.n	80055e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
        ti.topic_id = subscribers[i]->id_;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	b29b      	uxth	r3, r3
 800553e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4608      	mov	r0, r1
 8005576:	4798      	blx	r3
 8005578:	4603      	mov	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4608      	mov	r0, r1
 80055a0:	4798      	blx	r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681c      	ldr	r4, [r3, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3304      	adds	r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4798      	blx	r3
 80055d8:	4601      	mov	r1, r0
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	461a      	mov	r2, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	3301      	adds	r3, #1
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	e793      	b.n	8005514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
    configured_ = true;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
  }
 80055f4:	bf00      	nop
 80055f6:	372c      	adds	r7, #44	; 0x2c
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd90      	pop	{r4, r7, pc}

080055fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe f9a2 	bl	8003954 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff f8f0 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 800561a:	4602      	mov	r2, r0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fa01 	bl	8003a34 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4915      	ldr	r1, [pc, #84]	; (800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005638:	fba1 1303 	umull	r1, r3, r1, r3
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	4413      	add	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005642:	6939      	ldr	r1, [r7, #16]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005648:	fba3 0302 	umull	r0, r3, r3, r2
 800564c:	099b      	lsrs	r3, r3, #6
 800564e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005652:	fb00 f303 	mul.w	r3, r0, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	440b      	add	r3, r1
 8005660:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f82e 	bl	80056cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f8c0 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 800567a:	4602      	mov	r2, r0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
  }
 8005682:	bf00      	nop
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	10624dd3 	.word	0x10624dd3
 8005690:	000f4240 	.word	0x000f4240

08005694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	460b      	mov	r3, r1
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fc08 	bl	8003ebc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f107 0214 	add.w	r2, r7, #20
 80056be:	2107      	movs	r1, #7
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	4798      	blx	r3
  }
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff f88d 	bl	80047fa <_ZN13STM32Hardware4timeEv>
 80056e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4915      	ldr	r1, [pc, #84]	; (8005740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80056ea:	fba1 1303 	umull	r1, r3, r1, r3
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005702:	fba3 0302 	umull	r0, r3, r3, r2
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800570c:	fb00 f303 	mul.w	r3, r0, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	1aca      	subs	r2, r1, r3
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800571c:	4413      	add	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    normalizeSecNSec(sec_offset, nsec_offset);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 f812 	bl	800575c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	10624dd3 	.word	0x10624dd3
 8005744:	000f4240 	.word	0x000f4240
 8005748:	3b9aca00 	.word	0x3b9aca00

0800574c <_GLOBAL__sub_I_htim2>:
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
 8005750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005754:	2001      	movs	r0, #1
 8005756:	f7ff fb6f 	bl	8004e38 <_Z41__static_initialization_and_destruction_0ii>
 800575a:	bd80      	pop	{r7, pc}

0800575c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/ros_time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	0a5a      	lsrs	r2, r3, #9
 800576c:	490f      	ldr	r1, [pc, #60]	; (80057ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800576e:	fba1 1202 	umull	r1, r2, r1, r2
 8005772:	09d2      	lsrs	r2, r2, #7
 8005774:	490e      	ldr	r1, [pc, #56]	; (80057b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005776:	fb01 f202 	mul.w	r2, r1, r2
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	4a09      	ldr	r2, [pc, #36]	; (80057ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	441a      	add	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	601a      	str	r2, [r3, #0]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	00044b83 	.word	0x00044b83
 80057b0:	3b9aca00 	.word	0x3b9aca00

080057b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_MspInit+0x44>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <HAL_MspInit+0x44>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	; 0x40
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_MspInit+0x44>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_MspInit+0x44>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_MspInit+0x44>)
 80057d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_MspInit+0x44>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800

080057fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580c:	d10b      	bne.n	8005826 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_TIM_Base_MspInit+0x38>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <HAL_TIM_Base_MspInit+0x38>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6413      	str	r3, [r2, #64]	; 0x40
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_TIM_Base_MspInit+0x38>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800

08005838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a4a      	ldr	r2, [pc, #296]	; (8005980 <HAL_UART_MspInit+0x148>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f040 808d 	bne.w	8005976 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800585c:	4b49      	ldr	r3, [pc, #292]	; (8005984 <HAL_UART_MspInit+0x14c>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_UART_MspInit+0x14c>)
 8005862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005866:	6413      	str	r3, [r2, #64]	; 0x40
 8005868:	4b46      	ldr	r3, [pc, #280]	; (8005984 <HAL_UART_MspInit+0x14c>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005874:	4b43      	ldr	r3, [pc, #268]	; (8005984 <HAL_UART_MspInit+0x14c>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	4a42      	ldr	r2, [pc, #264]	; (8005984 <HAL_UART_MspInit+0x14c>)
 800587a:	f043 0308 	orr.w	r3, r3, #8
 800587e:	6313      	str	r3, [r2, #48]	; 0x30
 8005880:	4b40      	ldr	r3, [pc, #256]	; (8005984 <HAL_UART_MspInit+0x14c>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800588c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005892:	2302      	movs	r3, #2
 8005894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800589a:	2303      	movs	r3, #3
 800589c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800589e:	2307      	movs	r3, #7
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	4619      	mov	r1, r3
 80058a8:	4837      	ldr	r0, [pc, #220]	; (8005988 <HAL_UART_MspInit+0x150>)
 80058aa:	f7fb fb77 	bl	8000f9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_UART_MspInit+0x154>)
 80058b0:	4a37      	ldr	r2, [pc, #220]	; (8005990 <HAL_UART_MspInit+0x158>)
 80058b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80058b4:	4b35      	ldr	r3, [pc, #212]	; (800598c <HAL_UART_MspInit+0x154>)
 80058b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058bc:	4b33      	ldr	r3, [pc, #204]	; (800598c <HAL_UART_MspInit+0x154>)
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058c2:	4b32      	ldr	r3, [pc, #200]	; (800598c <HAL_UART_MspInit+0x154>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058c8:	4b30      	ldr	r3, [pc, #192]	; (800598c <HAL_UART_MspInit+0x154>)
 80058ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058d0:	4b2e      	ldr	r3, [pc, #184]	; (800598c <HAL_UART_MspInit+0x154>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058d6:	4b2d      	ldr	r3, [pc, #180]	; (800598c <HAL_UART_MspInit+0x154>)
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_UART_MspInit+0x154>)
 80058de:	2200      	movs	r2, #0
 80058e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058e2:	4b2a      	ldr	r3, [pc, #168]	; (800598c <HAL_UART_MspInit+0x154>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058e8:	4b28      	ldr	r3, [pc, #160]	; (800598c <HAL_UART_MspInit+0x154>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80058ee:	4827      	ldr	r0, [pc, #156]	; (800598c <HAL_UART_MspInit+0x154>)
 80058f0:	f7fa ffbc 	bl	800086c <HAL_DMA_Init>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80058fa:	f7ff f945 	bl	8004b88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_UART_MspInit+0x154>)
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_UART_MspInit+0x154>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800590a:	4b22      	ldr	r3, [pc, #136]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800590c:	4a22      	ldr	r2, [pc, #136]	; (8005998 <HAL_UART_MspInit+0x160>)
 800590e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005916:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005920:	2200      	movs	r2, #0
 8005922:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800592a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800592e:	2200      	movs	r2, #0
 8005930:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005938:	4b16      	ldr	r3, [pc, #88]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005940:	2200      	movs	r2, #0
 8005942:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005946:	2200      	movs	r2, #0
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800594a:	4812      	ldr	r0, [pc, #72]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800594c:	f7fa ff8e 	bl	800086c <HAL_DMA_Init>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8005956:	f7ff f917 	bl	8004b88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a0d      	ldr	r2, [pc, #52]	; (8005994 <HAL_UART_MspInit+0x15c>)
 800595e:	669a      	str	r2, [r3, #104]	; 0x68
 8005960:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <HAL_UART_MspInit+0x15c>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	2100      	movs	r1, #0
 800596a:	2027      	movs	r0, #39	; 0x27
 800596c:	f7fa ff47 	bl	80007fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005970:	2027      	movs	r0, #39	; 0x27
 8005972:	f7fa ff60 	bl	8000836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005976:	bf00      	nop
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40004800 	.word	0x40004800
 8005984:	40023800 	.word	0x40023800
 8005988:	40020c00 	.word	0x40020c00
 800598c:	20000154 	.word	0x20000154
 8005990:	40026028 	.word	0x40026028
 8005994:	200001b4 	.word	0x200001b4
 8005998:	40026058 	.word	0x40026058

0800599c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059ae:	e7fe      	b.n	80059ae <HardFault_Handler+0x4>

080059b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059b4:	e7fe      	b.n	80059b4 <MemManage_Handler+0x4>

080059b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059ba:	e7fe      	b.n	80059ba <BusFault_Handler+0x4>

080059bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059c0:	e7fe      	b.n	80059c0 <UsageFault_Handler+0x4>

080059c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059f0:	f7fa fde8 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80059fc:	4802      	ldr	r0, [pc, #8]	; (8005a08 <DMA1_Stream1_IRQHandler+0x10>)
 80059fe:	f7fb f865 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000154 	.word	0x20000154

08005a0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005a10:	4802      	ldr	r0, [pc, #8]	; (8005a1c <DMA1_Stream3_IRQHandler+0x10>)
 8005a12:	f7fb f85b 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200001b4 	.word	0x200001b4

08005a20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a24:	4802      	ldr	r0, [pc, #8]	; (8005a30 <USART3_IRQHandler+0x10>)
 8005a26:	f7fd f8f1 	bl	8002c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200000d4 	.word	0x200000d4

08005a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
	return 1;
 8005a38:	2301      	movs	r3, #1
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_kill>:

int _kill(int pid, int sig)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a4e:	f000 f8b9 	bl	8005bc4 <__errno>
 8005a52:	4602      	mov	r2, r0
 8005a54:	2316      	movs	r3, #22
 8005a56:	6013      	str	r3, [r2, #0]
	return -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <_exit>:

void _exit (int status)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ffe7 	bl	8005a44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a76:	e7fe      	b.n	8005a76 <_exit+0x12>

08005a78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <_sbrk+0x50>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <_sbrk+0x16>
		heap_end = &end;
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <_sbrk+0x50>)
 8005a8a:	4a10      	ldr	r2, [pc, #64]	; (8005acc <_sbrk+0x54>)
 8005a8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <_sbrk+0x50>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <_sbrk+0x50>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	466a      	mov	r2, sp
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d907      	bls.n	8005ab2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005aa2:	f000 f88f 	bl	8005bc4 <__errno>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab0:	e006      	b.n	8005ac0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <_sbrk+0x50>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4413      	add	r3, r2
 8005aba:	4a03      	ldr	r2, [pc, #12]	; (8005ac8 <_sbrk+0x50>)
 8005abc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005abe:	68fb      	ldr	r3, [r7, #12]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000230 	.word	0x20000230
 8005acc:	20000248 	.word	0x20000248

08005ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <SystemInit+0x5c>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <SystemInit+0x5c>)
 8005adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005ae4:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <SystemInit+0x60>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <SystemInit+0x60>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <SystemInit+0x60>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <SystemInit+0x60>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	490d      	ldr	r1, [pc, #52]	; (8005b30 <SystemInit+0x60>)
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <SystemInit+0x64>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <SystemInit+0x60>)
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <SystemInit+0x68>)
 8005b06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <SystemInit+0x60>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <SystemInit+0x60>)
 8005b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005b14:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <SystemInit+0x60>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b1a:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <SystemInit+0x5c>)
 8005b1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b20:	609a      	str	r2, [r3, #8]
#endif
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	e000ed00 	.word	0xe000ed00
 8005b30:	40023800 	.word	0x40023800
 8005b34:	fef6ffff 	.word	0xfef6ffff
 8005b38:	24003010 	.word	0x24003010

08005b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b42:	e003      	b.n	8005b4c <LoopCopyDataInit>

08005b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b4a:	3104      	adds	r1, #4

08005b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b4c:	480b      	ldr	r0, [pc, #44]	; (8005b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b54:	d3f6      	bcc.n	8005b44 <CopyDataInit>
  ldr  r2, =_sbss
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b58:	e002      	b.n	8005b60 <LoopFillZerobss>

08005b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b5c:	f842 3b04 	str.w	r3, [r2], #4

08005b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b64:	d3f9      	bcc.n	8005b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b66:	f7ff ffb3 	bl	8005ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b6a:	f000 f831 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b6e:	f7fe fe6b 	bl	8004848 <main>
  bx  lr    
 8005b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005b78:	08006140 	.word	0x08006140
  ldr  r0, =_sdata
 8005b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b80:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8005b84:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005b88:	20000244 	.word	0x20000244

08005b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b8c:	e7fe      	b.n	8005b8c <ADC_IRQHandler>

08005b8e <__cxa_pure_virtual>:
 8005b8e:	b508      	push	{r3, lr}
 8005b90:	f000 f80c 	bl	8005bac <_ZSt9terminatev>

08005b94 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005b94:	b508      	push	{r3, lr}
 8005b96:	4780      	blx	r0
 8005b98:	f000 f80d 	bl	8005bb6 <abort>

08005b9c <_ZSt13get_terminatev>:
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <_ZSt13get_terminatev+0xc>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	f3bf 8f5b 	dmb	ish
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <_ZSt9terminatev>:
 8005bac:	b508      	push	{r3, lr}
 8005bae:	f7ff fff5 	bl	8005b9c <_ZSt13get_terminatev>
 8005bb2:	f7ff ffef 	bl	8005b94 <_ZN10__cxxabiv111__terminateEPFvvE>

08005bb6 <abort>:
 8005bb6:	b508      	push	{r3, lr}
 8005bb8:	2006      	movs	r0, #6
 8005bba:	f000 f871 	bl	8005ca0 <raise>
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7ff ff50 	bl	8005a64 <_exit>

08005bc4 <__errno>:
 8005bc4:	4b01      	ldr	r3, [pc, #4]	; (8005bcc <__errno+0x8>)
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000010 	.word	0x20000010

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4e0d      	ldr	r6, [pc, #52]	; (8005c08 <__libc_init_array+0x38>)
 8005bd4:	4c0d      	ldr	r4, [pc, #52]	; (8005c0c <__libc_init_array+0x3c>)
 8005bd6:	1ba4      	subs	r4, r4, r6
 8005bd8:	10a4      	asrs	r4, r4, #2
 8005bda:	2500      	movs	r5, #0
 8005bdc:	42a5      	cmp	r5, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	4e0b      	ldr	r6, [pc, #44]	; (8005c10 <__libc_init_array+0x40>)
 8005be2:	4c0c      	ldr	r4, [pc, #48]	; (8005c14 <__libc_init_array+0x44>)
 8005be4:	f000 f960 	bl	8005ea8 <_init>
 8005be8:	1ba4      	subs	r4, r4, r6
 8005bea:	10a4      	asrs	r4, r4, #2
 8005bec:	2500      	movs	r5, #0
 8005bee:	42a5      	cmp	r5, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bf8:	4798      	blx	r3
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c02:	4798      	blx	r3
 8005c04:	3501      	adds	r5, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	08006134 	.word	0x08006134
 8005c0c:	08006134 	.word	0x08006134
 8005c10:	08006134 	.word	0x08006134
 8005c14:	0800613c 	.word	0x0800613c

08005c18 <memcpy>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	1e43      	subs	r3, r0, #1
 8005c1c:	440a      	add	r2, r1
 8005c1e:	4291      	cmp	r1, r2
 8005c20:	d100      	bne.n	8005c24 <memcpy+0xc>
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2c:	e7f7      	b.n	8005c1e <memcpy+0x6>

08005c2e <memset>:
 8005c2e:	4402      	add	r2, r0
 8005c30:	4603      	mov	r3, r0
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d100      	bne.n	8005c38 <memset+0xa>
 8005c36:	4770      	bx	lr
 8005c38:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3c:	e7f9      	b.n	8005c32 <memset+0x4>
	...

08005c40 <realloc>:
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <realloc+0xc>)
 8005c42:	460a      	mov	r2, r1
 8005c44:	4601      	mov	r1, r0
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	f000 b8a0 	b.w	8005d8c <_realloc_r>
 8005c4c:	20000010 	.word	0x20000010

08005c50 <_raise_r>:
 8005c50:	291f      	cmp	r1, #31
 8005c52:	b538      	push	{r3, r4, r5, lr}
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	d904      	bls.n	8005c64 <_raise_r+0x14>
 8005c5a:	2316      	movs	r3, #22
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c66:	b112      	cbz	r2, 8005c6e <_raise_r+0x1e>
 8005c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c6c:	b94b      	cbnz	r3, 8005c82 <_raise_r+0x32>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f830 	bl	8005cd4 <_getpid_r>
 8005c74:	462a      	mov	r2, r5
 8005c76:	4601      	mov	r1, r0
 8005c78:	4620      	mov	r0, r4
 8005c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7e:	f000 b817 	b.w	8005cb0 <_kill_r>
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d00a      	beq.n	8005c9c <_raise_r+0x4c>
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	d103      	bne.n	8005c92 <_raise_r+0x42>
 8005c8a:	2316      	movs	r3, #22
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7e7      	b.n	8005c62 <_raise_r+0x12>
 8005c92:	2400      	movs	r4, #0
 8005c94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	4798      	blx	r3
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e7e0      	b.n	8005c62 <_raise_r+0x12>

08005ca0 <raise>:
 8005ca0:	4b02      	ldr	r3, [pc, #8]	; (8005cac <raise+0xc>)
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	f7ff bfd3 	b.w	8005c50 <_raise_r>
 8005caa:	bf00      	nop
 8005cac:	20000010 	.word	0x20000010

08005cb0 <_kill_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4c07      	ldr	r4, [pc, #28]	; (8005cd0 <_kill_r+0x20>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	f7ff fec1 	bl	8005a44 <_kill>
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	d102      	bne.n	8005ccc <_kill_r+0x1c>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	b103      	cbz	r3, 8005ccc <_kill_r+0x1c>
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000240 	.word	0x20000240

08005cd4 <_getpid_r>:
 8005cd4:	f7ff beae 	b.w	8005a34 <_getpid>

08005cd8 <_malloc_r>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	1ccd      	adds	r5, r1, #3
 8005cdc:	f025 0503 	bic.w	r5, r5, #3
 8005ce0:	3508      	adds	r5, #8
 8005ce2:	2d0c      	cmp	r5, #12
 8005ce4:	bf38      	it	cc
 8005ce6:	250c      	movcc	r5, #12
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	4606      	mov	r6, r0
 8005cec:	db01      	blt.n	8005cf2 <_malloc_r+0x1a>
 8005cee:	42a9      	cmp	r1, r5
 8005cf0:	d903      	bls.n	8005cfa <_malloc_r+0x22>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
 8005cfa:	f000 f87d 	bl	8005df8 <__malloc_lock>
 8005cfe:	4a21      	ldr	r2, [pc, #132]	; (8005d84 <_malloc_r+0xac>)
 8005d00:	6814      	ldr	r4, [r2, #0]
 8005d02:	4621      	mov	r1, r4
 8005d04:	b991      	cbnz	r1, 8005d2c <_malloc_r+0x54>
 8005d06:	4c20      	ldr	r4, [pc, #128]	; (8005d88 <_malloc_r+0xb0>)
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	b91b      	cbnz	r3, 8005d14 <_malloc_r+0x3c>
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 f863 	bl	8005dd8 <_sbrk_r>
 8005d12:	6020      	str	r0, [r4, #0]
 8005d14:	4629      	mov	r1, r5
 8005d16:	4630      	mov	r0, r6
 8005d18:	f000 f85e 	bl	8005dd8 <_sbrk_r>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d124      	bne.n	8005d6a <_malloc_r+0x92>
 8005d20:	230c      	movs	r3, #12
 8005d22:	6033      	str	r3, [r6, #0]
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 f868 	bl	8005dfa <__malloc_unlock>
 8005d2a:	e7e4      	b.n	8005cf6 <_malloc_r+0x1e>
 8005d2c:	680b      	ldr	r3, [r1, #0]
 8005d2e:	1b5b      	subs	r3, r3, r5
 8005d30:	d418      	bmi.n	8005d64 <_malloc_r+0x8c>
 8005d32:	2b0b      	cmp	r3, #11
 8005d34:	d90f      	bls.n	8005d56 <_malloc_r+0x7e>
 8005d36:	600b      	str	r3, [r1, #0]
 8005d38:	50cd      	str	r5, [r1, r3]
 8005d3a:	18cc      	adds	r4, r1, r3
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f000 f85c 	bl	8005dfa <__malloc_unlock>
 8005d42:	f104 000b 	add.w	r0, r4, #11
 8005d46:	1d23      	adds	r3, r4, #4
 8005d48:	f020 0007 	bic.w	r0, r0, #7
 8005d4c:	1ac3      	subs	r3, r0, r3
 8005d4e:	d0d3      	beq.n	8005cf8 <_malloc_r+0x20>
 8005d50:	425a      	negs	r2, r3
 8005d52:	50e2      	str	r2, [r4, r3]
 8005d54:	e7d0      	b.n	8005cf8 <_malloc_r+0x20>
 8005d56:	428c      	cmp	r4, r1
 8005d58:	684b      	ldr	r3, [r1, #4]
 8005d5a:	bf16      	itet	ne
 8005d5c:	6063      	strne	r3, [r4, #4]
 8005d5e:	6013      	streq	r3, [r2, #0]
 8005d60:	460c      	movne	r4, r1
 8005d62:	e7eb      	b.n	8005d3c <_malloc_r+0x64>
 8005d64:	460c      	mov	r4, r1
 8005d66:	6849      	ldr	r1, [r1, #4]
 8005d68:	e7cc      	b.n	8005d04 <_malloc_r+0x2c>
 8005d6a:	1cc4      	adds	r4, r0, #3
 8005d6c:	f024 0403 	bic.w	r4, r4, #3
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d005      	beq.n	8005d80 <_malloc_r+0xa8>
 8005d74:	1a21      	subs	r1, r4, r0
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f82e 	bl	8005dd8 <_sbrk_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d0cf      	beq.n	8005d20 <_malloc_r+0x48>
 8005d80:	6025      	str	r5, [r4, #0]
 8005d82:	e7db      	b.n	8005d3c <_malloc_r+0x64>
 8005d84:	20000234 	.word	0x20000234
 8005d88:	20000238 	.word	0x20000238

08005d8c <_realloc_r>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	4607      	mov	r7, r0
 8005d90:	4614      	mov	r4, r2
 8005d92:	460e      	mov	r6, r1
 8005d94:	b921      	cbnz	r1, 8005da0 <_realloc_r+0x14>
 8005d96:	4611      	mov	r1, r2
 8005d98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d9c:	f7ff bf9c 	b.w	8005cd8 <_malloc_r>
 8005da0:	b922      	cbnz	r2, 8005dac <_realloc_r+0x20>
 8005da2:	f000 f82b 	bl	8005dfc <_free_r>
 8005da6:	4625      	mov	r5, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dac:	f000 f874 	bl	8005e98 <_malloc_usable_size_r>
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d20f      	bcs.n	8005dd4 <_realloc_r+0x48>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4638      	mov	r0, r7
 8005db8:	f7ff ff8e 	bl	8005cd8 <_malloc_r>
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0f2      	beq.n	8005da8 <_realloc_r+0x1c>
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	f7ff ff27 	bl	8005c18 <memcpy>
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f000 f815 	bl	8005dfc <_free_r>
 8005dd2:	e7e9      	b.n	8005da8 <_realloc_r+0x1c>
 8005dd4:	4635      	mov	r5, r6
 8005dd6:	e7e7      	b.n	8005da8 <_realloc_r+0x1c>

08005dd8 <_sbrk_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4c06      	ldr	r4, [pc, #24]	; (8005df4 <_sbrk_r+0x1c>)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4605      	mov	r5, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	f7ff fe48 	bl	8005a78 <_sbrk>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_sbrk_r+0x1a>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_sbrk_r+0x1a>
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000240 	.word	0x20000240

08005df8 <__malloc_lock>:
 8005df8:	4770      	bx	lr

08005dfa <__malloc_unlock>:
 8005dfa:	4770      	bx	lr

08005dfc <_free_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4605      	mov	r5, r0
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d045      	beq.n	8005e90 <_free_r+0x94>
 8005e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e08:	1f0c      	subs	r4, r1, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfb8      	it	lt
 8005e0e:	18e4      	addlt	r4, r4, r3
 8005e10:	f7ff fff2 	bl	8005df8 <__malloc_lock>
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <_free_r+0x98>)
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	4610      	mov	r0, r2
 8005e1a:	b933      	cbnz	r3, 8005e2a <_free_r+0x2e>
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	6014      	str	r4, [r2, #0]
 8005e20:	4628      	mov	r0, r5
 8005e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e26:	f7ff bfe8 	b.w	8005dfa <__malloc_unlock>
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	d90c      	bls.n	8005e48 <_free_r+0x4c>
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	1862      	adds	r2, r4, r1
 8005e32:	4293      	cmp	r3, r2
 8005e34:	bf04      	itt	eq
 8005e36:	681a      	ldreq	r2, [r3, #0]
 8005e38:	685b      	ldreq	r3, [r3, #4]
 8005e3a:	6063      	str	r3, [r4, #4]
 8005e3c:	bf04      	itt	eq
 8005e3e:	1852      	addeq	r2, r2, r1
 8005e40:	6022      	streq	r2, [r4, #0]
 8005e42:	6004      	str	r4, [r0, #0]
 8005e44:	e7ec      	b.n	8005e20 <_free_r+0x24>
 8005e46:	4613      	mov	r3, r2
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	b10a      	cbz	r2, 8005e50 <_free_r+0x54>
 8005e4c:	42a2      	cmp	r2, r4
 8005e4e:	d9fa      	bls.n	8005e46 <_free_r+0x4a>
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	1858      	adds	r0, r3, r1
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d10b      	bne.n	8005e70 <_free_r+0x74>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	1858      	adds	r0, r3, r1
 8005e5e:	4282      	cmp	r2, r0
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	d1dd      	bne.n	8005e20 <_free_r+0x24>
 8005e64:	6810      	ldr	r0, [r2, #0]
 8005e66:	6852      	ldr	r2, [r2, #4]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	4401      	add	r1, r0
 8005e6c:	6019      	str	r1, [r3, #0]
 8005e6e:	e7d7      	b.n	8005e20 <_free_r+0x24>
 8005e70:	d902      	bls.n	8005e78 <_free_r+0x7c>
 8005e72:	230c      	movs	r3, #12
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	e7d3      	b.n	8005e20 <_free_r+0x24>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	1821      	adds	r1, r4, r0
 8005e7c:	428a      	cmp	r2, r1
 8005e7e:	bf04      	itt	eq
 8005e80:	6811      	ldreq	r1, [r2, #0]
 8005e82:	6852      	ldreq	r2, [r2, #4]
 8005e84:	6062      	str	r2, [r4, #4]
 8005e86:	bf04      	itt	eq
 8005e88:	1809      	addeq	r1, r1, r0
 8005e8a:	6021      	streq	r1, [r4, #0]
 8005e8c:	605c      	str	r4, [r3, #4]
 8005e8e:	e7c7      	b.n	8005e20 <_free_r+0x24>
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	bf00      	nop
 8005e94:	20000234 	.word	0x20000234

08005e98 <_malloc_usable_size_r>:
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f18      	subs	r0, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbc      	itt	lt
 8005ea2:	580b      	ldrlt	r3, [r1, r0]
 8005ea4:	18c0      	addlt	r0, r0, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
