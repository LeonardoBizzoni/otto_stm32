
otto_ticks_calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000513c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005354  08005354  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000010  08005370  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005370  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbbb  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e1a  00000000  00000000  0002dbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028237  00000000  00000000  00031410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a6f  00000000  00000000  00059647  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1dd0  00000000  00000000  000630b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  00154f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	0800531c 	.word	0x0800531c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	0800531c 	.word	0x0800531c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7Encoder8GetCountEv>:

  Encoder(TIM_HandleTypeDef *timer, float wheel_circ);

  void Setup();

  int GetCount() {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    int count = ((int) __HAL_TIM_GET_COUNTER(this->timer_)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        - ((this->timer_->Init.Period) / 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
    return count;
 8000554:	68fb      	ldr	r3, [r7, #12]
  }
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period) / 2);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "encoder.h"

Encoder::Encoder(TIM_HandleTypeDef *timer, float wheel_circ) {
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	ed87 0a01 	vstr	s0, [r7, #4]
  timer_ = timer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	601a      	str	r2, [r3, #0]
  wheel_circumference_ = wheel_circ;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	213c      	movs	r1, #60	; 0x3c
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f827 	bl	8003610 <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffcd 	bl	8000562 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005ce:	f001 fb3b 	bl	8001c48 <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005f0:	f001 fb2a 	bl	8001c48 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff9c 	bl	8000538 <_ZN7Encoder8GetCountEv>
 8000600:	4602      	mov	r2, r0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ffab 	bl	8000562 <_ZN7Encoder10ResetCountEv>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN7Encoder17GetLinearVelocityEv>:
  float meters = ((float) this->ticks_ * this->wheel_circumference_)
      / TICKS_PER_REVOLUTION;
  return meters;
}

float Encoder::GetLinearVelocity() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffdf 	bl	80005e0 <_ZN7Encoder12UpdateValuesEv>
  float meters = ((float) this->ticks_ * this->wheel_circumference_)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a04 	vldr	s15, [r3, #16]
 8000634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000638:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000698 <_ZN7Encoder17GetLinearVelocityEv+0x84>
 800063c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000640:	edc7 7a05 	vstr	s15, [r7, #20]
      / TICKS_PER_REVOLUTION;
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000656:	edc7 7a04 	vstr	s15, [r7, #16]
  if (deltaTime == 0)
 800065a:	edd7 7a04 	vldr	s15, [r7, #16]
 800065e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	d102      	bne.n	800066e <_ZN7Encoder17GetLinearVelocityEv+0x5a>
    return 0;
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	e00c      	b.n	8000688 <_ZN7Encoder17GetLinearVelocityEv+0x74>
  float linear_velocity = (meters / (deltaTime / 1000));
 800066e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000672:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800069c <_ZN7Encoder17GetLinearVelocityEv+0x88>
 8000676:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800067a:	edd7 6a05 	vldr	s13, [r7, #20]
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	ee07 3a90 	vmov	s15, r3
}
 800068c:	eeb0 0a67 	vmov.f32	s0, s15
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	47908800 	.word	0x47908800
 800069c:	447a0000 	.word	0x447a0000

080006a0 <_ZN8OdometryC1Ev>:
  float left_velocity_;
  float right_velocity_;


 public:
  Odometry() {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    left_velocity_ = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
    right_velocity_ = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  }
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <_ZN8Odometry12UpdateValuesEff>:

  void UpdateValues(float linear_vel, float angular_vel) {
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80006d4:	edc7 0a01 	vstr	s1, [r7, #4]
    left_velocity_ = linear_vel - (BASELINE * angular_vel)/2;
 80006d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000730 <_ZN8Odometry12UpdateValuesEff+0x68>
 80006ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80006f0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80006f4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	edc3 7a00 	vstr	s15, [r3]
    right_velocity_ = 2 * linear_vel - left_velocity_;
 8000706:	edd7 7a02 	vldr	s15, [r7, #8]
 800070a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	edc3 7a01 	vstr	s15, [r3, #4]
  }
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	f3af 8000 	nop.w
 8000730:	33333333 	.word	0x33333333
 8000734:	3fd33333 	.word	0x3fd33333

08000738 <_ZN8Odometry15GetLeftVelocityEv>:

  float GetLeftVelocity(){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    return left_velocity_;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	ee07 3a90 	vmov	s15, r3
  }
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <_ZN8Odometry16GetRightVelocityEv>:
  float GetRightVelocity(){
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
    return right_velocity_;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
  }
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
  GPIO_TypeDef *dir_gpio_port_;
  uint16_t dir_pin_;
  TIM_HandleTypeDef *pwm_timer_;
  uint32_t pwm_channel_;

  MotorController(GPIO_TypeDef *sleep_gpio_port, uint16_t sleep_pin,
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4613      	mov	r3, r2
 8000782:	80fb      	strh	r3, [r7, #6]
                  GPIO_TypeDef *dir_gpio_port, uint16_t dir_pin,
                  TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel) {
    this->sleep_gpio_port_ = sleep_gpio_port;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	601a      	str	r2, [r3, #0]
    this->sleep_pin_ = sleep_pin;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	88fa      	ldrh	r2, [r7, #6]
 800078e:	809a      	strh	r2, [r3, #4]
    this->dir_gpio_port_ = dir_gpio_port;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	609a      	str	r2, [r3, #8]
    this->dir_pin_ = dir_pin;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	8b3a      	ldrh	r2, [r7, #24]
 800079a:	819a      	strh	r2, [r3, #12]
    this->pwm_timer_ = pwm_timer;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	611a      	str	r2, [r3, #16]
    this->pwm_channel_ = pwm_channel;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6a3a      	ldr	r2, [r7, #32]
 80007a6:	615a      	str	r2, [r3, #20]
  }
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_ZN15MotorController5setupEv>:

  void setup() {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm_timer_, pwm_channel_);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	691a      	ldr	r2, [r3, #16]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4610      	mov	r0, r2
 80007ca:	f002 fe4b 	bl	8003464 <HAL_TIM_PWM_Start>
  }
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_ZN15MotorController9set_speedEi>:

  void set_speed(int duty_cycle) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
    if (duty_cycle >= 0) {
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f2c0 8083 	blt.w	80008f0 <_ZN15MotorController9set_speedEi+0x118>
      //set direction to forward
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_SET);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6898      	ldr	r0, [r3, #8]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	899b      	ldrh	r3, [r3, #12]
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	f001 fd11 	bl	800221c <HAL_GPIO_WritePin>

      //check if duty_cycle exceeds maximum
      if (duty_cycle > MAX_DUTY_CYCLE)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f240 3216 	movw	r2, #790	; 0x316
 8000800:	4293      	cmp	r3, r2
 8000802:	dd3d      	ble.n	8000880 <_ZN15MotorController9set_speedEi+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d106      	bne.n	800081a <_ZN15MotorController9set_speedEi+0x42>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f240 3216 	movw	r2, #790	; 0x316
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
 8000818:	e0f5      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d106      	bne.n	8000830 <_ZN15MotorController9set_speedEi+0x58>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f240 3216 	movw	r2, #790	; 0x316
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
 800082e:	e0ea      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	2b08      	cmp	r3, #8
 8000836:	d106      	bne.n	8000846 <_ZN15MotorController9set_speedEi+0x6e>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f240 3216 	movw	r2, #790	; 0x316
 8000842:	63da      	str	r2, [r3, #60]	; 0x3c
 8000844:	e0df      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d106      	bne.n	800085c <_ZN15MotorController9set_speedEi+0x84>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f240 3216 	movw	r2, #790	; 0x316
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
 800085a:	e0d4      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d106      	bne.n	8000872 <_ZN15MotorController9set_speedEi+0x9a>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f240 3216 	movw	r2, #790	; 0x316
 800086e:	659a      	str	r2, [r3, #88]	; 0x58
 8000870:	e0c9      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f240 3216 	movw	r2, #790	; 0x316
 800087c:	65da      	str	r2, [r3, #92]	; 0x5c
 800087e:	e0c2      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
      else
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <_ZN15MotorController9set_speedEi+0xbc>
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	e0b8      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d105      	bne.n	80008a8 <_ZN15MotorController9set_speedEi+0xd0>
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	639a      	str	r2, [r3, #56]	; 0x38
 80008a6:	e0ae      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	2b08      	cmp	r3, #8
 80008ae:	d105      	bne.n	80008bc <_ZN15MotorController9set_speedEi+0xe4>
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ba:	e0a4      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	2b0c      	cmp	r3, #12
 80008c2:	d105      	bne.n	80008d0 <_ZN15MotorController9set_speedEi+0xf8>
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	641a      	str	r2, [r3, #64]	; 0x40
 80008ce:	e09a      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	2b10      	cmp	r3, #16
 80008d6:	d105      	bne.n	80008e4 <_ZN15MotorController9set_speedEi+0x10c>
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	659a      	str	r2, [r3, #88]	; 0x58
 80008e2:	e090      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80008ee:	e08a      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>

    } else if (duty_cycle < 0){
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f280 8087 	bge.w	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
      //set direction to backwards
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_RESET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6898      	ldr	r0, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	899b      	ldrh	r3, [r3, #12]
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	f001 fc8a 	bl	800221c <HAL_GPIO_WritePin>

      //check if duty_cycle is lower than minimum
      if (duty_cycle < -MAX_DUTY_CYCLE)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <_ZN15MotorController9set_speedEi+0x248>)
 800090c:	4293      	cmp	r3, r2
 800090e:	da3d      	bge.n	800098c <_ZN15MotorController9set_speedEi+0x1b4>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <_ZN15MotorController9set_speedEi+0x14e>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f240 3216 	movw	r2, #790	; 0x316
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
 8000924:	e06f      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d106      	bne.n	800093c <_ZN15MotorController9set_speedEi+0x164>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f240 3216 	movw	r2, #790	; 0x316
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
 800093a:	e064      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	2b08      	cmp	r3, #8
 8000942:	d106      	bne.n	8000952 <_ZN15MotorController9set_speedEi+0x17a>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f240 3216 	movw	r2, #790	; 0x316
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000950:	e059      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	2b0c      	cmp	r3, #12
 8000958:	d106      	bne.n	8000968 <_ZN15MotorController9set_speedEi+0x190>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f240 3216 	movw	r2, #790	; 0x316
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
 8000966:	e04e      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	2b10      	cmp	r3, #16
 800096e:	d106      	bne.n	800097e <_ZN15MotorController9set_speedEi+0x1a6>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f240 3216 	movw	r2, #790	; 0x316
 800097a:	659a      	str	r2, [r3, #88]	; 0x58
 800097c:	e043      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f240 3216 	movw	r2, #790	; 0x316
 8000988:	65da      	str	r2, [r3, #92]	; 0x5c
 800098a:	e03c      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
      else
        //invert sign to make duty_cycle positive
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d106      	bne.n	80009a2 <_ZN15MotorController9set_speedEi+0x1ca>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	425a      	negs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
 80009a0:	e031      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d106      	bne.n	80009b8 <_ZN15MotorController9set_speedEi+0x1e0>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	425a      	negs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
 80009b6:	e026      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	2b08      	cmp	r3, #8
 80009be:	d106      	bne.n	80009ce <_ZN15MotorController9set_speedEi+0x1f6>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	425a      	negs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80009cc:	e01b      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	2b0c      	cmp	r3, #12
 80009d4:	d106      	bne.n	80009e4 <_ZN15MotorController9set_speedEi+0x20c>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	425a      	negs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
 80009e2:	e010      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	d106      	bne.n	80009fa <_ZN15MotorController9set_speedEi+0x222>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	425a      	negs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	659a      	str	r2, [r3, #88]	; 0x58
 80009f8:	e005      	b.n	8000a06 <_ZN15MotorController9set_speedEi+0x22e>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	425a      	negs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	f001 fc03 	bl	800221c <HAL_GPIO_WritePin>

  }
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	fffffcea 	.word	0xfffffcea

08000a24 <_ZN15MotorController5coastEv>:
  void brake() {
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
  }

  void coast() {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_RESET);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 fbf0 	bl	800221c <HAL_GPIO_WritePin>
  }
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZN3PidC1Efff>:
  float previous_error_;

  int min_;
  int max_;

  Pid(float kp, float ki, float kd) {
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a50:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a54:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]

    this->min_ = -MAX_DUTY_CYCLE;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <_ZN3PidC1Efff+0x64>)
 8000a8e:	61da      	str	r2, [r3, #28]
    this->max_ = MAX_DUTY_CYCLE;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f240 3216 	movw	r2, #790	; 0x316
 8000a96:	621a      	str	r2, [r3, #32]

  }
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	fffffcea 	.word	0xfffffcea

08000aac <_ZN3Pid6configEfff>:

  void config(float kp, float ki, float kd) {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ab8:	edc7 0a01 	vstr	s1, [r7, #4]
 8000abc:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]

  }
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN3Pid3setEf>:

  void set(float setpoint) {
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	ed87 0a00 	vstr	s0, [r7]
    this->setpoint_ = setpoint;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	611a      	str	r2, [r3, #16]
  }
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_ZN3Pid6updateEf>:

  int update(float measure) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	ed87 0a00 	vstr	s0, [r7]

    this->error_ = this->setpoint_ - measure;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b2e:	edd7 7a00 	vldr	s15, [r7]
 8000b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	edc3 7a03 	vstr	s15, [r3, #12]

    //proportional term
    float output = this->error_ * this->kp_;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	edd3 7a00 	vldr	s15, [r3]
 8000b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4c:	edc7 7a03 	vstr	s15, [r7, #12]

    //integral term without windup
    error_sum_ += this->error_;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edc3 7a05 	vstr	s15, [r3, #20]
    output += error_sum_ * this->ki_;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b7e:	edc7 7a03 	vstr	s15, [r7, #12]

    //derivative term
    output += (this->error_ - this->previous_error_) * kd_;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	edc7 7a03 	vstr	s15, [r7, #12]
    this->previous_error_ = this->error_;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]

    int integer_output = static_cast<int> (output);
 8000bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bb8:	ee17 3a90 	vmov	r3, s15
 8000bbc:	60bb      	str	r3, [r7, #8]
//    if(integer_output > this->max_)
//      integer_output = this->max_;
//    else if (integer_output < this->min_)
//      integer_output = this->min_;

    return integer_output;
 8000bbe:	68bb      	ldr	r3, [r7, #8]

  }
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 ffe9 	bl	8001ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f870 	bl	8000cb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 fb46 	bl	8001268 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000bdc:	f000 f912 	bl	8000e04 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000be0:	f000 f96e 	bl	8000ec0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000be4:	f000 f9ca 	bl	8000f7c <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000be8:	f000 fa68 	bl	80010bc <_ZL12MX_TIM5_Initv>
  MX_USART6_UART_Init();
 8000bec:	f000 fb08 	bl	8001200 <_ZL19MX_USART6_UART_Initv>
  MX_TIM6_Init();
 8000bf0:	f000 fac4 	bl	800117c <_ZL12MX_TIM6_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000bf4:	f000 f8ea 	bl	8000dcc <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  left_encoder.Setup();
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0xa4>)
 8000bfa:	f7ff fcd8 	bl	80005ae <_ZN7Encoder5SetupEv>
  right_encoder.Setup();
 8000bfe:	481d      	ldr	r0, [pc, #116]	; (8000c74 <main+0xa8>)
 8000c00:	f7ff fcd5 	bl	80005ae <_ZN7Encoder5SetupEv>

  left_motor.setup();
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <main+0xac>)
 8000c06:	f7ff fdd6 	bl	80007b6 <_ZN15MotorController5setupEv>
  right_motor.setup();
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0xb0>)
 8000c0c:	f7ff fdd3 	bl	80007b6 <_ZN15MotorController5setupEv>
  left_motor.coast();
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <main+0xac>)
 8000c12:	f7ff ff07 	bl	8000a24 <_ZN15MotorController5coastEv>
  right_motor.coast();
 8000c16:	4819      	ldr	r0, [pc, #100]	; (8000c7c <main+0xb0>)
 8000c18:	f7ff ff04 	bl	8000a24 <_ZN15MotorController5coastEv>

  left_pid.config(180, 200, 0);
 8000c1c:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000c80 <main+0xb4>
 8000c20:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000c84 <main+0xb8>
 8000c24:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000c88 <main+0xbc>
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <main+0xc0>)
 8000c2a:	f7ff ff3f 	bl	8000aac <_ZN3Pid6configEfff>
  right_pid.config(185, 195, 0);
 8000c2e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000c80 <main+0xb4>
 8000c32:	eddf 0a17 	vldr	s1, [pc, #92]	; 8000c90 <main+0xc4>
 8000c36:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000c94 <main+0xc8>
 8000c3a:	4817      	ldr	r0, [pc, #92]	; (8000c98 <main+0xcc>)
 8000c3c:	f7ff ff36 	bl	8000aac <_ZN3Pid6configEfff>
  cross_pid.config(50, 20, 0);
 8000c40:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000c80 <main+0xb4>
 8000c44:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8000c48:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000c9c <main+0xd0>
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <main+0xd4>)
 8000c4e:	f7ff ff2d 	bl	8000aac <_ZN3Pid6configEfff>

  tx_buffer = (uint8_t*) &output_msg;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <main+0xd8>)
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <main+0xdc>)
 8000c56:	601a      	str	r2, [r3, #0]
  rx_buffer = (uint8_t*) &input_msg;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <main+0xe0>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <main+0xe4>)
 8000c5c:	601a      	str	r2, [r3, #0]

  //Enables UART RX interrupt
  HAL_UART_Receive_IT(&huart6, rx_buffer, 8);
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <main+0xe0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2208      	movs	r2, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <main+0xe8>)
 8000c68:	f003 fca8 	bl	80045bc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000c6c:	e7fe      	b.n	8000c6c <main+0xa0>
 8000c6e:	bf00      	nop
 8000c70:	20000200 	.word	0x20000200
 8000c74:	200001ec 	.word	0x200001ec
 8000c78:	200002bc 	.word	0x200002bc
 8000c7c:	200002a4 	.word	0x200002a4
 8000c80:	00000000 	.word	0x00000000
 8000c84:	43480000 	.word	0x43480000
 8000c88:	43340000 	.word	0x43340000
 8000c8c:	20000224 	.word	0x20000224
 8000c90:	43430000 	.word	0x43430000
 8000c94:	43390000 	.word	0x43390000
 8000c98:	20000248 	.word	0x20000248
 8000c9c:	42480000 	.word	0x42480000
 8000ca0:	2000026c 	.word	0x2000026c
 8000ca4:	200002d4 	.word	0x200002d4
 8000ca8:	200002e4 	.word	0x200002e4
 8000cac:	200002d8 	.word	0x200002d8
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	2000016c 	.word	0x2000016c

08000cb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b8      	sub	sp, #224	; 0xe0
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc2:	2234      	movs	r2, #52	; 0x34
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fb20 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2290      	movs	r2, #144	; 0x90
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fb11 	bl	800530c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <_Z18SystemClock_Configv+0x10c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <_Z18SystemClock_Configv+0x10c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <_Z18SystemClock_Configv+0x10c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <_Z18SystemClock_Configv+0x110>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <_Z18SystemClock_Configv+0x110>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <_Z18SystemClock_Configv+0x110>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 faa0 	bl	8002280 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8000d50:	f000 fc78 	bl	8001644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fcf3 	bl	8002764 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fc59 	bl	8001644 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d96:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fead 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8000db6:	f000 fc45 	bl	8001644 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	37e0      	adds	r7, #224	; 0xe0
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f001 f81e 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dda:	201d      	movs	r0, #29
 8000ddc:	f001 f837 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8000de0:	2202      	movs	r2, #2
 8000de2:	2102      	movs	r1, #2
 8000de4:	2036      	movs	r0, #54	; 0x36
 8000de6:	f001 f816 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dea:	2036      	movs	r0, #54	; 0x36
 8000dec:	f001 f82f 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	2047      	movs	r0, #71	; 0x47
 8000df6:	f001 f80e 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000dfa:	2047      	movs	r0, #71	; 0x47
 8000dfc:	f001 f827 	bl	8001e4e <HAL_NVIC_EnableIRQ>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2224      	movs	r2, #36	; 0x24
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 fa7a 	bl	800530c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e76:	f002 fb39 	bl	80034ec <HAL_TIM_Encoder_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000e8a:	f000 fbdb 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <_ZL12MX_TIM2_Initv+0xb8>)
 8000e9c:	f003 fac6 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000eb0:	f000 fbc8 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3730      	adds	r7, #48	; 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000002c 	.word	0x2000002c

08000ec0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ef4:	229f      	movs	r2, #159	; 0x9f
 8000ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f06:	f002 fa21 	bl	800334c <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8000f1a:	f000 fb93 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f2c:	f002 fdde 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8000f40:	f000 fb80 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f52:	f003 fa6b 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8000f66:	f000 fb6d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000006c 	.word	0x2000006c
 8000f78:	40000400 	.word	0x40000400

08000f7c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fb0:	4a41      	ldr	r2, [pc, #260]	; (80010b8 <_ZL12MX_TIM4_Initv+0x13c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fc2:	f240 321f 	movw	r2, #799	; 0x31f
 8000fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fd4:	4837      	ldr	r0, [pc, #220]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000fd6:	f002 f9b9 	bl	800334c <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8000fea:	f000 fb2b 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8000ffc:	f002 fd76 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001010:	f000 fb18 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001014:	4827      	ldr	r0, [pc, #156]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 8001016:	f002 f9ef 	bl	80033f8 <HAL_TIM_PWM_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 800102a:	f000 fb0b 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	481d      	ldr	r0, [pc, #116]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 800103e:	f003 f9f5 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001052:	f000 faf7 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	2208      	movs	r2, #8
 800106a:	4619      	mov	r1, r3
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 800106e:	f002 fc25 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 8001082:	f000 fadf 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	220c      	movs	r2, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 800108e:	f002 fc15 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 80010a2:	f000 facf 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <_ZL12MX_TIM4_Initv+0x138>)
 80010a8:	f000 fc4e 	bl	8001948 <HAL_TIM_MspPostInit>

}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000ac 	.word	0x200000ac
 80010b8:	40000800 	.word	0x40000800

080010bc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 f91e 	bl	800530c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010dc:	4a26      	ldr	r2, [pc, #152]	; (8001178 <_ZL12MX_TIM5_Initv+0xbc>)
 80010de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001100:	2303      	movs	r3, #3
 8001102:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001118:	2301      	movs	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4812      	ldr	r0, [pc, #72]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 800112c:	f002 f9de 	bl	80034ec <HAL_TIM_Encoder_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZL12MX_TIM5_Initv+0x88>
  {
    Error_Handler();
 8001140:	f000 fa80 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <_ZL12MX_TIM5_Initv+0xb8>)
 8001152:	f003 f96b 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <_ZL12MX_TIM5_Initv+0xae>
  {
    Error_Handler();
 8001166:	f000 fa6d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000ec 	.word	0x200000ec
 8001178:	40000c00 	.word	0x40000c00

0800117c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <_ZL12MX_TIM6_Initv+0x80>)
 8001190:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 8001194:	f242 720f 	movw	r2, #9999	; 0x270f
 8001198:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 80011a2:	f240 321f 	movw	r2, #799	; 0x31f
 80011a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 80011b0:	f002 f8cc 	bl	800334c <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fa3e 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <_ZL12MX_TIM6_Initv+0x7c>)
 80011d6:	f003 f929 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf14      	ite	ne
 80011e0:	2301      	movne	r3, #1
 80011e2:	2300      	moveq	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 80011ea:	f000 fa2b 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000012c 	.word	0x2000012c
 80011fc:	40001000 	.word	0x40001000

08001200 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <_ZL19MX_USART6_UART_Initv+0x64>)
 8001208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <_ZL19MX_USART6_UART_Initv+0x60>)
 8001244:	f003 f96c 	bl	8004520 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8001258:	f000 f9f4 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000016c 	.word	0x2000016c
 8001264:	40011400 	.word	0x40011400

08001268 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a5d      	ldr	r2, [pc, #372]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a51      	ldr	r2, [pc, #324]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c6:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <_ZL12MX_GPIO_Initv+0x190>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, dir2_Pin|dir1_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <_ZL12MX_GPIO_Initv+0x194>)
 8001316:	f000 ff81 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, sleep2_Pin|sleep1_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001320:	4836      	ldr	r0, [pc, #216]	; (80013fc <_ZL12MX_GPIO_Initv+0x194>)
 8001322:	f000 ff7b 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <_ZL12MX_GPIO_Initv+0x198>)
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4832      	ldr	r0, [pc, #200]	; (8001404 <_ZL12MX_GPIO_Initv+0x19c>)
 800133c:	f000 fdc4 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : current2_Pin */
  GPIO_InitStruct.Pin = current2_Pin;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current2_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	482c      	ldr	r0, [pc, #176]	; (8001404 <_ZL12MX_GPIO_Initv+0x19c>)
 8001354:	f000 fdb8 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : current1_Pin */
  GPIO_InitStruct.Pin = current1_Pin;
 8001358:	2308      	movs	r3, #8
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4827      	ldr	r0, [pc, #156]	; (8001408 <_ZL12MX_GPIO_Initv+0x1a0>)
 800136c:	f000 fdac 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault2_Pin */
  GPIO_InitStruct.Pin = fault2_Pin;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001384:	f000 fda0 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin|dir1_Pin;
 8001388:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <_ZL12MX_GPIO_Initv+0x194>)
 80013a2:	f000 fd91 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : sleep2_Pin sleep1_Pin */
  GPIO_InitStruct.Pin = sleep2_Pin|sleep1_Pin;
 80013a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <_ZL12MX_GPIO_Initv+0x194>)
 80013c0:	f000 fd82 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault1_Pin */
  GPIO_InitStruct.Pin = fault1_Pin;
 80013c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <_ZL12MX_GPIO_Initv+0x1a4>)
 80013da:	f000 fd75 	bl	8001ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2028      	movs	r0, #40	; 0x28
 80013e4:	f000 fd17 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e8:	2028      	movs	r0, #40	; 0x28
 80013ea:	f000 fd30 	bl	8001e4e <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40021400 	.word	0x40021400
 8001400:	10110000 	.word	0x10110000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  //TIMER 100Hz PID control
  if (htim->Instance == TIM3) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d14d      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0xae>

    left_velocity = left_encoder.GetLinearVelocity();
 8001422:	482a      	ldr	r0, [pc, #168]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001424:	f7ff f8f6 	bl	8000614 <_ZN7Encoder17GetLinearVelocityEv>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
    left_dutycycle = left_pid.update(left_velocity);
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800143e:	f7ff fb6d 	bl	8000b1c <_ZN3Pid6updateEf>
 8001442:	4602      	mov	r2, r0
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001446:	601a      	str	r2, [r3, #0]
    left_motor.set_speed(left_dutycycle);
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001450:	f7ff f9c2 	bl	80007d8 <_ZN15MotorController9set_speedEi>

    right_velocity = right_encoder.GetLinearVelocity();
 8001454:	4822      	ldr	r0, [pc, #136]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001456:	f7ff f8dd 	bl	8000614 <_ZN7Encoder17GetLinearVelocityEv>
 800145a:	eef0 7a40 	vmov.f32	s15, s0
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
    right_dutycycle = right_pid.update(right_velocity);
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	481e      	ldr	r0, [pc, #120]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001470:	f7ff fb54 	bl	8000b1c <_ZN3Pid6updateEf>
 8001474:	4602      	mov	r2, r0
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001478:	601a      	str	r2, [r3, #0]
    right_motor.set_speed(right_dutycycle);
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	481b      	ldr	r0, [pc, #108]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001482:	f7ff f9a9 	bl	80007d8 <_ZN15MotorController9set_speedEi>

    float difference = left_velocity - right_velocity;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc7 7a03 	vstr	s15, [r7, #12]

    int cross_dutycycle = cross_pid.update(difference);
 800149a:	ed97 0a03 	vldr	s0, [r7, #12]
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014a0:	f7ff fb3c 	bl	8000b1c <_ZN3Pid6updateEf>
 80014a4:	60b8      	str	r0, [r7, #8]

    left_dutycycle += cross_dutycycle;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80014b0:	6013      	str	r3, [r2, #0]
    right_dutycycle -= cross_dutycycle;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014bc:	6013      	str	r3, [r2, #0]
  }

  //TIMER 2Hz Transmit
  if (htim->Instance == TIM6) {
  }
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	20000200 	.word	0x20000200
 80014d0:	2000021c 	.word	0x2000021c
 80014d4:	20000224 	.word	0x20000224
 80014d8:	2000029c 	.word	0x2000029c
 80014dc:	200002bc 	.word	0x200002bc
 80014e0:	200001ec 	.word	0x200001ec
 80014e4:	20000220 	.word	0x20000220
 80014e8:	20000248 	.word	0x20000248
 80014ec:	200002a0 	.word	0x200002a0
 80014f0:	200002a4 	.word	0x200002a4
 80014f4:	2000026c 	.word	0x2000026c

080014f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  odom.UpdateValues(input_msg.linear_velocity, input_msg.angular_velocity);
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_UART_RxCpltCallback+0xa0>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_UART_RxCpltCallback+0xa0>)
 8001508:	ed93 7a01 	vldr	s14, [r3, #4]
 800150c:	eef0 0a47 	vmov.f32	s1, s14
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <HAL_UART_RxCpltCallback+0xa4>)
 8001516:	f7ff f8d7 	bl	80006c8 <_ZN8Odometry12UpdateValuesEff>

  left_setpoint = odom.GetLeftVelocity();
 800151a:	4820      	ldr	r0, [pc, #128]	; (800159c <HAL_UART_RxCpltCallback+0xa4>)
 800151c:	f7ff f90c 	bl	8000738 <_ZN8Odometry15GetLeftVelocityEv>
 8001520:	eef0 7a40 	vmov.f32	s15, s0
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
  right_setpoint = odom.GetRightVelocity();
 800152a:	481c      	ldr	r0, [pc, #112]	; (800159c <HAL_UART_RxCpltCallback+0xa4>)
 800152c:	f7ff f913 	bl	8000756 <_ZN8Odometry16GetRightVelocityEv>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_UART_RxCpltCallback+0xac>)
 8001536:	edc3 7a00 	vstr	s15, [r3]

  left_pid.set(left_setpoint);
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_RxCpltCallback+0xa8>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <HAL_UART_RxCpltCallback+0xb0>)
 8001546:	f7ff fada 	bl	8000afe <_ZN3Pid3setEf>
  right_pid.set(right_setpoint);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_RxCpltCallback+0xac>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <HAL_UART_RxCpltCallback+0xb4>)
 8001556:	f7ff fad2 	bl	8000afe <_ZN3Pid3setEf>

  cross_setpoint = left_setpoint - right_setpoint;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_RxCpltCallback+0xa8>)
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_UART_RxCpltCallback+0xac>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_RxCpltCallback+0xb8>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
  cross_pid.set(cross_setpoint);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <HAL_UART_RxCpltCallback+0xbc>)
 800157c:	f7ff fabf 	bl	8000afe <_ZN3Pid3setEf>

  HAL_UART_Receive_IT(&huart6, rx_buffer, 8);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_UART_RxCpltCallback+0xc0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 800158a:	f003 f817 	bl	80045bc <HAL_UART_Receive_IT>

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200002dc 	.word	0x200002dc
 800159c:	20000214 	.word	0x20000214
 80015a0:	20000290 	.word	0x20000290
 80015a4:	20000294 	.word	0x20000294
 80015a8:	20000224 	.word	0x20000224
 80015ac:	20000248 	.word	0x20000248
 80015b0:	20000298 	.word	0x20000298
 80015b4:	2000026c 	.word	0x2000026c
 80015b8:	200002d8 	.word	0x200002d8
 80015bc:	2000016c 	.word	0x2000016c

080015c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  //Blue user button
  if (GPIO_Pin == GPIO_PIN_13) {
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d0:	d12a      	bne.n	8001628 <HAL_GPIO_EXTI_Callback+0x68>
    previous_millis = current_millis;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_GPIO_EXTI_Callback+0x70>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_GPIO_EXTI_Callback+0x74>)
 80015d8:	6013      	str	r3, [r2, #0]
    current_millis = HAL_GetTick();
 80015da:	f000 fb35 	bl	8001c48 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_GPIO_EXTI_Callback+0x70>)
 80015e4:	601a      	str	r2, [r3, #0]
    if (current_millis - previous_millis < 200)
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_GPIO_EXTI_Callback+0x70>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_GPIO_EXTI_Callback+0x74>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2bc7      	cmp	r3, #199	; 0xc7
 80015f2:	dc03      	bgt.n	80015fc <HAL_GPIO_EXTI_Callback+0x3c>
      debounce = false;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_GPIO_EXTI_Callback+0x78>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_EXTI_Callback+0x42>
    else
      debounce = true;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_GPIO_EXTI_Callback+0x78>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
    if (mode == 0 && debounce) {
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d10a      	bne.n	8001628 <HAL_GPIO_EXTI_Callback+0x68>
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_GPIO_EXTI_Callback+0x78>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_GPIO_EXTI_Callback+0x68>
      mode = 1;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_GPIO_EXTI_Callback+0x7c>)
 800161c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001620:	601a      	str	r2, [r3, #0]
      //Enables TIM3 interrupt (used for PID control)
      HAL_TIM_Base_Start_IT(&htim3);
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <HAL_GPIO_EXTI_Callback+0x80>)
 8001624:	f001 febe 	bl	80033a4 <HAL_TIM_Base_Start_IT>
    }
  }
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200002ec 	.word	0x200002ec
 8001634:	200002e8 	.word	0x200002e8
 8001638:	20000000 	.word	0x20000000
 800163c:	200002f0 	.word	0x200002f0
 8001640:	2000006c 	.word	0x2000006c

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_Z41__static_initialization_and_destruction_0ii>:
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d14a      	bne.n	80016fa <_Z41__static_initialization_and_destruction_0ii+0xa6>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	4293      	cmp	r3, r2
 800166c:	d145      	bne.n	80016fa <_Z41__static_initialization_and_destruction_0ii+0xa6>
Encoder right_encoder = Encoder(&htim5, RIGHT_WHEEL_CIRCUMFERENCE);
 800166e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001704 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8001672:	4925      	ldr	r1, [pc, #148]	; (8001708 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001674:	4825      	ldr	r0, [pc, #148]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001676:	f7fe ff86 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>
Encoder left_encoder = Encoder(&htim2, LEFT_WHEEL_CIRCUMFERENCE);
 800167a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001710 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001680:	4825      	ldr	r0, [pc, #148]	; (8001718 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001682:	f7fe ff80 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>
Odometry odom = Odometry();
 8001686:	4825      	ldr	r0, [pc, #148]	; (800171c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001688:	f7ff f80a 	bl	80006a0 <_ZN8OdometryC1Ev>
Pid left_pid(0, 0, 0);
 800168c:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 8001690:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 8001694:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 8001698:	4822      	ldr	r0, [pc, #136]	; (8001724 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800169a:	f7ff f9d3 	bl	8000a44 <_ZN3PidC1Efff>
Pid right_pid(0, 0, 0);
 800169e:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016a2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016a6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80016ac:	f7ff f9ca 	bl	8000a44 <_ZN3PidC1Efff>
Pid cross_pid(0, 0, 0);
 80016b0:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016b4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016b8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001720 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80016bc:	481b      	ldr	r0, [pc, #108]	; (800172c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80016be:	f7ff f9c1 	bl	8000a44 <_ZN3PidC1Efff>
                            TIM_CHANNEL_4);
 80016c2:	230c      	movs	r3, #12
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80016d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d6:	4917      	ldr	r1, [pc, #92]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80016d8:	4817      	ldr	r0, [pc, #92]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80016da:	f7ff f84b 	bl	8000774 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
                           TIM_CHANNEL_3);
 80016de:	2308      	movs	r3, #8
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f2:	4910      	ldr	r1, [pc, #64]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80016f6:	f7ff f83d 	bl	8000774 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	3f4ccccd 	.word	0x3f4ccccd
 8001708:	200000ec 	.word	0x200000ec
 800170c:	200001ec 	.word	0x200001ec
 8001710:	3f47ae14 	.word	0x3f47ae14
 8001714:	2000002c 	.word	0x2000002c
 8001718:	20000200 	.word	0x20000200
 800171c:	20000214 	.word	0x20000214
 8001720:	00000000 	.word	0x00000000
 8001724:	20000224 	.word	0x20000224
 8001728:	20000248 	.word	0x20000248
 800172c:	2000026c 	.word	0x2000026c
 8001730:	200000ac 	.word	0x200000ac
 8001734:	40021400 	.word	0x40021400
 8001738:	200002a4 	.word	0x200002a4
 800173c:	200002bc 	.word	0x200002bc

08001740 <_GLOBAL__sub_I_htim2>:
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
 8001744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff83 	bl	8001654 <_Z41__static_initialization_and_destruction_0ii>
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_MspInit+0x44>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x44>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x44>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d144      	bne.n	8001844 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = encoder_sx1_Pin;
 8001802:	2320      	movs	r3, #32
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001812:	2301      	movs	r3, #1
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx1_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4823      	ldr	r0, [pc, #140]	; (80018ac <HAL_TIM_Encoder_MspInit+0x114>)
 800181e:	f000 fb53 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder_sx2_Pin;
 8001822:	2308      	movs	r3, #8
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001832:	2301      	movs	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx2_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	481c      	ldr	r0, [pc, #112]	; (80018b0 <HAL_TIM_Encoder_MspInit+0x118>)
 800183e:	f000 fb43 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001842:	e02c      	b.n	800189e <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d127      	bne.n	800189e <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_dx1_Pin|encoder_dx2_Pin;
 800187e:	2303      	movs	r3, #3
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800188e:	2302      	movs	r3, #2
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <HAL_TIM_Encoder_MspInit+0x114>)
 800189a:	f000 fb15 	bl	8001ec8 <HAL_GPIO_Init>
}
 800189e:	bf00      	nop
 80018a0:	3730      	adds	r7, #48	; 0x30
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40000c00 	.word	0x40000c00

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_TIM_Base_MspInit+0x80>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018e2:	e022      	b.n	800192a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_TIM_Base_MspInit+0x88>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10c      	bne.n	8001908 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
}
 8001906:	e010      	b.n	800192a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0x8c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10b      	bne.n	800192a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_TIM_Base_MspInit+0x84>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40000400 	.word	0x40000400
 800193c:	40023800 	.word	0x40023800
 8001940:	40000800 	.word	0x40000800
 8001944:	40001000 	.word	0x40001000

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_TIM_MspPostInit+0x64>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11c      	bne.n	80019a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_TIM_MspPostInit+0x68>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_TIM_MspPostInit+0x68>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_TIM_MspPostInit+0x68>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 8001982:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001994:	2302      	movs	r3, #2
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 80019a0:	f000 fa92 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020c00 	.word	0x40020c00

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x7c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d127      	bne.n	8001a2a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019e0:	f043 0320 	orr.w	r3, r3, #32
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_UART_MspInit+0x80>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_UART_MspInit+0x84>)
 8001a26:	f000 fa4f 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40011400 	.word	0x40011400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f8c4 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM3_IRQHandler+0x10>)
 8001aa2:	f001 fdec 	bl	800367e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000006c 	.word	0x2000006c

08001ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ab4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab8:	f000 fbca 	bl	8002250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM6_DAC_IRQHandler+0x10>)
 8001ac6:	f001 fdda 	bl	800367e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000012c 	.word	0x2000012c

08001ad4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USART6_IRQHandler+0x10>)
 8001ada:	f002 fe11 	bl	8004700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000016c 	.word	0x2000016c

08001ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <SystemInit+0x5c>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <SystemInit+0x5c>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <SystemInit+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <SystemInit+0x60>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <SystemInit+0x60>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <SystemInit+0x60>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	490d      	ldr	r1, [pc, #52]	; (8001b48 <SystemInit+0x60>)
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <SystemInit+0x64>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <SystemInit+0x60>)
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <SystemInit+0x68>)
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <SystemInit+0x60>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <SystemInit+0x60>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x60>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SystemInit+0x5c>)
 8001b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b38:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	fef6ffff 	.word	0xfef6ffff
 8001b50:	24003010 	.word	0x24003010

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b5a:	e003      	b.n	8001b64 <LoopCopyDataInit>

08001b5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b62:	3104      	adds	r1, #4

08001b64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b6c:	d3f6      	bcc.n	8001b5c <CopyDataInit>
  ldr  r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b70:	e002      	b.n	8001b78 <LoopFillZerobss>

08001b72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b74:	f842 3b04 	str.w	r3, [r2], #4

08001b78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b7c:	d3f9      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffb3 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 fb9f 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff f821 	bl	8000bcc <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001b90:	08005360 	.word	0x08005360
  ldr  r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b98:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001b9c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001ba0:	200002f8 	.word	0x200002f8

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>

08001ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f000 f928 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f805 	bl	8001bc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fdcb 	bl	8001750 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f943 	bl	8001e6a <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfc:	f000 f90b 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000004 	.word	0x20000004
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	200002f4 	.word	0x200002f4

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200002f4 	.word	0x200002f4

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	05fa0000 	.word	0x05fa0000

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d004      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e00c      	b.n	8001eba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e175      	b.n	80021d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8164 	bne.w	80021ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x4e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d00b      	beq.n	8001fb2 <HAL_GPIO_Init+0xea>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa6:	2b11      	cmp	r3, #17
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80be 	beq.w	80021ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_GPIO_Init+0x320>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a64      	ldr	r2, [pc, #400]	; (80021e8 <HAL_GPIO_Init+0x320>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_GPIO_Init+0x320>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800206a:	4a60      	ldr	r2, [pc, #384]	; (80021ec <HAL_GPIO_Init+0x324>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_GPIO_Init+0x328>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d037      	beq.n	8002106 <HAL_GPIO_Init+0x23e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d031      	beq.n	8002102 <HAL_GPIO_Init+0x23a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a55      	ldr	r2, [pc, #340]	; (80021f8 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x236>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a54      	ldr	r2, [pc, #336]	; (80021fc <HAL_GPIO_Init+0x334>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x232>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a53      	ldr	r2, [pc, #332]	; (8002200 <HAL_GPIO_Init+0x338>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_GPIO_Init+0x33c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x22a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a51      	ldr	r2, [pc, #324]	; (8002208 <HAL_GPIO_Init+0x340>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a50      	ldr	r2, [pc, #320]	; (800220c <HAL_GPIO_Init+0x344>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_GPIO_Init+0x348>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_GPIO_Init+0x34c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020de:	2309      	movs	r3, #9
 80020e0:	e012      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020e2:	230a      	movs	r3, #10
 80020e4:	e010      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020e6:	2308      	movs	r3, #8
 80020e8:	e00e      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x240>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x240>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002118:	4934      	ldr	r1, [pc, #208]	; (80021ec <HAL_GPIO_Init+0x324>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_GPIO_Init+0x350>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214a:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_GPIO_Init+0x350>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_GPIO_Init+0x350>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002174:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_GPIO_Init+0x350>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_GPIO_Init+0x350>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_GPIO_Init+0x350>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_GPIO_Init+0x350>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <HAL_GPIO_Init+0x350>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f ae86 	bls.w	8001ee8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	3724      	adds	r7, #36	; 0x24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40021000 	.word	0x40021000
 8002204:	40021400 	.word	0x40021400
 8002208:	40021800 	.word	0x40021800
 800220c:	40021c00 	.word	0x40021c00
 8002210:	40022000 	.word	0x40022000
 8002214:	40022400 	.word	0x40022400
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f9a6 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e25e      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8087 	beq.w	80023b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a4:	4b96      	ldr	r3, [pc, #600]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00c      	beq.n	80022ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b0:	4b93      	ldr	r3, [pc, #588]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d112      	bne.n	80022e2 <HAL_RCC_OscConfig+0x62>
 80022bc:	4b90      	ldr	r3, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c8:	d10b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d06c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x130>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d168      	bne.n	80023b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e238      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x7a>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e02e      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x9c>
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7e      	ldr	r2, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7b      	ldr	r2, [pc, #492]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0xc0>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6b      	ldr	r2, [pc, #428]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fc72 	bl	8001c48 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff fc6e 	bl	8001c48 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1ec      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xe8>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff fc5e 	bl	8001c48 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fc5a 	bl	8001c48 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1d8      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x110>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d069      	beq.n	8002492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x190>
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x17a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1ac      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	493d      	ldr	r1, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	e040      	b.n	8002492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a38      	ldr	r2, [pc, #224]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff fc10 	bl	8001c48 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fc0c 	bl	8001c48 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e18a      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
 800245e:	e018      	b.n	8002492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff fbec 	bl	8001c48 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002474:	f7ff fbe8 	bl	8001c48 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e166      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d038      	beq.n	8002510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d019      	beq.n	80024da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80024a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7ff fbc9 	bl	8001c48 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ba:	f7ff fbc5 	bl	8001c48 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e143      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80024ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x23a>
 80024d8:	e01a      	b.n	8002510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x280>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7ff fbaf 	bl	8001c48 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7ff fbab 	bl	8001c48 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d903      	bls.n	8002504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e129      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
 8002500:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b95      	ldr	r3, [pc, #596]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a4 	beq.w	8002666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b8f      	ldr	r3, [pc, #572]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b8c      	ldr	r3, [pc, #560]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a8b      	ldr	r2, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b89      	ldr	r3, [pc, #548]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002546:	4b86      	ldr	r3, [pc, #536]	; (8002760 <HAL_RCC_OscConfig+0x4e0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002552:	4b83      	ldr	r3, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x4e0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a82      	ldr	r2, [pc, #520]	; (8002760 <HAL_RCC_OscConfig+0x4e0>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb73 	bl	8001c48 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7ff fb6f 	bl	8001c48 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0ed      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002578:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCC_OscConfig+0x4e0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x31a>
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a72      	ldr	r2, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_OscConfig+0x376>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x33c>
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a6d      	ldr	r2, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a6a      	ldr	r2, [pc, #424]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x376>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x35e>
 80025c4:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a64      	ldr	r2, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	4b62      	ldr	r3, [pc, #392]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a61      	ldr	r2, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x376>
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7ff fb23 	bl	8001c48 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7ff fb1f 	bl	8001c48 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e09b      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b4f      	ldr	r3, [pc, #316]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x386>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff fb0d 	bl	8001c48 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff fb09 	bl	8001c48 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e085      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d071      	beq.n	8002752 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b08      	cmp	r3, #8
 8002678:	d069      	beq.n	800274e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d14b      	bne.n	800271a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a35      	ldr	r2, [pc, #212]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff fadb 	bl	8001c48 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7ff fad7 	bl	8001c48 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e055      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	071b      	lsls	r3, r3, #28
 80026e0:	491e      	ldr	r1, [pc, #120]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff faa9 	bl	8001c48 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7ff faa5 	bl	8001c48 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e023      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x47a>
 8002718:	e01b      	b.n	8002752 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff fa8f 	bl	8001c48 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff fa8b 	bl	8001c48 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e009      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x4ae>
 800274c:	e001      	b.n	8002752 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0ce      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b69      	ldr	r3, [pc, #420]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	4964      	ldr	r1, [pc, #400]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b6      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494c      	ldr	r1, [pc, #304]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07d      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e071      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e069      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7ff f9f6 	bl	8001c48 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7ff f9f2 	bl	8001c48 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e051      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4921      	ldr	r1, [pc, #132]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e030      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4915      	ldr	r1, [pc, #84]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f81d 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	fa21 f303 	lsr.w	r3, r1, r3
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff f954 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00
 8002928:	40023800 	.word	0x40023800
 800292c:	08005334 	.word	0x08005334
 8002930:	20000004 	.word	0x20000004

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294a:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d007      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x32>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d008      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x38>
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 808d 	bne.w	8002a7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002962:	60bb      	str	r3, [r7, #8]
       break;
 8002964:	e08c      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8002968:	60bb      	str	r3, [r7, #8]
      break;
 800296a:	e089      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002974:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	ea03 0501 	and.w	r5, r3, r1
 8002998:	ea04 0602 	and.w	r6, r4, r2
 800299c:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800299e:	fb02 f106 	mul.w	r1, r2, r6
 80029a2:	2200      	movs	r2, #0
 80029a4:	fb02 f205 	mul.w	r2, r2, r5
 80029a8:	440a      	add	r2, r1
 80029aa:	493a      	ldr	r1, [pc, #232]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ac:	fba5 0101 	umull	r0, r1, r5, r1
 80029b0:	1853      	adds	r3, r2, r1
 80029b2:	4619      	mov	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f04f 0400 	mov.w	r4, #0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4623      	mov	r3, r4
 80029be:	f7fd fc3b 	bl	8000238 <__aeabi_uldivmod>
 80029c2:	4603      	mov	r3, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e049      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea03 0501 	and.w	r5, r3, r1
 80029e0:	ea04 0602 	and.w	r6, r4, r2
 80029e4:	4629      	mov	r1, r5
 80029e6:	4632      	mov	r2, r6
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f04f 0400 	mov.w	r4, #0
 80029f0:	0154      	lsls	r4, r2, #5
 80029f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	4619      	mov	r1, r3
 80029fa:	4622      	mov	r2, r4
 80029fc:	1b49      	subs	r1, r1, r5
 80029fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0194      	lsls	r4, r2, #6
 8002a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a10:	018b      	lsls	r3, r1, #6
 8002a12:	1a5b      	subs	r3, r3, r1
 8002a14:	eb64 0402 	sbc.w	r4, r4, r2
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	00e2      	lsls	r2, r4, #3
 8002a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	195b      	adds	r3, r3, r5
 8002a2e:	eb44 0406 	adc.w	r4, r4, r6
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	02a2      	lsls	r2, r4, #10
 8002a3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a40:	0299      	lsls	r1, r3, #10
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	4621      	mov	r1, r4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	461a      	mov	r2, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	f7fd fbf0 	bl	8000238 <__aeabi_uldivmod>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	60bb      	str	r3, [r7, #8]
      break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a7c:	60bb      	str	r3, [r7, #8]
      break;
 8002a7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a80:	68bb      	ldr	r3, [r7, #8]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	017d7840 	.word	0x017d7840

08002a98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08005344 	.word	0x08005344

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffdc 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08005344 	.word	0x08005344

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d012      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b28:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a68      	ldr	r2, [pc, #416]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b32:	6093      	str	r3, [r2, #8]
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	4964      	ldr	r1, [pc, #400]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	4959      	ldr	r1, [pc, #356]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b78:	d101      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d017      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b96:	4b4e      	ldr	r3, [pc, #312]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	494a      	ldr	r1, [pc, #296]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb4:	d101      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 808b 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a39      	ldr	r2, [pc, #228]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7ff f81e 	bl	8001c48 <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7ff f81a 	bl	8001c48 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e38d      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c22:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d035      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d02e      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d114      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe ffe2 	bl	8001c48 <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe ffde 	bl	8001c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e34f      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ee      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	4901      	ldr	r1, [pc, #4]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	0ffffcff 	.word	0x0ffffcff
 8002cdc:	4bb3      	ldr	r3, [pc, #716]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4ab2      	ldr	r2, [pc, #712]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	4bb0      	ldr	r3, [pc, #704]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	49ad      	ldr	r1, [pc, #692]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d06:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0c:	4aa7      	ldr	r2, [pc, #668]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d16:	4ba5      	ldr	r3, [pc, #660]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	49a2      	ldr	r1, [pc, #648]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d34:	4b9d      	ldr	r3, [pc, #628]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d42:	499a      	ldr	r1, [pc, #616]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d56:	4b95      	ldr	r3, [pc, #596]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	4991      	ldr	r1, [pc, #580]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d78:	4b8c      	ldr	r3, [pc, #560]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d86:	4989      	ldr	r1, [pc, #548]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d9a:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4980      	ldr	r1, [pc, #512]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4978      	ldr	r1, [pc, #480]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dde:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f023 020c 	bic.w	r2, r3, #12
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dec:	496f      	ldr	r1, [pc, #444]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4967      	ldr	r1, [pc, #412]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	495e      	ldr	r1, [pc, #376]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4956      	ldr	r1, [pc, #344]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	4945      	ldr	r1, [pc, #276]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	493c      	ldr	r1, [pc, #240]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	4934      	ldr	r1, [pc, #208]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d011      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efc:	492b      	ldr	r1, [pc, #172]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3c:	491b      	ldr	r1, [pc, #108]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f60:	4912      	ldr	r1, [pc, #72]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f84:	4909      	ldr	r1, [pc, #36]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00f      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	4985      	ldr	r1, [pc, #532]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc4:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd4:	497c      	ldr	r1, [pc, #496]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d005      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fea:	f040 80d6 	bne.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fe fe25 	bl	8001c48 <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003002:	f7fe fe21 	bl	8001c48 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d901      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e194      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003014:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d021      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11d      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003042:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003048:	0e1b      	lsrs	r3, r3, #24
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	019a      	lsls	r2, r3, #6
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	071b      	lsls	r3, r3, #28
 8003068:	4957      	ldr	r1, [pc, #348]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02e      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d129      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b0:	0f1b      	lsrs	r3, r3, #28
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	019a      	lsls	r2, r3, #6
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	071b      	lsls	r3, r3, #28
 80030d0:	493d      	ldr	r1, [pc, #244]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030de:	f023 021f 	bic.w	r2, r3, #31
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01d      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003102:	0e1b      	lsrs	r3, r3, #24
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800310c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003110:	0f1b      	lsrs	r3, r3, #28
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	019a      	lsls	r2, r3, #6
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	431a      	orrs	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	071b      	lsls	r3, r3, #28
 8003130:	4925      	ldr	r1, [pc, #148]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d011      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	019a      	lsls	r2, r3, #6
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	4919      	ldr	r1, [pc, #100]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800316e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe fd68 	bl	8001c48 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800317c:	f7fe fd64 	bl	8001c48 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0d7      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b01      	cmp	r3, #1
 800319e:	f040 80cd 	bne.w	800333c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ae:	f7fe fd4b 	bl	8001c48 <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031b6:	f7fe fd47 	bl	8001c48 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d903      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0ba      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80031c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d8:	d0ed      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02e      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d12a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0f1b      	lsrs	r3, r3, #28
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4944      	ldr	r1, [pc, #272]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	493d      	ldr	r1, [pc, #244]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326c:	d11d      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0f1b      	lsrs	r3, r3, #28
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4929      	ldr	r1, [pc, #164]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	0e1b      	lsrs	r3, r3, #24
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	019a      	lsls	r2, r3, #6
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	4917      	ldr	r1, [pc, #92]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	4911      	ldr	r1, [pc, #68]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe fc98 	bl	8001c48 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800331c:	f7fe fc94 	bl	8001c48 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e007      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333a:	d1ef      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e01d      	b.n	800339a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe faa0 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fc90 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_TIM_Base_Start_IT+0x50>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d00b      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x42>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d007      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	00010007 	.word	0x00010007

080033f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e01d      	b.n	8003446 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f815 	bl	800344e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f000 fc3a 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 ffb2 	bl	80043e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_TIM_PWM_Start+0x7c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_PWM_Start+0x2c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <HAL_TIM_PWM_Start+0x80>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_TIM_PWM_Start+0x30>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_TIM_PWM_Start+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_TIM_PWM_Start+0x84>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b06      	cmp	r3, #6
 80034ba:	d00b      	beq.n	80034d4 <HAL_TIM_PWM_Start+0x70>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40010400 	.word	0x40010400
 80034e8:	00010007 	.word	0x00010007

080034ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e07b      	b.n	80035f8 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7fe f93f 	bl	8001798 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_TIM_Encoder_Init+0x114>)
 800352e:	400b      	ands	r3, r1
 8003530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 fbb7 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_TIM_Encoder_Init+0x118>)
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	4313      	orrs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_TIM_Encoder_Init+0x11c>)
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_TIM_Encoder_Init+0x120>)
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4313      	orrs	r3, r2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	011a      	lsls	r2, r3, #4
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	031b      	lsls	r3, r3, #12
 80035ac:	4313      	orrs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	4313      	orrs	r3, r2
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	fffebff8 	.word	0xfffebff8
 8003604:	fffffcfc 	.word	0xfffffcfc
 8003608:	fffff3f3 	.word	0xfffff3f3
 800360c:	ffff0f0f 	.word	0xffff0f0f

08003610 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_TIM_Encoder_Start+0x16>
 8003620:	2b04      	cmp	r3, #4
 8003622:	d008      	beq.n	8003636 <HAL_TIM_Encoder_Start+0x26>
 8003624:	e00f      	b.n	8003646 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fed6 	bl	80043e0 <TIM_CCxChannelCmd>
      break;
 8003634:	e016      	b.n	8003664 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	2104      	movs	r1, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fece 	bl	80043e0 <TIM_CCxChannelCmd>
      break;
 8003644:	e00e      	b.n	8003664 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2201      	movs	r2, #1
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fec6 	bl	80043e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	2104      	movs	r1, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f000 febf 	bl	80043e0 <TIM_CCxChannelCmd>
      break;
 8003662:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d122      	bne.n	80036da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d11b      	bne.n	80036da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0202 	mvn.w	r2, #2
 80036aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fad7 	bl	8003c74 <HAL_TIM_IC_CaptureCallback>
 80036c6:	e005      	b.n	80036d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fac9 	bl	8003c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fada 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d122      	bne.n	800372e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d11b      	bne.n	800372e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f06f 0204 	mvn.w	r2, #4
 80036fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 faad 	bl	8003c74 <HAL_TIM_IC_CaptureCallback>
 800371a:	e005      	b.n	8003728 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fa9f 	bl	8003c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fab0 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d122      	bne.n	8003782 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11b      	bne.n	8003782 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0208 	mvn.w	r2, #8
 8003752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2204      	movs	r2, #4
 8003758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fa83 	bl	8003c74 <HAL_TIM_IC_CaptureCallback>
 800376e:	e005      	b.n	800377c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa75 	bl	8003c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa86 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d122      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b10      	cmp	r3, #16
 800379c:	d11b      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f06f 0210 	mvn.w	r2, #16
 80037a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2208      	movs	r2, #8
 80037ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa59 	bl	8003c74 <HAL_TIM_IC_CaptureCallback>
 80037c2:	e005      	b.n	80037d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fa4b 	bl	8003c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa5c 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0201 	mvn.w	r2, #1
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7fd fe07 	bl	8001410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fe65 	bl	80044f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fe58 	bl	800450c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa0a 	bl	8003c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0220 	mvn.w	r2, #32
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fe18 	bl	80044e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e105      	b.n	8003ae2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b14      	cmp	r3, #20
 80038ea:	f200 80f0 	bhi.w	8003ace <HAL_TIM_PWM_ConfigChannel+0x212>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003949 	.word	0x08003949
 80038f8:	08003acf 	.word	0x08003acf
 80038fc:	08003acf 	.word	0x08003acf
 8003900:	08003acf 	.word	0x08003acf
 8003904:	08003989 	.word	0x08003989
 8003908:	08003acf 	.word	0x08003acf
 800390c:	08003acf 	.word	0x08003acf
 8003910:	08003acf 	.word	0x08003acf
 8003914:	080039cb 	.word	0x080039cb
 8003918:	08003acf 	.word	0x08003acf
 800391c:	08003acf 	.word	0x08003acf
 8003920:	08003acf 	.word	0x08003acf
 8003924:	08003a0b 	.word	0x08003a0b
 8003928:	08003acf 	.word	0x08003acf
 800392c:	08003acf 	.word	0x08003acf
 8003930:	08003acf 	.word	0x08003acf
 8003934:	08003a4d 	.word	0x08003a4d
 8003938:	08003acf 	.word	0x08003acf
 800393c:	08003acf 	.word	0x08003acf
 8003940:	08003acf 	.word	0x08003acf
 8003944:	08003a8d 	.word	0x08003a8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa4e 	bl	8003df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
      break;
 8003986:	e0a3      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 faa0 	bl	8003ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
      break;
 80039c8:	e082      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 faf7 	bl	8003fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0208 	orr.w	r2, r2, #8
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
      break;
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fb4d 	bl	80040b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
      break;
 8003a4a:	e041      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb84 	bl	8004160 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a8a:	e021      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fbb6 	bl	8004204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003acc:	e000      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003ace:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0a6      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x166>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <HAL_TIM_ConfigClockSource+0x170>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d067      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x120>
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d80b      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x6c>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d073      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d802      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x62>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d06f      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b4c:	e078      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d06c      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d06a      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b56:	e073      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d00d      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x8c>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d804      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x7e>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d033      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0xe0>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d041      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b68:	e06a      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d066      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x152>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d017      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b76:	e063      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 fc0a 	bl	80043a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e04c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f000 fbf3 	bl	80043a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc8:	609a      	str	r2, [r3, #8]
      break;
 8003bca:	e039      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f000 fb67 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2150      	movs	r1, #80	; 0x50
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fbc0 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003bea:	e029      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fb86 	bl	800430a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2160      	movs	r1, #96	; 0x60
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fbb0 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e019      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 fb47 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fba0 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e009      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fb97 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	fffeff88 	.word	0xfffeff88

08003c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d027      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d023      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <TIM_Base_SetConfig+0x128>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <TIM_Base_SetConfig+0x12c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_Base_SetConfig+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <TIM_Base_SetConfig+0x134>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <TIM_Base_SetConfig+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <TIM_Base_SetConfig+0x13c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0xf8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800
 8003de4:	40001800 	.word	0x40001800
 8003de8:	40001c00 	.word	0x40001c00
 8003dec:	40002000 	.word	0x40002000

08003df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC1_SetConfig+0x64>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <TIM_OC1_SetConfig+0xe0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC1_SetConfig+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC1_SetConfig+0xe0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	fffeff8f 	.word	0xfffeff8f
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <TIM_OC2_SetConfig+0xe4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0320 	bic.w	r3, r3, #32
 8003f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <TIM_OC2_SetConfig+0xe8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC2_SetConfig+0x68>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <TIM_OC2_SetConfig+0xec>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10d      	bne.n	8003f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <TIM_OC2_SetConfig+0xe8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC2_SetConfig+0x94>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <TIM_OC2_SetConfig+0xec>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d113      	bne.n	8003f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	feff8fff 	.word	0xfeff8fff
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <TIM_OC3_SetConfig+0xe0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <TIM_OC3_SetConfig+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_OC3_SetConfig+0x66>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <TIM_OC3_SetConfig+0xe8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10d      	bne.n	8004046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <TIM_OC3_SetConfig+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x92>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <TIM_OC3_SetConfig+0xe8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	fffeff8f 	.word	0xfffeff8f
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010400 	.word	0x40010400

080040b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <TIM_OC4_SetConfig+0xa4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <TIM_OC4_SetConfig+0xa8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC4_SetConfig+0x68>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <TIM_OC4_SetConfig+0xac>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d109      	bne.n	800412c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	feff8fff 	.word	0xfeff8fff
 8004158:	40010000 	.word	0x40010000
 800415c:	40010400 	.word	0x40010400

08004160 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <TIM_OC5_SetConfig+0x98>)
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <TIM_OC5_SetConfig+0x9c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC5_SetConfig+0x5e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a11      	ldr	r2, [pc, #68]	; (8004200 <TIM_OC5_SetConfig+0xa0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d109      	bne.n	80041d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	621a      	str	r2, [r3, #32]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	fffeff8f 	.word	0xfffeff8f
 80041fc:	40010000 	.word	0x40010000
 8004200:	40010400 	.word	0x40010400

08004204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <TIM_OC6_SetConfig+0x9c>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <TIM_OC6_SetConfig+0xa0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC6_SetConfig+0x60>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <TIM_OC6_SetConfig+0xa4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	feff8fff 	.word	0xfeff8fff
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40010400 	.word	0x40010400

080042ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 030a 	bic.w	r3, r3, #10
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	031b      	lsls	r3, r3, #12
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	f043 0307 	orr.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2201      	movs	r2, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004440:	2302      	movs	r3, #2
 8004442:	e045      	b.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800447e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e040      	b.n	80045b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fa38 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9fe 	bl	8004960 <UART_SetConfig>
 8004564:	4603      	mov	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e022      	b.n	80045b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fc96 	bl	8004ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800458a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd1d 	bl	8004fec <UART_CheckIdleState>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	f040 808a 	bne.w	80046e8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Receive_IT+0x24>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e082      	b.n	80046ea <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Receive_IT+0x36>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e07b      	b.n	80046ea <HAL_UART_Receive_IT+0x12e>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d10e      	bne.n	800463e <HAL_UART_Receive_IT+0x82>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_UART_Receive_IT+0x78>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800462e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004632:	e02d      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800463c:	e028      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <HAL_UART_Receive_IT+0xa6>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Receive_IT+0x9c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004656:	e01b      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	227f      	movs	r2, #127	; 0x7f
 800465c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004660:	e016      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466a:	d10d      	bne.n	8004688 <HAL_UART_Receive_IT+0xcc>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_UART_Receive_IT+0xc2>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	227f      	movs	r2, #127	; 0x7f
 8004678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800467c:	e008      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	223f      	movs	r2, #63	; 0x3f
 8004682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive_IT+0xd4>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2222      	movs	r2, #34	; 0x22
 800469a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b4:	d107      	bne.n	80046c6 <HAL_UART_Receive_IT+0x10a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <HAL_UART_Receive_IT+0x13c>)
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
 80046c4:	e002      	b.n	80046cc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_UART_Receive_IT+0x140>)
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80046e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	0800521f 	.word	0x0800521f
 80046fc:	08005179 	.word	0x08005179

08004700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d113      	bne.n	8004756 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80eb 	beq.w	8004922 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
      }
      return;
 8004754:	e0e5      	b.n	8004922 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80c0 	beq.w	80048de <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80b5 	beq.w	80048de <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_UART_IRQHandler+0x9c>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <HAL_UART_IRQHandler+0xc4>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2202      	movs	r2, #2
 80047b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <HAL_UART_IRQHandler+0xec>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2204      	movs	r2, #4
 80047de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e4:	f043 0202 	orr.w	r2, r3, #2
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d013      	beq.n	800481e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2208      	movs	r2, #8
 8004810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004816:	f043 0208 	orr.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d07f      	beq.n	8004926 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d004      	beq.n	8004868 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004864:	2b00      	cmp	r3, #0
 8004866:	d031      	beq.n	80048cc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fc36 	bl	80050da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d123      	bne.n	80048c4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_UART_IRQHandler+0x234>)
 800489a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd faee 	bl	8001e82 <HAL_DMA_Abort_IT>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ba:	e00e      	b.n	80048da <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f845 	bl	800494c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c2:	e00a      	b.n	80048da <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f841 	bl	800494c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	e006      	b.n	80048da <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f83d 	bl	800494c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048d8:	e025      	b.n	8004926 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048da:	bf00      	nop
    return;
 80048dc:	e023      	b.n	8004926 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
    }
    return;
 8004902:	e012      	b.n	800492a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <HAL_UART_IRQHandler+0x22c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fc14 	bl	8005146 <UART_EndTransmit_IT>
    return;
 800491e:	bf00      	nop
 8004920:	e004      	b.n	800492c <HAL_UART_IRQHandler+0x22c>
      return;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <HAL_UART_IRQHandler+0x22c>
    return;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <HAL_UART_IRQHandler+0x22c>
    return;
 800492a:	bf00      	nop
  }

}
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	0800511b 	.word	0x0800511b

08004938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4bb1      	ldr	r3, [pc, #708]	; (8004c54 <UART_SetConfig+0x2f4>)
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	430b      	orrs	r3, r1
 800499a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a9f      	ldr	r2, [pc, #636]	; (8004c58 <UART_SetConfig+0x2f8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d121      	bne.n	8004a24 <UART_SetConfig+0xc4>
 80049e0:	4b9e      	ldr	r3, [pc, #632]	; (8004c5c <UART_SetConfig+0x2fc>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d816      	bhi.n	8004a1c <UART_SetConfig+0xbc>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x94>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a11 	.word	0x08004a11
 80049fc:	08004a0b 	.word	0x08004a0b
 8004a00:	08004a17 	.word	0x08004a17
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e151      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e14e      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a10:	2304      	movs	r3, #4
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e14b      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a16:	2308      	movs	r3, #8
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e148      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	bf00      	nop
 8004a22:	e144      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a8d      	ldr	r2, [pc, #564]	; (8004c60 <UART_SetConfig+0x300>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d134      	bne.n	8004a98 <UART_SetConfig+0x138>
 8004a2e:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d829      	bhi.n	8004a90 <UART_SetConfig+0x130>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0xe4>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a91 	.word	0x08004a91
 8004a4c:	08004a91 	.word	0x08004a91
 8004a50:	08004a91 	.word	0x08004a91
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004a91 	.word	0x08004a91
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004a7f 	.word	0x08004a7f
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a91 	.word	0x08004a91
 8004a74:	08004a8b 	.word	0x08004a8b
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e117      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e114      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a84:	2304      	movs	r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e111      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e10e      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a90:	2310      	movs	r3, #16
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	bf00      	nop
 8004a96:	e10a      	b.n	8004cae <UART_SetConfig+0x34e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a71      	ldr	r2, [pc, #452]	; (8004c64 <UART_SetConfig+0x304>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d120      	bne.n	8004ae4 <UART_SetConfig+0x184>
 8004aa2:	4b6e      	ldr	r3, [pc, #440]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d00f      	beq.n	8004ad0 <UART_SetConfig+0x170>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d802      	bhi.n	8004aba <UART_SetConfig+0x15a>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <UART_SetConfig+0x164>
 8004ab8:	e010      	b.n	8004adc <UART_SetConfig+0x17c>
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d005      	beq.n	8004aca <UART_SetConfig+0x16a>
 8004abe:	2b30      	cmp	r3, #48	; 0x30
 8004ac0:	d009      	beq.n	8004ad6 <UART_SetConfig+0x176>
 8004ac2:	e00b      	b.n	8004adc <UART_SetConfig+0x17c>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e0f1      	b.n	8004cae <UART_SetConfig+0x34e>
 8004aca:	2302      	movs	r3, #2
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e0ee      	b.n	8004cae <UART_SetConfig+0x34e>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e0eb      	b.n	8004cae <UART_SetConfig+0x34e>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e0e8      	b.n	8004cae <UART_SetConfig+0x34e>
 8004adc:	2310      	movs	r3, #16
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	bf00      	nop
 8004ae2:	e0e4      	b.n	8004cae <UART_SetConfig+0x34e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5f      	ldr	r2, [pc, #380]	; (8004c68 <UART_SetConfig+0x308>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d120      	bne.n	8004b30 <UART_SetConfig+0x1d0>
 8004aee:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d00f      	beq.n	8004b1c <UART_SetConfig+0x1bc>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d802      	bhi.n	8004b06 <UART_SetConfig+0x1a6>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <UART_SetConfig+0x1b0>
 8004b04:	e010      	b.n	8004b28 <UART_SetConfig+0x1c8>
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d005      	beq.n	8004b16 <UART_SetConfig+0x1b6>
 8004b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b0c:	d009      	beq.n	8004b22 <UART_SetConfig+0x1c2>
 8004b0e:	e00b      	b.n	8004b28 <UART_SetConfig+0x1c8>
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e0cb      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b16:	2302      	movs	r3, #2
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e0c8      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e0c5      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b22:	2308      	movs	r3, #8
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e0c2      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	bf00      	nop
 8004b2e:	e0be      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4d      	ldr	r2, [pc, #308]	; (8004c6c <UART_SetConfig+0x30c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d124      	bne.n	8004b84 <UART_SetConfig+0x224>
 8004b3a:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b48:	d012      	beq.n	8004b70 <UART_SetConfig+0x210>
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d802      	bhi.n	8004b56 <UART_SetConfig+0x1f6>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <UART_SetConfig+0x204>
 8004b54:	e012      	b.n	8004b7c <UART_SetConfig+0x21c>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5a:	d006      	beq.n	8004b6a <UART_SetConfig+0x20a>
 8004b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b60:	d009      	beq.n	8004b76 <UART_SetConfig+0x216>
 8004b62:	e00b      	b.n	8004b7c <UART_SetConfig+0x21c>
 8004b64:	2300      	movs	r3, #0
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e0a1      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e09e      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b70:	2304      	movs	r3, #4
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e09b      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b76:	2308      	movs	r3, #8
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e098      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	bf00      	nop
 8004b82:	e094      	b.n	8004cae <UART_SetConfig+0x34e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <UART_SetConfig+0x310>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d124      	bne.n	8004bd8 <UART_SetConfig+0x278>
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d012      	beq.n	8004bc4 <UART_SetConfig+0x264>
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d802      	bhi.n	8004baa <UART_SetConfig+0x24a>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <UART_SetConfig+0x258>
 8004ba8:	e012      	b.n	8004bd0 <UART_SetConfig+0x270>
 8004baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bae:	d006      	beq.n	8004bbe <UART_SetConfig+0x25e>
 8004bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bb4:	d009      	beq.n	8004bca <UART_SetConfig+0x26a>
 8004bb6:	e00b      	b.n	8004bd0 <UART_SetConfig+0x270>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e077      	b.n	8004cae <UART_SetConfig+0x34e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e074      	b.n	8004cae <UART_SetConfig+0x34e>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e071      	b.n	8004cae <UART_SetConfig+0x34e>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e06e      	b.n	8004cae <UART_SetConfig+0x34e>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	bf00      	nop
 8004bd6:	e06a      	b.n	8004cae <UART_SetConfig+0x34e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <UART_SetConfig+0x314>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d124      	bne.n	8004c2c <UART_SetConfig+0x2cc>
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d012      	beq.n	8004c18 <UART_SetConfig+0x2b8>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d802      	bhi.n	8004bfe <UART_SetConfig+0x29e>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <UART_SetConfig+0x2ac>
 8004bfc:	e012      	b.n	8004c24 <UART_SetConfig+0x2c4>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	d006      	beq.n	8004c12 <UART_SetConfig+0x2b2>
 8004c04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c08:	d009      	beq.n	8004c1e <UART_SetConfig+0x2be>
 8004c0a:	e00b      	b.n	8004c24 <UART_SetConfig+0x2c4>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e04d      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e04a      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e047      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e044      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	bf00      	nop
 8004c2a:	e040      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <UART_SetConfig+0x318>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d139      	bne.n	8004caa <UART_SetConfig+0x34a>
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <UART_SetConfig+0x2fc>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c44:	d027      	beq.n	8004c96 <UART_SetConfig+0x336>
 8004c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c4a:	d817      	bhi.n	8004c7c <UART_SetConfig+0x31c>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01c      	beq.n	8004c8a <UART_SetConfig+0x32a>
 8004c50:	e027      	b.n	8004ca2 <UART_SetConfig+0x342>
 8004c52:	bf00      	nop
 8004c54:	efff69f3 	.word	0xefff69f3
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	40007800 	.word	0x40007800
 8004c78:	40007c00 	.word	0x40007c00
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	d006      	beq.n	8004c90 <UART_SetConfig+0x330>
 8004c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c86:	d009      	beq.n	8004c9c <UART_SetConfig+0x33c>
 8004c88:	e00b      	b.n	8004ca2 <UART_SetConfig+0x342>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e00e      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c90:	2302      	movs	r3, #2
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e00b      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c96:	2304      	movs	r3, #4
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e008      	b.n	8004cae <UART_SetConfig+0x34e>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e005      	b.n	8004cae <UART_SetConfig+0x34e>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	bf00      	nop
 8004ca8:	e001      	b.n	8004cae <UART_SetConfig+0x34e>
 8004caa:	2310      	movs	r3, #16
 8004cac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb6:	d17c      	bne.n	8004db2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004cb8:	7ffb      	ldrb	r3, [r7, #31]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d859      	bhi.n	8004d72 <UART_SetConfig+0x412>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x364>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d73 	.word	0x08004d73
 8004cd4:	08004d3d 	.word	0x08004d3d
 8004cd8:	08004d73 	.word	0x08004d73
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004d73 	.word	0x08004d73
 8004ce4:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ce8:	f7fd fee2 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8004cec:	4603      	mov	r3, r0
 8004cee:	005a      	lsls	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	441a      	add	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	61bb      	str	r3, [r7, #24]
        break;
 8004d04:	e038      	b.n	8004d78 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d06:	f7fd fee7 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e029      	b.n	8004d78 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085a      	lsrs	r2, r3, #1
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <UART_SetConfig+0x540>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6852      	ldr	r2, [r2, #4]
 8004d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e01d      	b.n	8004d78 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d3c:	f7fd fdfa 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8004d40:	4603      	mov	r3, r0
 8004d42:	005a      	lsls	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	441a      	add	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	61bb      	str	r3, [r7, #24]
        break;
 8004d58:	e00e      	b.n	8004d78 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e002      	b.n	8004d78 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
        break;
 8004d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b0f      	cmp	r3, #15
 8004d7c:	d916      	bls.n	8004dac <UART_SetConfig+0x44c>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d212      	bcs.n	8004dac <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	89fa      	ldrh	r2, [r7, #14]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e06e      	b.n	8004e8a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
 8004db0:	e06b      	b.n	8004e8a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d857      	bhi.n	8004e68 <UART_SetConfig+0x508>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x460>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004e01 	.word	0x08004e01
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004e69 	.word	0x08004e69
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08004e69 	.word	0x08004e69
 8004dd8:	08004e69 	.word	0x08004e69
 8004ddc:	08004e69 	.word	0x08004e69
 8004de0:	08004e51 	.word	0x08004e51
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004de4:	f7fd fe64 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	61bb      	str	r3, [r7, #24]
        break;
 8004dfe:	e036      	b.n	8004e6e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e00:	f7fd fe6a 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	441a      	add	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	61bb      	str	r3, [r7, #24]
        break;
 8004e1a:	e028      	b.n	8004e6e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	085a      	lsrs	r2, r3, #1
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <UART_SetConfig+0x544>)
 8004e24:	4413      	add	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6852      	ldr	r2, [r2, #4]
 8004e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e01c      	b.n	8004e6e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e34:	f7fd fd7e 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	61bb      	str	r3, [r7, #24]
        break;
 8004e4e:	e00e      	b.n	8004e6e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	61bb      	str	r3, [r7, #24]
        break;
 8004e66:	e002      	b.n	8004e6e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d908      	bls.n	8004e86 <UART_SetConfig+0x526>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7a:	d204      	bcs.n	8004e86 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e001      	b.n	8004e8a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	01e84800 	.word	0x01e84800
 8004ea4:	00f42400 	.word	0x00f42400

08004ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa6:	d10a      	bne.n	8004fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ffa:	f7fc fe25 	bl	8001c48 <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d10e      	bne.n	800502c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f814 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e00a      	b.n	8005042 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	e02a      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005062:	d026      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fc fdf0 	bl	8001c48 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <UART_WaitOnFlagUntilTimeout+0x30>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11b      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005088:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e00f      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d0c5      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050f0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fc07 	bl	800494c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fbe4 	bl	8004938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005186:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518c:	2b22      	cmp	r3, #34	; 0x22
 800518e:	d13a      	bne.n	8005206 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	b2d9      	uxtb	r1, r3
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	400a      	ands	r2, r1
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d121      	bne.n	8005216 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc f97a 	bl	80014f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005204:	e007      	b.n	8005216 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0208 	orr.w	r2, r2, #8
 8005214:	619a      	str	r2, [r3, #24]
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800522c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	2b22      	cmp	r3, #34	; 0x22
 8005234:	d13a      	bne.n	80052ac <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005244:	89ba      	ldrh	r2, [r7, #12]
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	4013      	ands	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d121      	bne.n	80052bc <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005286:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fc f927 	bl	80014f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052aa:	e007      	b.n	80052bc <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4e0d      	ldr	r6, [pc, #52]	; (80052fc <__libc_init_array+0x38>)
 80052c8:	4c0d      	ldr	r4, [pc, #52]	; (8005300 <__libc_init_array+0x3c>)
 80052ca:	1ba4      	subs	r4, r4, r6
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	2500      	movs	r5, #0
 80052d0:	42a5      	cmp	r5, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	4e0b      	ldr	r6, [pc, #44]	; (8005304 <__libc_init_array+0x40>)
 80052d6:	4c0c      	ldr	r4, [pc, #48]	; (8005308 <__libc_init_array+0x44>)
 80052d8:	f000 f820 	bl	800531c <_init>
 80052dc:	1ba4      	subs	r4, r4, r6
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	2500      	movs	r5, #0
 80052e2:	42a5      	cmp	r5, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ec:	4798      	blx	r3
 80052ee:	3501      	adds	r5, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f6:	4798      	blx	r3
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08005354 	.word	0x08005354
 8005300:	08005354 	.word	0x08005354
 8005304:	08005354 	.word	0x08005354
 8005308:	0800535c 	.word	0x0800535c

0800530c <memset>:
 800530c:	4402      	add	r2, r0
 800530e:	4603      	mov	r3, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <_init>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr

08005328 <_fini>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr
