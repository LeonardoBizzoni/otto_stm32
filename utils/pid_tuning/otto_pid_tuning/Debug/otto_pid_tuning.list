
otto_pid_tuning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005598  08005598  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a0  080055a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000000c  080055b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080055b8  00020398  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc04  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e88  00000000  00000000  0002dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281fd  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bc9  00000000  00000000  000596ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1ce8  00000000  00000000  00063276  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  00154fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005568 	.word	0x08005568

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005568 	.word	0x08005568

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7Encoder8GetCountEv>:

  Encoder(TIM_HandleTypeDef *timer);

  void Setup();

  int GetCount() {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    int count = ((int) __HAL_TIM_GET_COUNTER(this->timer_)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        - ((this->timer_->Init.Period) / 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
    return count;
 8000554:	68fb      	ldr	r3, [r7, #12]
  }
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period) / 2);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include "encoder.h"

Encoder::Encoder(TIM_HandleTypeDef *timer) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x30>)
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x34>)
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x38>)
 80005a2:	619a      	str	r2, [r3, #24]
  timer_ = timer;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	00012110 	.word	0x00012110
 80005bc:	40490fd0 	.word	0x40490fd0
 80005c0:	3f40ff97 	.word	0x3f40ff97

080005c4 <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	213c      	movs	r1, #60	; 0x3c
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f8b0 	bl	8003738 <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffc2 	bl	8000562 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005e4:	f001 fba2 	bl	8001d2c <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	609a      	str	r2, [r3, #8]
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 8000606:	f001 fb91 	bl	8001d2c <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff91 	bl	8000538 <_ZN7Encoder8GetCountEv>
 8000616:	4602      	mov	r2, r0
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffa0 	bl	8000562 <_ZN7Encoder10ResetCountEv>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <_ZN7Encoder17GetLinearVelocityEv>:
  float meters = ((float) this->ticks_ * kWheelCircumference)
      / kTicksPerRevolution;
  return meters;
}

float Encoder::GetLinearVelocity() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffde 	bl	80005f6 <_ZN7Encoder12UpdateValuesEv>
  float meters = ((float) this->ticks_ * kWheelCircumference)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a06 	vldr	s15, [r3, #24]
 800064c:	ee67 6a27 	vmul.f32	s13, s14, s15
      / kTicksPerRevolution;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	ee07 3a90 	vmov	s15, r3
 8000658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  float meters = ((float) this->ticks_ * kWheelCircumference)
 800065c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000660:	edc7 7a05 	vstr	s15, [r7, #20]
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000676:	edc7 7a04 	vstr	s15, [r7, #16]
  if (deltaTime == 0)
 800067a:	edd7 7a04 	vldr	s15, [r7, #16]
 800067e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	d102      	bne.n	800068e <_ZN7Encoder17GetLinearVelocityEv+0x62>
    return 0;
 8000688:	f04f 0300 	mov.w	r3, #0
 800068c:	e00c      	b.n	80006a8 <_ZN7Encoder17GetLinearVelocityEv+0x7c>
  float linear_velocity = (meters / (deltaTime / 1000));
 800068e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000692:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006b8 <_ZN7Encoder17GetLinearVelocityEv+0x8c>
 8000696:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800069a:	edd7 6a05 	vldr	s13, [r7, #20]
 800069e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a2:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	ee07 3a90 	vmov	s15, r3
}
 80006ac:	eeb0 0a67 	vmov.f32	s0, s15
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	447a0000 	.word	0x447a0000

080006bc <_ZN7EncoderC1Ev>:
  Encoder() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <_ZN7EncoderC1Ev+0x30>)
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <_ZN7EncoderC1Ev+0x34>)
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <_ZN7EncoderC1Ev+0x38>)
 80006d4:	619a      	str	r2, [r3, #24]
    timer_ = NULL;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
  }
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	00012110 	.word	0x00012110
 80006f0:	40490fd0 	.word	0x40490fd0
 80006f4:	3f40ff97 	.word	0x3f40ff97

080006f8 <_ZN8OdometryC1E7EncoderS0_>:
    left_encoder_ = NULL;
    right_encoder_ = NULL;
    kBaseline = 0.35;  //in meters
  }

  Odometry(Encoder left, Encoder right) {
 80006f8:	b084      	sub	sp, #16
 80006fa:	b5b0      	push	{r4, r5, r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	f107 001c 	add.w	r0, r7, #28
 8000706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffd5 	bl	80006bc <_ZN7EncoderC1Ev>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	331c      	adds	r3, #28
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffd0 	bl	80006bc <_ZN7EncoderC1Ev>

    left_encoder_ = left;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 041c 	add.w	r4, r7, #28
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800072c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    right_encoder_ = right;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 041c 	add.w	r4, r3, #28
 8000736:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    kBaseline = 0.35;  //in meters
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <_ZN8OdometryC1E7EncoderS0_+0x64>)
 800074a:	639a      	str	r2, [r3, #56]	; 0x38
  }
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000758:	b004      	add	sp, #16
 800075a:	4770      	bx	lr
 800075c:	3eb33333 	.word	0x3eb33333

08000760 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
  GPIO_TypeDef *dir_gpio_port_;
  uint16_t dir_pin_;
  TIM_HandleTypeDef *pwm_timer_;
  uint32_t pwm_channel_;

  MotorController(GPIO_TypeDef *sleep_gpio_port, uint16_t sleep_pin,
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	80fb      	strh	r3, [r7, #6]
                  GPIO_TypeDef *dir_gpio_port, uint16_t dir_pin,
                  TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel) {
    this->sleep_gpio_port_ = sleep_gpio_port;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	601a      	str	r2, [r3, #0]
    this->sleep_pin_ = sleep_pin;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	809a      	strh	r2, [r3, #4]
    this->dir_gpio_port_ = dir_gpio_port;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	609a      	str	r2, [r3, #8]
    this->dir_pin_ = dir_pin;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	8b3a      	ldrh	r2, [r7, #24]
 8000786:	819a      	strh	r2, [r3, #12]
    this->pwm_timer_ = pwm_timer;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	69fa      	ldr	r2, [r7, #28]
 800078c:	611a      	str	r2, [r3, #16]
    this->pwm_channel_ = pwm_channel;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6a3a      	ldr	r2, [r7, #32]
 8000792:	615a      	str	r2, [r3, #20]
  }
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4618      	mov	r0, r3
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <_ZN15MotorController5setupEv>:

  void setup() {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm_timer_, pwm_channel_);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691a      	ldr	r2, [r3, #16]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4610      	mov	r0, r2
 80007b6:	f002 fee9 	bl	800358c <HAL_TIM_PWM_Start>
  }
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <_ZN15MotorController9set_speedEi>:

  void set_speed(int duty_cycle) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    if (duty_cycle >= 0) {
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	f2c0 8083 	blt.w	80008dc <_ZN15MotorController9set_speedEi+0x118>
//      HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_SET);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 fdaf 	bl	8002344 <HAL_GPIO_WritePin>
      if (duty_cycle > 790)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f240 3216 	movw	r2, #790	; 0x316
 80007ec:	4293      	cmp	r3, r2
 80007ee:	dd3d      	ble.n	800086c <_ZN15MotorController9set_speedEi+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d106      	bne.n	8000806 <_ZN15MotorController9set_speedEi+0x42>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f240 3216 	movw	r2, #790	; 0x316
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
      else
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
    }

  }
 8000804:	e0f5      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d106      	bne.n	800081c <_ZN15MotorController9set_speedEi+0x58>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f240 3216 	movw	r2, #790	; 0x316
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
  }
 800081a:	e0ea      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	2b08      	cmp	r3, #8
 8000822:	d106      	bne.n	8000832 <_ZN15MotorController9set_speedEi+0x6e>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f240 3216 	movw	r2, #790	; 0x316
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 8000830:	e0df      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	2b0c      	cmp	r3, #12
 8000838:	d106      	bne.n	8000848 <_ZN15MotorController9set_speedEi+0x84>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f240 3216 	movw	r2, #790	; 0x316
 8000844:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8000846:	e0d4      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	2b10      	cmp	r3, #16
 800084e:	d106      	bne.n	800085e <_ZN15MotorController9set_speedEi+0x9a>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f240 3216 	movw	r2, #790	; 0x316
 800085a:	659a      	str	r2, [r3, #88]	; 0x58
  }
 800085c:	e0c9      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f240 3216 	movw	r2, #790	; 0x316
 8000868:	65da      	str	r2, [r3, #92]	; 0x5c
  }
 800086a:	e0c2      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <_ZN15MotorController9set_speedEi+0xbc>
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  }
 800087e:	e0b8      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d105      	bne.n	8000894 <_ZN15MotorController9set_speedEi+0xd0>
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
  }
 8000892:	e0ae      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	2b08      	cmp	r3, #8
 800089a:	d105      	bne.n	80008a8 <_ZN15MotorController9set_speedEi+0xe4>
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 80008a6:	e0a4      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	2b0c      	cmp	r3, #12
 80008ae:	d105      	bne.n	80008bc <_ZN15MotorController9set_speedEi+0xf8>
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
  }
 80008ba:	e09a      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	2b10      	cmp	r3, #16
 80008c2:	d105      	bne.n	80008d0 <_ZN15MotorController9set_speedEi+0x10c>
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	659a      	str	r2, [r3, #88]	; 0x58
  }
 80008ce:	e090      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }
 80008da:	e08a      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
    } else if (duty_cycle < 100){
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b63      	cmp	r3, #99	; 0x63
 80008e0:	f300 8087 	bgt.w	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_RESET);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6898      	ldr	r0, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	899b      	ldrh	r3, [r3, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	f001 fd28 	bl	8002344 <HAL_GPIO_WritePin>
      if (duty_cycle < -790)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	4a41      	ldr	r2, [pc, #260]	; (80009fc <_ZN15MotorController9set_speedEi+0x238>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	da3d      	bge.n	8000978 <_ZN15MotorController9set_speedEi+0x1b4>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d106      	bne.n	8000912 <_ZN15MotorController9set_speedEi+0x14e>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f240 3216 	movw	r2, #790	; 0x316
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  }
 8000910:	e06f      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d106      	bne.n	8000928 <_ZN15MotorController9set_speedEi+0x164>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f240 3216 	movw	r2, #790	; 0x316
 8000924:	639a      	str	r2, [r3, #56]	; 0x38
  }
 8000926:	e064      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	2b08      	cmp	r3, #8
 800092e:	d106      	bne.n	800093e <_ZN15MotorController9set_speedEi+0x17a>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f240 3216 	movw	r2, #790	; 0x316
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 800093c:	e059      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	2b0c      	cmp	r3, #12
 8000944:	d106      	bne.n	8000954 <_ZN15MotorController9set_speedEi+0x190>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f240 3216 	movw	r2, #790	; 0x316
 8000950:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8000952:	e04e      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	2b10      	cmp	r3, #16
 800095a:	d106      	bne.n	800096a <_ZN15MotorController9set_speedEi+0x1a6>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f240 3216 	movw	r2, #790	; 0x316
 8000966:	659a      	str	r2, [r3, #88]	; 0x58
  }
 8000968:	e043      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 790);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f240 3216 	movw	r2, #790	; 0x316
 8000974:	65da      	str	r2, [r3, #92]	; 0x5c
  }
 8000976:	e03c      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d106      	bne.n	800098e <_ZN15MotorController9set_speedEi+0x1ca>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	425a      	negs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  }
 800098c:	e031      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	2b04      	cmp	r3, #4
 8000994:	d106      	bne.n	80009a4 <_ZN15MotorController9set_speedEi+0x1e0>
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	425a      	negs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
 80009a2:	e026      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d106      	bne.n	80009ba <_ZN15MotorController9set_speedEi+0x1f6>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	425a      	negs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 80009b8:	e01b      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	2b0c      	cmp	r3, #12
 80009c0:	d106      	bne.n	80009d0 <_ZN15MotorController9set_speedEi+0x20c>
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	425a      	negs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
  }
 80009ce:	e010      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	2b10      	cmp	r3, #16
 80009d6:	d106      	bne.n	80009e6 <_ZN15MotorController9set_speedEi+0x222>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	425a      	negs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	659a      	str	r2, [r3, #88]	; 0x58
  }
 80009e4:	e005      	b.n	80009f2 <_ZN15MotorController9set_speedEi+0x22e>
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	425a      	negs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	fffffcea 	.word	0xfffffcea

08000a00 <_ZN15MotorController5brakeEv>:

  void brake() {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <_ZN15MotorController5brakeEv+0x1c>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  }
 8000a1a:	e02c      	b.n	8000a76 <_ZN15MotorController5brakeEv+0x76>
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d105      	bne.n	8000a30 <_ZN15MotorController5brakeEv+0x30>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
 8000a2e:	e022      	b.n	8000a76 <_ZN15MotorController5brakeEv+0x76>
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d105      	bne.n	8000a44 <_ZN15MotorController5brakeEv+0x44>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 8000a42:	e018      	b.n	8000a76 <_ZN15MotorController5brakeEv+0x76>
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	2b0c      	cmp	r3, #12
 8000a4a:	d105      	bne.n	8000a58 <_ZN15MotorController5brakeEv+0x58>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8000a56:	e00e      	b.n	8000a76 <_ZN15MotorController5brakeEv+0x76>
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	2b10      	cmp	r3, #16
 8000a5e:	d105      	bne.n	8000a6c <_ZN15MotorController5brakeEv+0x6c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2200      	movs	r2, #0
 8000a68:	659a      	str	r2, [r3, #88]	; 0x58
  }
 8000a6a:	e004      	b.n	8000a76 <_ZN15MotorController5brakeEv+0x76>
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	65da      	str	r2, [r3, #92]	; 0x5c
  }
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_ZN3PidC1Efff>:
  float previous_error_;

//  int min_;
//  int max_;

  Pid(float kp, float ki, float kd) {
 8000a82:	b480      	push	{r7}
 8000a84:	b087      	sub	sp, #28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a8e:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a92:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
    this->error_sum_index_ = 0;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    for (int i = 0; i < 10; i++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	dc0c      	bgt.n	8000aea <_ZN3PidC1Efff+0x68>
      this->error_sum_array_[i] = 0;
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	3304      	adds	r3, #4
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 10; i++) {
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e7ef      	b.n	8000aca <_ZN3PidC1Efff+0x48>
    }

  }
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4618      	mov	r0, r3
 8000aee:	371c      	adds	r7, #28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_ZN3Pid6configEfff>:

  void config(float kp, float ki, float kd) {
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b04:	edc7 0a01 	vstr	s1, [r7, #4]
 8000b08:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
    this->error_sum_index_ = 0;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    for (int i = 0; i < 10; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	dc0c      	bgt.n	8000b60 <_ZN3Pid6configEfff+0x68>
      this->error_sum_array_[i] = 0;
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	3304      	adds	r3, #4
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 10; i++) {
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e7ef      	b.n	8000b40 <_ZN3Pid6configEfff+0x48>
    }
  }
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_ZN3Pid3setEf>:

  void set(float setpoint) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	ed87 0a00 	vstr	s0, [r7]
    this->setpoint_ = setpoint;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	611a      	str	r2, [r3, #16]
  }
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_ZN3Pid6updateEf>:

  int update(float measure) {
 8000b8a:	b480      	push	{r7}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	ed87 0a00 	vstr	s0, [r7]

    this->error_ = this->setpoint_ - measure;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b9c:	edd7 7a00 	vldr	s15, [r7]
 8000ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edc3 7a03 	vstr	s15, [r3, #12]

    //proportional term
    float output = this->error_ * this->kp_;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edd3 7a00 	vldr	s15, [r3]
 8000bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bba:	edc7 7a03 	vstr	s15, [r7, #12]

    //integral term
    if (this->error_sum_index_ == 10) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d107      	bne.n	8000bd6 <_ZN3Pid6updateEf+0x4c>
      this->error_sum_array_[0] = this->error_;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	615a      	str	r2, [r3, #20]
      this->error_sum_index_ = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd4:	e00e      	b.n	8000bf4 <_ZN3Pid6updateEf+0x6a>
    } else {
      this->error_sum_array_[this->error_sum_index_] = this->error_;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68d2      	ldr	r2, [r2, #12]
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3304      	adds	r3, #4
 8000be8:	601a      	str	r2, [r3, #0]
      this->error_sum_index_++;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    float error_sum = 0;
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	dc11      	bgt.n	8000c28 <_ZN3Pid6updateEf+0x9e>
      error_sum += this->error_sum_array_[i];
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	3304      	adds	r3, #4
 8000c10:	edd3 7a00 	vldr	s15, [r3]
 8000c14:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 10; i++) {
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	3301      	adds	r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	e7ea      	b.n	8000bfe <_ZN3Pid6updateEf+0x74>
    }

    output += error_sum * this->ki_;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a03 	vstr	s15, [r7, #12]

    //derivative term
    output += (this->error_ - this->previous_error_);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c52:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5a:	edc7 7a03 	vstr	s15, [r7, #12]
    this->previous_error_ = this->error_;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40

    int integer_output = (int) output;
 8000c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6e:	ee17 3a90 	vmov	r3, s15
 8000c72:	60bb      	str	r3, [r7, #8]

    return integer_output;
 8000c74:	68bb      	ldr	r3, [r7, #8]

  }
 8000c76:	4618      	mov	r0, r3
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 ffff 	bl	8001c8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f86e 	bl	8000d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 fb46 	bl	8001320 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000c94:	f000 f910 	bl	8000eb8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000c98:	f000 f96c 	bl	8000f74 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000c9c:	f000 f9c8 	bl	8001030 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000ca0:	f000 fa66 	bl	8001170 <_ZL12MX_TIM5_Initv>
  MX_USART6_UART_Init();
 8000ca4:	f000 fb06 	bl	80012b4 <_ZL19MX_USART6_UART_Initv>
  MX_TIM6_Init();
 8000ca8:	f000 fac2 	bl	8001230 <_ZL12MX_TIM6_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cac:	f000 f8e8 	bl	8000e80 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  left_encoder.Setup();
 8000cb0:	4823      	ldr	r0, [pc, #140]	; (8000d40 <main+0xbc>)
 8000cb2:	f7ff fc87 	bl	80005c4 <_ZN7Encoder5SetupEv>
  right_encoder.Setup();
 8000cb6:	4823      	ldr	r0, [pc, #140]	; (8000d44 <main+0xc0>)
 8000cb8:	f7ff fc84 	bl	80005c4 <_ZN7Encoder5SetupEv>

  left_motor.setup();
 8000cbc:	4822      	ldr	r0, [pc, #136]	; (8000d48 <main+0xc4>)
 8000cbe:	f7ff fd70 	bl	80007a2 <_ZN15MotorController5setupEv>
  right_motor.setup();
 8000cc2:	4822      	ldr	r0, [pc, #136]	; (8000d4c <main+0xc8>)
 8000cc4:	f7ff fd6d 	bl	80007a2 <_ZN15MotorController5setupEv>

  tx_buffer = (uint8_t*) &output_msg;
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <main+0xcc>)
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <main+0xd0>)
 8000ccc:	601a      	str	r2, [r3, #0]
  rx_buffer = (uint8_t*) &input_msg;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <main+0xd4>)
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <main+0xd8>)
 8000cd2:	601a      	str	r2, [r3, #0]

  //Enables UART RX interrupt
  HAL_UART_Receive_IT(&huart6, rx_buffer, 20);
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <main+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2214      	movs	r2, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <main+0xdc>)
 8000cde:	f003 fd93 	bl	8004808 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    left_velocity = left_encoder.GetCount();
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <main+0xbc>)
 8000ce4:	f7ff fc28 	bl	8000538 <_ZN7Encoder8GetCountEv>
 8000ce8:	ee07 0a90 	vmov	s15, r0
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <main+0xe0>)
 8000cf2:	edc3 7a00 	vstr	s15, [r3]
    right_velocity = right_encoder.GetCount();
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <main+0xc0>)
 8000cf8:	f7ff fc1e 	bl	8000538 <_ZN7Encoder8GetCountEv>
 8000cfc:	ee07 0a90 	vmov	s15, r0
 8000d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <main+0xe4>)
 8000d06:	edc3 7a00 	vstr	s15, [r3]
    right_motor.set_speed(100);
 8000d0a:	2164      	movs	r1, #100	; 0x64
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <main+0xc8>)
 8000d0e:	f7ff fd59 	bl	80007c4 <_ZN15MotorController9set_speedEi>
    left_motor.set_speed(100);
 8000d12:	2164      	movs	r1, #100	; 0x64
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <main+0xc4>)
 8000d16:	f7ff fd55 	bl	80007c4 <_ZN15MotorController9set_speedEi>

    HAL_Delay(1000);
 8000d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1e:	f001 f811 	bl	8001d44 <HAL_Delay>

    right_motor.set_speed(-50);
 8000d22:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <main+0xc8>)
 8000d28:	f7ff fd4c 	bl	80007c4 <_ZN15MotorController9set_speedEi>
    left_motor.set_speed(-50);
 8000d2c:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <main+0xc4>)
 8000d32:	f7ff fd47 	bl	80007c4 <_ZN15MotorController9set_speedEi>

    HAL_Delay(1000);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f001 f803 	bl	8001d44 <HAL_Delay>
    left_velocity = left_encoder.GetCount();
 8000d3e:	e7d0      	b.n	8000ce2 <main+0x5e>
 8000d40:	20000204 	.word	0x20000204
 8000d44:	200001e8 	.word	0x200001e8
 8000d48:	20000358 	.word	0x20000358
 8000d4c:	20000340 	.word	0x20000340
 8000d50:	20000370 	.word	0x20000370
 8000d54:	2000038c 	.word	0x2000038c
 8000d58:	20000374 	.word	0x20000374
 8000d5c:	20000378 	.word	0x20000378
 8000d60:	20000168 	.word	0x20000168
 8000d64:	20000268 	.word	0x20000268
 8000d68:	2000026c 	.word	0x2000026c

08000d6c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0b8      	sub	sp, #224	; 0xe0
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d76:	2234      	movs	r2, #52	; 0x34
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fbec 	bl	8005558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	2290      	movs	r2, #144	; 0x90
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fbdd 	bl	8005558 <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <_Z18SystemClock_Configv+0x10c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <_Z18SystemClock_Configv+0x10c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <_Z18SystemClock_Configv+0x10c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <_Z18SystemClock_Configv+0x110>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <_Z18SystemClock_Configv+0x110>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <_Z18SystemClock_Configv+0x110>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dde:	2310      	movs	r3, #16
 8000de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fada 	bl	80023a8 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <_Z18SystemClock_Configv+0x9c>
    Error_Handler();
 8000e04:	f000 fc86 	bl	8001714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fd2d 	bl	800288c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <_Z18SystemClock_Configv+0xda>
    Error_Handler();
 8000e42:	f000 fc67 	bl	8001714 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fee7 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <_Z18SystemClock_Configv+0x102>
    Error_Handler();
 8000e6a:	f000 fc53 	bl	8001714 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	37e0      	adds	r7, #224	; 0xe0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2102      	movs	r1, #2
 8000e88:	201d      	movs	r0, #29
 8000e8a:	f001 f858 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e8e:	201d      	movs	r0, #29
 8000e90:	f001 f871 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8000e94:	2202      	movs	r2, #2
 8000e96:	2102      	movs	r1, #2
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f001 f850 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e9e:	2036      	movs	r0, #54	; 0x36
 8000ea0:	f001 f869 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	2047      	movs	r0, #71	; 0x47
 8000eaa:	f001 f848 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000eae:	2047      	movs	r0, #71	; 0x47
 8000eb0:	f001 f861 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2224      	movs	r2, #36	; 0x24
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fb46 	bl	8005558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000efe:	2303      	movs	r3, #3
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f2a:	f002 fb73 	bl	8003614 <HAL_TIM_Encoder_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <_ZL12MX_TIM2_Initv+0x8a>
    Error_Handler();
 8000f3e:	f000 fbe9 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f50:	f003 fb00 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <_ZL12MX_TIM2_Initv+0xb0>
    Error_Handler();
 8000f64:	f000 fbd6 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000028 	.word	0x20000028

08000f74 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f94:	4a25      	ldr	r2, [pc, #148]	; (800102c <_ZL12MX_TIM3_Initv+0xb8>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fa8:	229f      	movs	r2, #159	; 0x9f
 8000faa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fba:	f002 fa5b 	bl	8003474 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <_ZL12MX_TIM3_Initv+0x5e>
    Error_Handler();
 8000fce:	f000 fba1 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fe0:	f002 fe18 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <_ZL12MX_TIM3_Initv+0x84>
    Error_Handler();
 8000ff4:	f000 fb8e 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <_ZL12MX_TIM3_Initv+0xb4>)
 8001006:	f003 faa5 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZL12MX_TIM3_Initv+0xaa>
    Error_Handler();
 800101a:	f000 fb7b 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000068 	.word	0x20000068
 800102c:	40000400 	.word	0x40000400

08001030 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001064:	4a41      	ldr	r2, [pc, #260]	; (800116c <_ZL12MX_TIM4_Initv+0x13c>)
 8001066:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001076:	f240 321f 	movw	r2, #799	; 0x31f
 800107a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 800108a:	f002 f9f3 	bl	8003474 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <_ZL12MX_TIM4_Initv+0x72>
    Error_Handler();
 800109e:	f000 fb39 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80010a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ac:	4619      	mov	r1, r3
 80010ae:	482e      	ldr	r0, [pc, #184]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 80010b0:	f002 fdb0 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZL12MX_TIM4_Initv+0x98>
    Error_Handler();
 80010c4:	f000 fb26 	bl	8001714 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80010c8:	4827      	ldr	r0, [pc, #156]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 80010ca:	f002 fa29 	bl	8003520 <HAL_TIM_PWM_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf14      	ite	ne
 80010d4:	2301      	movne	r3, #1
 80010d6:	2300      	moveq	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <_ZL12MX_TIM4_Initv+0xb2>
    Error_Handler();
 80010de:	f000 fb19 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	481d      	ldr	r0, [pc, #116]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 80010f2:	f003 fa2f 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL12MX_TIM4_Initv+0xda>
    Error_Handler();
 8001106:	f000 fb05 	bl	8001714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800111a:	463b      	mov	r3, r7
 800111c:	2208      	movs	r2, #8
 800111e:	4619      	mov	r1, r3
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001122:	f002 fc5f 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf14      	ite	ne
 800112c:	2301      	movne	r3, #1
 800112e:	2300      	moveq	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <_ZL12MX_TIM4_Initv+0x10a>
    Error_Handler();
 8001136:	f000 faed 	bl	8001714 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800113a:	463b      	mov	r3, r7
 800113c:	220c      	movs	r2, #12
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 8001142:	f002 fc4f 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <_ZL12MX_TIM4_Initv+0x12a>
    Error_Handler();
 8001156:	f000 fadd 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <_ZL12MX_TIM4_Initv+0x138>)
 800115c:	f000 fc66 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	; 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000a8 	.word	0x200000a8
 800116c:	40000800 	.word	0x40000800

08001170 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f004 f9ea 	bl	8005558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <_ZL12MX_TIM5_Initv+0xbc>)
 8001192:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 80011a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 80011e0:	f002 fa18 	bl	8003614 <HAL_TIM_Encoder_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_TIM5_Initv+0x88>
    Error_Handler();
 80011f4:	f000 fa8e 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <_ZL12MX_TIM5_Initv+0xb8>)
 8001206:	f003 f9a5 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <_ZL12MX_TIM5_Initv+0xae>
    Error_Handler();
 800121a:	f000 fa7b 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	; 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000e8 	.word	0x200000e8
 800122c:	40000c00 	.word	0x40000c00

08001230 <_ZL12MX_TIM6_Initv>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <_ZL12MX_TIM6_Initv+0x80>)
 8001244:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001248:	f242 720f 	movw	r2, #9999	; 0x270f
 800124c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001256:	f240 321f 	movw	r2, #799	; 0x31f
 800125a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001262:	4812      	ldr	r0, [pc, #72]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001264:	f002 f906 	bl	8003474 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_ZL12MX_TIM6_Initv+0x4c>
    Error_Handler();
 8001278:	f000 fa4c 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 800128a:	f003 f963 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZL12MX_TIM6_Initv+0x72>
    Error_Handler();
 800129e:	f000 fa39 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000128 	.word	0x20000128
 80012b0:	40001000 	.word	0x40001000

080012b4 <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <_ZL19MX_USART6_UART_Initv+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012cc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_ODD;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80012da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK) {
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <_ZL19MX_USART6_UART_Initv+0x64>)
 80012fc:	f003 f9a4 	bl	8004648 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf14      	ite	ne
 8001306:	2301      	movne	r3, #1
 8001308:	2300      	moveq	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <_ZL19MX_USART6_UART_Initv+0x60>
    Error_Handler();
 8001310:	f000 fa00 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000168 	.word	0x20000168
 800131c:	40011400 	.word	0x40011400

08001320 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a57      	ldr	r2, [pc, #348]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b52      	ldr	r3, [pc, #328]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a51      	ldr	r2, [pc, #324]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <_ZL12MX_GPIO_Initv+0x190>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, dir2_Pin | dir1_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80013cc:	4839      	ldr	r0, [pc, #228]	; (80014b4 <_ZL12MX_GPIO_Initv+0x194>)
 80013ce:	f000 ffb9 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, sleep2_Pin | sleep1_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013d8:	4836      	ldr	r0, [pc, #216]	; (80014b4 <_ZL12MX_GPIO_Initv+0x194>)
 80013da:	f000 ffb3 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <_ZL12MX_GPIO_Initv+0x198>)
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4832      	ldr	r0, [pc, #200]	; (80014bc <_ZL12MX_GPIO_Initv+0x19c>)
 80013f4:	f000 fdfc 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : current2_Pin */
  GPIO_InitStruct.Pin = current2_Pin;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current2_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	482c      	ldr	r0, [pc, #176]	; (80014bc <_ZL12MX_GPIO_Initv+0x19c>)
 800140c:	f000 fdf0 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : current1_Pin */
  GPIO_InitStruct.Pin = current1_Pin;
 8001410:	2308      	movs	r3, #8
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4827      	ldr	r0, [pc, #156]	; (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001424:	f000 fde4 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault2_Pin */
  GPIO_InitStruct.Pin = fault2_Pin;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4821      	ldr	r0, [pc, #132]	; (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 800143c:	f000 fdd8 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin | dir1_Pin;
 8001440:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <_ZL12MX_GPIO_Initv+0x194>)
 800145a:	f000 fdc9 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sleep2_Pin sleep1_Pin */
  GPIO_InitStruct.Pin = sleep2_Pin | sleep1_Pin;
 800145e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <_ZL12MX_GPIO_Initv+0x194>)
 8001478:	f000 fdba 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault1_Pin */
  GPIO_InitStruct.Pin = fault1_Pin;
 800147c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <_ZL12MX_GPIO_Initv+0x1a4>)
 8001492:	f000 fdad 	bl	8001ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2028      	movs	r0, #40	; 0x28
 800149c:	f000 fd4f 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a0:	2028      	movs	r0, #40	; 0x28
 80014a2:	f000 fd68 	bl	8001f76 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40021400 	.word	0x40021400
 80014b8:	10110000 	.word	0x10110000
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  //TIMER 100Hz PID control
  if (htim->Instance == TIM3) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d13e      	bne.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x90>

    if (mode == 1) {
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014e4:	eef4 7a47 	vcmp.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d111      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x4a>
//      left_velocity = left_encoder.GetLinearVelocity();
//      left_dutycycle = left_pid.update(left_velocity);
//      left_motor.set_speed(left_dutycycle);
      left_velocity += 0.01;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001578 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80014fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001500:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
      output_msg.velocity = left_velocity;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001510:	6013      	str	r3, [r2, #0]
    }
    if (mode == 2) {
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800151c:	eef4 7a47 	vcmp.f32	s15, s14
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d118      	bne.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x90>
      right_velocity = right_encoder.GetLinearVelocity();
 8001526:	481a      	ldr	r0, [pc, #104]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001528:	f7ff f880 	bl	800062c <_ZN7Encoder17GetLinearVelocityEv>
 800152c:	eef0 7a40 	vmov.f32	s15, s0
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001532:	edc3 7a00 	vstr	s15, [r3]
      right_dutycycle = right_pid.update(right_velocity);
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	4815      	ldr	r0, [pc, #84]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001542:	f7ff fb22 	bl	8000b8a <_ZN3Pid6updateEf>
 8001546:	4602      	mov	r2, r0
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800154a:	601a      	str	r2, [r3, #0]
      right_motor.set_speed(right_dutycycle);
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001554:	f7ff f936 	bl	80007c4 <_ZN15MotorController9set_speedEi>
    }

  }

  //TIMER 2Hz Transmit
  if (htim->Instance == TIM6) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d106      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xa8>
    HAL_UART_Transmit(&huart6, tx_buffer, 4, 100);
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	2204      	movs	r2, #4
 800156a:	4810      	ldr	r0, [pc, #64]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800156c:	f003 f8ba 	bl	80046e4 <HAL_UART_Transmit>
  }
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	47ae147b 	.word	0x47ae147b
 800157c:	3f847ae1 	.word	0x3f847ae1
 8001580:	40000400 	.word	0x40000400
 8001584:	20000390 	.word	0x20000390
 8001588:	20000268 	.word	0x20000268
 800158c:	2000038c 	.word	0x2000038c
 8001590:	200001e8 	.word	0x200001e8
 8001594:	2000026c 	.word	0x2000026c
 8001598:	200002b4 	.word	0x200002b4
 800159c:	2000033c 	.word	0x2000033c
 80015a0:	20000340 	.word	0x20000340
 80015a4:	40001000 	.word	0x40001000
 80015a8:	20000370 	.word	0x20000370
 80015ac:	20000168 	.word	0x20000168

080015b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if (input_msg.pid_select == 1) {
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015c2:	eef4 7a47 	vcmp.f32	s15, s14
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d11a      	bne.n	8001602 <HAL_UART_RxCpltCallback+0x52>

    left_pid.config(input_msg.pid_kd, input_msg.pid_ki, input_msg.pid_kp);
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 80015ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 80015d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 80015da:	edd3 6a02 	vldr	s13, [r3, #8]
 80015de:	eeb0 1a66 	vmov.f32	s2, s13
 80015e2:	eef0 0a47 	vmov.f32	s1, s14
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	482d      	ldr	r0, [pc, #180]	; (80016a0 <HAL_UART_RxCpltCallback+0xf0>)
 80015ec:	f7ff fa84 	bl	8000af8 <_ZN3Pid6configEfff>
    left_pid.set(input_msg.pid_setpoint);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 80015f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <HAL_UART_RxCpltCallback+0xf0>)
 80015fc:	f7ff fab6 	bl	8000b6c <_ZN3Pid3setEf>
  } else if (input_msg.pid_select == 3) {
    cross_pid.config(input_msg.pid_kd, input_msg.pid_ki, input_msg.pid_kp);
    cross_pid.set(input_msg.pid_setpoint);
  }

}
 8001600:	e048      	b.n	8001694 <HAL_UART_RxCpltCallback+0xe4>
  } else if (input_msg.pid_select == 2) {
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800160c:	eef4 7a47 	vcmp.f32	s15, s14
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	d11a      	bne.n	800164c <HAL_UART_RxCpltCallback+0x9c>
    right_pid.config(input_msg.pid_kd, input_msg.pid_ki, input_msg.pid_kp);
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001618:	edd3 7a04 	vldr	s15, [r3, #16]
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 800161e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001624:	edd3 6a02 	vldr	s13, [r3, #8]
 8001628:	eeb0 1a66 	vmov.f32	s2, s13
 800162c:	eef0 0a47 	vmov.f32	s1, s14
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001636:	f7ff fa5f 	bl	8000af8 <_ZN3Pid6configEfff>
    right_pid.set(input_msg.pid_setpoint);
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 800163c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001646:	f7ff fa91 	bl	8000b6c <_ZN3Pid3setEf>
}
 800164a:	e023      	b.n	8001694 <HAL_UART_RxCpltCallback+0xe4>
  } else if (input_msg.pid_select == 3) {
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001656:	eef4 7a47 	vcmp.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d119      	bne.n	8001694 <HAL_UART_RxCpltCallback+0xe4>
    cross_pid.config(input_msg.pid_kd, input_msg.pid_ki, input_msg.pid_kp);
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001662:	edd3 7a04 	vldr	s15, [r3, #16]
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001668:	ed93 7a03 	vldr	s14, [r3, #12]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 800166e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001672:	eeb0 1a66 	vmov.f32	s2, s13
 8001676:	eef0 0a47 	vmov.f32	s1, s14
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_UART_RxCpltCallback+0xf8>)
 8001680:	f7ff fa3a 	bl	8000af8 <_ZN3Pid6configEfff>
    cross_pid.set(input_msg.pid_setpoint);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_UART_RxCpltCallback+0xec>)
 8001686:	edd3 7a01 	vldr	s15, [r3, #4]
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_UART_RxCpltCallback+0xf8>)
 8001690:	f7ff fa6c 	bl	8000b6c <_ZN3Pid3setEf>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000378 	.word	0x20000378
 80016a0:	20000270 	.word	0x20000270
 80016a4:	200002b4 	.word	0x200002b4
 80016a8:	200002f8 	.word	0x200002f8

080016ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  //Blue user button
  if (GPIO_Pin == GPIO_PIN_13) {
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016bc:	d119      	bne.n	80016f2 <HAL_GPIO_EXTI_Callback+0x46>
    if (mode == 0) {
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_GPIO_EXTI_Callback+0x50>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d10a      	bne.n	80016e4 <HAL_GPIO_EXTI_Callback+0x38>
      mode = input_msg.pid_select;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_GPIO_EXTI_Callback+0x54>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_GPIO_EXTI_Callback+0x50>)
 80016d4:	6013      	str	r3, [r2, #0]
      //Enables TIM3 interrupt (used for PID control)
      HAL_TIM_Base_Start_IT(&htim3);
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_GPIO_EXTI_Callback+0x58>)
 80016d8:	f001 fef8 	bl	80034cc <HAL_TIM_Base_Start_IT>

      //Enables TIM6 interrupt (used for periodic transmission)
      HAL_TIM_Base_Start_IT(&htim6);
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016de:	f001 fef5 	bl	80034cc <HAL_TIM_Base_Start_IT>

      }
    }

  }
}
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_EXTI_Callback+0x46>
      left_motor.brake();
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_GPIO_EXTI_Callback+0x60>)
 80016e6:	f7ff f98b 	bl	8000a00 <_ZN15MotorController5brakeEv>
      right_motor.brake();
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <HAL_GPIO_EXTI_Callback+0x64>)
 80016ec:	f7ff f988 	bl	8000a00 <_ZN15MotorController5brakeEv>
      while (1) {
 80016f0:	e7fe      	b.n	80016f0 <HAL_GPIO_EXTI_Callback+0x44>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000390 	.word	0x20000390
 8001700:	20000378 	.word	0x20000378
 8001704:	20000068 	.word	0x20000068
 8001708:	20000128 	.word	0x20000128
 800170c:	20000358 	.word	0x20000358
 8001710:	20000340 	.word	0x20000340

08001714 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_Z41__static_initialization_and_destruction_0ii>:
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b08f      	sub	sp, #60	; 0x3c
 8001728:	af0c      	add	r7, sp, #48	; 0x30
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d158      	bne.n	80017e6 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173a:	4293      	cmp	r3, r2
 800173c:	d153      	bne.n	80017e6 <_Z41__static_initialization_and_destruction_0ii+0xc2>
Encoder right_encoder = Encoder(&htim5);
 800173e:	492c      	ldr	r1, [pc, #176]	; (80017f0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001742:	f7fe ff21 	bl	8000588 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
Encoder left_encoder = Encoder(&htim2);
 8001746:	492c      	ldr	r1, [pc, #176]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001748:	482c      	ldr	r0, [pc, #176]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800174a:	f7fe ff1d 	bl	8000588 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
Odometry odom = Odometry(left_encoder, right_encoder);
 800174e:	4e2b      	ldr	r6, [pc, #172]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001752:	ac04      	add	r4, sp, #16
 8001754:	461d      	mov	r5, r3
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001762:	466c      	mov	r4, sp
 8001764:	f106 030c 	add.w	r3, r6, #12
 8001768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800176e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001772:	4823      	ldr	r0, [pc, #140]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001774:	f7fe ffc0 	bl	80006f8 <_ZN8OdometryC1E7EncoderS0_>
Pid left_pid(0, 0, 0);
 8001778:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800177c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8001780:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8001784:	4820      	ldr	r0, [pc, #128]	; (8001808 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001786:	f7ff f97c 	bl	8000a82 <_ZN3PidC1Efff>
Pid right_pid(0, 0, 0);
 800178a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800178e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8001792:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8001796:	481d      	ldr	r0, [pc, #116]	; (800180c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001798:	f7ff f973 	bl	8000a82 <_ZN3PidC1Efff>
Pid cross_pid(0, 0, 0);
 800179c:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80017a0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80017a4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80017a8:	4819      	ldr	r0, [pc, #100]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80017aa:	f7ff f96a 	bl	8000a82 <_ZN3PidC1Efff>
                            TIM_CHANNEL_4);
 80017ae:	230c      	movs	r3, #12
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80017be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017c2:	4915      	ldr	r1, [pc, #84]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80017c4:	4815      	ldr	r0, [pc, #84]	; (800181c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80017c6:	f7fe ffcb 	bl	8000760 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
                           TIM_CHANNEL_3);
 80017ca:	2308      	movs	r3, #8
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80017e2:	f7fe ffbd 	bl	8000760 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000e8 	.word	0x200000e8
 80017f4:	200001e8 	.word	0x200001e8
 80017f8:	20000028 	.word	0x20000028
 80017fc:	20000204 	.word	0x20000204
 8001800:	20000220 	.word	0x20000220
 8001804:	00000000 	.word	0x00000000
 8001808:	20000270 	.word	0x20000270
 800180c:	200002b4 	.word	0x200002b4
 8001810:	200002f8 	.word	0x200002f8
 8001814:	200000a8 	.word	0x200000a8
 8001818:	40021400 	.word	0x40021400
 800181c:	20000340 	.word	0x20000340
 8001820:	20000358 	.word	0x20000358

08001824 <_GLOBAL__sub_I_htim2>:
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
 8001828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff ff79 	bl	8001724 <_Z41__static_initialization_and_destruction_0ii>
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x44>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x44>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x44>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x44>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x44>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d144      	bne.n	8001928 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a3a      	ldr	r2, [pc, #232]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a2e      	ldr	r2, [pc, #184]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = encoder_dx1_Pin;
 80018e6:	2320      	movs	r3, #32
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f6:	2301      	movs	r3, #1
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_dx1_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4823      	ldr	r0, [pc, #140]	; (8001990 <HAL_TIM_Encoder_MspInit+0x114>)
 8001902:	f000 fb75 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder_dx2_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001916:	2301      	movs	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_dx2_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <HAL_TIM_Encoder_MspInit+0x118>)
 8001922:	f000 fb65 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001926:	e02c      	b.n	8001982 <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_TIM_Encoder_MspInit+0x11c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d127      	bne.n	8001982 <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_TIM_Encoder_MspInit+0x110>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_sx1_Pin|encoder_sx2_Pin;
 8001962:	2303      	movs	r3, #3
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001972:	2302      	movs	r3, #2
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <HAL_TIM_Encoder_MspInit+0x114>)
 800197e:	f000 fb37 	bl	8001ff0 <HAL_GPIO_Init>
}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	; 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40000c00 	.word	0x40000c00

0800199c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_TIM_Base_MspInit+0x80>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10c      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019c6:	e022      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_TIM_Base_MspInit+0x88>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10c      	bne.n	80019ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
}
 80019ea:	e010      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x8c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10b      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40001000 	.word	0x40001000

08001a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_TIM_MspPostInit+0x64>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d11c      	bne.n	8001a88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_TIM_MspPostInit+0x68>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_TIM_MspPostInit+0x68>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_MspPostInit+0x68>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 8001a66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_TIM_MspPostInit+0x6c>)
 8001a84:	f000 fab4 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40000800 	.word	0x40000800
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x7c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d127      	bne.n	8001b0e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_UART_MspInit+0x80>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aee:	23c0      	movs	r3, #192	; 0xc0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001afe:	2308      	movs	r3, #8
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_MspInit+0x84>)
 8001b0a:	f000 fa71 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 f8c4 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM3_IRQHandler+0x10>)
 8001b86:	f001 fe0e 	bl	80037a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000068 	.word	0x20000068

08001b94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b9c:	f000 fbec 	bl	8002378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM6_DAC_IRQHandler+0x10>)
 8001baa:	f001 fdfc 	bl	80037a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000128 	.word	0x20000128

08001bb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <USART6_IRQHandler+0x10>)
 8001bbe:	f002 fec5 	bl	800494c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000168 	.word	0x20000168

08001bcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <SystemInit+0x5c>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <SystemInit+0x5c>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <SystemInit+0x60>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <SystemInit+0x60>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <SystemInit+0x60>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <SystemInit+0x60>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	490d      	ldr	r1, [pc, #52]	; (8001c2c <SystemInit+0x60>)
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <SystemInit+0x64>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <SystemInit+0x60>)
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <SystemInit+0x68>)
 8001c02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <SystemInit+0x60>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <SystemInit+0x60>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SystemInit+0x60>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SystemInit+0x5c>)
 8001c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c1c:	609a      	str	r2, [r3, #8]
#endif
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	fef6ffff 	.word	0xfef6ffff
 8001c34:	24003010 	.word	0x24003010

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c3e:	e003      	b.n	8001c48 <LoopCopyDataInit>

08001c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c46:	3104      	adds	r1, #4

08001c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c50:	d3f6      	bcc.n	8001c40 <CopyDataInit>
  ldr  r2, =_sbss
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c54:	e002      	b.n	8001c5c <LoopFillZerobss>

08001c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c58:	f842 3b04 	str.w	r3, [r2], #4

08001c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c60:	d3f9      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c62:	f7ff ffb3 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c66:	f003 fc53 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7ff f80b 	bl	8000c84 <main>
  bx  lr    
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001c74:	080055ac 	.word	0x080055ac
  ldr  r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c7c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c80:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c84:	20000398 	.word	0x20000398

08001c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC_IRQHandler>

08001c8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f000 f94a 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 f805 	bl	8001ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c9a:	f7ff fdcb 	bl	8001834 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f965 	bl	8001f92 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce0:	f000 f92d 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000394 	.word	0x20000394

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000394 	.word	0x20000394

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_Delay+0x40>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000008 	.word	0x20000008

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	05fa0000 	.word	0x05fa0000

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e00c      	b.n	8001fe2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e175      	b.n	80022fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002010:	2201      	movs	r2, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	f040 8164 	bne.w	80022f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x4e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b12      	cmp	r3, #18
 800203c:	d123      	bne.n	8002086 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d00b      	beq.n	80020da <HAL_GPIO_Init+0xea>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ce:	2b11      	cmp	r3, #17
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80be 	beq.w	80022f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b65      	ldr	r3, [pc, #404]	; (8002310 <HAL_GPIO_Init+0x320>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a64      	ldr	r2, [pc, #400]	; (8002310 <HAL_GPIO_Init+0x320>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_GPIO_Init+0x320>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002192:	4a60      	ldr	r2, [pc, #384]	; (8002314 <HAL_GPIO_Init+0x324>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_GPIO_Init+0x328>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d037      	beq.n	800222e <HAL_GPIO_Init+0x23e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_GPIO_Init+0x32c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d031      	beq.n	800222a <HAL_GPIO_Init+0x23a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_GPIO_Init+0x330>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02b      	beq.n	8002226 <HAL_GPIO_Init+0x236>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a54      	ldr	r2, [pc, #336]	; (8002324 <HAL_GPIO_Init+0x334>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x232>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a53      	ldr	r2, [pc, #332]	; (8002328 <HAL_GPIO_Init+0x338>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x22e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_GPIO_Init+0x33c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x22a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a51      	ldr	r2, [pc, #324]	; (8002330 <HAL_GPIO_Init+0x340>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x226>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_GPIO_Init+0x344>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x222>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	; (8002338 <HAL_GPIO_Init+0x348>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x21e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_GPIO_Init+0x34c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x21a>
 8002206:	2309      	movs	r3, #9
 8002208:	e012      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800220a:	230a      	movs	r3, #10
 800220c:	e010      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800220e:	2308      	movs	r3, #8
 8002210:	e00e      	b.n	8002230 <HAL_GPIO_Init+0x240>
 8002212:	2307      	movs	r3, #7
 8002214:	e00c      	b.n	8002230 <HAL_GPIO_Init+0x240>
 8002216:	2306      	movs	r3, #6
 8002218:	e00a      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800221e:	2304      	movs	r3, #4
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x240>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x240>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x240>
 800222e:	2300      	movs	r3, #0
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002240:	4934      	ldr	r1, [pc, #208]	; (8002314 <HAL_GPIO_Init+0x324>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224e:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <HAL_GPIO_Init+0x350>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002272:	4a33      	ldr	r2, [pc, #204]	; (8002340 <HAL_GPIO_Init+0x350>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_GPIO_Init+0x350>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_GPIO_Init+0x350>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_GPIO_Init+0x350>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_GPIO_Init+0x350>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_GPIO_Init+0x350>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_GPIO_Init+0x350>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	f67f ae86 	bls.w	8002010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002304:	bf00      	nop
 8002306:	3724      	adds	r7, #36	; 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40021400 	.word	0x40021400
 8002330:	40021800 	.word	0x40021800
 8002334:	40021c00 	.word	0x40021c00
 8002338:	40022000 	.word	0x40022000
 800233c:	40022400 	.word	0x40022400
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002360:	e003      	b.n	800236a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	041a      	lsls	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f988 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013c00 	.word	0x40013c00

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e25e      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b96      	ldr	r3, [pc, #600]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d8:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
 80023e4:	4b90      	ldr	r3, [pc, #576]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x130>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e238      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x7a>
 8002414:	4b84      	ldr	r3, [pc, #528]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a83      	ldr	r2, [pc, #524]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x9c>
 800242a:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7b      	ldr	r2, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xc0>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002468:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b6c      	ldr	r3, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6b      	ldr	r2, [pc, #428]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff fc50 	bl	8001d2c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc4c 	bl	8001d2c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1ec      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe8>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc3c 	bl	8001d2c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc38 	bl	8001d2c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1d8      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x110>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d069      	beq.n	80025ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x190>
 80024fe:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x17a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1ac      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	493d      	ldr	r1, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e040      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d023      	beq.n	8002588 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a38      	ldr	r2, [pc, #224]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fbee 	bl	8001d2c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002554:	f7ff fbea 	bl	8001d2c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e18a      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4929      	ldr	r1, [pc, #164]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fbca 	bl	8001d2c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fbc6 	bl	8001d2c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e166      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d038      	beq.n	8002638 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7ff fba7 	bl	8001d2c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e2:	f7ff fba3 	bl	8001d2c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e143      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x23a>
 8002600:	e01a      	b.n	8002638 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_RCC_OscConfig+0x280>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7ff fb8d 	bl	8001d2c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002616:	f7ff fb89 	bl	8001d2c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d903      	bls.n	800262c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e129      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
 8002628:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b95      	ldr	r3, [pc, #596]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a4 	beq.w	800278e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a8b      	ldr	r2, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266e:	4b86      	ldr	r3, [pc, #536]	; (8002888 <HAL_RCC_OscConfig+0x4e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800267a:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x4e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a82      	ldr	r2, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x4e0>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7ff fb51 	bl	8001d2c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7ff fb4d 	bl	8001d2c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0ed      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_OscConfig+0x4e0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x31a>
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	e02d      	b.n	800271e <HAL_RCC_OscConfig+0x376>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x33c>
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a6d      	ldr	r2, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	e01c      	b.n	800271e <HAL_RCC_OscConfig+0x376>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x35e>
 80026ec:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a64      	ldr	r2, [pc, #400]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a61      	ldr	r2, [pc, #388]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x376>
 8002706:	4b5f      	ldr	r3, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a5e      	ldr	r2, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d015      	beq.n	8002752 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7ff fb01 	bl	8001d2c <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7ff fafd 	bl	8001d2c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e09b      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ee      	beq.n	800272e <HAL_RCC_OscConfig+0x386>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7ff faeb 	bl	8001d2c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff fae7 	bl	8001d2c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e085      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	4b44      	ldr	r3, [pc, #272]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a3f      	ldr	r2, [pc, #252]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d071      	beq.n	800287a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d069      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d14b      	bne.n	8002842 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a35      	ldr	r2, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80027b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7ff fab9 	bl	8001d2c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027be:	f7ff fab5 	bl	8001d2c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e055      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	019b      	lsls	r3, r3, #6
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	071b      	lsls	r3, r3, #28
 8002808:	491e      	ldr	r1, [pc, #120]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7ff fa87 	bl	8001d2c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002822:	f7ff fa83 	bl	8001d2c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e023      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x47a>
 8002840:	e01b      	b.n	800287a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7ff fa6d 	bl	8001d2c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fa69 	bl	8001d2c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e009      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x4ae>
 8002874:	e001      	b.n	800287a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0ce      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020f 	bic.w	r2, r3, #15
 80028ba:	4964      	ldr	r1, [pc, #400]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b6      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494c      	ldr	r1, [pc, #304]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07d      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e071      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e069      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7ff f9d4 	bl	8001d2c <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7ff f9d0 	bl	8001d2c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e051      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 020f 	bic.w	r2, r3, #15
 80029c6:	4921      	ldr	r1, [pc, #132]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e030      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4915      	ldr	r1, [pc, #84]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490d      	ldr	r1, [pc, #52]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f81d 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	fa21 f303 	lsr.w	r3, r1, r3
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff f932 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08005580 	.word	0x08005580
 8002a58:	20000000 	.word	0x20000000

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d007      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x32>
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d008      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x38>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 808d 	bne.w	8002ba2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a8a:	60bb      	str	r3, [r7, #8]
       break;
 8002a8c:	e08c      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8e:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8002a90:	60bb      	str	r3, [r7, #8]
      break;
 8002a92:	e089      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d023      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	ea03 0501 	and.w	r5, r3, r1
 8002ac0:	ea04 0602 	and.w	r6, r4, r2
 8002ac4:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8002ac6:	fb02 f106 	mul.w	r1, r2, r6
 8002aca:	2200      	movs	r2, #0
 8002acc:	fb02 f205 	mul.w	r2, r2, r5
 8002ad0:	440a      	add	r2, r1
 8002ad2:	493a      	ldr	r1, [pc, #232]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad4:	fba5 0101 	umull	r0, r1, r5, r1
 8002ad8:	1853      	adds	r3, r2, r1
 8002ada:	4619      	mov	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fba7 	bl	8000238 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e049      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	f04f 0400 	mov.w	r4, #0
 8002afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	ea03 0501 	and.w	r5, r3, r1
 8002b08:	ea04 0602 	and.w	r6, r4, r2
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4632      	mov	r2, r6
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0154      	lsls	r4, r2, #5
 8002b1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b1e:	014b      	lsls	r3, r1, #5
 8002b20:	4619      	mov	r1, r3
 8002b22:	4622      	mov	r2, r4
 8002b24:	1b49      	subs	r1, r1, r5
 8002b26:	eb62 0206 	sbc.w	r2, r2, r6
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0194      	lsls	r4, r2, #6
 8002b34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b38:	018b      	lsls	r3, r1, #6
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	00e2      	lsls	r2, r4, #3
 8002b4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b4e:	00d9      	lsls	r1, r3, #3
 8002b50:	460b      	mov	r3, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	195b      	adds	r3, r3, r5
 8002b56:	eb44 0406 	adc.w	r4, r4, r6
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	02a2      	lsls	r2, r4, #10
 8002b64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b68:	0299      	lsls	r1, r3, #10
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4621      	mov	r1, r4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	f7fd fb5c 	bl	8000238 <__aeabi_uldivmod>
 8002b80:	4603      	mov	r3, r0
 8002b82:	460c      	mov	r4, r1
 8002b84:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	3301      	adds	r3, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	60bb      	str	r3, [r7, #8]
      break;
 8002ba0:	e002      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ba4:	60bb      	str	r3, [r7, #8]
      break;
 8002ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	017d7840 	.word	0x017d7840

08002bc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002be0:	4601      	mov	r1, r0
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0a9b      	lsrs	r3, r3, #10
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08005590 	.word	0x08005590

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c04:	f7ff ffdc 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0b5b      	lsrs	r3, r3, #13
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4a03      	ldr	r2, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08005590 	.word	0x08005590

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c50:	4b69      	ldr	r3, [pc, #420]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a68      	ldr	r2, [pc, #416]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c5a:	6093      	str	r3, [r2, #8]
 8002c5c:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	4964      	ldr	r1, [pc, #400]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	4959      	ldr	r1, [pc, #356]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	494a      	ldr	r1, [pc, #296]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 808b 	beq.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	4a39      	ldr	r2, [pc, #228]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6413      	str	r3, [r2, #64]	; 0x40
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7fe fffc 	bl	8001d2c <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fe fff8 	bl	8001d2c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e38d      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d035      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d02e      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d114      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe ffc0 	bl	8001d2c <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe ffbc 	bl	8001d2c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e34f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dde:	d111      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dee:	400b      	ands	r3, r1
 8002df0:	4901      	ldr	r1, [pc, #4]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	0ffffcff 	.word	0x0ffffcff
 8002e04:	4bb3      	ldr	r3, [pc, #716]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4ab2      	ldr	r2, [pc, #712]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e0e:	6093      	str	r3, [r2, #8]
 8002e10:	4bb0      	ldr	r3, [pc, #704]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	49ad      	ldr	r1, [pc, #692]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e2e:	4ba9      	ldr	r3, [pc, #676]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e34:	4aa7      	ldr	r2, [pc, #668]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	49a2      	ldr	r1, [pc, #648]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5c:	4b9d      	ldr	r3, [pc, #628]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6a:	499a      	ldr	r1, [pc, #616]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e7e:	4b95      	ldr	r3, [pc, #596]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8c:	4991      	ldr	r1, [pc, #580]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea0:	4b8c      	ldr	r3, [pc, #560]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eae:	4989      	ldr	r1, [pc, #548]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ec2:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4980      	ldr	r1, [pc, #512]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee4:	4b7b      	ldr	r3, [pc, #492]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 0203 	bic.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4978      	ldr	r1, [pc, #480]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f06:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f023 020c 	bic.w	r2, r3, #12
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	496f      	ldr	r1, [pc, #444]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	4967      	ldr	r1, [pc, #412]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f4a:	4b62      	ldr	r3, [pc, #392]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	495e      	ldr	r1, [pc, #376]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	4956      	ldr	r1, [pc, #344]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f8e:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fb0:	4b48      	ldr	r3, [pc, #288]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	4945      	ldr	r1, [pc, #276]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	493c      	ldr	r1, [pc, #240]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003002:	4934      	ldr	r1, [pc, #208]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d011      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003016:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003024:	492b      	ldr	r1, [pc, #172]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003034:	d101      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	491b      	ldr	r1, [pc, #108]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003078:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003088:	4912      	ldr	r1, [pc, #72]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	4909      	ldr	r1, [pc, #36]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00f      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	4985      	ldr	r1, [pc, #532]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	497c      	ldr	r1, [pc, #496]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003112:	f040 80d6 	bne.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800311c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003122:	f7fe fe03 	bl	8001d2c <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800312a:	f7fe fdff 	bl	8001d2c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e194      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313c:	4b6c      	ldr	r3, [pc, #432]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d021      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11d      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800316a:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	019a      	lsls	r2, r3, #6
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	071b      	lsls	r3, r3, #28
 8003190:	4957      	ldr	r1, [pc, #348]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c2:	d129      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	0f1b      	lsrs	r3, r3, #28
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	019a      	lsls	r2, r3, #6
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	071b      	lsls	r3, r3, #28
 80031f8:	493d      	ldr	r1, [pc, #244]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003206:	f023 021f 	bic.w	r2, r3, #31
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	3b01      	subs	r3, #1
 8003210:	4937      	ldr	r1, [pc, #220]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01d      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322a:	0e1b      	lsrs	r3, r3, #24
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003232:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003238:	0f1b      	lsrs	r3, r3, #28
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	019a      	lsls	r2, r3, #6
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	071b      	lsls	r3, r3, #28
 8003258:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d011      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	019a      	lsls	r2, r3, #6
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	071b      	lsls	r3, r3, #28
 8003288:	4919      	ldr	r1, [pc, #100]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fe fd46 	bl	8001d2c <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032a4:	f7fe fd42 	bl	8001d2c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0d7      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 80cd 	bne.w	8003464 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d6:	f7fe fd29 	bl	8001d2c <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032de:	f7fe fd25 	bl	8001d2c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d903      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0ba      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80032f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003300:	d0ed      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800331e:	2b00      	cmp	r3, #0
 8003320:	d02e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d12a      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003338:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	0f1b      	lsrs	r3, r3, #28
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	019a      	lsls	r2, r3, #6
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	071b      	lsls	r3, r3, #28
 800335e:	4944      	ldr	r1, [pc, #272]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003394:	d11d      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	0f1b      	lsrs	r3, r3, #28
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	019a      	lsls	r2, r3, #6
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	041b      	lsls	r3, r3, #16
 80033be:	431a      	orrs	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	4929      	ldr	r1, [pc, #164]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	0e1b      	lsrs	r3, r3, #24
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	019a      	lsls	r2, r3, #6
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	431a      	orrs	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	4917      	ldr	r1, [pc, #92]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800341c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4911      	ldr	r1, [pc, #68]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0e      	ldr	r2, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fe fc76 	bl	8001d2c <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003444:	f7fe fc72 	bl	8001d2c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e007      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003462:	d1ef      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e01d      	b.n	80034c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fa7e 	bl	800199c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fc90 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_TIM_Base_Start_IT+0x50>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d00b      	beq.n	800350e <HAL_TIM_Base_Start_IT+0x42>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d007      	beq.n	800350e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	00010007 	.word	0x00010007

08003520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e01d      	b.n	800356e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f815 	bl	8003576 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 fc3a 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ffb2 	bl	8004508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_TIM_PWM_Start+0x7c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x2c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_TIM_PWM_Start+0x80>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_PWM_Start+0x30>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_TIM_PWM_Start+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_TIM_PWM_Start+0x84>)
 80035da:	4013      	ands	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d00b      	beq.n	80035fc <HAL_TIM_PWM_Start+0x70>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40010400 	.word	0x40010400
 8003610:	00010007 	.word	0x00010007

08003614 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e07b      	b.n	8003720 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe f91d 	bl	800187c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <HAL_TIM_Encoder_Init+0x114>)
 8003656:	400b      	ands	r3, r1
 8003658:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 fbb7 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_TIM_Encoder_Init+0x118>)
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4313      	orrs	r3, r2
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_TIM_Encoder_Init+0x11c>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_TIM_Encoder_Init+0x120>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4313      	orrs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	011a      	lsls	r2, r3, #4
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	031b      	lsls	r3, r3, #12
 80036d4:	4313      	orrs	r3, r2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4313      	orrs	r3, r2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fffebff8 	.word	0xfffebff8
 800372c:	fffffcfc 	.word	0xfffffcfc
 8003730:	fffff3f3 	.word	0xfffff3f3
 8003734:	ffff0f0f 	.word	0xffff0f0f

08003738 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_TIM_Encoder_Start+0x16>
 8003748:	2b04      	cmp	r3, #4
 800374a:	d008      	beq.n	800375e <HAL_TIM_Encoder_Start+0x26>
 800374c:	e00f      	b.n	800376e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fed6 	bl	8004508 <TIM_CCxChannelCmd>
      break;
 800375c:	e016      	b.n	800378c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2201      	movs	r2, #1
 8003764:	2104      	movs	r1, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fece 	bl	8004508 <TIM_CCxChannelCmd>
      break;
 800376c:	e00e      	b.n	800378c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fec6 	bl	8004508 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	2104      	movs	r1, #4
 8003784:	4618      	mov	r0, r3
 8003786:	f000 febf 	bl	8004508 <TIM_CCxChannelCmd>
      break;
 800378a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d122      	bne.n	8003802 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0202 	mvn.w	r2, #2
 80037d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fad7 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 80037ee:	e005      	b.n	80037fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fac9 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fada 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d122      	bne.n	8003856 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d11b      	bne.n	8003856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0204 	mvn.w	r2, #4
 8003826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 faad 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003842:	e005      	b.n	8003850 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fa9f 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fab0 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d122      	bne.n	80038aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b08      	cmp	r3, #8
 8003870:	d11b      	bne.n	80038aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0208 	mvn.w	r2, #8
 800387a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2204      	movs	r2, #4
 8003880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa83 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003896:	e005      	b.n	80038a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa75 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa86 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d122      	bne.n	80038fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d11b      	bne.n	80038fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f06f 0210 	mvn.w	r2, #16
 80038ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2208      	movs	r2, #8
 80038d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa59 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 80038ea:	e005      	b.n	80038f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fa4b 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa5c 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10e      	bne.n	800392a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0201 	mvn.w	r2, #1
 8003922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fdcf 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d10e      	bne.n	8003956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d107      	bne.n	8003956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800394e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fe65 	bl	8004620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fe58 	bl	8004634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa0a 	bl	8003dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fe18 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e105      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x226>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b14      	cmp	r3, #20
 8003a12:	f200 80f0 	bhi.w	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	08003bf7 	.word	0x08003bf7
 8003a24:	08003bf7 	.word	0x08003bf7
 8003a28:	08003bf7 	.word	0x08003bf7
 8003a2c:	08003ab1 	.word	0x08003ab1
 8003a30:	08003bf7 	.word	0x08003bf7
 8003a34:	08003bf7 	.word	0x08003bf7
 8003a38:	08003bf7 	.word	0x08003bf7
 8003a3c:	08003af3 	.word	0x08003af3
 8003a40:	08003bf7 	.word	0x08003bf7
 8003a44:	08003bf7 	.word	0x08003bf7
 8003a48:	08003bf7 	.word	0x08003bf7
 8003a4c:	08003b33 	.word	0x08003b33
 8003a50:	08003bf7 	.word	0x08003bf7
 8003a54:	08003bf7 	.word	0x08003bf7
 8003a58:	08003bf7 	.word	0x08003bf7
 8003a5c:	08003b75 	.word	0x08003b75
 8003a60:	08003bf7 	.word	0x08003bf7
 8003a64:	08003bf7 	.word	0x08003bf7
 8003a68:	08003bf7 	.word	0x08003bf7
 8003a6c:	08003bb5 	.word	0x08003bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa4e 	bl	8003f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0208 	orr.w	r2, r2, #8
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0204 	bic.w	r2, r2, #4
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	619a      	str	r2, [r3, #24]
      break;
 8003aae:	e0a3      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 faa0 	bl	8003ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	619a      	str	r2, [r3, #24]
      break;
 8003af0:	e082      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 faf7 	bl	80040ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0208 	orr.w	r2, r2, #8
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0204 	bic.w	r2, r2, #4
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	61da      	str	r2, [r3, #28]
      break;
 8003b30:	e062      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fb4d 	bl	80041d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	61da      	str	r2, [r3, #28]
      break;
 8003b72:	e041      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb84 	bl	8004288 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0208 	orr.w	r2, r2, #8
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0204 	bic.w	r2, r2, #4
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bb2:	e021      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fbb6 	bl	800432c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003bf6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0a6      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x166>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_TIM_ConfigClockSource+0x170>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d067      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0x120>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d80b      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x6c>
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d073      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x140>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d802      	bhi.n	8003c76 <HAL_TIM_ConfigClockSource+0x62>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d06f      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c74:	e078      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d06c      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x140>
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	d06a      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c7e:	e073      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d00d      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0x8c>
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d804      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x7e>
 8003c88:	2b50      	cmp	r3, #80	; 0x50
 8003c8a:	d033      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0xe0>
 8003c8c:	2b60      	cmp	r3, #96	; 0x60
 8003c8e:	d041      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c90:	e06a      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d066      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x152>
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	d017      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c9e:	e063      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f000 fc0a 	bl	80044c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e04c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 fbf3 	bl	80044c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf0:	609a      	str	r2, [r3, #8]
      break;
 8003cf2:	e039      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 fb67 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2150      	movs	r1, #80	; 0x50
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fbc0 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003d12:	e029      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	461a      	mov	r2, r3
 8003d22:	f000 fb86 	bl	8004432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2160      	movs	r1, #96	; 0x60
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fbb0 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003d32:	e019      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f000 fb47 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fba0 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003d52:	e009      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 fb97 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	fffeff88 	.word	0xfffeff88

08003d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a40      	ldr	r2, [pc, #256]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d027      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d023      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d017      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <TIM_Base_SetConfig+0x128>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <TIM_Base_SetConfig+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <TIM_Base_SetConfig+0x130>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <TIM_Base_SetConfig+0x134>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <TIM_Base_SetConfig+0x138>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <TIM_Base_SetConfig+0x13c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0xf8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d103      	bne.n	8003ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	615a      	str	r2, [r3, #20]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40010400 	.word	0x40010400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40001800 	.word	0x40001800
 8003f10:	40001c00 	.word	0x40001c00
 8003f14:	40002000 	.word	0x40002000

08003f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <TIM_OC1_SetConfig+0xd8>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 0302 	bic.w	r3, r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <TIM_OC1_SetConfig+0xdc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC1_SetConfig+0x64>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_OC1_SetConfig+0xe0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10c      	bne.n	8003f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0308 	bic.w	r3, r3, #8
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <TIM_OC1_SetConfig+0xdc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC1_SetConfig+0x8e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <TIM_OC1_SetConfig+0xe0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d111      	bne.n	8003fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	fffeff8f 	.word	0xfffeff8f
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0210 	bic.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <TIM_OC2_SetConfig+0xe4>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0320 	bic.w	r3, r3, #32
 8004046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <TIM_OC2_SetConfig+0xe8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC2_SetConfig+0x68>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <TIM_OC2_SetConfig+0xec>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10d      	bne.n	8004080 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <TIM_OC2_SetConfig+0xe8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC2_SetConfig+0x94>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <TIM_OC2_SetConfig+0xec>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d113      	bne.n	80040b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	feff8fff 	.word	0xfeff8fff
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <TIM_OC3_SetConfig+0xe0>)
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC3_SetConfig+0x66>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a21      	ldr	r2, [pc, #132]	; (80041d4 <TIM_OC3_SetConfig+0xe8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x92>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <TIM_OC3_SetConfig+0xe8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	fffeff8f 	.word	0xfffeff8f
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400

080041d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <TIM_OC4_SetConfig+0xa4>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <TIM_OC4_SetConfig+0xa8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC4_SetConfig+0x68>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <TIM_OC4_SetConfig+0xac>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d109      	bne.n	8004254 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	feff8fff 	.word	0xfeff8fff
 8004280:	40010000 	.word	0x40010000
 8004284:	40010400 	.word	0x40010400

08004288 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <TIM_OC5_SetConfig+0x98>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a12      	ldr	r2, [pc, #72]	; (8004324 <TIM_OC5_SetConfig+0x9c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC5_SetConfig+0x5e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <TIM_OC5_SetConfig+0xa0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d109      	bne.n	80042fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	fffeff8f 	.word	0xfffeff8f
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400

0800432c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <TIM_OC6_SetConfig+0x9c>)
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800436e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	051b      	lsls	r3, r3, #20
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <TIM_OC6_SetConfig+0xa0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC6_SetConfig+0x60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <TIM_OC6_SetConfig+0xa4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d109      	bne.n	80043a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	feff8fff 	.word	0xfeff8fff
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40010400 	.word	0x40010400

080043d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0210 	bic.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800446e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f043 0307 	orr.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2201      	movs	r2, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	43db      	mvns	r3, r3
 800452a:	401a      	ands	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004568:	2302      	movs	r3, #2
 800456a:	e045      	b.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40010000 	.word	0x40010000
 8004608:	40010400 	.word	0x40010400

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e040      	b.n	80046dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd fa16 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa90 	bl	8004bac <UART_SetConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fd28 	bl	80050f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fdaf 	bl	8005238 <UART_CheckIdleState>
 80046da:	4603      	mov	r3, r0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d17f      	bne.n	80047fc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_UART_Transmit+0x24>
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e078      	b.n	80047fe <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_UART_Transmit+0x36>
 8004716:	2302      	movs	r3, #2
 8004718:	e071      	b.n	80047fe <HAL_UART_Transmit+0x11a>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2221      	movs	r2, #33	; 0x21
 800472c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800472e:	f7fd fafd 	bl	8001d2c <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d108      	bne.n	8004760 <HAL_UART_Transmit+0x7c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e003      	b.n	8004768 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004768:	e02c      	b.n	80047c4 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fd8e 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e03c      	b.n	80047fe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004798:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	3302      	adds	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e007      	b.n	80047b2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1cc      	bne.n	800476a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fd5b 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e009      	b.n	80047fe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481a:	2b20      	cmp	r3, #32
 800481c:	f040 808a 	bne.w	8004934 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Receive_IT+0x24>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e082      	b.n	8004936 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Receive_IT+0x36>
 800483a:	2302      	movs	r3, #2
 800483c:	e07b      	b.n	8004936 <HAL_UART_Receive_IT+0x12e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	d10e      	bne.n	800488a <HAL_UART_Receive_IT+0x82>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_UART_Receive_IT+0x78>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f240 12ff 	movw	r2, #511	; 0x1ff
 800487a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800487e:	e02d      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004888:	e028      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_UART_Receive_IT+0xa6>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_UART_Receive_IT+0x9c>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	22ff      	movs	r2, #255	; 0xff
 800489e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a2:	e01b      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	227f      	movs	r2, #127	; 0x7f
 80048a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ac:	e016      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b6:	d10d      	bne.n	80048d4 <HAL_UART_Receive_IT+0xcc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <HAL_UART_Receive_IT+0xc2>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	227f      	movs	r2, #127	; 0x7f
 80048c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c8:	e008      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	223f      	movs	r2, #63	; 0x3f
 80048ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d2:	e003      	b.n	80048dc <HAL_UART_Receive_IT+0xd4>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2222      	movs	r2, #34	; 0x22
 80048e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004900:	d107      	bne.n	8004912 <HAL_UART_Receive_IT+0x10a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <HAL_UART_Receive_IT+0x13c>)
 800490e:	661a      	str	r2, [r3, #96]	; 0x60
 8004910:	e002      	b.n	8004918 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <HAL_UART_Receive_IT+0x140>)
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800492e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	0800546b 	.word	0x0800546b
 8004948:	080053c5 	.word	0x080053c5

0800494c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d113      	bne.n	80049a2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80eb 	beq.w	8004b6e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
      }
      return;
 80049a0:	e0e5      	b.n	8004b6e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80c0 	beq.w	8004b2a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80b5 	beq.w	8004b2a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00e      	beq.n	80049e8 <HAL_UART_IRQHandler+0x9c>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e0:	f043 0201 	orr.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <HAL_UART_IRQHandler+0xc4>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2202      	movs	r2, #2
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00e      	beq.n	8004a38 <HAL_UART_IRQHandler+0xec>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a30:	f043 0202 	orr.w	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a62:	f043 0208 	orr.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d07f      	beq.n	8004b72 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00c      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d004      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d031      	beq.n	8004b18 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fc36 	bl	8005326 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d123      	bne.n	8004b10 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_UART_IRQHandler+0x234>)
 8004ae6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd fa5c 	bl	8001faa <HAL_DMA_Abort_IT>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004b02:	4610      	mov	r0, r2
 8004b04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b06:	e00e      	b.n	8004b26 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f845 	bl	8004b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	e00a      	b.n	8004b26 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f841 	bl	8004b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	e006      	b.n	8004b26 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f83d 	bl	8004b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004b24:	e025      	b.n	8004b72 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b26:	bf00      	nop
    return;
 8004b28:	e023      	b.n	8004b72 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d017      	beq.n	8004b76 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
    }
    return;
 8004b4e:	e012      	b.n	8004b76 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <HAL_UART_IRQHandler+0x22c>
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fc14 	bl	8005392 <UART_EndTransmit_IT>
    return;
 8004b6a:	bf00      	nop
 8004b6c:	e004      	b.n	8004b78 <HAL_UART_IRQHandler+0x22c>
      return;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <HAL_UART_IRQHandler+0x22c>
    return;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <HAL_UART_IRQHandler+0x22c>
    return;
 8004b76:	bf00      	nop
  }

}
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	08005367 	.word	0x08005367

08004b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4bb1      	ldr	r3, [pc, #708]	; (8004ea0 <UART_SetConfig+0x2f4>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	6939      	ldr	r1, [r7, #16]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a9f      	ldr	r2, [pc, #636]	; (8004ea4 <UART_SetConfig+0x2f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d121      	bne.n	8004c70 <UART_SetConfig+0xc4>
 8004c2c:	4b9e      	ldr	r3, [pc, #632]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d816      	bhi.n	8004c68 <UART_SetConfig+0xbc>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0x94>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c57 	.word	0x08004c57
 8004c4c:	08004c63 	.word	0x08004c63
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e151      	b.n	8004efa <UART_SetConfig+0x34e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e14e      	b.n	8004efa <UART_SetConfig+0x34e>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e14b      	b.n	8004efa <UART_SetConfig+0x34e>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e148      	b.n	8004efa <UART_SetConfig+0x34e>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	bf00      	nop
 8004c6e:	e144      	b.n	8004efa <UART_SetConfig+0x34e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a8d      	ldr	r2, [pc, #564]	; (8004eac <UART_SetConfig+0x300>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d134      	bne.n	8004ce4 <UART_SetConfig+0x138>
 8004c7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d829      	bhi.n	8004cdc <UART_SetConfig+0x130>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0xe4>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cd1 	.word	0x08004cd1
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004cdd 	.word	0x08004cdd
 8004cb0:	08004ccb 	.word	0x08004ccb
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004cd7 	.word	0x08004cd7
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e117      	b.n	8004efa <UART_SetConfig+0x34e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e114      	b.n	8004efa <UART_SetConfig+0x34e>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e111      	b.n	8004efa <UART_SetConfig+0x34e>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e10e      	b.n	8004efa <UART_SetConfig+0x34e>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	bf00      	nop
 8004ce2:	e10a      	b.n	8004efa <UART_SetConfig+0x34e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a71      	ldr	r2, [pc, #452]	; (8004eb0 <UART_SetConfig+0x304>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d120      	bne.n	8004d30 <UART_SetConfig+0x184>
 8004cee:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d00f      	beq.n	8004d1c <UART_SetConfig+0x170>
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d802      	bhi.n	8004d06 <UART_SetConfig+0x15a>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <UART_SetConfig+0x164>
 8004d04:	e010      	b.n	8004d28 <UART_SetConfig+0x17c>
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d005      	beq.n	8004d16 <UART_SetConfig+0x16a>
 8004d0a:	2b30      	cmp	r3, #48	; 0x30
 8004d0c:	d009      	beq.n	8004d22 <UART_SetConfig+0x176>
 8004d0e:	e00b      	b.n	8004d28 <UART_SetConfig+0x17c>
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e0f1      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e0ee      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e0eb      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e0e8      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	bf00      	nop
 8004d2e:	e0e4      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5f      	ldr	r2, [pc, #380]	; (8004eb4 <UART_SetConfig+0x308>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d120      	bne.n	8004d7c <UART_SetConfig+0x1d0>
 8004d3a:	4b5b      	ldr	r3, [pc, #364]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d00f      	beq.n	8004d68 <UART_SetConfig+0x1bc>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d802      	bhi.n	8004d52 <UART_SetConfig+0x1a6>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <UART_SetConfig+0x1b0>
 8004d50:	e010      	b.n	8004d74 <UART_SetConfig+0x1c8>
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d005      	beq.n	8004d62 <UART_SetConfig+0x1b6>
 8004d56:	2bc0      	cmp	r3, #192	; 0xc0
 8004d58:	d009      	beq.n	8004d6e <UART_SetConfig+0x1c2>
 8004d5a:	e00b      	b.n	8004d74 <UART_SetConfig+0x1c8>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0cb      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e0c8      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0c5      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0c2      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	bf00      	nop
 8004d7a:	e0be      	b.n	8004efa <UART_SetConfig+0x34e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <UART_SetConfig+0x30c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d124      	bne.n	8004dd0 <UART_SetConfig+0x224>
 8004d86:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d94:	d012      	beq.n	8004dbc <UART_SetConfig+0x210>
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d802      	bhi.n	8004da2 <UART_SetConfig+0x1f6>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <UART_SetConfig+0x204>
 8004da0:	e012      	b.n	8004dc8 <UART_SetConfig+0x21c>
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da6:	d006      	beq.n	8004db6 <UART_SetConfig+0x20a>
 8004da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dac:	d009      	beq.n	8004dc2 <UART_SetConfig+0x216>
 8004dae:	e00b      	b.n	8004dc8 <UART_SetConfig+0x21c>
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0a1      	b.n	8004efa <UART_SetConfig+0x34e>
 8004db6:	2302      	movs	r3, #2
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e09e      	b.n	8004efa <UART_SetConfig+0x34e>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e09b      	b.n	8004efa <UART_SetConfig+0x34e>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e098      	b.n	8004efa <UART_SetConfig+0x34e>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	bf00      	nop
 8004dce:	e094      	b.n	8004efa <UART_SetConfig+0x34e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a39      	ldr	r2, [pc, #228]	; (8004ebc <UART_SetConfig+0x310>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d124      	bne.n	8004e24 <UART_SetConfig+0x278>
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de8:	d012      	beq.n	8004e10 <UART_SetConfig+0x264>
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d802      	bhi.n	8004df6 <UART_SetConfig+0x24a>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <UART_SetConfig+0x258>
 8004df4:	e012      	b.n	8004e1c <UART_SetConfig+0x270>
 8004df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfa:	d006      	beq.n	8004e0a <UART_SetConfig+0x25e>
 8004dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e00:	d009      	beq.n	8004e16 <UART_SetConfig+0x26a>
 8004e02:	e00b      	b.n	8004e1c <UART_SetConfig+0x270>
 8004e04:	2301      	movs	r3, #1
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e077      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e074      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e10:	2304      	movs	r3, #4
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e071      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e16:	2308      	movs	r3, #8
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e06e      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	bf00      	nop
 8004e22:	e06a      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <UART_SetConfig+0x314>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d124      	bne.n	8004e78 <UART_SetConfig+0x2cc>
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d012      	beq.n	8004e64 <UART_SetConfig+0x2b8>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d802      	bhi.n	8004e4a <UART_SetConfig+0x29e>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <UART_SetConfig+0x2ac>
 8004e48:	e012      	b.n	8004e70 <UART_SetConfig+0x2c4>
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x2b2>
 8004e50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e54:	d009      	beq.n	8004e6a <UART_SetConfig+0x2be>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x2c4>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e04d      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e04a      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e64:	2304      	movs	r3, #4
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e047      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e044      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	bf00      	nop
 8004e76:	e040      	b.n	8004efa <UART_SetConfig+0x34e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <UART_SetConfig+0x318>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d139      	bne.n	8004ef6 <UART_SetConfig+0x34a>
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <UART_SetConfig+0x2fc>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e90:	d027      	beq.n	8004ee2 <UART_SetConfig+0x336>
 8004e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e96:	d817      	bhi.n	8004ec8 <UART_SetConfig+0x31c>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01c      	beq.n	8004ed6 <UART_SetConfig+0x32a>
 8004e9c:	e027      	b.n	8004eee <UART_SetConfig+0x342>
 8004e9e:	bf00      	nop
 8004ea0:	efff69f3 	.word	0xefff69f3
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40004c00 	.word	0x40004c00
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	40011400 	.word	0x40011400
 8004ec0:	40007800 	.word	0x40007800
 8004ec4:	40007c00 	.word	0x40007c00
 8004ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ecc:	d006      	beq.n	8004edc <UART_SetConfig+0x330>
 8004ece:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ed2:	d009      	beq.n	8004ee8 <UART_SetConfig+0x33c>
 8004ed4:	e00b      	b.n	8004eee <UART_SetConfig+0x342>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e00e      	b.n	8004efa <UART_SetConfig+0x34e>
 8004edc:	2302      	movs	r3, #2
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e00b      	b.n	8004efa <UART_SetConfig+0x34e>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e008      	b.n	8004efa <UART_SetConfig+0x34e>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e005      	b.n	8004efa <UART_SetConfig+0x34e>
 8004eee:	2310      	movs	r3, #16
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	bf00      	nop
 8004ef4:	e001      	b.n	8004efa <UART_SetConfig+0x34e>
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f02:	d17c      	bne.n	8004ffe <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d859      	bhi.n	8004fbe <UART_SetConfig+0x412>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x364>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f53 	.word	0x08004f53
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004fbf 	.word	0x08004fbf
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004fbf 	.word	0x08004fbf
 8004f28:	08004fbf 	.word	0x08004fbf
 8004f2c:	08004fbf 	.word	0x08004fbf
 8004f30:	08004fa7 	.word	0x08004fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004f34:	f7fd fe50 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	005a      	lsls	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	441a      	add	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e038      	b.n	8004fc4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f52:	f7fd fe55 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8004f56:	4603      	mov	r3, r0
 8004f58:	005a      	lsls	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	61bb      	str	r3, [r7, #24]
        break;
 8004f6e:	e029      	b.n	8004fc4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085a      	lsrs	r2, r3, #1
 8004f76:	4b5d      	ldr	r3, [pc, #372]	; (80050ec <UART_SetConfig+0x540>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6852      	ldr	r2, [r2, #4]
 8004f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	61bb      	str	r3, [r7, #24]
        break;
 8004f86:	e01d      	b.n	8004fc4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f88:	f7fd fd68 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	005a      	lsls	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	61bb      	str	r3, [r7, #24]
        break;
 8004fa4:	e00e      	b.n	8004fc4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e002      	b.n	8004fc4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8004fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d916      	bls.n	8004ff8 <UART_SetConfig+0x44c>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d212      	bcs.n	8004ff8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f023 030f 	bic.w	r3, r3, #15
 8004fda:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	89fa      	ldrh	r2, [r7, #14]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e06e      	b.n	80050d6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	75fb      	strb	r3, [r7, #23]
 8004ffc:	e06b      	b.n	80050d6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d857      	bhi.n	80050b4 <UART_SetConfig+0x508>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x460>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	0800504d 	.word	0x0800504d
 8005014:	08005069 	.word	0x08005069
 8005018:	080050b5 	.word	0x080050b5
 800501c:	08005081 	.word	0x08005081
 8005020:	080050b5 	.word	0x080050b5
 8005024:	080050b5 	.word	0x080050b5
 8005028:	080050b5 	.word	0x080050b5
 800502c:	0800509d 	.word	0x0800509d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005030:	f7fd fdd2 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8005034:	4602      	mov	r2, r0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	61bb      	str	r3, [r7, #24]
        break;
 800504a:	e036      	b.n	80050ba <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800504c:	f7fd fdd8 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	b29b      	uxth	r3, r3
 8005064:	61bb      	str	r3, [r7, #24]
        break;
 8005066:	e028      	b.n	80050ba <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	085a      	lsrs	r2, r3, #1
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <UART_SetConfig+0x544>)
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6852      	ldr	r2, [r2, #4]
 8005076:	fbb3 f3f2 	udiv	r3, r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	61bb      	str	r3, [r7, #24]
        break;
 800507e:	e01c      	b.n	80050ba <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005080:	f7fd fcec 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	b29b      	uxth	r3, r3
 8005098:	61bb      	str	r3, [r7, #24]
        break;
 800509a:	e00e      	b.n	80050ba <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	61bb      	str	r3, [r7, #24]
        break;
 80050b2:	e002      	b.n	80050ba <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	75fb      	strb	r3, [r7, #23]
        break;
 80050b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0f      	cmp	r3, #15
 80050be:	d908      	bls.n	80050d2 <UART_SetConfig+0x526>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c6:	d204      	bcs.n	80050d2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e001      	b.n	80050d6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	01e84800 	.word	0x01e84800
 80050f0:	00f42400 	.word	0x00f42400

080050f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01a      	beq.n	800520a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f2:	d10a      	bne.n	800520a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005246:	f7fc fd71 	bl	8001d2c <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d10e      	bne.n	8005278 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f814 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e00a      	b.n	800528e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	e02a      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ae:	d026      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	f7fc fd3c 	bl	8001d2c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11b      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00f      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d0c5      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800533c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	661a      	str	r2, [r3, #96]	; 0x60
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fc07 	bl	8004b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fbe4 	bl	8004b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d8:	2b22      	cmp	r3, #34	; 0x22
 80053da:	d13a      	bne.n	8005452 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053e4:	89bb      	ldrh	r3, [r7, #12]
 80053e6:	b2d9      	uxtb	r1, r3
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	400a      	ands	r2, r1
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d121      	bne.n	8005462 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800542c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0201 	bic.w	r2, r2, #1
 800543c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc f8b0 	bl	80015b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005450:	e007      	b.n	8005462 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0208 	orr.w	r2, r2, #8
 8005460:	619a      	str	r2, [r3, #24]
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005478:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547e:	2b22      	cmp	r3, #34	; 0x22
 8005480:	d13a      	bne.n	80054f8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005490:	89ba      	ldrh	r2, [r7, #12]
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	4013      	ands	r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d121      	bne.n	8005508 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fc f85d 	bl	80015b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054f6:	e007      	b.n	8005508 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4e0d      	ldr	r6, [pc, #52]	; (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	; (800554c <__libc_init_array+0x3c>)
 8005516:	1ba4      	subs	r4, r4, r6
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2500      	movs	r5, #0
 800551c:	42a5      	cmp	r5, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4e0b      	ldr	r6, [pc, #44]	; (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	; (8005554 <__libc_init_array+0x44>)
 8005524:	f000 f820 	bl	8005568 <_init>
 8005528:	1ba4      	subs	r4, r4, r6
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2500      	movs	r5, #0
 800552e:	42a5      	cmp	r5, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005538:	4798      	blx	r3
 800553a:	3501      	adds	r5, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005542:	4798      	blx	r3
 8005544:	3501      	adds	r5, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	080055a0 	.word	0x080055a0
 800554c:	080055a0 	.word	0x080055a0
 8005550:	080055a0 	.word	0x080055a0
 8005554:	080055a8 	.word	0x080055a8

08005558 <memset>:
 8005558:	4402      	add	r2, r0
 800555a:	4603      	mov	r3, r0
 800555c:	4293      	cmp	r3, r2
 800555e:	d100      	bne.n	8005562 <memset+0xa>
 8005560:	4770      	bx	lr
 8005562:	f803 1b01 	strb.w	r1, [r3], #1
 8005566:	e7f9      	b.n	800555c <memset+0x4>

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
