
otto_pid_tuning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800561c  0800561c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005624  08005624  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000010  08005640  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08005640  00020314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbc0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e4a  00000000  00000000  0002dbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028243  00000000  00000000  00031420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a73  00000000  00000000  00059663  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1e57  00000000  00000000  000630d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  00154fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080055ec 	.word	0x080055ec

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080055ec 	.word	0x080055ec

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7Encoder8GetCountEv>:
  Encoder(TIM_HandleTypeDef *timer, int ticks_per_meters);


  void Setup();

  int GetCount() {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    int count = ((int) __HAL_TIM_GET_COUNTER(this->timer_)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        - ((this->timer_->Init.Period) / 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
    return count;
 8000554:	68fb      	ldr	r3, [r7, #12]
  }
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period / 2));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>:
//  timer_ = timer;
//  wheel_circumference_ = wheel_circ;
//
//}

Encoder::Encoder(TIM_HandleTypeDef *timer, int ticks_per_meter) {
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  timer_ = timer;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	601a      	str	r2, [r3, #0]
  ticks_per_meter_ = ticks_per_meter;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	615a      	str	r2, [r3, #20]

}
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	213c      	movs	r1, #60	; 0x3c
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f8fe 	bl	80037bc <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ffce 	bl	8000562 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005cc:	f001 fc12 	bl	8001df4 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005ee:	f001 fc01 	bl	8001df4 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff9d 	bl	8000538 <_ZN7Encoder8GetCountEv>
 80005fe:	4602      	mov	r2, r0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffac 	bl	8000562 <_ZN7Encoder10ResetCountEv>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN7Encoder9GetMetersEv>:
//  float meters = ((float) this->ticks_ * this->wheel_circumference_)
//      / TICKS_PER_REVOLUTION;
//  return meters;
//}

float Encoder::GetMeters() {
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  float meters = (((float) this->ticks_) / this->ticks_per_meter_);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000636:	edc7 7a03 	vstr	s15, [r7, #12]
  return meters;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <_ZN7Encoder17GetLinearVelocityEv>:


float Encoder::GetLinearVelocity() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffc0 	bl	80005de <_ZN7Encoder12UpdateValuesEv>
  float meters = this->GetMeters();
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffd7 	bl	8000612 <_ZN7Encoder9GetMetersEv>
 8000664:	ed87 0a05 	vstr	s0, [r7, #20]
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800067a:	edc7 7a04 	vstr	s15, [r7, #16]
  if (deltaTime == 0)
 800067e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d102      	bne.n	8000692 <_ZN7Encoder17GetLinearVelocityEv+0x42>
    return 0;
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	e00c      	b.n	80006ac <_ZN7Encoder17GetLinearVelocityEv+0x5c>
  float linear_velocity = (meters / (deltaTime / 1000));
 8000692:	edd7 7a04 	vldr	s15, [r7, #16]
 8000696:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006bc <_ZN7Encoder17GetLinearVelocityEv+0x6c>
 800069a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800069e:	edd7 6a05 	vldr	s13, [r7, #20]
 80006a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a6:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	ee07 3a90 	vmov	s15, r3
}
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	447a0000 	.word	0x447a0000

080006c0 <_ZN8OdometryC1Ev>:
  float left_velocity_;
  float right_velocity_;


 public:
  Odometry() {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    left_velocity_ = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    right_velocity_ = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  }
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <_ZN8Odometry12UpdateValuesEff>:

  void UpdateValues(float linear_vel, float angular_vel) {
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80006f4:	edc7 0a01 	vstr	s1, [r7, #4]
    left_velocity_ = linear_vel - (BASELINE * angular_vel)/2;
 80006f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000700:	edd7 7a01 	vldr	s15, [r7, #4]
 8000704:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000708:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000760 <_ZN8Odometry12UpdateValuesEff+0x78>
 800070c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000710:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000714:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000718:	ee36 7b47 	vsub.f64	d7, d6, d7
 800071c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	edc3 7a00 	vstr	s15, [r3]
    right_velocity_ = linear_vel + (BASELINE * angular_vel)/2;
 8000726:	edd7 7a02 	vldr	s15, [r7, #8]
 800072a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800072e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000736:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000760 <_ZN8Odometry12UpdateValuesEff+0x78>
 800073a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800073e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000742:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000746:	ee36 7b07 	vadd.f64	d7, d6, d7
 800074a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edc3 7a01 	vstr	s15, [r3, #4]
  }
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	33333333 	.word	0x33333333
 8000764:	3fd33333 	.word	0x3fd33333

08000768 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
  GPIO_TypeDef *dir_gpio_port_;
  uint16_t dir_pin_;
  TIM_HandleTypeDef *pwm_timer_;
  uint32_t pwm_channel_;

  MotorController(GPIO_TypeDef *sleep_gpio_port, uint16_t sleep_pin,
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4613      	mov	r3, r2
 8000776:	80fb      	strh	r3, [r7, #6]
                  GPIO_TypeDef *dir_gpio_port, uint16_t dir_pin,
                  TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel) {
    this->sleep_gpio_port_ = sleep_gpio_port;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	601a      	str	r2, [r3, #0]
    this->sleep_pin_ = sleep_pin;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	809a      	strh	r2, [r3, #4]
    this->dir_gpio_port_ = dir_gpio_port;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	609a      	str	r2, [r3, #8]
    this->dir_pin_ = dir_pin;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	8b3a      	ldrh	r2, [r7, #24]
 800078e:	819a      	strh	r2, [r3, #12]
    this->pwm_timer_ = pwm_timer;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	69fa      	ldr	r2, [r7, #28]
 8000794:	611a      	str	r2, [r3, #16]
    this->pwm_channel_ = pwm_channel;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	615a      	str	r2, [r3, #20]
  }
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <_ZN15MotorController5setupEv>:

  void setup() {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm_timer_, pwm_channel_);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4610      	mov	r0, r2
 80007be:	f002 ff27 	bl	8003610 <HAL_TIM_PWM_Start>
  }
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_ZN15MotorController9set_speedEi>:

  void set_speed(int duty_cycle) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    if (duty_cycle >= 0) {
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f2c0 8083 	blt.w	80008e4 <_ZN15MotorController9set_speedEi+0x118>
      //set direction to forward
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_SET);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6898      	ldr	r0, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	899b      	ldrh	r3, [r3, #12]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 fded 	bl	80023c8 <HAL_GPIO_WritePin>

      //check if duty_cycle exceeds maximum
      if (duty_cycle > MAX_DUTY_CYCLE)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	f240 3216 	movw	r2, #790	; 0x316
 80007f4:	4293      	cmp	r3, r2
 80007f6:	dd3d      	ble.n	8000874 <_ZN15MotorController9set_speedEi+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <_ZN15MotorController9set_speedEi+0x42>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f240 3216 	movw	r2, #790	; 0x316
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
 800080c:	e0f5      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	2b04      	cmp	r3, #4
 8000814:	d106      	bne.n	8000824 <_ZN15MotorController9set_speedEi+0x58>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f240 3216 	movw	r2, #790	; 0x316
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
 8000822:	e0ea      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	2b08      	cmp	r3, #8
 800082a:	d106      	bne.n	800083a <_ZN15MotorController9set_speedEi+0x6e>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f240 3216 	movw	r2, #790	; 0x316
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
 8000838:	e0df      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	2b0c      	cmp	r3, #12
 8000840:	d106      	bne.n	8000850 <_ZN15MotorController9set_speedEi+0x84>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f240 3216 	movw	r2, #790	; 0x316
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
 800084e:	e0d4      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	2b10      	cmp	r3, #16
 8000856:	d106      	bne.n	8000866 <_ZN15MotorController9set_speedEi+0x9a>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f240 3216 	movw	r2, #790	; 0x316
 8000862:	659a      	str	r2, [r3, #88]	; 0x58
 8000864:	e0c9      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f240 3216 	movw	r2, #790	; 0x316
 8000870:	65da      	str	r2, [r3, #92]	; 0x5c
 8000872:	e0c2      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
      else
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <_ZN15MotorController9set_speedEi+0xbc>
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	e0b8      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	2b04      	cmp	r3, #4
 800088e:	d105      	bne.n	800089c <_ZN15MotorController9set_speedEi+0xd0>
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
 800089a:	e0ae      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d105      	bne.n	80008b0 <_ZN15MotorController9set_speedEi+0xe4>
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ae:	e0a4      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	2b0c      	cmp	r3, #12
 80008b6:	d105      	bne.n	80008c4 <_ZN15MotorController9set_speedEi+0xf8>
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	641a      	str	r2, [r3, #64]	; 0x40
 80008c2:	e09a      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d105      	bne.n	80008d8 <_ZN15MotorController9set_speedEi+0x10c>
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	659a      	str	r2, [r3, #88]	; 0x58
 80008d6:	e090      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80008e2:	e08a      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>

    } else if (duty_cycle < 0){
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f280 8087 	bge.w	80009fa <_ZN15MotorController9set_speedEi+0x22e>
      //set direction to backwards
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_RESET);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6898      	ldr	r0, [r3, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	899b      	ldrh	r3, [r3, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	f001 fd66 	bl	80023c8 <HAL_GPIO_WritePin>

      //check if duty_cycle is lower than minimum
      if (duty_cycle < -MAX_DUTY_CYCLE)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4a45      	ldr	r2, [pc, #276]	; (8000a14 <_ZN15MotorController9set_speedEi+0x248>)
 8000900:	4293      	cmp	r3, r2
 8000902:	da3d      	bge.n	8000980 <_ZN15MotorController9set_speedEi+0x1b4>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <_ZN15MotorController9set_speedEi+0x14e>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f240 3216 	movw	r2, #790	; 0x316
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
 8000918:	e06f      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d106      	bne.n	8000930 <_ZN15MotorController9set_speedEi+0x164>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f240 3216 	movw	r2, #790	; 0x316
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
 800092e:	e064      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	2b08      	cmp	r3, #8
 8000936:	d106      	bne.n	8000946 <_ZN15MotorController9set_speedEi+0x17a>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f240 3216 	movw	r2, #790	; 0x316
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c
 8000944:	e059      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	d106      	bne.n	800095c <_ZN15MotorController9set_speedEi+0x190>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f240 3216 	movw	r2, #790	; 0x316
 8000958:	641a      	str	r2, [r3, #64]	; 0x40
 800095a:	e04e      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	2b10      	cmp	r3, #16
 8000962:	d106      	bne.n	8000972 <_ZN15MotorController9set_speedEi+0x1a6>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f240 3216 	movw	r2, #790	; 0x316
 800096e:	659a      	str	r2, [r3, #88]	; 0x58
 8000970:	e043      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f240 3216 	movw	r2, #790	; 0x316
 800097c:	65da      	str	r2, [r3, #92]	; 0x5c
 800097e:	e03c      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
      else
        //invert sign to make duty_cycle positive
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <_ZN15MotorController9set_speedEi+0x1ca>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	425a      	negs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
 8000994:	e031      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d106      	bne.n	80009ac <_ZN15MotorController9set_speedEi+0x1e0>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	425a      	negs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
 80009aa:	e026      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d106      	bne.n	80009c2 <_ZN15MotorController9set_speedEi+0x1f6>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	425a      	negs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	e01b      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	2b0c      	cmp	r3, #12
 80009c8:	d106      	bne.n	80009d8 <_ZN15MotorController9set_speedEi+0x20c>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	425a      	negs	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	641a      	str	r2, [r3, #64]	; 0x40
 80009d6:	e010      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	2b10      	cmp	r3, #16
 80009de:	d106      	bne.n	80009ee <_ZN15MotorController9set_speedEi+0x222>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	425a      	negs	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	659a      	str	r2, [r3, #88]	; 0x58
 80009ec:	e005      	b.n	80009fa <_ZN15MotorController9set_speedEi+0x22e>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	425a      	negs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	889b      	ldrh	r3, [r3, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f001 fcdf 	bl	80023c8 <HAL_GPIO_WritePin>

  }
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	fffffcea 	.word	0xfffffcea

08000a18 <_ZN15MotorController5coastEv>:
  void brake() {
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
  }

  void coast() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_RESET);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f001 fccc 	bl	80023c8 <HAL_GPIO_WritePin>
  }
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZN3PidC1Efff>:
  float previous_error_;

  int min_;
  int max_;

  Pid(float kp, float ki, float kd) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a44:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a48:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f04f 0200 	mov.w	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]

    this->min_ = -MAX_DUTY_CYCLE;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <_ZN3PidC1Efff+0x64>)
 8000a82:	61da      	str	r2, [r3, #28]
    this->max_ = MAX_DUTY_CYCLE;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f240 3216 	movw	r2, #790	; 0x316
 8000a8a:	621a      	str	r2, [r3, #32]

  }
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	fffffcea 	.word	0xfffffcea

08000aa0 <_ZN3Pid6configEfff>:

  void config(float kp, float ki, float kd) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aac:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ab0:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f04f 0200 	mov.w	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f04f 0200 	mov.w	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]

  }
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_ZN3Pid3setEf>:

  void set(float setpoint) {
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	ed87 0a00 	vstr	s0, [r7]
    this->setpoint_ = setpoint;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	611a      	str	r2, [r3, #16]
  }
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_ZN3Pid6updateEf>:

  int update(float measure) {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	ed87 0a00 	vstr	s0, [r7]

    this->error_ = this->setpoint_ - measure;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b22:	edd7 7a00 	vldr	s15, [r7]
 8000b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	edc3 7a03 	vstr	s15, [r3, #12]

    //proportional term
    float output = this->error_ * this->kp_;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b40:	edc7 7a03 	vstr	s15, [r7, #12]

    //integral term without windup
    error_sum_ += this->error_;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	edc3 7a05 	vstr	s15, [r3, #20]
    output += error_sum_ * this->ki_;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b72:	edc7 7a03 	vstr	s15, [r7, #12]

    //derivative term
    output += (this->error_ - this->previous_error_) * kd_;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b90:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	edc7 7a03 	vstr	s15, [r7, #12]
    this->previous_error_ = this->error_;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]

    int integer_output = static_cast<int> (output);
 8000ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bac:	ee17 3a90 	vmov	r3, s15
 8000bb0:	60bb      	str	r3, [r7, #8]
//    if(integer_output > this->max_)
//      integer_output = this->max_;
//    else if (integer_output < this->min_)
//      integer_output = this->min_;

    return integer_output;
 8000bb2:	68bb      	ldr	r3, [r7, #8]

  }
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f001 f8c5 	bl	8001d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f842 	bl	8000c50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 fb1a 	bl	8001204 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000bd0:	f000 f8e4 	bl	8000d9c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000bd4:	f000 f940 	bl	8000e58 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000bd8:	f000 f99c 	bl	8000f14 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000bdc:	f000 fa3a 	bl	8001054 <_ZL12MX_TIM5_Initv>
  MX_USART6_UART_Init();
 8000be0:	f000 fada 	bl	8001198 <_ZL19MX_USART6_UART_Initv>
  MX_TIM6_Init();
 8000be4:	f000 fa96 	bl	8001114 <_ZL12MX_TIM6_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000be8:	f000 f8bc 	bl	8000d64 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  left_encoder.Setup();
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <main+0x6c>)
 8000bee:	f7ff fcdd 	bl	80005ac <_ZN7Encoder5SetupEv>
  right_encoder.Setup();
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <main+0x70>)
 8000bf4:	f7ff fcda 	bl	80005ac <_ZN7Encoder5SetupEv>

  left_motor.setup();
 8000bf8:	480e      	ldr	r0, [pc, #56]	; (8000c34 <main+0x74>)
 8000bfa:	f7ff fdd6 	bl	80007aa <_ZN15MotorController5setupEv>
  right_motor.setup();
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <main+0x78>)
 8000c00:	f7ff fdd3 	bl	80007aa <_ZN15MotorController5setupEv>

  left_motor.coast();
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <main+0x74>)
 8000c06:	f7ff ff07 	bl	8000a18 <_ZN15MotorController5coastEv>
  right_motor.coast();
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <main+0x78>)
 8000c0c:	f7ff ff04 	bl	8000a18 <_ZN15MotorController5coastEv>

  tx_buffer = (uint8_t*) &output_msg;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <main+0x7c>)
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <main+0x80>)
 8000c14:	601a      	str	r2, [r3, #0]
  rx_buffer = (uint8_t*) &input_msg;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <main+0x84>)
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <main+0x88>)
 8000c1a:	601a      	str	r2, [r3, #0]

  //Enables UART RX interrupt
  HAL_UART_Receive_IT(&huart6, rx_buffer, 28);
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <main+0x84>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	221c      	movs	r2, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <main+0x8c>)
 8000c26:	f003 fe31 	bl	800488c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000c2a:	e7fe      	b.n	8000c2a <main+0x6a>
 8000c2c:	20000204 	.word	0x20000204
 8000c30:	200001ec 	.word	0x200001ec
 8000c34:	200002c4 	.word	0x200002c4
 8000c38:	200002ac 	.word	0x200002ac
 8000c3c:	200002dc 	.word	0x200002dc
 8000c40:	20000300 	.word	0x20000300
 8000c44:	200002e0 	.word	0x200002e0
 8000c48:	200002e4 	.word	0x200002e4
 8000c4c:	2000016c 	.word	0x2000016c

08000c50 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b8      	sub	sp, #224	; 0xe0
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5a:	2234      	movs	r2, #52	; 0x34
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fcbc 	bl	80055dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2290      	movs	r2, #144	; 0x90
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fcad 	bl	80055dc <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <_Z18SystemClock_Configv+0x10c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a35      	ldr	r2, [pc, #212]	; (8000d5c <_Z18SystemClock_Configv+0x10c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <_Z18SystemClock_Configv+0x10c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <_Z18SystemClock_Configv+0x110>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <_Z18SystemClock_Configv+0x110>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <_Z18SystemClock_Configv+0x110>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fbaa 	bl	800242c <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <_Z18SystemClock_Configv+0x9c>
    Error_Handler();
 8000ce8:	f000 fd88 	bl	80017fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fdfd 	bl	8002910 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_Z18SystemClock_Configv+0xda>
    Error_Handler();
 8000d26:	f000 fd69 	bl	80017fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d30:	2300      	movs	r3, #0
 8000d32:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 ffb7 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <_Z18SystemClock_Configv+0x102>
    Error_Handler();
 8000d4e:	f000 fd55 	bl	80017fc <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	37e0      	adds	r7, #224	; 0xe0
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	201d      	movs	r0, #29
 8000d6e:	f001 f928 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d72:	201d      	movs	r0, #29
 8000d74:	f001 f941 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8000d78:	2202      	movs	r2, #2
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	2036      	movs	r0, #54	; 0x36
 8000d7e:	f001 f920 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d82:	2036      	movs	r0, #54	; 0x36
 8000d84:	f001 f939 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	2047      	movs	r0, #71	; 0x47
 8000d8e:	f001 f918 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d92:	2047      	movs	r0, #71	; 0x47
 8000d94:	f001 f931 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2224      	movs	r2, #36	; 0x24
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 fc16 	bl	80055dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000de2:	2303      	movs	r3, #3
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000e0e:	f002 fc43 	bl	8003698 <HAL_TIM_Encoder_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <_ZL12MX_TIM2_Initv+0x8a>
    Error_Handler();
 8000e22:	f000 fceb 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <_ZL12MX_TIM2_Initv+0xb8>)
 8000e34:	f003 fbd0 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <_ZL12MX_TIM2_Initv+0xb0>
    Error_Handler();
 8000e48:	f000 fcd8 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000002c 	.word	0x2000002c

08000e58 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e78:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <_ZL12MX_TIM3_Initv+0xb8>)
 8000e7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e8c:	229f      	movs	r2, #159	; 0x9f
 8000e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000e9c:	481b      	ldr	r0, [pc, #108]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000e9e:	f002 fb2b 	bl	80034f8 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <_ZL12MX_TIM3_Initv+0x5e>
    Error_Handler();
 8000eb2:	f000 fca3 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4812      	ldr	r0, [pc, #72]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000ec4:	f002 fee8 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <_ZL12MX_TIM3_Initv+0x84>
    Error_Handler();
 8000ed8:	f000 fc90 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <_ZL12MX_TIM3_Initv+0xb4>)
 8000eea:	f003 fb75 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <_ZL12MX_TIM3_Initv+0xaa>
    Error_Handler();
 8000efe:	f000 fc7d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000006c 	.word	0x2000006c
 8000f10:	40000400 	.word	0x40000400

08000f14 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f48:	4a41      	ldr	r2, [pc, #260]	; (8001050 <_ZL12MX_TIM4_Initv+0x13c>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 8000f58:	4b3c      	ldr	r3, [pc, #240]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f5a:	f240 321f 	movw	r2, #799	; 0x31f
 8000f5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000f6c:	4837      	ldr	r0, [pc, #220]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f6e:	f002 fac3 	bl	80034f8 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL12MX_TIM4_Initv+0x72>
    Error_Handler();
 8000f82:	f000 fc3b 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f90:	4619      	mov	r1, r3
 8000f92:	482e      	ldr	r0, [pc, #184]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000f94:	f002 fe80 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf14      	ite	ne
 8000f9e:	2301      	movne	r3, #1
 8000fa0:	2300      	moveq	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <_ZL12MX_TIM4_Initv+0x98>
    Error_Handler();
 8000fa8:	f000 fc28 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000fae:	f002 faf9 	bl	80035a4 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZL12MX_TIM4_Initv+0xb2>
    Error_Handler();
 8000fc2:	f000 fc1b 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8000fd6:	f003 faff 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <_ZL12MX_TIM4_Initv+0xda>
    Error_Handler();
 8000fea:	f000 fc07 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000ffe:	463b      	mov	r3, r7
 8001000:	2208      	movs	r2, #8
 8001002:	4619      	mov	r1, r3
 8001004:	4811      	ldr	r0, [pc, #68]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8001006:	f002 fd2f 	bl	8003a68 <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZL12MX_TIM4_Initv+0x10a>
    Error_Handler();
 800101a:	f000 fbef 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800101e:	463b      	mov	r3, r7
 8001020:	220c      	movs	r2, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8001026:	f002 fd1f 	bl	8003a68 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <_ZL12MX_TIM4_Initv+0x12a>
    Error_Handler();
 800103a:	f000 fbdf 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <_ZL12MX_TIM4_Initv+0x138>)
 8001040:	f000 fd58 	bl	8001af4 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200000ac 	.word	0x200000ac
 8001050:	40000800 	.word	0x40000800

08001054 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 faba 	bl	80055dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <_ZL12MX_TIM5_Initv+0xbc>)
 8001076:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 80010c4:	f002 fae8 	bl	8003698 <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <_ZL12MX_TIM5_Initv+0x88>
    Error_Handler();
 80010d8:	f000 fb90 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <_ZL12MX_TIM5_Initv+0xb8>)
 80010ea:	f003 fa75 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_ZL12MX_TIM5_Initv+0xae>
    Error_Handler();
 80010fe:	f000 fb7d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000ec 	.word	0x200000ec
 8001110:	40000c00 	.word	0x40000c00

08001114 <_ZL12MX_TIM6_Initv>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <_ZL12MX_TIM6_Initv+0x80>)
 8001128:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 800112c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001130:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 800113a:	f240 321f 	movw	r2, #799	; 0x31f
 800113e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 8001148:	f002 f9d6 	bl	80034f8 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf14      	ite	ne
 8001152:	2301      	movne	r3, #1
 8001154:	2300      	moveq	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZL12MX_TIM6_Initv+0x4c>
    Error_Handler();
 800115c:	f000 fb4e 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <_ZL12MX_TIM6_Initv+0x7c>)
 800116e:	f003 fa33 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <_ZL12MX_TIM6_Initv+0x72>
    Error_Handler();
 8001182:	f000 fb3b 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000012c 	.word	0x2000012c
 8001194:	40001000 	.word	0x40001000

08001198 <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <_ZL19MX_USART6_UART_Initv+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_ODD;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK) {
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <_ZL19MX_USART6_UART_Initv+0x64>)
 80011e0:	f003 fa74 	bl	80046cc <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL19MX_USART6_UART_Initv+0x60>
    Error_Handler();
 80011f4:	f000 fb02 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000016c 	.word	0x2000016c
 8001200:	40011400 	.word	0x40011400

08001204 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b5e      	ldr	r3, [pc, #376]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a5d      	ldr	r2, [pc, #372]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b58      	ldr	r3, [pc, #352]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a57      	ldr	r2, [pc, #348]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b55      	ldr	r3, [pc, #340]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b52      	ldr	r3, [pc, #328]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a51      	ldr	r2, [pc, #324]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a45      	ldr	r2, [pc, #276]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <_ZL12MX_GPIO_Initv+0x190>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, dir2_Pin | dir1_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012b0:	4839      	ldr	r0, [pc, #228]	; (8001398 <_ZL12MX_GPIO_Initv+0x194>)
 80012b2:	f001 f889 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, sleep2_Pin | sleep1_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012bc:	4836      	ldr	r0, [pc, #216]	; (8001398 <_ZL12MX_GPIO_Initv+0x194>)
 80012be:	f001 f883 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <_ZL12MX_GPIO_Initv+0x198>)
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4832      	ldr	r0, [pc, #200]	; (80013a0 <_ZL12MX_GPIO_Initv+0x19c>)
 80012d8:	f000 fecc 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : current2_Pin */
  GPIO_InitStruct.Pin = current2_Pin;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current2_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	482c      	ldr	r0, [pc, #176]	; (80013a0 <_ZL12MX_GPIO_Initv+0x19c>)
 80012f0:	f000 fec0 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : current1_Pin */
  GPIO_InitStruct.Pin = current1_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001308:	f000 feb4 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault2_Pin */
  GPIO_InitStruct.Pin = fault2_Pin;
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001320:	f000 fea8 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin | dir1_Pin;
 8001324:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <_ZL12MX_GPIO_Initv+0x194>)
 800133e:	f000 fe99 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : sleep2_Pin sleep1_Pin */
  GPIO_InitStruct.Pin = sleep2_Pin | sleep1_Pin;
 8001342:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <_ZL12MX_GPIO_Initv+0x194>)
 800135c:	f000 fe8a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault1_Pin */
  GPIO_InitStruct.Pin = fault1_Pin;
 8001360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8001376:	f000 fe7d 	bl	8002074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f000 fe1f 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001384:	2028      	movs	r0, #40	; 0x28
 8001386:	f000 fe38 	bl	8001ffa <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	; 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40021400 	.word	0x40021400
 800139c:	10110000 	.word	0x10110000
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  //TIMER 100Hz PID control
  if (htim->Instance == TIM3) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a62      	ldr	r2, [pc, #392]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	f040 80be 	bne.w	800153c <HAL_TIM_PeriodElapsedCallback+0x190>

    if (mode == 1) {
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ca:	eef4 7a47 	vcmp.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d123      	bne.n	800141c <HAL_TIM_PeriodElapsedCallback+0x70>
      left_velocity = left_encoder.GetLinearVelocity();
 80013d4:	485d      	ldr	r0, [pc, #372]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80013d6:	f7ff f93b 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
      output_msg.velocity = left_velocity;
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80013ea:	6013      	str	r3, [r2, #0]
      left_dutycycle = left_pid.update(left_velocity);
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	4858      	ldr	r0, [pc, #352]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80013f8:	f7ff fb8a 	bl	8000b10 <_ZN3Pid6updateEf>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b57      	ldr	r3, [pc, #348]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001400:	601a      	str	r2, [r3, #0]
      left_motor.set_speed(left_dutycycle);
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4855      	ldr	r0, [pc, #340]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800140a:	f7ff f9df 	bl	80007cc <_ZN15MotorController9set_speedEi>
      HAL_UART_Transmit(&huart6, tx_buffer, 4, 100);
 800140e:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	2204      	movs	r2, #4
 8001416:	4854      	ldr	r0, [pc, #336]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001418:	f003 f9a6 	bl	8004768 <HAL_UART_Transmit>

    }
    if (mode == 2) {
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001426:	eef4 7a47 	vcmp.f32	s15, s14
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d123      	bne.n	8001478 <HAL_TIM_PeriodElapsedCallback+0xcc>
      right_velocity = right_encoder.GetLinearVelocity();
 8001430:	484e      	ldr	r0, [pc, #312]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001432:	f7ff f90d 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 8001436:	eef0 7a40 	vmov.f32	s15, s0
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
      output_msg.velocity = right_velocity;
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001446:	6013      	str	r3, [r2, #0]
      right_dutycycle = right_pid.update(right_velocity);
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	4848      	ldr	r0, [pc, #288]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001454:	f7ff fb5c 	bl	8000b10 <_ZN3Pid6updateEf>
 8001458:	4602      	mov	r2, r0
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800145c:	601a      	str	r2, [r3, #0]
      right_motor.set_speed(right_dutycycle);
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4845      	ldr	r0, [pc, #276]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001466:	f7ff f9b1 	bl	80007cc <_ZN15MotorController9set_speedEi>
      HAL_UART_Transmit(&huart6, tx_buffer, 4, 100);
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	2204      	movs	r2, #4
 8001472:	483d      	ldr	r0, [pc, #244]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001474:	f003 f978 	bl	8004768 <HAL_UART_Transmit>
    }
    if (mode == 3) {
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001482:	eef4 7a47 	vcmp.f32	s15, s14
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	d157      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x190>

      left_velocity = left_encoder.GetLinearVelocity();
 800148c:	482f      	ldr	r0, [pc, #188]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800148e:	f7ff f8df 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 8001492:	eef0 7a40 	vmov.f32	s15, s0
 8001496:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
      left_dutycycle = left_pid.update(left_velocity);
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	482c      	ldr	r0, [pc, #176]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80014a8:	f7ff fb32 	bl	8000b10 <_ZN3Pid6updateEf>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014b0:	601a      	str	r2, [r3, #0]
      left_motor.set_speed(left_dutycycle);
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4829      	ldr	r0, [pc, #164]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014ba:	f7ff f987 	bl	80007cc <_ZN15MotorController9set_speedEi>

      right_velocity = right_encoder.GetLinearVelocity();
 80014be:	482b      	ldr	r0, [pc, #172]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014c0:	f7ff f8c6 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80014c4:	eef0 7a40 	vmov.f32	s15, s0
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
      right_dutycycle = right_pid.update(right_velocity);
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	4826      	ldr	r0, [pc, #152]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80014da:	f7ff fb19 	bl	8000b10 <_ZN3Pid6updateEf>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80014e2:	601a      	str	r2, [r3, #0]
      right_motor.set_speed(right_dutycycle);
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4824      	ldr	r0, [pc, #144]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80014ec:	f7ff f96e 	bl	80007cc <_ZN15MotorController9set_speedEi>

      float difference = left_velocity - right_velocity;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	edc7 7a03 	vstr	s15, [r7, #12]

      int cross_dutycycle = cross_pid.update(difference);
 8001504:	ed97 0a03 	vldr	s0, [r7, #12]
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800150a:	f7ff fb01 	bl	8000b10 <_ZN3Pid6updateEf>
 800150e:	60b8      	str	r0, [r7, #8]

      left_dutycycle += cross_dutycycle;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800151a:	6013      	str	r3, [r2, #0]
      right_dutycycle -= cross_dutycycle;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001526:	6013      	str	r3, [r2, #0]

      output_msg.velocity = difference;
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6013      	str	r3, [r2, #0]
      HAL_UART_Transmit(&huart6, tx_buffer, 4, 100);
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	2204      	movs	r2, #4
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001538:	f003 f916 	bl	8004768 <HAL_UART_Transmit>
  }

  //TIMER 2Hz Transmit
  if (htim->Instance == TIM6) {
  }
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40000400 	.word	0x40000400
 8001548:	2000030c 	.word	0x2000030c
 800154c:	20000204 	.word	0x20000204
 8001550:	20000224 	.word	0x20000224
 8001554:	20000300 	.word	0x20000300
 8001558:	2000022c 	.word	0x2000022c
 800155c:	200002a4 	.word	0x200002a4
 8001560:	200002c4 	.word	0x200002c4
 8001564:	200002dc 	.word	0x200002dc
 8001568:	2000016c 	.word	0x2000016c
 800156c:	200001ec 	.word	0x200001ec
 8001570:	20000228 	.word	0x20000228
 8001574:	20000250 	.word	0x20000250
 8001578:	200002a8 	.word	0x200002a8
 800157c:	200002ac 	.word	0x200002ac
 8001580:	20000274 	.word	0x20000274
 8001584:	00000000 	.word	0x00000000

08001588 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  if (input_msg.pid_select == 1) {
 8001590:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800159a:	eef4 7a47 	vcmp.f32	s15, s14
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d11a      	bne.n	80015da <HAL_UART_RxCpltCallback+0x52>

    left_pid.config(input_msg.pid_kp, input_msg.pid_ki, input_msg.pid_kd);
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b0:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015b2:	edd3 6a06 	vldr	s13, [r3, #24]
 80015b6:	eeb0 1a66 	vmov.f32	s2, s13
 80015ba:	eef0 0a47 	vmov.f32	s1, s14
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	4860      	ldr	r0, [pc, #384]	; (8001744 <HAL_UART_RxCpltCallback+0x1bc>)
 80015c4:	f7ff fa6c 	bl	8000aa0 <_ZN3Pid6configEfff>
    left_pid.set(input_msg.pid_setpoint_fixed);
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ce:	eeb0 0a67 	vmov.f32	s0, s15
 80015d2:	485c      	ldr	r0, [pc, #368]	; (8001744 <HAL_UART_RxCpltCallback+0x1bc>)
 80015d4:	f7ff fa8d 	bl	8000af2 <_ZN3Pid3setEf>

    cross_setpoint = left_setpoint - right_setpoint;
    cross_pid.set(cross_setpoint);
  }

}
 80015d8:	e0a8      	b.n	800172c <HAL_UART_RxCpltCallback+0x1a4>
  } else if (input_msg.pid_select == 2) {
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015e4:	eef4 7a47 	vcmp.f32	s15, s14
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d11a      	bne.n	8001624 <HAL_UART_RxCpltCallback+0x9c>
    right_pid.config(input_msg.pid_kp, input_msg.pid_ki, input_msg.pid_kd);
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015f4:	4b52      	ldr	r3, [pc, #328]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80015fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001600:	eeb0 1a66 	vmov.f32	s2, s13
 8001604:	eef0 0a47 	vmov.f32	s1, s14
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	484e      	ldr	r0, [pc, #312]	; (8001748 <HAL_UART_RxCpltCallback+0x1c0>)
 800160e:	f7ff fa47 	bl	8000aa0 <_ZN3Pid6configEfff>
    right_pid.set(input_msg.pid_setpoint_fixed);
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001614:	edd3 7a01 	vldr	s15, [r3, #4]
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	484a      	ldr	r0, [pc, #296]	; (8001748 <HAL_UART_RxCpltCallback+0x1c0>)
 800161e:	f7ff fa68 	bl	8000af2 <_ZN3Pid3setEf>
}
 8001622:	e083      	b.n	800172c <HAL_UART_RxCpltCallback+0x1a4>
  } else if (input_msg.pid_select == 3) {
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800162e:	eef4 7a47 	vcmp.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d179      	bne.n	800172c <HAL_UART_RxCpltCallback+0x1a4>
    left_pid.config(180, 200, 0);
 8001638:	ed9f 1a44 	vldr	s2, [pc, #272]	; 800174c <HAL_UART_RxCpltCallback+0x1c4>
 800163c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8001750 <HAL_UART_RxCpltCallback+0x1c8>
 8001640:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8001754 <HAL_UART_RxCpltCallback+0x1cc>
 8001644:	483f      	ldr	r0, [pc, #252]	; (8001744 <HAL_UART_RxCpltCallback+0x1bc>)
 8001646:	f7ff fa2b 	bl	8000aa0 <_ZN3Pid6configEfff>
    right_pid.config(185, 195, 0);
 800164a:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800174c <HAL_UART_RxCpltCallback+0x1c4>
 800164e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001758 <HAL_UART_RxCpltCallback+0x1d0>
 8001652:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800175c <HAL_UART_RxCpltCallback+0x1d4>
 8001656:	483c      	ldr	r0, [pc, #240]	; (8001748 <HAL_UART_RxCpltCallback+0x1c0>)
 8001658:	f7ff fa22 	bl	8000aa0 <_ZN3Pid6configEfff>
    cross_pid.config(input_msg.pid_kp, input_msg.pid_ki, input_msg.pid_kd);
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 800165e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001664:	ed93 7a05 	vldr	s14, [r3, #20]
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 800166a:	edd3 6a06 	vldr	s13, [r3, #24]
 800166e:	eeb0 1a66 	vmov.f32	s2, s13
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4839      	ldr	r0, [pc, #228]	; (8001760 <HAL_UART_RxCpltCallback+0x1d8>)
 800167c:	f7ff fa10 	bl	8000aa0 <_ZN3Pid6configEfff>
    odom.UpdateValues(input_msg.pid_setpoint_lin, input_msg.pid_setpoint_ang);
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001682:	edd3 7a02 	vldr	s15, [r3, #8]
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 8001688:	ed93 7a03 	vldr	s14, [r3, #12]
 800168c:	eef0 0a47 	vmov.f32	s1, s14
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	4833      	ldr	r0, [pc, #204]	; (8001764 <HAL_UART_RxCpltCallback+0x1dc>)
 8001696:	f7ff f827 	bl	80006e8 <_ZN8Odometry12UpdateValuesEff>
    left_setpoint = input_msg.pid_setpoint_lin
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 800169c:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
        - (BASELINE * input_msg.pid_setpoint_ang) / 2;
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80016a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ae:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001738 <HAL_UART_RxCpltCallback+0x1b0>
 80016b2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80016b6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80016ba:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80016be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    left_setpoint = input_msg.pid_setpoint_lin
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_UART_RxCpltCallback+0x1e0>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
    right_setpoint = 2 * input_msg.pid_setpoint_lin - left_setpoint;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_UART_RxCpltCallback+0x1b8>)
 80016ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_UART_RxCpltCallback+0x1e0>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_UART_RxCpltCallback+0x1e4>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
    left_pid.set(left_setpoint);
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_UART_RxCpltCallback+0x1e0>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <HAL_UART_RxCpltCallback+0x1bc>)
 80016f2:	f7ff f9fe 	bl	8000af2 <_ZN3Pid3setEf>
    right_pid.set(right_setpoint);
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_UART_RxCpltCallback+0x1e4>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <HAL_UART_RxCpltCallback+0x1c0>)
 8001702:	f7ff f9f6 	bl	8000af2 <_ZN3Pid3setEf>
    cross_setpoint = left_setpoint - right_setpoint;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_UART_RxCpltCallback+0x1e0>)
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_UART_RxCpltCallback+0x1e4>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_UART_RxCpltCallback+0x1e8>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
    cross_pid.set(cross_setpoint);
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_UART_RxCpltCallback+0x1e8>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <HAL_UART_RxCpltCallback+0x1d8>)
 8001728:	f7ff f9e3 	bl	8000af2 <_ZN3Pid3setEf>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f3af 8000 	nop.w
 8001738:	33333333 	.word	0x33333333
 800173c:	3fd33333 	.word	0x3fd33333
 8001740:	200002e4 	.word	0x200002e4
 8001744:	2000022c 	.word	0x2000022c
 8001748:	20000250 	.word	0x20000250
 800174c:	00000000 	.word	0x00000000
 8001750:	43480000 	.word	0x43480000
 8001754:	43340000 	.word	0x43340000
 8001758:	43430000 	.word	0x43430000
 800175c:	43390000 	.word	0x43390000
 8001760:	20000274 	.word	0x20000274
 8001764:	2000021c 	.word	0x2000021c
 8001768:	20000298 	.word	0x20000298
 800176c:	2000029c 	.word	0x2000029c
 8001770:	200002a0 	.word	0x200002a0

08001774 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  //Blue user button
  if (GPIO_Pin == GPIO_PIN_13) {
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001784:	d12a      	bne.n	80017dc <HAL_GPIO_EXTI_Callback+0x68>
    previous_millis = current_millis;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x74>)
 800178c:	6013      	str	r3, [r2, #0]
    current_millis = HAL_GetTick();
 800178e:	f000 fb31 	bl	8001df4 <HAL_GetTick>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001798:	601a      	str	r2, [r3, #0]
    if (current_millis - previous_millis < 200)
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x70>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x74>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2bc7      	cmp	r3, #199	; 0xc7
 80017a6:	dc03      	bgt.n	80017b0 <HAL_GPIO_EXTI_Callback+0x3c>
      debounce = false;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_GPIO_EXTI_Callback+0x78>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_EXTI_Callback+0x42>
    else
      debounce = true;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_GPIO_EXTI_Callback+0x78>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
    if (mode == 0 && debounce) {
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d10a      	bne.n	80017dc <HAL_GPIO_EXTI_Callback+0x68>
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_GPIO_EXTI_Callback+0x78>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_Callback+0x68>
      mode = input_msg.pid_select;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017d4:	6013      	str	r3, [r2, #0]
      //Enables TIM3 interrupt (used for PID control)
      HAL_TIM_Base_Start_IT(&htim3);
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80017d8:	f001 feba 	bl	8003550 <HAL_TIM_Base_Start_IT>
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000308 	.word	0x20000308
 80017e8:	20000304 	.word	0x20000304
 80017ec:	20000000 	.word	0x20000000
 80017f0:	2000030c 	.word	0x2000030c
 80017f4:	200002e4 	.word	0x200002e4
 80017f8:	2000006c 	.word	0x2000006c

080017fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_Z41__static_initialization_and_destruction_0ii>:
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af04      	add	r7, sp, #16
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d148      	bne.n	80018ae <_Z41__static_initialization_and_destruction_0ii+0xa2>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	4293      	cmp	r3, r2
 8001824:	d143      	bne.n	80018ae <_Z41__static_initialization_and_destruction_0ii+0xa2>
Encoder right_encoder = Encoder(&htim5, RIGHT_WHEEL_CIRCUMFERENCE);
 8001826:	2200      	movs	r2, #0
 8001828:	4923      	ldr	r1, [pc, #140]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800182a:	4824      	ldr	r0, [pc, #144]	; (80018bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800182c:	f7fe feab 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Encoder left_encoder = Encoder(&htim2, LEFT_WHEEL_CIRCUMFERENCE);
 8001830:	2200      	movs	r2, #0
 8001832:	4923      	ldr	r1, [pc, #140]	; (80018c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001834:	4823      	ldr	r0, [pc, #140]	; (80018c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001836:	f7fe fea6 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Odometry odom = Odometry();
 800183a:	4823      	ldr	r0, [pc, #140]	; (80018c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800183c:	f7fe ff40 	bl	80006c0 <_ZN8OdometryC1Ev>
Pid left_pid(0, 0, 0);
 8001840:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001844:	eddf 0a21 	vldr	s1, [pc, #132]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001848:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800184c:	4820      	ldr	r0, [pc, #128]	; (80018d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800184e:	f7ff f8f3 	bl	8000a38 <_ZN3PidC1Efff>
Pid right_pid(0, 0, 0);
 8001852:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001856:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800185a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800185e:	481d      	ldr	r0, [pc, #116]	; (80018d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001860:	f7ff f8ea 	bl	8000a38 <_ZN3PidC1Efff>
Pid cross_pid(0, 0, 0);
 8001864:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001868:	eddf 0a18 	vldr	s1, [pc, #96]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800186c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80018cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001870:	4819      	ldr	r0, [pc, #100]	; (80018d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001872:	f7ff f8e1 	bl	8000a38 <_ZN3PidC1Efff>
                            TIM_CHANNEL_4);
 8001876:	230c      	movs	r3, #12
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001886:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800188c:	4815      	ldr	r0, [pc, #84]	; (80018e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800188e:	f7fe ff6b 	bl	8000768 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
                           TIM_CHANNEL_3);
 8001892:	2308      	movs	r3, #8
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80018aa:	f7fe ff5d 	bl	8000768 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000ec 	.word	0x200000ec
 80018bc:	200001ec 	.word	0x200001ec
 80018c0:	2000002c 	.word	0x2000002c
 80018c4:	20000204 	.word	0x20000204
 80018c8:	2000021c 	.word	0x2000021c
 80018cc:	00000000 	.word	0x00000000
 80018d0:	2000022c 	.word	0x2000022c
 80018d4:	20000250 	.word	0x20000250
 80018d8:	20000274 	.word	0x20000274
 80018dc:	200000ac 	.word	0x200000ac
 80018e0:	40021400 	.word	0x40021400
 80018e4:	200002ac 	.word	0x200002ac
 80018e8:	200002c4 	.word	0x200002c4

080018ec <_GLOBAL__sub_I_htim2>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ff89 	bl	800180c <_Z41__static_initialization_and_destruction_0ii>
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x44>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x44>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x44>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x44>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x44>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d144      	bne.n	80019f0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = encoder_sx1_Pin;
 80019ae:	2320      	movs	r3, #32
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019be:	2301      	movs	r3, #1
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx1_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4823      	ldr	r0, [pc, #140]	; (8001a58 <HAL_TIM_Encoder_MspInit+0x114>)
 80019ca:	f000 fb53 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder_sx2_Pin;
 80019ce:	2308      	movs	r3, #8
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019de:	2301      	movs	r3, #1
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx2_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x118>)
 80019ea:	f000 fb43 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019ee:	e02c      	b.n	8001a4a <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x11c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d127      	bne.n	8001a4a <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x110>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_dx1_Pin|encoder_dx2_Pin;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_TIM_Encoder_MspInit+0x114>)
 8001a46:	f000 fb15 	bl	8002074 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40000c00 	.word	0x40000c00

08001a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_TIM_Base_MspInit+0x80>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10c      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a8e:	e022      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_TIM_Base_MspInit+0x88>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10c      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
}
 8001ab2:	e010      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_TIM_Base_MspInit+0x8c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10b      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_TIM_Base_MspInit+0x84>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40001000 	.word	0x40001000

08001af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x64>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d11c      	bne.n	8001b50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 8001b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_TIM_MspPostInit+0x6c>)
 8001b4c:	f000 fa92 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0x7c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d127      	bne.n	8001bd6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_UART_MspInit+0x84>)
 8001bd2:	f000 fa4f 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 f8c4 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM3_IRQHandler+0x10>)
 8001c4e:	f001 fdec 	bl	800382a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000006c 	.word	0x2000006c

08001c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c64:	f000 fbca 	bl	80023fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM6_DAC_IRQHandler+0x10>)
 8001c72:	f001 fdda 	bl	800382a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000012c 	.word	0x2000012c

08001c80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <USART6_IRQHandler+0x10>)
 8001c86:	f002 fea3 	bl	80049d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000016c 	.word	0x2000016c

08001c94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <SystemInit+0x5c>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <SystemInit+0x5c>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <SystemInit+0x60>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <SystemInit+0x60>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <SystemInit+0x60>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <SystemInit+0x60>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <SystemInit+0x60>)
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <SystemInit+0x64>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <SystemInit+0x60>)
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <SystemInit+0x68>)
 8001cca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <SystemInit+0x60>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <SystemInit+0x60>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x60>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SystemInit+0x5c>)
 8001ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce4:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	fef6ffff 	.word	0xfef6ffff
 8001cfc:	24003010 	.word	0x24003010

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d06:	e003      	b.n	8001d10 <LoopCopyDataInit>

08001d08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d0e:	3104      	adds	r1, #4

08001d10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d18:	d3f6      	bcc.n	8001d08 <CopyDataInit>
  ldr  r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d1c:	e002      	b.n	8001d24 <LoopFillZerobss>

08001d1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d20:	f842 3b04 	str.w	r3, [r2], #4

08001d24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d28:	d3f9      	bcc.n	8001d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2a:	f7ff ffb3 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f003 fc31 	bl	8005594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7fe ff45 	bl	8000bc0 <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001d3c:	08005630 	.word	0x08005630
  ldr  r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d44:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001d48:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001d4c:	20000314 	.word	0x20000314

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>

08001d52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d56:	2003      	movs	r0, #3
 8001d58:	f000 f928 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f805 	bl	8001d6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d62:	f7ff fdcb 	bl	80018fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f943 	bl	8002016 <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da8:	f000 f90b 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000310 	.word	0x20000310

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000310 	.word	0x20000310

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	05fa0000 	.word	0x05fa0000

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8c:	f7ff ff8e 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff29 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff3e 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff8e 	bl	8001f00 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5d 	bl	8001eac <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff31 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00c      	b.n	8002066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e175      	b.n	8002380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8164 	bne.w	800237a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x4e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	69b9      	ldr	r1, [r7, #24]
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0203 	and.w	r2, r3, #3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d00b      	beq.n	800215e <HAL_GPIO_Init+0xea>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002152:	2b11      	cmp	r3, #17
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b12      	cmp	r3, #18
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80be 	beq.w	800237a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_GPIO_Init+0x320>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a64      	ldr	r2, [pc, #400]	; (8002394 <HAL_GPIO_Init+0x320>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_GPIO_Init+0x320>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002216:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_GPIO_Init+0x324>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_GPIO_Init+0x328>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d037      	beq.n	80022b2 <HAL_GPIO_Init+0x23e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a56      	ldr	r2, [pc, #344]	; (80023a0 <HAL_GPIO_Init+0x32c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_GPIO_Init+0x23a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <HAL_GPIO_Init+0x330>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <HAL_GPIO_Init+0x236>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a54      	ldr	r2, [pc, #336]	; (80023a8 <HAL_GPIO_Init+0x334>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x232>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a53      	ldr	r2, [pc, #332]	; (80023ac <HAL_GPIO_Init+0x338>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x22e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x33c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x22a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_GPIO_Init+0x340>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a50      	ldr	r2, [pc, #320]	; (80023b8 <HAL_GPIO_Init+0x344>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4f      	ldr	r2, [pc, #316]	; (80023bc <HAL_GPIO_Init+0x348>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_GPIO_Init+0x34c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x21a>
 800228a:	2309      	movs	r3, #9
 800228c:	e012      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800228e:	230a      	movs	r3, #10
 8002290:	e010      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002292:	2308      	movs	r3, #8
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002296:	2307      	movs	r3, #7
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022c4:	4934      	ldr	r1, [pc, #208]	; (8002398 <HAL_GPIO_Init+0x324>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <HAL_GPIO_Init+0x350>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f6:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <HAL_GPIO_Init+0x350>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_GPIO_Init+0x350>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <HAL_GPIO_Init+0x350>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae86 	bls.w	8002094 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	3724      	adds	r7, #36	; 0x24
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40021400 	.word	0x40021400
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022400 	.word	0x40022400
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f9aa 	bl	8001774 <HAL_GPIO_EXTI_Callback>
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e25e      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00c      	beq.n	8002476 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245c:	4b93      	ldr	r3, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x62>
 8002468:	4b90      	ldr	r3, [pc, #576]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d06c      	beq.n	800255c <HAL_RCC_OscConfig+0x130>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d168      	bne.n	800255c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e238      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x7a>
 8002498:	4b84      	ldr	r3, [pc, #528]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a83      	ldr	r2, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x9c>
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7b      	ldr	r2, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0xc0>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6b      	ldr	r2, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff fc72 	bl	8001df4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fc6e 	bl	8001df4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1ec      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xe8>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff fc5e 	bl	8001df4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff fc5a 	bl	8001df4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1d8      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x110>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d069      	beq.n	800263e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x190>
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1ac      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	493d      	ldr	r1, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e040      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fc10 	bl	8001df4 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d8:	f7ff fc0c 	bl	8001df4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e18a      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4929      	ldr	r1, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff fbec 	bl	8001df4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff fbe8 	bl	8001df4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e166      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d038      	beq.n	80026bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff fbc9 	bl	8001df4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff fbc5 	bl	8001df4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e143      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x23a>
 8002684:	e01a      	b.n	80026bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7ff fbaf 	bl	8001df4 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7ff fbab 	bl	8001df4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d903      	bls.n	80026b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e129      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
 80026ac:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b95      	ldr	r3, [pc, #596]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a4 	beq.w	8002812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b8f      	ldr	r3, [pc, #572]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b8c      	ldr	r3, [pc, #560]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a8b      	ldr	r2, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b89      	ldr	r3, [pc, #548]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	4b86      	ldr	r3, [pc, #536]	; (800290c <HAL_RCC_OscConfig+0x4e0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026fe:	4b83      	ldr	r3, [pc, #524]	; (800290c <HAL_RCC_OscConfig+0x4e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a82      	ldr	r2, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x4e0>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7ff fb73 	bl	8001df4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7ff fb6f 	bl	8001df4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0ed      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x4e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x31a>
 8002738:	4b73      	ldr	r3, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a72      	ldr	r2, [pc, #456]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x33c>
 800274e:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a6d      	ldr	r2, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	4b6b      	ldr	r3, [pc, #428]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a6a      	ldr	r2, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	e01c      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x35e>
 8002770:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a64      	ldr	r2, [pc, #400]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 800278a:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a5e      	ldr	r2, [pc, #376]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d015      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff fb23 	bl	8001df4 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff fb1f 	bl	8001df4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e09b      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ee      	beq.n	80027b2 <HAL_RCC_OscConfig+0x386>
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff fb0d 	bl	8001df4 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff fb09 	bl	8001df4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e085      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d105      	bne.n	8002812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002806:	4b40      	ldr	r3, [pc, #256]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a3f      	ldr	r2, [pc, #252]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800280c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d071      	beq.n	80028fe <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d069      	beq.n	80028fa <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d14b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a35      	ldr	r2, [pc, #212]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7ff fadb 	bl	8001df4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7ff fad7 	bl	8001df4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e055      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	491e      	ldr	r1, [pc, #120]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 8002898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff faa9 	bl	8001df4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff faa5 	bl	8001df4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e023      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x47a>
 80028c4:	e01b      	b.n	80028fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7ff fa8f 	bl	8001df4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff fa8b 	bl	8001df4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e009      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x4ae>
 80028f8:	e001      	b.n	80028fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0ce      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 020f 	bic.w	r2, r3, #15
 800293e:	4964      	ldr	r1, [pc, #400]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b6      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494c      	ldr	r1, [pc, #304]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07d      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e071      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e069      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7ff f9f6 	bl	8001df4 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7ff f9f2 	bl	8001df4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e051      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 020f 	bic.w	r2, r3, #15
 8002a4a:	4921      	ldr	r1, [pc, #132]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e030      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4915      	ldr	r1, [pc, #84]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490d      	ldr	r1, [pc, #52]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f81d 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7ff f954 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08005604 	.word	0x08005604
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af6:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d007      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d008      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x38>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 808d 	bne.w	8002c26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b0e:	60bb      	str	r3, [r7, #8]
       break;
 8002b10:	e08c      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b14:	60bb      	str	r3, [r7, #8]
      break;
 8002b16:	e089      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b22:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d023      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	ea03 0501 	and.w	r5, r3, r1
 8002b44:	ea04 0602 	and.w	r6, r4, r2
 8002b48:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b4a:	fb02 f106 	mul.w	r1, r2, r6
 8002b4e:	2200      	movs	r2, #0
 8002b50:	fb02 f205 	mul.w	r2, r2, r5
 8002b54:	440a      	add	r2, r1
 8002b56:	493a      	ldr	r1, [pc, #232]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b58:	fba5 0101 	umull	r0, r1, r5, r1
 8002b5c:	1853      	adds	r3, r2, r1
 8002b5e:	4619      	mov	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	f7fd fb65 	bl	8000238 <__aeabi_uldivmod>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460c      	mov	r4, r1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e049      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	ea03 0501 	and.w	r5, r3, r1
 8002b8c:	ea04 0602 	and.w	r6, r4, r2
 8002b90:	4629      	mov	r1, r5
 8002b92:	4632      	mov	r2, r6
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	0154      	lsls	r4, r2, #5
 8002b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	1b49      	subs	r1, r1, r5
 8002baa:	eb62 0206 	sbc.w	r2, r2, r6
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f04f 0400 	mov.w	r4, #0
 8002bb6:	0194      	lsls	r4, r2, #6
 8002bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	1a5b      	subs	r3, r3, r1
 8002bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	00e2      	lsls	r2, r4, #3
 8002bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	195b      	adds	r3, r3, r5
 8002bda:	eb44 0406 	adc.w	r4, r4, r6
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	02a2      	lsls	r2, r4, #10
 8002be8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bec:	0299      	lsls	r1, r3, #10
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb1a 	bl	8000238 <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	3301      	adds	r3, #1
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	60bb      	str	r3, [r7, #8]
      break;
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c28:	60bb      	str	r3, [r7, #8]
      break;
 8002c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	017d7840 	.word	0x017d7840

08002c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c64:	4601      	mov	r1, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08005614 	.word	0x08005614

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffdc 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0b5b      	lsrs	r3, r3, #13
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08005614 	.word	0x08005614

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd4:	4b69      	ldr	r3, [pc, #420]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cde:	6093      	str	r3, [r2, #8]
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	4964      	ldr	r1, [pc, #400]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	4959      	ldr	r1, [pc, #356]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d24:	d101      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	494a      	ldr	r1, [pc, #296]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d60:	d101      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 808b 	beq.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a39      	ldr	r2, [pc, #228]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7ff f81e 	bl	8001df4 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7ff f81a 	bl	8001df4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e38d      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d035      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d02e      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d114      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe ffe2 	bl	8001df4 <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe ffde 	bl	8001df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e34f      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ee      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e62:	d111      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	4901      	ldr	r1, [pc, #4]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	0ffffcff 	.word	0x0ffffcff
 8002e88:	4bb3      	ldr	r3, [pc, #716]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4ab2      	ldr	r2, [pc, #712]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	49ad      	ldr	r1, [pc, #692]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eb2:	4ba9      	ldr	r3, [pc, #676]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	4aa7      	ldr	r2, [pc, #668]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ec2:	4ba5      	ldr	r3, [pc, #660]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	49a2      	ldr	r1, [pc, #648]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee0:	4b9d      	ldr	r3, [pc, #628]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eee:	499a      	ldr	r1, [pc, #616]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f02:	4b95      	ldr	r3, [pc, #596]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f10:	4991      	ldr	r1, [pc, #580]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f24:	4b8c      	ldr	r3, [pc, #560]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f32:	4989      	ldr	r1, [pc, #548]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f46:	4b84      	ldr	r3, [pc, #528]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4980      	ldr	r1, [pc, #512]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4978      	ldr	r1, [pc, #480]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f8a:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f023 020c 	bic.w	r2, r3, #12
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	496f      	ldr	r1, [pc, #444]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4967      	ldr	r1, [pc, #412]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fce:	4b62      	ldr	r3, [pc, #392]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	495e      	ldr	r1, [pc, #376]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	4956      	ldr	r1, [pc, #344]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003012:	4b51      	ldr	r3, [pc, #324]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003034:	4b48      	ldr	r3, [pc, #288]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	4945      	ldr	r1, [pc, #276]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003056:	4b40      	ldr	r3, [pc, #256]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	493c      	ldr	r1, [pc, #240]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d011      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a8:	492b      	ldr	r1, [pc, #172]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	491b      	ldr	r1, [pc, #108]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310c:	4912      	ldr	r1, [pc, #72]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	4909      	ldr	r1, [pc, #36]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	e002      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	4985      	ldr	r1, [pc, #532]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	497c      	ldr	r1, [pc, #496]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003196:	f040 80d6 	bne.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a6:	f7fe fe25 	bl	8001df4 <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031ae:	f7fe fe21 	bl	8001df4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e194      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031c0:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d021      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11d      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031e0:	4b64      	ldr	r3, [pc, #400]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ee:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	071b      	lsls	r3, r3, #28
 8003214:	4957      	ldr	r1, [pc, #348]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02e      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d129      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003248:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325c:	0f1b      	lsrs	r3, r3, #28
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	019a      	lsls	r2, r3, #6
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	071b      	lsls	r3, r3, #28
 800327c:	493d      	ldr	r1, [pc, #244]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f023 021f 	bic.w	r2, r3, #31
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ae:	0e1b      	lsrs	r3, r3, #24
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032b6:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032bc:	0f1b      	lsrs	r3, r3, #28
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	019a      	lsls	r2, r3, #6
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	071b      	lsls	r3, r3, #28
 80032dc:	4925      	ldr	r1, [pc, #148]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d011      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	019a      	lsls	r2, r3, #6
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	4919      	ldr	r1, [pc, #100]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800331a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe fd68 	bl	8001df4 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003328:	f7fe fd64 	bl	8001df4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0d7      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 80cd 	bne.w	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335a:	f7fe fd4b 	bl	8001df4 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003362:	f7fe fd47 	bl	8001df4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d903      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0ba      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003374:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003384:	d0ed      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02e      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d12a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ae:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033bc:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	0f1b      	lsrs	r3, r3, #28
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	4944      	ldr	r1, [pc, #272]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	493d      	ldr	r1, [pc, #244]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d022      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003418:	d11d      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003428:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	0f1b      	lsrs	r3, r3, #28
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	019a      	lsls	r2, r3, #6
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	4929      	ldr	r1, [pc, #164]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d028      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	0e1b      	lsrs	r3, r3, #24
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	019a      	lsls	r2, r3, #6
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	4917      	ldr	r1, [pc, #92]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	4911      	ldr	r1, [pc, #68]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe fc98 	bl	8001df4 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034c8:	f7fe fc94 	bl	8001df4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e007      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e6:	d1ef      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01d      	b.n	8003546 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe faa0 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fc90 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_TIM_Base_Start_IT+0x50>)
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d00b      	beq.n	8003592 <HAL_TIM_Base_Start_IT+0x42>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d007      	beq.n	8003592 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	00010007 	.word	0x00010007

080035a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f815 	bl	80035fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc3a 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 ffb2 	bl	800458c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_TIM_PWM_Start+0x7c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_PWM_Start+0x2c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIM_PWM_Start+0x80>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Start+0x30>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_TIM_PWM_Start+0x32>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_PWM_Start+0x84>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d00b      	beq.n	8003680 <HAL_TIM_PWM_Start+0x70>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366e:	d007      	beq.n	8003680 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40010400 	.word	0x40010400
 8003694:	00010007 	.word	0x00010007

08003698 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e07b      	b.n	80037a4 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe f93f 	bl	8001944 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_TIM_Encoder_Init+0x114>)
 80036da:	400b      	ands	r3, r1
 80036dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 fbb7 	bl	8003e5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_TIM_Encoder_Init+0x118>)
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4313      	orrs	r3, r2
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_TIM_Encoder_Init+0x11c>)
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_TIM_Encoder_Init+0x120>)
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	4313      	orrs	r3, r2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	011a      	lsls	r2, r3, #4
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	031b      	lsls	r3, r3, #12
 8003758:	4313      	orrs	r3, r2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4313      	orrs	r3, r2
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	fffebff8 	.word	0xfffebff8
 80037b0:	fffffcfc 	.word	0xfffffcfc
 80037b4:	fffff3f3 	.word	0xfffff3f3
 80037b8:	ffff0f0f 	.word	0xffff0f0f

080037bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_TIM_Encoder_Start+0x16>
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d008      	beq.n	80037e2 <HAL_TIM_Encoder_Start+0x26>
 80037d0:	e00f      	b.n	80037f2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fed6 	bl	800458c <TIM_CCxChannelCmd>
      break;
 80037e0:	e016      	b.n	8003810 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	2104      	movs	r1, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fece 	bl	800458c <TIM_CCxChannelCmd>
      break;
 80037f0:	e00e      	b.n	8003810 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fec6 	bl	800458c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	2104      	movs	r1, #4
 8003808:	4618      	mov	r0, r3
 800380a:	f000 febf 	bl	800458c <TIM_CCxChannelCmd>
      break;
 800380e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d122      	bne.n	8003886 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d11b      	bne.n	8003886 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0202 	mvn.w	r2, #2
 8003856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fad7 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 8003872:	e005      	b.n	8003880 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fac9 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fada 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d122      	bne.n	80038da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d11b      	bne.n	80038da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0204 	mvn.w	r2, #4
 80038aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 faad 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 80038c6:	e005      	b.n	80038d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa9f 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fab0 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d122      	bne.n	800392e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11b      	bne.n	800392e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0208 	mvn.w	r2, #8
 80038fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fa83 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 800391a:	e005      	b.n	8003928 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa75 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa86 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d122      	bne.n	8003982 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	d11b      	bne.n	8003982 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0210 	mvn.w	r2, #16
 8003952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2208      	movs	r2, #8
 8003958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa59 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 800396e:	e005      	b.n	800397c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa4b 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa5c 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0201 	mvn.w	r2, #1
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd fcff 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d10e      	bne.n	80039da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d107      	bne.n	80039da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fe65 	bl	80046a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fe58 	bl	80046b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa0a 	bl	8003e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0220 	mvn.w	r2, #32
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fe18 	bl	8004690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e105      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b14      	cmp	r3, #20
 8003a96:	f200 80f0 	bhi.w	8003c7a <HAL_TIM_PWM_ConfigChannel+0x212>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003c7b 	.word	0x08003c7b
 8003aa8:	08003c7b 	.word	0x08003c7b
 8003aac:	08003c7b 	.word	0x08003c7b
 8003ab0:	08003b35 	.word	0x08003b35
 8003ab4:	08003c7b 	.word	0x08003c7b
 8003ab8:	08003c7b 	.word	0x08003c7b
 8003abc:	08003c7b 	.word	0x08003c7b
 8003ac0:	08003b77 	.word	0x08003b77
 8003ac4:	08003c7b 	.word	0x08003c7b
 8003ac8:	08003c7b 	.word	0x08003c7b
 8003acc:	08003c7b 	.word	0x08003c7b
 8003ad0:	08003bb7 	.word	0x08003bb7
 8003ad4:	08003c7b 	.word	0x08003c7b
 8003ad8:	08003c7b 	.word	0x08003c7b
 8003adc:	08003c7b 	.word	0x08003c7b
 8003ae0:	08003bf9 	.word	0x08003bf9
 8003ae4:	08003c7b 	.word	0x08003c7b
 8003ae8:	08003c7b 	.word	0x08003c7b
 8003aec:	08003c7b 	.word	0x08003c7b
 8003af0:	08003c39 	.word	0x08003c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa4e 	bl	8003f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6999      	ldr	r1, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	619a      	str	r2, [r3, #24]
      break;
 8003b32:	e0a3      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 faa0 	bl	8004080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	619a      	str	r2, [r3, #24]
      break;
 8003b74:	e082      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 faf7 	bl	8004170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0208 	orr.w	r2, r2, #8
 8003b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0204 	bic.w	r2, r2, #4
 8003ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	61da      	str	r2, [r3, #28]
      break;
 8003bb4:	e062      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb4d 	bl	800425c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69d9      	ldr	r1, [r3, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	61da      	str	r2, [r3, #28]
      break;
 8003bf6:	e041      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fb84 	bl	800430c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0208 	orr.w	r2, r2, #8
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c36:	e021      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fbb6 	bl	80043b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c78:	e000      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003c7a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop

08003c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0a6      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x166>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <HAL_TIM_ConfigClockSource+0x170>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d067      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0x120>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d80b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x6c>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d073      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x140>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d802      	bhi.n	8003cfa <HAL_TIM_ConfigClockSource+0x62>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d06f      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cf8:	e078      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d06c      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x140>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d06a      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d02:	e073      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d00d      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x8c>
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d804      	bhi.n	8003d16 <HAL_TIM_ConfigClockSource+0x7e>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d033      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0xe0>
 8003d10:	2b60      	cmp	r3, #96	; 0x60
 8003d12:	d041      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d14:	e06a      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1a:	d066      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x152>
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d017      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d22:	e063      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f000 fc0a 	bl	800454c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
      break;
 8003d50:	e04c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6899      	ldr	r1, [r3, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f000 fbf3 	bl	800454c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d74:	609a      	str	r2, [r3, #8]
      break;
 8003d76:	e039      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 fb67 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2150      	movs	r1, #80	; 0x50
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fbc0 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e029      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f000 fb86 	bl	80044b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2160      	movs	r1, #96	; 0x60
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fbb0 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8003db6:	e019      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f000 fb47 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2140      	movs	r1, #64	; 0x40
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fba0 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8003dd6:	e009      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fb97 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8003de8:	e000      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	fffeff88 	.word	0xfffeff88

08003e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <TIM_Base_SetConfig+0x120>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3a      	ldr	r2, [pc, #232]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2c      	ldr	r2, [pc, #176]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <TIM_Base_SetConfig+0x120>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <TIM_Base_SetConfig+0x128>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <TIM_Base_SetConfig+0x130>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <TIM_Base_SetConfig+0x134>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <TIM_Base_SetConfig+0x138>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40010400 	.word	0x40010400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	40001800 	.word	0x40001800
 8003f94:	40001c00 	.word	0x40001c00
 8003f98:	40002000 	.word	0x40002000

08003f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <TIM_OC1_SetConfig+0xd8>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0302 	bic.w	r3, r3, #2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_OC1_SetConfig+0xdc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC1_SetConfig+0x64>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <TIM_OC1_SetConfig+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d10c      	bne.n	800401a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0308 	bic.w	r3, r3, #8
 8004006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <TIM_OC1_SetConfig+0xdc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_OC1_SetConfig+0x8e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <TIM_OC1_SetConfig+0xe0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	fffeff8f 	.word	0xfffeff8f
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <TIM_OC2_SetConfig+0xe4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x68>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <TIM_OC2_SetConfig+0xec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x94>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <TIM_OC2_SetConfig+0xec>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	feff8fff 	.word	0xfeff8fff
 8004168:	40010000 	.word	0x40010000
 800416c:	40010400 	.word	0x40010400

08004170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <TIM_OC3_SetConfig+0xe0>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a22      	ldr	r2, [pc, #136]	; (8004254 <TIM_OC3_SetConfig+0xe4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_OC3_SetConfig+0x66>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a21      	ldr	r2, [pc, #132]	; (8004258 <TIM_OC3_SetConfig+0xe8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10d      	bne.n	80041f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a17      	ldr	r2, [pc, #92]	; (8004254 <TIM_OC3_SetConfig+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC3_SetConfig+0x92>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a16      	ldr	r2, [pc, #88]	; (8004258 <TIM_OC3_SetConfig+0xe8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	fffeff8f 	.word	0xfffeff8f
 8004254:	40010000 	.word	0x40010000
 8004258:	40010400 	.word	0x40010400

0800425c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <TIM_OC4_SetConfig+0xa4>)
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <TIM_OC4_SetConfig+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_OC4_SetConfig+0x68>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <TIM_OC4_SetConfig+0xac>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d109      	bne.n	80042d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	019b      	lsls	r3, r3, #6
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	feff8fff 	.word	0xfeff8fff
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <TIM_OC5_SetConfig+0x98>)
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800434c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <TIM_OC5_SetConfig+0x9c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_OC5_SetConfig+0x5e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <TIM_OC5_SetConfig+0xa0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d109      	bne.n	800437e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	fffeff8f 	.word	0xfffeff8f
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40010400 	.word	0x40010400

080043b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <TIM_OC6_SetConfig+0x9c>)
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	051b      	lsls	r3, r3, #20
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <TIM_OC6_SetConfig+0xa0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC6_SetConfig+0x60>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <TIM_OC6_SetConfig+0xa4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	029b      	lsls	r3, r3, #10
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	feff8fff 	.word	0xfeff8fff
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0210 	bic.w	r2, r3, #16
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	f043 0307 	orr.w	r3, r3, #7
 8004538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	401a      	ands	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e045      	b.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800462a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40010000 	.word	0x40010000
 800468c:	40010400 	.word	0x40010400

08004690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e040      	b.n	8004760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fa38 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa90 	bl	8004c30 <UART_SetConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e022      	b.n	8004760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fd28 	bl	8005178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004746:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fdaf 	bl	80052bc <UART_CheckIdleState>
 800475e:	4603      	mov	r3, r0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	2b20      	cmp	r3, #32
 800477e:	d17f      	bne.n	8004880 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Transmit+0x24>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e078      	b.n	8004882 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_UART_Transmit+0x36>
 800479a:	2302      	movs	r3, #2
 800479c:	e071      	b.n	8004882 <HAL_UART_Transmit+0x11a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2221      	movs	r2, #33	; 0x21
 80047b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80047b2:	f7fd fb1f 	bl	8001df4 <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d108      	bne.n	80047e4 <HAL_UART_Transmit+0x7c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e003      	b.n	80047ec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047ec:	e02c      	b.n	8004848 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fd8e 	bl	800531a <UART_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e03c      	b.n	8004882 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3302      	adds	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e007      	b.n	8004836 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1cc      	bne.n	80047ee <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	2140      	movs	r1, #64	; 0x40
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fd5b 	bl	800531a <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e009      	b.n	8004882 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489e:	2b20      	cmp	r3, #32
 80048a0:	f040 808a 	bne.w	80049b8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Receive_IT+0x24>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e082      	b.n	80049ba <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Receive_IT+0x36>
 80048be:	2302      	movs	r3, #2
 80048c0:	e07b      	b.n	80049ba <HAL_UART_Receive_IT+0x12e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d10e      	bne.n	800490e <HAL_UART_Receive_IT+0x82>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_UART_Receive_IT+0x78>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004902:	e02d      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800490c:	e028      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_UART_Receive_IT+0xa6>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_UART_Receive_IT+0x9c>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004926:	e01b      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	227f      	movs	r2, #127	; 0x7f
 800492c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004930:	e016      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493a:	d10d      	bne.n	8004958 <HAL_UART_Receive_IT+0xcc>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_UART_Receive_IT+0xc2>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	227f      	movs	r2, #127	; 0x7f
 8004948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800494c:	e008      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	223f      	movs	r2, #63	; 0x3f
 8004952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004956:	e003      	b.n	8004960 <HAL_UART_Receive_IT+0xd4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2222      	movs	r2, #34	; 0x22
 800496a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d107      	bne.n	8004996 <HAL_UART_Receive_IT+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <HAL_UART_Receive_IT+0x13c>)
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
 8004994:	e002      	b.n	800499c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <HAL_UART_Receive_IT+0x140>)
 800499a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80049b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	080054ef 	.word	0x080054ef
 80049cc:	08005449 	.word	0x08005449

080049d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d113      	bne.n	8004a26 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80eb 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
      }
      return;
 8004a24:	e0e5      	b.n	8004bf2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80c0 	beq.w	8004bae <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80b5 	beq.w	8004bae <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <HAL_UART_IRQHandler+0x9c>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <HAL_UART_IRQHandler+0xc4>
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2202      	movs	r2, #2
 8004a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <HAL_UART_IRQHandler+0xec>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab4:	f043 0202 	orr.w	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d013      	beq.n	8004aee <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2208      	movs	r2, #8
 8004ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	f043 0208 	orr.w	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d07f      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00c      	beq.n	8004b1a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d004      	beq.n	8004b38 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d031      	beq.n	8004b9c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fc36 	bl	80053aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d123      	bne.n	8004b94 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <HAL_UART_IRQHandler+0x234>)
 8004b6a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fa5c 	bl	800202e <HAL_DMA_Abort_IT>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004b86:	4610      	mov	r0, r2
 8004b88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8a:	e00e      	b.n	8004baa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f845 	bl	8004c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	e00a      	b.n	8004baa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f841 	bl	8004c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9a:	e006      	b.n	8004baa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f83d 	bl	8004c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004ba8:	e025      	b.n	8004bf6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004baa:	bf00      	nop
    return;
 8004bac:	e023      	b.n	8004bf6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
    }
    return;
 8004bd2:	e012      	b.n	8004bfa <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <HAL_UART_IRQHandler+0x22c>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fc14 	bl	8005416 <UART_EndTransmit_IT>
    return;
 8004bee:	bf00      	nop
 8004bf0:	e004      	b.n	8004bfc <HAL_UART_IRQHandler+0x22c>
      return;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <HAL_UART_IRQHandler+0x22c>
    return;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_IRQHandler+0x22c>
    return;
 8004bfa:	bf00      	nop
  }

}
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	080053eb 	.word	0x080053eb

08004c08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4bb1      	ldr	r3, [pc, #708]	; (8004f24 <UART_SetConfig+0x2f4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6939      	ldr	r1, [r7, #16]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a9f      	ldr	r2, [pc, #636]	; (8004f28 <UART_SetConfig+0x2f8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d121      	bne.n	8004cf4 <UART_SetConfig+0xc4>
 8004cb0:	4b9e      	ldr	r3, [pc, #632]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d816      	bhi.n	8004cec <UART_SetConfig+0xbc>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x94>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce1 	.word	0x08004ce1
 8004ccc:	08004cdb 	.word	0x08004cdb
 8004cd0:	08004ce7 	.word	0x08004ce7
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e151      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e14e      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e14b      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e148      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	bf00      	nop
 8004cf2:	e144      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a8d      	ldr	r2, [pc, #564]	; (8004f30 <UART_SetConfig+0x300>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d134      	bne.n	8004d68 <UART_SetConfig+0x138>
 8004cfe:	4b8b      	ldr	r3, [pc, #556]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d829      	bhi.n	8004d60 <UART_SetConfig+0x130>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0xe4>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d61 	.word	0x08004d61
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d61 	.word	0x08004d61
 8004d24:	08004d55 	.word	0x08004d55
 8004d28:	08004d61 	.word	0x08004d61
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004d61 	.word	0x08004d61
 8004d34:	08004d4f 	.word	0x08004d4f
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d61 	.word	0x08004d61
 8004d44:	08004d5b 	.word	0x08004d5b
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e117      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e114      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d54:	2304      	movs	r3, #4
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e111      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e10e      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d60:	2310      	movs	r3, #16
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	bf00      	nop
 8004d66:	e10a      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a71      	ldr	r2, [pc, #452]	; (8004f34 <UART_SetConfig+0x304>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d120      	bne.n	8004db4 <UART_SetConfig+0x184>
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d00f      	beq.n	8004da0 <UART_SetConfig+0x170>
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d802      	bhi.n	8004d8a <UART_SetConfig+0x15a>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <UART_SetConfig+0x164>
 8004d88:	e010      	b.n	8004dac <UART_SetConfig+0x17c>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d005      	beq.n	8004d9a <UART_SetConfig+0x16a>
 8004d8e:	2b30      	cmp	r3, #48	; 0x30
 8004d90:	d009      	beq.n	8004da6 <UART_SetConfig+0x176>
 8004d92:	e00b      	b.n	8004dac <UART_SetConfig+0x17c>
 8004d94:	2300      	movs	r3, #0
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e0f1      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e0ee      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e0eb      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e0e8      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	bf00      	nop
 8004db2:	e0e4      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a5f      	ldr	r2, [pc, #380]	; (8004f38 <UART_SetConfig+0x308>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d120      	bne.n	8004e00 <UART_SetConfig+0x1d0>
 8004dbe:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d00f      	beq.n	8004dec <UART_SetConfig+0x1bc>
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d802      	bhi.n	8004dd6 <UART_SetConfig+0x1a6>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <UART_SetConfig+0x1b0>
 8004dd4:	e010      	b.n	8004df8 <UART_SetConfig+0x1c8>
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d005      	beq.n	8004de6 <UART_SetConfig+0x1b6>
 8004dda:	2bc0      	cmp	r3, #192	; 0xc0
 8004ddc:	d009      	beq.n	8004df2 <UART_SetConfig+0x1c2>
 8004dde:	e00b      	b.n	8004df8 <UART_SetConfig+0x1c8>
 8004de0:	2300      	movs	r3, #0
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e0cb      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e0c8      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004dec:	2304      	movs	r3, #4
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0c5      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004df2:	2308      	movs	r3, #8
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e0c2      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	bf00      	nop
 8004dfe:	e0be      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a4d      	ldr	r2, [pc, #308]	; (8004f3c <UART_SetConfig+0x30c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d124      	bne.n	8004e54 <UART_SetConfig+0x224>
 8004e0a:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e18:	d012      	beq.n	8004e40 <UART_SetConfig+0x210>
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1e:	d802      	bhi.n	8004e26 <UART_SetConfig+0x1f6>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <UART_SetConfig+0x204>
 8004e24:	e012      	b.n	8004e4c <UART_SetConfig+0x21c>
 8004e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2a:	d006      	beq.n	8004e3a <UART_SetConfig+0x20a>
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d009      	beq.n	8004e46 <UART_SetConfig+0x216>
 8004e32:	e00b      	b.n	8004e4c <UART_SetConfig+0x21c>
 8004e34:	2300      	movs	r3, #0
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0a1      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e09e      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e40:	2304      	movs	r3, #4
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e09b      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e46:	2308      	movs	r3, #8
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e098      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	bf00      	nop
 8004e52:	e094      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <UART_SetConfig+0x310>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d124      	bne.n	8004ea8 <UART_SetConfig+0x278>
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d012      	beq.n	8004e94 <UART_SetConfig+0x264>
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d802      	bhi.n	8004e7a <UART_SetConfig+0x24a>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <UART_SetConfig+0x258>
 8004e78:	e012      	b.n	8004ea0 <UART_SetConfig+0x270>
 8004e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7e:	d006      	beq.n	8004e8e <UART_SetConfig+0x25e>
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e84:	d009      	beq.n	8004e9a <UART_SetConfig+0x26a>
 8004e86:	e00b      	b.n	8004ea0 <UART_SetConfig+0x270>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e077      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e074      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e94:	2304      	movs	r3, #4
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e071      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e06e      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	bf00      	nop
 8004ea6:	e06a      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <UART_SetConfig+0x314>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d124      	bne.n	8004efc <UART_SetConfig+0x2cc>
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec0:	d012      	beq.n	8004ee8 <UART_SetConfig+0x2b8>
 8004ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec6:	d802      	bhi.n	8004ece <UART_SetConfig+0x29e>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <UART_SetConfig+0x2ac>
 8004ecc:	e012      	b.n	8004ef4 <UART_SetConfig+0x2c4>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	d006      	beq.n	8004ee2 <UART_SetConfig+0x2b2>
 8004ed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ed8:	d009      	beq.n	8004eee <UART_SetConfig+0x2be>
 8004eda:	e00b      	b.n	8004ef4 <UART_SetConfig+0x2c4>
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e04d      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e04a      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e047      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e044      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	bf00      	nop
 8004efa:	e040      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <UART_SetConfig+0x318>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d139      	bne.n	8004f7a <UART_SetConfig+0x34a>
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <UART_SetConfig+0x2fc>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f14:	d027      	beq.n	8004f66 <UART_SetConfig+0x336>
 8004f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f1a:	d817      	bhi.n	8004f4c <UART_SetConfig+0x31c>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01c      	beq.n	8004f5a <UART_SetConfig+0x32a>
 8004f20:	e027      	b.n	8004f72 <UART_SetConfig+0x342>
 8004f22:	bf00      	nop
 8004f24:	efff69f3 	.word	0xefff69f3
 8004f28:	40011000 	.word	0x40011000
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40004400 	.word	0x40004400
 8004f34:	40004800 	.word	0x40004800
 8004f38:	40004c00 	.word	0x40004c00
 8004f3c:	40005000 	.word	0x40005000
 8004f40:	40011400 	.word	0x40011400
 8004f44:	40007800 	.word	0x40007800
 8004f48:	40007c00 	.word	0x40007c00
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d006      	beq.n	8004f60 <UART_SetConfig+0x330>
 8004f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f56:	d009      	beq.n	8004f6c <UART_SetConfig+0x33c>
 8004f58:	e00b      	b.n	8004f72 <UART_SetConfig+0x342>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e00e      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004f60:	2302      	movs	r3, #2
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e00b      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004f66:	2304      	movs	r3, #4
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e008      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e005      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004f72:	2310      	movs	r3, #16
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	bf00      	nop
 8004f78:	e001      	b.n	8004f7e <UART_SetConfig+0x34e>
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	d17c      	bne.n	8005082 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d859      	bhi.n	8005042 <UART_SetConfig+0x412>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x364>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004fd7 	.word	0x08004fd7
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08005043 	.word	0x08005043
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08005043 	.word	0x08005043
 8004fac:	08005043 	.word	0x08005043
 8004fb0:	08005043 	.word	0x08005043
 8004fb4:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fb8:	f7fd fe50 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	005a      	lsls	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	441a      	add	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	61bb      	str	r3, [r7, #24]
        break;
 8004fd4:	e038      	b.n	8005048 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fd6:	f7fd fe55 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	005a      	lsls	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	61bb      	str	r3, [r7, #24]
        break;
 8004ff2:	e029      	b.n	8005048 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	085a      	lsrs	r2, r3, #1
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <UART_SetConfig+0x540>)
 8004ffc:	4413      	add	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6852      	ldr	r2, [r2, #4]
 8005002:	fbb3 f3f2 	udiv	r3, r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	61bb      	str	r3, [r7, #24]
        break;
 800500a:	e01d      	b.n	8005048 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800500c:	f7fd fd68 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8005010:	4603      	mov	r3, r0
 8005012:	005a      	lsls	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	441a      	add	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	b29b      	uxth	r3, r3
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e00e      	b.n	8005048 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	b29b      	uxth	r3, r3
 800503e:	61bb      	str	r3, [r7, #24]
        break;
 8005040:	e002      	b.n	8005048 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
        break;
 8005046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d916      	bls.n	800507c <UART_SetConfig+0x44c>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d212      	bcs.n	800507c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f023 030f 	bic.w	r3, r3, #15
 800505e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	b29b      	uxth	r3, r3
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	b29a      	uxth	r2, r3
 800506c:	89fb      	ldrh	r3, [r7, #14]
 800506e:	4313      	orrs	r3, r2
 8005070:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	89fa      	ldrh	r2, [r7, #14]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	e06e      	b.n	800515a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
 8005080:	e06b      	b.n	800515a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005082:	7ffb      	ldrb	r3, [r7, #31]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d857      	bhi.n	8005138 <UART_SetConfig+0x508>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x460>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050d1 	.word	0x080050d1
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005139 	.word	0x08005139
 80050a0:	08005105 	.word	0x08005105
 80050a4:	08005139 	.word	0x08005139
 80050a8:	08005139 	.word	0x08005139
 80050ac:	08005139 	.word	0x08005139
 80050b0:	08005121 	.word	0x08005121
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80050b4:	f7fd fdd2 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	61bb      	str	r3, [r7, #24]
        break;
 80050ce:	e036      	b.n	800513e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80050d0:	f7fd fdd8 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	61bb      	str	r3, [r7, #24]
        break;
 80050ea:	e028      	b.n	800513e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	085a      	lsrs	r2, r3, #1
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <UART_SetConfig+0x544>)
 80050f4:	4413      	add	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6852      	ldr	r2, [r2, #4]
 80050fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
        break;
 8005102:	e01c      	b.n	800513e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005104:	f7fd fcec 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	61bb      	str	r3, [r7, #24]
        break;
 800511e:	e00e      	b.n	800513e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	b29b      	uxth	r3, r3
 8005134:	61bb      	str	r3, [r7, #24]
        break;
 8005136:	e002      	b.n	800513e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]
        break;
 800513c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d908      	bls.n	8005156 <UART_SetConfig+0x526>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d204      	bcs.n	8005156 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	e001      	b.n	800515a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005166:	7dfb      	ldrb	r3, [r7, #23]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	01e84800 	.word	0x01e84800
 8005174:	00f42400 	.word	0x00f42400

08005178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01a      	beq.n	800528e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005276:	d10a      	bne.n	800528e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052ca:	f7fc fd93 	bl	8001df4 <HAL_GetTick>
 80052ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d10e      	bne.n	80052fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f814 	bl	800531a <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e00a      	b.n	8005312 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532a:	e02a      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005332:	d026      	beq.n	8005382 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005334:	f7fc fd5e 	bl	8001df4 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <UART_WaitOnFlagUntilTimeout+0x30>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11b      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005358:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e00f      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d0c5      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff fc07 	bl	8004c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fbe4 	bl	8004c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005456:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800545c:	2b22      	cmp	r3, #34	; 0x22
 800545e:	d13a      	bne.n	80054d6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005468:	89bb      	ldrh	r3, [r7, #12]
 800546a:	b2d9      	uxtb	r1, r3
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	400a      	ands	r2, r1
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d121      	bne.n	80054e6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054b0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0201 	bic.w	r2, r2, #1
 80054c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc f85a 	bl	8001588 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054d4:	e007      	b.n	80054e6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	619a      	str	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054fc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	d13a      	bne.n	800557c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005514:	89ba      	ldrh	r2, [r7, #12]
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	4013      	ands	r3, r2
 800551a:	b29a      	uxth	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d121      	bne.n	800558c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005556:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fc f807 	bl	8001588 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800557a:	e007      	b.n	800558c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	619a      	str	r2, [r3, #24]
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <__libc_init_array>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4e0d      	ldr	r6, [pc, #52]	; (80055cc <__libc_init_array+0x38>)
 8005598:	4c0d      	ldr	r4, [pc, #52]	; (80055d0 <__libc_init_array+0x3c>)
 800559a:	1ba4      	subs	r4, r4, r6
 800559c:	10a4      	asrs	r4, r4, #2
 800559e:	2500      	movs	r5, #0
 80055a0:	42a5      	cmp	r5, r4
 80055a2:	d109      	bne.n	80055b8 <__libc_init_array+0x24>
 80055a4:	4e0b      	ldr	r6, [pc, #44]	; (80055d4 <__libc_init_array+0x40>)
 80055a6:	4c0c      	ldr	r4, [pc, #48]	; (80055d8 <__libc_init_array+0x44>)
 80055a8:	f000 f820 	bl	80055ec <_init>
 80055ac:	1ba4      	subs	r4, r4, r6
 80055ae:	10a4      	asrs	r4, r4, #2
 80055b0:	2500      	movs	r5, #0
 80055b2:	42a5      	cmp	r5, r4
 80055b4:	d105      	bne.n	80055c2 <__libc_init_array+0x2e>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055bc:	4798      	blx	r3
 80055be:	3501      	adds	r5, #1
 80055c0:	e7ee      	b.n	80055a0 <__libc_init_array+0xc>
 80055c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c6:	4798      	blx	r3
 80055c8:	3501      	adds	r5, #1
 80055ca:	e7f2      	b.n	80055b2 <__libc_init_array+0x1e>
 80055cc:	08005624 	.word	0x08005624
 80055d0:	08005624 	.word	0x08005624
 80055d4:	08005624 	.word	0x08005624
 80055d8:	0800562c 	.word	0x0800562c

080055dc <memset>:
 80055dc:	4402      	add	r2, r0
 80055de:	4603      	mov	r3, r0
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d100      	bne.n	80055e6 <memset+0xa>
 80055e4:	4770      	bx	lr
 80055e6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ea:	e7f9      	b.n	80055e0 <memset+0x4>

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
