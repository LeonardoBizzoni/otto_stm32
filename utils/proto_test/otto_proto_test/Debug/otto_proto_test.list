
otto_proto_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce4  08008ce4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cec  08008cec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000010  08008d08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08008d08  00020348  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a2c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027df  00000000  00000000  00033a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  00036250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a477  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3e8  00000000  00000000  0006269f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa3a7  00000000  00000000  0006ea87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  00168eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080089cc 	.word	0x080089cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080089cc 	.word	0x080089cc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7Encoder8GetCountEv>:
  Encoder(TIM_HandleTypeDef *timer, int ticks_per_meters);


  void Setup();

  int GetCount() {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    int count = ((int) __HAL_TIM_GET_COUNTER(this->timer_)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        - ((this->timer_->Init.Period) / 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
    return count;
 8000554:	68fb      	ldr	r3, [r7, #12]
  }
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period / 2));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>:
//  timer_ = timer;
//  wheel_circumference_ = wheel_circ;
//
//}

Encoder::Encoder(TIM_HandleTypeDef *timer, int ticks_per_meter) {
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  timer_ = timer;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	601a      	str	r2, [r3, #0]
  ticks_per_meter_ = ticks_per_meter;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	615a      	str	r2, [r3, #20]

}
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	213c      	movs	r1, #60	; 0x3c
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 faee 	bl	8006b9c <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ffce 	bl	8000562 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005cc:	f004 fe02 	bl	80051d4 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005ee:	f004 fdf1 	bl	80051d4 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff9d 	bl	8000538 <_ZN7Encoder8GetCountEv>
 80005fe:	4602      	mov	r2, r0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffac 	bl	8000562 <_ZN7Encoder10ResetCountEv>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN7Encoder9GetMetersEv>:
//  float meters = ((float) this->ticks_ * this->wheel_circumference_)
//      / TICKS_PER_REVOLUTION;
//  return meters;
//}

float Encoder::GetMeters() {
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  float meters = (((float) this->ticks_) / this->ticks_per_meter_);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000636:	edc7 7a03 	vstr	s15, [r7, #12]
  return meters;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <_ZN7Encoder17GetLinearVelocityEv>:


float Encoder::GetLinearVelocity() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffc0 	bl	80005de <_ZN7Encoder12UpdateValuesEv>
  float meters = this->GetMeters();
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffd7 	bl	8000612 <_ZN7Encoder9GetMetersEv>
 8000664:	ed87 0a05 	vstr	s0, [r7, #20]
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800067a:	edc7 7a04 	vstr	s15, [r7, #16]
  if (deltaTime == 0)
 800067e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d102      	bne.n	8000692 <_ZN7Encoder17GetLinearVelocityEv+0x42>
    return 0;
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	e00c      	b.n	80006ac <_ZN7Encoder17GetLinearVelocityEv+0x5c>
  float linear_velocity = (meters / (deltaTime / 1000));
 8000692:	edd7 7a04 	vldr	s15, [r7, #16]
 8000696:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006bc <_ZN7Encoder17GetLinearVelocityEv+0x6c>
 800069a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800069e:	edd7 6a05 	vldr	s13, [r7, #20]
 80006a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a6:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	ee07 3a90 	vmov	s15, r3
}
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	447a0000 	.word	0x447a0000

080006c0 <_ZN8OdometryC1Ev>:
  float linear_velocity_;
  float angular_velocity_;


 public:
  Odometry() {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    left_velocity_ = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    right_velocity_ = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
    linear_velocity_ = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    angular_velocity_ = 0;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  }
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <_ZN8Odometry19UpdateValuesFromVelEff>:

  void UpdateValuesFromVel(float linear_vel, float angular_vel) {
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	ed87 0a02 	vstr	s0, [r7, #8]
 8000704:	edc7 0a01 	vstr	s1, [r7, #4]
    left_velocity_ = linear_vel - (BASELINE * angular_vel)/2;
 8000708:	edd7 7a02 	vldr	s15, [r7, #8]
 800070c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000710:	edd7 7a01 	vldr	s15, [r7, #4]
 8000714:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000718:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000770 <_ZN8Odometry19UpdateValuesFromVelEff+0x78>
 800071c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000720:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000724:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	edc3 7a00 	vstr	s15, [r3]
    right_velocity_ = linear_vel + (BASELINE * angular_vel)/2;
 8000736:	edd7 7a02 	vldr	s15, [r7, #8]
 800073a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800073e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000746:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000770 <_ZN8Odometry19UpdateValuesFromVelEff+0x78>
 800074a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800074e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000752:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000756:	ee36 7b07 	vadd.f64	d7, d6, d7
 800075a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	edc3 7a01 	vstr	s15, [r3, #4]
  }
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	33333333 	.word	0x33333333
 8000774:	3fd33333 	.word	0x3fd33333

08000778 <_ZN8Odometry22UpdateValuesFromWheelsEff>:

  void UpdateValuesFromWheels(float left_velocity, float right_velocity){
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	ed87 0a02 	vstr	s0, [r7, #8]
 8000784:	edc7 0a01 	vstr	s1, [r7, #4]
    linear_velocity_ = (left_velocity + right_velocity)/2;
 8000788:	ed97 7a02 	vldr	s14, [r7, #8]
 800078c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000794:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	edc3 7a02 	vstr	s15, [r3, #8]
    angular_velocity_ = (right_velocity - left_velocity)/BASELINE;
 80007a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80007a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80007aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007b2:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80007d0 <_ZN8Odometry22UpdateValuesFromWheelsEff+0x58>
 80007b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	edc3 7a03 	vstr	s15, [r3, #12]
  }
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	33333333 	.word	0x33333333
 80007d4:	3fd33333 	.word	0x3fd33333

080007d8 <_ZN8Odometry15GetLeftVelocityEv>:


  float GetLeftVelocity(){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    return left_velocity_;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	ee07 3a90 	vmov	s15, r3
  }
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <_ZN8Odometry16GetRightVelocityEv>:
  float GetRightVelocity(){
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    return right_velocity_;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	ee07 3a90 	vmov	s15, r3
  }
 8000806:	eeb0 0a67 	vmov.f32	s0, s15
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN8Odometry17GetLinearVelocityEv>:
  float GetLinearVelocity(){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    return linear_velocity_;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	ee07 3a90 	vmov	s15, r3
  }
 8000824:	eeb0 0a67 	vmov.f32	s0, s15
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_ZN8Odometry18GetAngularVelocityEv>:
  float GetAngularVelocity(){
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    return angular_velocity_;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	ee07 3a90 	vmov	s15, r3
  }
 8000842:	eeb0 0a67 	vmov.f32	s0, s15
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
  GPIO_TypeDef *dir_gpio_port_;
  uint16_t dir_pin_;
  TIM_HandleTypeDef *pwm_timer_;
  uint32_t pwm_channel_;

  MotorController(GPIO_TypeDef *sleep_gpio_port, uint16_t sleep_pin,
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
                  GPIO_TypeDef *dir_gpio_port, uint16_t dir_pin,
                  TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel) {
    this->sleep_gpio_port_ = sleep_gpio_port;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	601a      	str	r2, [r3, #0]
    this->sleep_pin_ = sleep_pin;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	809a      	strh	r2, [r3, #4]
    this->dir_gpio_port_ = dir_gpio_port;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	609a      	str	r2, [r3, #8]
    this->dir_pin_ = dir_pin;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	8b3a      	ldrh	r2, [r7, #24]
 8000876:	819a      	strh	r2, [r3, #12]
    this->pwm_timer_ = pwm_timer;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	611a      	str	r2, [r3, #16]
    this->pwm_channel_ = pwm_channel;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6a3a      	ldr	r2, [r7, #32]
 8000882:	615a      	str	r2, [r3, #20]
  }
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_ZN15MotorController5setupEv>:

  void setup() {
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm_timer_, pwm_channel_);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	691a      	ldr	r2, [r3, #16]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4610      	mov	r0, r2
 80008a6:	f006 f8a3 	bl	80069f0 <HAL_TIM_PWM_Start>
  }
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <_ZN15MotorController9set_speedEi>:

  void set_speed(int duty_cycle) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    if (duty_cycle >= 0) {
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f2c0 8083 	blt.w	80009cc <_ZN15MotorController9set_speedEi+0x118>
      //set direction to forward
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_SET);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6898      	ldr	r0, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	899b      	ldrh	r3, [r3, #12]
 80008ce:	2201      	movs	r2, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	f004 ff69 	bl	80057a8 <HAL_GPIO_WritePin>

      //check if duty_cycle exceeds maximum
      if (duty_cycle > MAX_DUTY_CYCLE)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f240 3216 	movw	r2, #790	; 0x316
 80008dc:	4293      	cmp	r3, r2
 80008de:	dd3d      	ble.n	800095c <_ZN15MotorController9set_speedEi+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <_ZN15MotorController9set_speedEi+0x42>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f240 3216 	movw	r2, #790	; 0x316
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
 80008f4:	e0f5      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d106      	bne.n	800090c <_ZN15MotorController9set_speedEi+0x58>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f240 3216 	movw	r2, #790	; 0x316
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
 800090a:	e0ea      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d106      	bne.n	8000922 <_ZN15MotorController9set_speedEi+0x6e>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f240 3216 	movw	r2, #790	; 0x316
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000920:	e0df      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b0c      	cmp	r3, #12
 8000928:	d106      	bne.n	8000938 <_ZN15MotorController9set_speedEi+0x84>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f240 3216 	movw	r2, #790	; 0x316
 8000934:	641a      	str	r2, [r3, #64]	; 0x40
 8000936:	e0d4      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	2b10      	cmp	r3, #16
 800093e:	d106      	bne.n	800094e <_ZN15MotorController9set_speedEi+0x9a>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f240 3216 	movw	r2, #790	; 0x316
 800094a:	659a      	str	r2, [r3, #88]	; 0x58
 800094c:	e0c9      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f240 3216 	movw	r2, #790	; 0x316
 8000958:	65da      	str	r2, [r3, #92]	; 0x5c
 800095a:	e0c2      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
      else
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <_ZN15MotorController9set_speedEi+0xbc>
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
 800096e:	e0b8      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d105      	bne.n	8000984 <_ZN15MotorController9set_speedEi+0xd0>
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
 8000982:	e0ae      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	2b08      	cmp	r3, #8
 800098a:	d105      	bne.n	8000998 <_ZN15MotorController9set_speedEi+0xe4>
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	63da      	str	r2, [r3, #60]	; 0x3c
 8000996:	e0a4      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	2b0c      	cmp	r3, #12
 800099e:	d105      	bne.n	80009ac <_ZN15MotorController9set_speedEi+0xf8>
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
 80009aa:	e09a      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	d105      	bne.n	80009c0 <_ZN15MotorController9set_speedEi+0x10c>
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	659a      	str	r2, [r3, #88]	; 0x58
 80009be:	e090      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80009ca:	e08a      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>

    } else if (duty_cycle < 0){
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f280 8087 	bge.w	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
      //set direction to backwards
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_RESET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6898      	ldr	r0, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	899b      	ldrh	r3, [r3, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 fee2 	bl	80057a8 <HAL_GPIO_WritePin>

      //check if duty_cycle is lower than minimum
      if (duty_cycle < -MAX_DUTY_CYCLE)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	4a45      	ldr	r2, [pc, #276]	; (8000afc <_ZN15MotorController9set_speedEi+0x248>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	da3d      	bge.n	8000a68 <_ZN15MotorController9set_speedEi+0x1b4>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d106      	bne.n	8000a02 <_ZN15MotorController9set_speedEi+0x14e>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f240 3216 	movw	r2, #790	; 0x316
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000a00:	e06f      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d106      	bne.n	8000a18 <_ZN15MotorController9set_speedEi+0x164>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f240 3216 	movw	r2, #790	; 0x316
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
 8000a16:	e064      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d106      	bne.n	8000a2e <_ZN15MotorController9set_speedEi+0x17a>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f240 3216 	movw	r2, #790	; 0x316
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a2c:	e059      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	2b0c      	cmp	r3, #12
 8000a34:	d106      	bne.n	8000a44 <_ZN15MotorController9set_speedEi+0x190>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f240 3216 	movw	r2, #790	; 0x316
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	e04e      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	2b10      	cmp	r3, #16
 8000a4a:	d106      	bne.n	8000a5a <_ZN15MotorController9set_speedEi+0x1a6>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f240 3216 	movw	r2, #790	; 0x316
 8000a56:	659a      	str	r2, [r3, #88]	; 0x58
 8000a58:	e043      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f240 3216 	movw	r2, #790	; 0x316
 8000a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a66:	e03c      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
      else
        //invert sign to make duty_cycle positive
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <_ZN15MotorController9set_speedEi+0x1ca>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	425a      	negs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7c:	e031      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d106      	bne.n	8000a94 <_ZN15MotorController9set_speedEi+0x1e0>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	425a      	negs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38
 8000a92:	e026      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d106      	bne.n	8000aaa <_ZN15MotorController9set_speedEi+0x1f6>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	425a      	negs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa8:	e01b      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	2b0c      	cmp	r3, #12
 8000ab0:	d106      	bne.n	8000ac0 <_ZN15MotorController9set_speedEi+0x20c>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	425a      	negs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
 8000abe:	e010      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	2b10      	cmp	r3, #16
 8000ac6:	d106      	bne.n	8000ad6 <_ZN15MotorController9set_speedEi+0x222>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	425a      	negs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ad4:	e005      	b.n	8000ae2 <_ZN15MotorController9set_speedEi+0x22e>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	425a      	negs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	4619      	mov	r1, r3
 8000aee:	f004 fe5b 	bl	80057a8 <HAL_GPIO_WritePin>

  }
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	fffffcea 	.word	0xfffffcea

08000b00 <_ZN15MotorController5coastEv>:
  void brake() {
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
  }

  void coast() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_RESET);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	889b      	ldrh	r3, [r3, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f004 fe48 	bl	80057a8 <HAL_GPIO_WritePin>
  }
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_ZN3PidC1Efff>:
  float previous_error_;

  int min_;
  int max_;

  Pid(float kp, float ki, float kd) {
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000b30:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]

    this->min_ = -MAX_DUTY_CYCLE;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <_ZN3PidC1Efff+0x64>)
 8000b6a:	61da      	str	r2, [r3, #28]
    this->max_ = MAX_DUTY_CYCLE;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f240 3216 	movw	r2, #790	; 0x316
 8000b72:	621a      	str	r2, [r3, #32]

  }
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	fffffcea 	.word	0xfffffcea

08000b88 <_ZN3Pid6configEfff>:

  void config(float kp, float ki, float kd) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b94:	edc7 0a01 	vstr	s1, [r7, #4]
 8000b98:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]

  }
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_ZN3Pid3setEf>:

  void set(float setpoint) {
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	ed87 0a00 	vstr	s0, [r7]
    this->setpoint_ = setpoint;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	611a      	str	r2, [r3, #16]
  }
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN3Pid6updateEf>:

  int update(float measure) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	ed87 0a00 	vstr	s0, [r7]

    this->error_ = this->setpoint_ - measure;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c0a:	edd7 7a00 	vldr	s15, [r7]
 8000c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	edc3 7a03 	vstr	s15, [r3, #12]

    //proportional term
    float output = this->error_ * this->kp_;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c28:	edc7 7a03 	vstr	s15, [r7, #12]

    //integral term without windup
    error_sum_ += this->error_;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	edc3 7a05 	vstr	s15, [r3, #20]
    output += error_sum_ * this->ki_;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c52:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5a:	edc7 7a03 	vstr	s15, [r7, #12]

    //derivative term
    output += (this->error_ - this->previous_error_) * kd_;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a03 	vstr	s15, [r7, #12]
    this->previous_error_ = this->error_;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]

    int integer_output = static_cast<int> (output);
 8000c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 3a90 	vmov	r3, s15
 8000c98:	60bb      	str	r3, [r7, #8]
//    if(integer_output > this->max_)
//      integer_output = this->max_;
//    else if (integer_output < this->min_)
//      integer_output = this->min_;

    return integer_output;
 8000c9a:	68bb      	ldr	r3, [r7, #8]

  }
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f004 fa40 	bl	8005132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f88f 	bl	8000dd4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fb65 	bl	8001384 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000cba:	f000 f931 	bl	8000f20 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000cbe:	f000 f98d 	bl	8000fdc <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000cc2:	f000 f9e9 	bl	8001098 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000cc6:	f000 fa87 	bl	80011d8 <_ZL12MX_TIM5_Initv>
  MX_USART6_UART_Init();
 8000cca:	f000 fb27 	bl	800131c <_ZL19MX_USART6_UART_Initv>
  MX_TIM6_Init();
 8000cce:	f000 fae3 	bl	8001298 <_ZL12MX_TIM6_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cd2:	f000 f909 	bl	8000ee8 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  left_encoder.Setup();
 8000cd6:	4828      	ldr	r0, [pc, #160]	; (8000d78 <main+0xd0>)
 8000cd8:	f7ff fc68 	bl	80005ac <_ZN7Encoder5SetupEv>
  right_encoder.Setup();
 8000cdc:	4827      	ldr	r0, [pc, #156]	; (8000d7c <main+0xd4>)
 8000cde:	f7ff fc65 	bl	80005ac <_ZN7Encoder5SetupEv>

  left_motor.setup();
 8000ce2:	4827      	ldr	r0, [pc, #156]	; (8000d80 <main+0xd8>)
 8000ce4:	f7ff fdd5 	bl	8000892 <_ZN15MotorController5setupEv>
  right_motor.setup();
 8000ce8:	4826      	ldr	r0, [pc, #152]	; (8000d84 <main+0xdc>)
 8000cea:	f7ff fdd2 	bl	8000892 <_ZN15MotorController5setupEv>
  left_motor.coast();
 8000cee:	4824      	ldr	r0, [pc, #144]	; (8000d80 <main+0xd8>)
 8000cf0:	f7ff ff06 	bl	8000b00 <_ZN15MotorController5coastEv>
  right_motor.coast();
 8000cf4:	4823      	ldr	r0, [pc, #140]	; (8000d84 <main+0xdc>)
 8000cf6:	f7ff ff03 	bl	8000b00 <_ZN15MotorController5coastEv>

  left_pid.config(180, 200, 0);
 8000cfa:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8000d88 <main+0xe0>
 8000cfe:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000d8c <main+0xe4>
 8000d02:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000d90 <main+0xe8>
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <main+0xec>)
 8000d08:	f7ff ff3e 	bl	8000b88 <_ZN3Pid6configEfff>
  right_pid.config(185, 195, 0);
 8000d0c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8000d88 <main+0xe0>
 8000d10:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000d98 <main+0xf0>
 8000d14:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000d9c <main+0xf4>
 8000d18:	4821      	ldr	r0, [pc, #132]	; (8000da0 <main+0xf8>)
 8000d1a:	f7ff ff35 	bl	8000b88 <_ZN3Pid6configEfff>
  cross_pid.config(50, 20, 0);
 8000d1e:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8000d88 <main+0xe0>
 8000d22:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8000d26:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000da4 <main+0xfc>
 8000d2a:	481f      	ldr	r0, [pc, #124]	; (8000da8 <main+0x100>)
 8000d2c:	f7ff ff2c 	bl	8000b88 <_ZN3Pid6configEfff>

  tx_buffer = (uint8_t*) &output_msg;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <main+0x104>)
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <main+0x108>)
 8000d34:	601a      	str	r2, [r3, #0]
  rx_buffer = (uint8_t*) &input_msg;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <main+0x10c>)
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <main+0x110>)
 8000d3a:	601a      	str	r2, [r3, #0]

  vel_output.angular_vel = 1;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <main+0x114>)
 8000d3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d42:	605a      	str	r2, [r3, #4]
  vel_output.linear_vel = 2;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <main+0x114>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  stream_tx = pb_ostream_from_buffer(buffer_tx, sizeof(buffer_tx));
 8000d4c:	4c1c      	ldr	r4, [pc, #112]	; (8000dc0 <main+0x118>)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	220a      	movs	r2, #10
 8000d52:	491c      	ldr	r1, [pc, #112]	; (8000dc4 <main+0x11c>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 ff11 	bl	8003b7c <pb_ostream_from_buffer>
 8000d5a:	4625      	mov	r5, r4
 8000d5c:	463c      	mov	r4, r7
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	602b      	str	r3, [r5, #0]

  //Enables UART RX interrupt
  HAL_UART_Receive_IT(&huart6, buffer_rx, 10);
 8000d66:	220a      	movs	r2, #10
 8000d68:	4917      	ldr	r1, [pc, #92]	; (8000dc8 <main+0x120>)
 8000d6a:	4818      	ldr	r0, [pc, #96]	; (8000dcc <main+0x124>)
 8000d6c:	f006 ff7e 	bl	8007c6c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <main+0x128>)
 8000d72:	f005 fddd 	bl	8006930 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000d76:	e7fe      	b.n	8000d76 <main+0xce>
 8000d78:	20000204 	.word	0x20000204
 8000d7c:	200001ec 	.word	0x200001ec
 8000d80:	200002cc 	.word	0x200002cc
 8000d84:	200002b4 	.word	0x200002b4
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	43480000 	.word	0x43480000
 8000d90:	43340000 	.word	0x43340000
 8000d94:	20000234 	.word	0x20000234
 8000d98:	43430000 	.word	0x43430000
 8000d9c:	43390000 	.word	0x43390000
 8000da0:	20000258 	.word	0x20000258
 8000da4:	42480000 	.word	0x42480000
 8000da8:	2000027c 	.word	0x2000027c
 8000dac:	200002e4 	.word	0x200002e4
 8000db0:	200002f4 	.word	0x200002f4
 8000db4:	200002e8 	.word	0x200002e8
 8000db8:	200002ec 	.word	0x200002ec
 8000dbc:	20000308 	.word	0x20000308
 8000dc0:	2000031c 	.word	0x2000031c
 8000dc4:	20000310 	.word	0x20000310
 8000dc8:	20000338 	.word	0x20000338
 8000dcc:	2000016c 	.word	0x2000016c
 8000dd0:	2000012c 	.word	0x2000012c

08000dd4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval Nonewheel_circumference_
 */
void SystemClock_Config(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0b8      	sub	sp, #224	; 0xe0
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dde:	2234      	movs	r2, #52	; 0x34
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 fdea 	bl	80089bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000de8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2290      	movs	r2, #144	; 0x90
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f007 fddb 	bl	80089bc <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <_Z18SystemClock_Configv+0x10c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <_Z18SystemClock_Configv+0x10c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <_Z18SystemClock_Configv+0x10c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <_Z18SystemClock_Configv+0x110>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <_Z18SystemClock_Configv+0x110>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <_Z18SystemClock_Configv+0x110>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e46:	2310      	movs	r3, #16
 8000e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fcd8 	bl	800580c <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_Z18SystemClock_Configv+0x9c>
    Error_Handler();
 8000e6c:	f000 fcdc 	bl	8001828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 ff2b 	bl	8005cf0 <HAL_RCC_ClockConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_Z18SystemClock_Configv+0xda>
    Error_Handler();
 8000eaa:	f000 fcbd 	bl	8001828 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 f8e5 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <_Z18SystemClock_Configv+0x102>
    Error_Handler();
 8000ed2:	f000 fca9 	bl	8001828 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	37e0      	adds	r7, #224	; 0xe0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2102      	movs	r1, #2
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f004 fa56 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef6:	201d      	movs	r0, #29
 8000ef8:	f004 fa6f 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8000efc:	2202      	movs	r2, #2
 8000efe:	2102      	movs	r1, #2
 8000f00:	2036      	movs	r0, #54	; 0x36
 8000f02:	f004 fa4e 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f06:	2036      	movs	r0, #54	; 0x36
 8000f08:	f004 fa67 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2047      	movs	r0, #71	; 0x47
 8000f12:	f004 fa46 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f16:	2047      	movs	r0, #71	; 0x47
 8000f18:	f004 fa5f 	bl	80053da <HAL_NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f007 fd44 	bl	80089bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f66:	2303      	movs	r3, #3
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f92:	f005 fd71 	bl	8006a78 <HAL_TIM_Encoder_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf14      	ite	ne
 8000f9c:	2301      	movne	r3, #1
 8000f9e:	2300      	moveq	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <_ZL12MX_TIM2_Initv+0x8a>
    Error_Handler();
 8000fa6:	f000 fc3f 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000fb8:	f006 fcfe 	bl	80079b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <_ZL12MX_TIM2_Initv+0xb0>
    Error_Handler();
 8000fcc:	f000 fc2c 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000002c 	.word	0x2000002c

08000fdc <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8001002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001006:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8001010:	229f      	movs	r2, #159	; 0x9f
 8001012:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8001022:	f005 fc59 	bl	80068d8 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <_ZL12MX_TIM3_Initv+0x5e>
    Error_Handler();
 8001036:	f000 fbf7 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 8001048:	f006 f816 	bl	8007078 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <_ZL12MX_TIM3_Initv+0x84>
    Error_Handler();
 800105c:	f000 fbe4 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <_ZL12MX_TIM3_Initv+0xb4>)
 800106e:	f006 fca3 	bl	80079b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_ZL12MX_TIM3_Initv+0xaa>
    Error_Handler();
 8001082:	f000 fbd1 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000006c 	.word	0x2000006c
 8001094:	40000400 	.word	0x40000400

08001098 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010cc:	4a41      	ldr	r2, [pc, #260]	; (80011d4 <_ZL12MX_TIM4_Initv+0x13c>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010de:	f240 321f 	movw	r2, #799	; 0x31f
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80010f0:	4837      	ldr	r0, [pc, #220]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80010f2:	f005 fbf1 	bl	80068d8 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL12MX_TIM4_Initv+0x72>
    Error_Handler();
 8001106:	f000 fb8f 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001114:	4619      	mov	r1, r3
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 8001118:	f005 ffae 	bl	8007078 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf14      	ite	ne
 8001122:	2301      	movne	r3, #1
 8001124:	2300      	moveq	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <_ZL12MX_TIM4_Initv+0x98>
    Error_Handler();
 800112c:	f000 fb7c 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001130:	4827      	ldr	r0, [pc, #156]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 8001132:	f005 fc27 	bl	8006984 <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf14      	ite	ne
 800113c:	2301      	movne	r3, #1
 800113e:	2300      	moveq	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <_ZL12MX_TIM4_Initv+0xb2>
    Error_Handler();
 8001146:	f000 fb6f 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 800115a:	f006 fc2d 	bl	80079b8 <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <_ZL12MX_TIM4_Initv+0xda>
    Error_Handler();
 800116e:	f000 fb5b 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	; 0x60
 8001174:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001182:	463b      	mov	r3, r7
 8001184:	2208      	movs	r2, #8
 8001186:	4619      	mov	r1, r3
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 800118a:	f005 fe5d 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf14      	ite	ne
 8001194:	2301      	movne	r3, #1
 8001196:	2300      	moveq	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_ZL12MX_TIM4_Initv+0x10a>
    Error_Handler();
 800119e:	f000 fb43 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80011a2:	463b      	mov	r3, r7
 80011a4:	220c      	movs	r2, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80011aa:	f005 fe4d 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZL12MX_TIM4_Initv+0x12a>
    Error_Handler();
 80011be:	f000 fb33 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <_ZL12MX_TIM4_Initv+0x138>)
 80011c4:	f003 fe86 	bl	8004ed4 <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3738      	adds	r7, #56	; 0x38
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	40000800 	.word	0x40000800

080011d8 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = { 0 };
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fbe8 	bl	80089bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 80011f8:	4a26      	ldr	r2, [pc, #152]	; (8001294 <_ZL12MX_TIM5_Initv+0xbc>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001234:	2301      	movs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 8001248:	f005 fc16 	bl	8006a78 <HAL_TIM_Encoder_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <_ZL12MX_TIM5_Initv+0x88>
    Error_Handler();
 800125c:	f000 fae4 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <_ZL12MX_TIM5_Initv+0xb8>)
 800126e:	f006 fba3 	bl	80079b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <_ZL12MX_TIM5_Initv+0xae>
    Error_Handler();
 8001282:	f000 fad1 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000ec 	.word	0x200000ec
 8001294:	40000c00 	.word	0x40000c00

08001298 <_ZL12MX_TIM6_Initv>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <_ZL12MX_TIM6_Initv+0x80>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012be:	f240 321f 	movw	r2, #799	; 0x31f
 80012c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80012ca:	4812      	ldr	r0, [pc, #72]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012cc:	f005 fb04 	bl	80068d8 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL12MX_TIM6_Initv+0x4c>
    Error_Handler();
 80012e0:	f000 faa2 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <_ZL12MX_TIM6_Initv+0x7c>)
 80012f2:	f006 fb61 	bl	80079b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZL12MX_TIM6_Initv+0x72>
    Error_Handler();
 8001306:	f000 fa8f 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000012c 	.word	0x2000012c
 8001318:	40001000 	.word	0x40001000

0800131c <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <_ZL19MX_USART6_UART_Initv+0x64>)
 8001324:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK) {
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <_ZL19MX_USART6_UART_Initv+0x60>)
 8001360:	f006 fba4 	bl	8007aac <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZL19MX_USART6_UART_Initv+0x5c>
    Error_Handler();
 8001374:	f000 fa58 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000016c 	.word	0x2000016c
 8001380:	40011400 	.word	0x40011400

08001384 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a57      	ldr	r2, [pc, #348]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b55      	ldr	r3, [pc, #340]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a51      	ldr	r2, [pc, #324]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a45      	ldr	r2, [pc, #276]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <_ZL12MX_GPIO_Initv+0x190>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, dir2_Pin | dir1_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001430:	4839      	ldr	r0, [pc, #228]	; (8001518 <_ZL12MX_GPIO_Initv+0x194>)
 8001432:	f004 f9b9 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, sleep2_Pin | sleep1_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800143c:	4836      	ldr	r0, [pc, #216]	; (8001518 <_ZL12MX_GPIO_Initv+0x194>)
 800143e:	f004 f9b3 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <_ZL12MX_GPIO_Initv+0x198>)
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4832      	ldr	r0, [pc, #200]	; (8001520 <_ZL12MX_GPIO_Initv+0x19c>)
 8001458:	f003 fffc 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : current2_Pin */
  GPIO_InitStruct.Pin = current2_Pin;
 800145c:	2301      	movs	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current2_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	482c      	ldr	r0, [pc, #176]	; (8001520 <_ZL12MX_GPIO_Initv+0x19c>)
 8001470:	f003 fff0 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : current1_Pin */
  GPIO_InitStruct.Pin = current1_Pin;
 8001474:	2308      	movs	r3, #8
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4827      	ldr	r0, [pc, #156]	; (8001524 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001488:	f003 ffe4 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault2_Pin */
  GPIO_InitStruct.Pin = fault2_Pin;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4821      	ldr	r0, [pc, #132]	; (8001524 <_ZL12MX_GPIO_Initv+0x1a0>)
 80014a0:	f003 ffd8 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin | dir1_Pin;
 80014a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4816      	ldr	r0, [pc, #88]	; (8001518 <_ZL12MX_GPIO_Initv+0x194>)
 80014be:	f003 ffc9 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : sleep2_Pin sleep1_Pin */
  GPIO_InitStruct.Pin = sleep2_Pin | sleep1_Pin;
 80014c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <_ZL12MX_GPIO_Initv+0x194>)
 80014dc:	f003 ffba 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault1_Pin */
  GPIO_InitStruct.Pin = fault1_Pin;
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <_ZL12MX_GPIO_Initv+0x1a4>)
 80014f6:	f003 ffad 	bl	8005454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f003 ff4f 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f003 ff68 	bl	80053da <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	; 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40021400 	.word	0x40021400
 800151c:	10110000 	.word	0x10110000
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	ed2d 8b02 	vpush	{d8}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	61f8      	str	r0, [r7, #28]

  //TIMER 100Hz PID control
  if (htim->Instance == TIM3) {
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d14d      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0xb2>

    left_velocity = left_encoder.GetLinearVelocity();
 8001542:	484a      	ldr	r0, [pc, #296]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001544:	f7ff f884 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800154e:	edc3 7a00 	vstr	s15, [r3]
    left_dutycycle = left_pid.update(left_velocity);
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	4845      	ldr	r0, [pc, #276]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800155e:	f7ff fb4b 	bl	8000bf8 <_ZN3Pid6updateEf>
 8001562:	4602      	mov	r2, r0
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001566:	601a      	str	r2, [r3, #0]
    left_motor.set_speed(left_dutycycle);
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	4843      	ldr	r0, [pc, #268]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001570:	f7ff f9a0 	bl	80008b4 <_ZN15MotorController9set_speedEi>

    right_velocity = right_encoder.GetLinearVelocity();
 8001574:	4842      	ldr	r0, [pc, #264]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001576:	f7ff f86b 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 800157a:	eef0 7a40 	vmov.f32	s15, s0
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
    right_dutycycle = right_pid.update(right_velocity);
 8001584:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	483e      	ldr	r0, [pc, #248]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001590:	f7ff fb32 	bl	8000bf8 <_ZN3Pid6updateEf>
 8001594:	4602      	mov	r2, r0
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001598:	601a      	str	r2, [r3, #0]
    right_motor.set_speed(right_dutycycle);
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	483b      	ldr	r0, [pc, #236]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80015a2:	f7ff f987 	bl	80008b4 <_ZN15MotorController9set_speedEi>

    float difference = left_velocity - right_velocity;
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015a8:	ed93 7a00 	vldr	s14, [r3]
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    int cross_dutycycle = cross_pid.update(difference);
 80015ba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80015be:	4835      	ldr	r0, [pc, #212]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80015c0:	f7ff fb1a 	bl	8000bf8 <_ZN3Pid6updateEf>
 80015c4:	6238      	str	r0, [r7, #32]

    left_dutycycle += cross_dutycycle;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80015d0:	6013      	str	r3, [r2, #0]
    right_dutycycle -= cross_dutycycle;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4a2c      	ldr	r2, [pc, #176]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015dc:	6013      	str	r3, [r2, #0]

  }

  //TIMER 2Hz Transmit
  if (htim->Instance == TIM6) {
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d138      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x12e>

    odom.UpdateValuesFromWheels(left_encoder.GetLinearVelocity(),
 80015e8:	4820      	ldr	r0, [pc, #128]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015ea:	f7ff f831 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80015ee:	eeb0 8a40 	vmov.f32	s16, s0
 80015f2:	4823      	ldr	r0, [pc, #140]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80015f4:	f7ff f82c 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80015f8:	eef0 7a40 	vmov.f32	s15, s0
 80015fc:	eef0 0a67 	vmov.f32	s1, s15
 8001600:	eeb0 0a48 	vmov.f32	s0, s16
 8001604:	4825      	ldr	r0, [pc, #148]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001606:	f7ff f8b7 	bl	8000778 <_ZN8Odometry22UpdateValuesFromWheelsEff>
                                right_encoder.GetLinearVelocity());

    vel_output.linear_vel = odom.GetLinearVelocity();
 800160a:	4824      	ldr	r0, [pc, #144]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800160c:	f7ff f902 	bl	8000814 <_ZN8Odometry17GetLinearVelocityEv>
 8001610:	eef0 7a40 	vmov.f32	s15, s0
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001616:	edc3 7a00 	vstr	s15, [r3]
    vel_output.angular_vel = odom.GetAngularVelocity();
 800161a:	4820      	ldr	r0, [pc, #128]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800161c:	f7ff f909 	bl	8000832 <_ZN8Odometry18GetAngularVelocityEv>
 8001620:	eef0 7a40 	vmov.f32	s15, s0
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001626:	edc3 7a01 	vstr	s15, [r3, #4]

    stream_tx = pb_ostream_from_buffer(buffer_tx, sizeof(buffer_tx));
 800162a:	4c1e      	ldr	r4, [pc, #120]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800162c:	463b      	mov	r3, r7
 800162e:	220a      	movs	r2, #10
 8001630:	491d      	ldr	r1, [pc, #116]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001632:	4618      	mov	r0, r3
 8001634:	f002 faa2 	bl	8003b7c <pb_ostream_from_buffer>
 8001638:	4625      	mov	r5, r4
 800163a:	463c      	mov	r4, r7
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	602b      	str	r3, [r5, #0]

    pb_encode(&stream_tx, Velocities_fields, &vel_output);
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001646:	4919      	ldr	r1, [pc, #100]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800164a:	f002 feaa 	bl	80043a2 <pb_encode>

    HAL_UART_Transmit(&huart6, buffer_tx, 10, 100);
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	220a      	movs	r2, #10
 8001652:	4915      	ldr	r1, [pc, #84]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001654:	4816      	ldr	r0, [pc, #88]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001656:	f006 fa77 	bl	8007b48 <HAL_UART_Transmit>
  }
}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	ecbd 8b02 	vpop	{d8}
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	40000400 	.word	0x40000400
 800166c:	20000204 	.word	0x20000204
 8001670:	2000022c 	.word	0x2000022c
 8001674:	20000234 	.word	0x20000234
 8001678:	200002ac 	.word	0x200002ac
 800167c:	200002cc 	.word	0x200002cc
 8001680:	200001ec 	.word	0x200001ec
 8001684:	20000230 	.word	0x20000230
 8001688:	20000258 	.word	0x20000258
 800168c:	200002b0 	.word	0x200002b0
 8001690:	200002b4 	.word	0x200002b4
 8001694:	2000027c 	.word	0x2000027c
 8001698:	40001000 	.word	0x40001000
 800169c:	2000021c 	.word	0x2000021c
 80016a0:	20000308 	.word	0x20000308
 80016a4:	2000031c 	.word	0x2000031c
 80016a8:	20000310 	.word	0x20000310
 80016ac:	08008cd0 	.word	0x08008cd0
 80016b0:	2000016c 	.word	0x2000016c

080016b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  pb_istream_t stream = pb_istream_from_buffer(buffer_rx, 10);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	220a      	movs	r2, #10
 80016c2:	492c      	ldr	r1, [pc, #176]	; (8001774 <HAL_UART_RxCpltCallback+0xc0>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fc99 	bl	8001ffc <pb_istream_from_buffer>

  bool status = pb_decode(&stream, Velocities_fields, &vel_input);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_UART_RxCpltCallback+0xc4>)
 80016d0:	492a      	ldr	r1, [pc, #168]	; (800177c <HAL_UART_RxCpltCallback+0xc8>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fdda 	bl	800328c <pb_decode>
 80016d8:	4603      	mov	r3, r0
 80016da:	77fb      	strb	r3, [r7, #31]

  // if decoding went ok
  if (status) {
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03f      	beq.n	8001762 <HAL_UART_RxCpltCallback+0xae>

    odom.UpdateValuesFromVel(vel_input.linear_vel, vel_input.angular_vel);
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_UART_RxCpltCallback+0xc4>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_UART_RxCpltCallback+0xc4>)
 80016ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80016ee:	eef0 0a47 	vmov.f32	s1, s14
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	4822      	ldr	r0, [pc, #136]	; (8001780 <HAL_UART_RxCpltCallback+0xcc>)
 80016f8:	f7fe fffe 	bl	80006f8 <_ZN8Odometry19UpdateValuesFromVelEff>

    left_setpoint = odom.GetLeftVelocity();
 80016fc:	4820      	ldr	r0, [pc, #128]	; (8001780 <HAL_UART_RxCpltCallback+0xcc>)
 80016fe:	f7ff f86b 	bl	80007d8 <_ZN8Odometry15GetLeftVelocityEv>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_UART_RxCpltCallback+0xd0>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
    right_setpoint = odom.GetRightVelocity();
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <HAL_UART_RxCpltCallback+0xcc>)
 800170e:	f7ff f872 	bl	80007f6 <_ZN8Odometry16GetRightVelocityEv>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_UART_RxCpltCallback+0xd4>)
 8001718:	edc3 7a00 	vstr	s15, [r3]

    left_pid.set(left_setpoint);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_RxCpltCallback+0xd0>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <HAL_UART_RxCpltCallback+0xd8>)
 8001728:	f7ff fa57 	bl	8000bda <_ZN3Pid3setEf>
    right_pid.set(right_setpoint);
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_UART_RxCpltCallback+0xd4>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	4816      	ldr	r0, [pc, #88]	; (8001790 <HAL_UART_RxCpltCallback+0xdc>)
 8001738:	f7ff fa4f 	bl	8000bda <_ZN3Pid3setEf>

    cross_setpoint = left_setpoint - right_setpoint;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_RxCpltCallback+0xd0>)
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_UART_RxCpltCallback+0xd4>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_UART_RxCpltCallback+0xe0>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
    cross_pid.set(cross_setpoint);
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_UART_RxCpltCallback+0xe0>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	480e      	ldr	r0, [pc, #56]	; (8001798 <HAL_UART_RxCpltCallback+0xe4>)
 800175e:	f7ff fa3c 	bl	8000bda <_ZN3Pid3setEf>
  }

  HAL_UART_Receive_IT(&huart6, buffer_rx, 10);
 8001762:	220a      	movs	r2, #10
 8001764:	4903      	ldr	r1, [pc, #12]	; (8001774 <HAL_UART_RxCpltCallback+0xc0>)
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <HAL_UART_RxCpltCallback+0xe8>)
 8001768:	f006 fa80 	bl	8007c6c <HAL_UART_Receive_IT>

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000338 	.word	0x20000338
 8001778:	20000330 	.word	0x20000330
 800177c:	08008cd0 	.word	0x08008cd0
 8001780:	2000021c 	.word	0x2000021c
 8001784:	200002a0 	.word	0x200002a0
 8001788:	200002a4 	.word	0x200002a4
 800178c:	20000234 	.word	0x20000234
 8001790:	20000258 	.word	0x20000258
 8001794:	200002a8 	.word	0x200002a8
 8001798:	2000027c 	.word	0x2000027c
 800179c:	2000016c 	.word	0x2000016c

080017a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  //Blue user button
  if (GPIO_Pin == GPIO_PIN_13) {
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b0:	d12b      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0x6a>
    previous_millis = current_millis;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_GPIO_EXTI_Callback+0x74>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_GPIO_EXTI_Callback+0x78>)
 80017b8:	6013      	str	r3, [r2, #0]
    current_millis = HAL_GetTick();
 80017ba:	f003 fd0b 	bl	80051d4 <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_GPIO_EXTI_Callback+0x74>)
 80017c4:	601a      	str	r2, [r3, #0]
    if (current_millis - previous_millis < 500)
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_GPIO_EXTI_Callback+0x74>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_GPIO_EXTI_Callback+0x78>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017d4:	da03      	bge.n	80017de <HAL_GPIO_EXTI_Callback+0x3e>
      debounce = false;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_GPIO_EXTI_Callback+0x7c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0x44>
    else
      debounce = true;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_GPIO_EXTI_Callback+0x7c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
    if (mode == 0 && debounce) {
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_GPIO_EXTI_Callback+0x80>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	d10a      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0x6a>
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_GPIO_EXTI_Callback+0x7c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_EXTI_Callback+0x6a>
      mode = 1;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_GPIO_EXTI_Callback+0x80>)
 80017fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001802:	601a      	str	r2, [r3, #0]
      //Enables TIM3 interrupt (used for PID control)
      HAL_TIM_Base_Start_IT(&htim3);
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <HAL_GPIO_EXTI_Callback+0x84>)
 8001806:	f005 f893 	bl	8006930 <HAL_TIM_Base_Start_IT>
    }
  }
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000300 	.word	0x20000300
 8001818:	200002fc 	.word	0x200002fc
 800181c:	20000000 	.word	0x20000000
 8001820:	20000304 	.word	0x20000304
 8001824:	2000006c 	.word	0x2000006c

08001828 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_Z41__static_initialization_and_destruction_0ii>:
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af04      	add	r7, sp, #16
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d148      	bne.n	80018da <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	4293      	cmp	r3, r2
 8001850:	d143      	bne.n	80018da <_Z41__static_initialization_and_destruction_0ii+0xa2>
Encoder right_encoder = Encoder(&htim5, RIGHT_TICKS_PER_METER);
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001854:	4924      	ldr	r1, [pc, #144]	; (80018e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001856:	4825      	ldr	r0, [pc, #148]	; (80018ec <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001858:	f7fe fe95 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Encoder left_encoder = Encoder(&htim2, LEFT_TICKS_PER_METER);
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800185e:	4925      	ldr	r1, [pc, #148]	; (80018f4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001860:	4825      	ldr	r0, [pc, #148]	; (80018f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001862:	f7fe fe90 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Odometry odom = Odometry();
 8001866:	4825      	ldr	r0, [pc, #148]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001868:	f7fe ff2a 	bl	80006c0 <_ZN8OdometryC1Ev>
Pid left_pid(0, 0, 0);
 800186c:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001870:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001874:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001878:	4822      	ldr	r0, [pc, #136]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800187a:	f7ff f951 	bl	8000b20 <_ZN3PidC1Efff>
Pid right_pid(0, 0, 0);
 800187e:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001882:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001886:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800188a:	481f      	ldr	r0, [pc, #124]	; (8001908 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800188c:	f7ff f948 	bl	8000b20 <_ZN3PidC1Efff>
Pid cross_pid(0, 0, 0);
 8001890:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001894:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8001898:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800189c:	481b      	ldr	r0, [pc, #108]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800189e:	f7ff f93f 	bl	8000b20 <_ZN3PidC1Efff>
                            TIM_CHANNEL_4);
 80018a2:	230c      	movs	r3, #12
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80018b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b6:	4917      	ldr	r1, [pc, #92]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80018b8:	4817      	ldr	r0, [pc, #92]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80018ba:	f7fe ffc9 	bl	8000850 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
                           TIM_CHANNEL_3);
 80018be:	2308      	movs	r3, #8
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	4910      	ldr	r1, [pc, #64]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80018d4:	4811      	ldr	r0, [pc, #68]	; (800191c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80018d6:	f7fe ffbb 	bl	8000850 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	000300dd 	.word	0x000300dd
 80018e8:	200000ec 	.word	0x200000ec
 80018ec:	200001ec 	.word	0x200001ec
 80018f0:	0002fccc 	.word	0x0002fccc
 80018f4:	2000002c 	.word	0x2000002c
 80018f8:	20000204 	.word	0x20000204
 80018fc:	2000021c 	.word	0x2000021c
 8001900:	00000000 	.word	0x00000000
 8001904:	20000234 	.word	0x20000234
 8001908:	20000258 	.word	0x20000258
 800190c:	2000027c 	.word	0x2000027c
 8001910:	200000ac 	.word	0x200000ac
 8001914:	40021400 	.word	0x40021400
 8001918:	200002b4 	.word	0x200002b4
 800191c:	200002cc 	.word	0x200002cc

08001920 <_GLOBAL__sub_I_htim2>:
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
 8001924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff ff85 	bl	8001838 <_Z41__static_initialization_and_destruction_0ii>
 800192e:	bd80      	pop	{r7, pc}

08001930 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8001930:	b480      	push	{r7}
 8001932:	b08f      	sub	sp, #60	; 0x3c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    uint8_t format;
    int8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	891a      	ldrh	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	429a      	cmp	r2, r3
 8001946:	d301      	bcc.n	800194c <load_descriptor_values+0x1c>
        return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e14d      	b.n	8001be8 <load_descriptor_values+0x2b8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	895b      	ldrh	r3, [r3, #10]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    format = word0 & 3;
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	b29b      	uxth	r3, r3
 8001972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	821a      	strh	r2, [r3, #16]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	759a      	strb	r2, [r3, #22]

    if (format == 0)
 8001986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <load_descriptor_values+0x8c>
    {
        /* 1-word format */
        iter->array_size = 1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	829a      	strh	r2, [r3, #20]
        size_offset = (int8_t)((word0 >> 24) & 0x0F);
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	0e1b      	lsrs	r3, r3, #24
 8001998:	b25b      	sxtb	r3, r3
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        data_offset = (word0 >> 16) & 0xFF;
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
        iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	0f1b      	lsrs	r3, r3, #28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	825a      	strh	r2, [r3, #18]
 80019ba:	e0b7      	b.n	8001b2c <load_descriptor_values+0x1fc>
    }
    else if (format == 1)
 80019bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d130      	bne.n	8001a26 <load_descriptor_values+0xf6>
    {
        /* 2-word format */
        uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	895b      	ldrh	r3, [r3, #10]
 80019d0:	3301      	adds	r3, #1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60bb      	str	r3, [r7, #8]

        iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	b29b      	uxth	r3, r3
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	829a      	strh	r2, [r3, #20]
        iter->tag = (pb_size_t)(iter->tag | ((word1 >> 28) << 6));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8a1a      	ldrh	r2, [r3, #16]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	0f1b      	lsrs	r3, r3, #28
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	821a      	strh	r2, [r3, #16]
        size_offset = (int8_t)((word0 >> 28) & 0x0F);
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	0f1b      	lsrs	r3, r3, #28
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        data_offset = word1 & 0xFFFF;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
        iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	0c1b      	lsrs	r3, r3, #16
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	825a      	strh	r2, [r3, #18]
 8001a24:	e082      	b.n	8001b2c <load_descriptor_values+0x1fc>
    }
    else if (format == 2)
 8001a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d13a      	bne.n	8001aa4 <load_descriptor_values+0x174>
    {
        /* 4-word format */
        uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	895b      	ldrh	r3, [r3, #10]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
        uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	895b      	ldrh	r3, [r3, #10]
 8001a50:	3302      	adds	r3, #2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
        uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	895b      	ldrh	r3, [r3, #10]
 8001a66:	3303      	adds	r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]

        iter->array_size = (pb_size_t)(word0 >> 16);
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	829a      	strh	r2, [r3, #20]
        iter->tag = (pb_size_t)(iter->tag | ((word1 >> 8) << 6));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8a1a      	ldrh	r2, [r3, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	821a      	strh	r2, [r3, #16]
        size_offset = (int8_t)(word1 & 0xFF);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        data_offset = word2;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
        iter->data_size = (pb_size_t)word3;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	825a      	strh	r2, [r3, #18]
 8001aa2:	e043      	b.n	8001b2c <load_descriptor_values+0x1fc>
    }
    else
    {
        /* 8-word format */
        uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	895b      	ldrh	r3, [r3, #10]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	895b      	ldrh	r3, [r3, #10]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	623b      	str	r3, [r7, #32]
        uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	895b      	ldrh	r3, [r3, #10]
 8001adc:	3303      	adds	r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61fb      	str	r3, [r7, #28]
        uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	895b      	ldrh	r3, [r3, #10]
 8001af2:	3304      	adds	r3, #4
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]

        iter->array_size = (pb_size_t)word4;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	829a      	strh	r2, [r3, #20]
        iter->tag = (pb_size_t)(iter->tag | ((word1 >> 8) << 6));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	8a1a      	ldrh	r2, [r3, #16]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	019b      	lsls	r3, r3, #6
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	821a      	strh	r2, [r3, #16]
        size_offset = (int8_t)(word1 & 0xFF);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        data_offset = word2;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
        iter->data_size = (pb_size_t)word3;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	825a      	strh	r2, [r3, #18]
    }

    iter->pField = (char*)iter->message + data_offset;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]

    if (size_offset)
 8001b38:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <load_descriptor_values+0x222>
    {
        iter->pSize = (char*)iter->pField - size_offset;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b48:	425b      	negs	r3, r3
 8001b4a:	441a      	add	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	621a      	str	r2, [r3, #32]
 8001b50:	e01a      	b.n	8001b88 <load_descriptor_values+0x258>
    }
    else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7d9b      	ldrb	r3, [r3, #22]
 8001b56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d111      	bne.n	8001b82 <load_descriptor_values+0x252>
             (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7d9b      	ldrb	r3, [r3, #22]
 8001b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <load_descriptor_values+0x246>
              PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7d9b      	ldrb	r3, [r3, #22]
 8001b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
             (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8001b72:	2b80      	cmp	r3, #128	; 0x80
 8001b74:	d105      	bne.n	8001b82 <load_descriptor_values+0x252>
    {
        /* Fixed count array */
        iter->pSize = &iter->array_size;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 0214 	add.w	r2, r3, #20
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	621a      	str	r2, [r3, #32]
 8001b80:	e002      	b.n	8001b88 <load_descriptor_values+0x258>
    }
    else
    {
        iter->pSize = NULL;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
    }

    if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7d9b      	ldrb	r3, [r3, #22]
 8001b8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d109      	bne.n	8001ba8 <load_descriptor_values+0x278>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <load_descriptor_values+0x278>
    {
        iter->pData = *(void**)iter->pField;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	61da      	str	r2, [r3, #28]
 8001ba6:	e003      	b.n	8001bb0 <load_descriptor_values+0x280>
    }
    else
    {
        iter->pData = iter->pField;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	61da      	str	r2, [r3, #28]
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7d9b      	ldrb	r3, [r3, #22]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d005      	beq.n	8001bc8 <load_descriptor_values+0x298>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7d9b      	ldrb	r3, [r3, #22]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d10b      	bne.n	8001be0 <load_descriptor_values+0x2b0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	89db      	ldrh	r3, [r3, #14]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8001bde:	e002      	b.n	8001be6 <load_descriptor_values+0x2b6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	373c      	adds	r7, #60	; 0x3c
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    iter->index++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	891b      	ldrh	r3, [r3, #8]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	891a      	ldrh	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d30c      	bcc.n	8001c32 <advance_iterator+0x3e>
    {
        /* Restart */
        iter->index = 0;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	819a      	strh	r2, [r3, #12]
        if (PB_LTYPE_IS_SUBMSG(prev_type))
        {
            iter->submessage_index++;
        }
    }
}
 8001c30:	e035      	b.n	8001c9e <advance_iterator+0xaa>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	895b      	ldrh	r3, [r3, #10]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2201      	movs	r2, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	895a      	ldrh	r2, [r3, #10]
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	4413      	add	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	815a      	strh	r2, [r3, #10]
        if (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED)
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <advance_iterator+0x8a>
            iter->required_field_index++;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	899b      	ldrh	r3, [r3, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	819a      	strh	r2, [r3, #12]
        if (PB_LTYPE_IS_SUBMSG(prev_type))
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d004      	beq.n	8001c92 <advance_iterator+0x9e>
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	2b09      	cmp	r3, #9
 8001c90:	d105      	bne.n	8001c9e <advance_iterator+0xaa>
            iter->submessage_index++;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	89db      	ldrh	r3, [r3, #14]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	81da      	strh	r2, [r3, #14]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8001cb6:	2228      	movs	r2, #40	; 0x28
 8001cb8:	2100      	movs	r1, #0
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f006 fe7e 	bl	80089bc <memset>

    iter->descriptor = desc;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fe2f 	bl	8001930 <load_descriptor_values>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d109      	bne.n	8001d18 <pb_field_iter_begin_extension+0x3c>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3304      	adds	r3, #4
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ffcc 	bl	8001caa <pb_field_iter_begin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	e008      	b.n	8001d2a <pb_field_iter_begin_extension+0x4e>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6939      	ldr	r1, [r7, #16]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ffc2 	bl	8001caa <pb_field_iter_begin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f103 020c 	add.w	r2, r3, #12
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	621a      	str	r2, [r3, #32]
    return status;
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff54 	bl	8001bf4 <advance_iterator>
    (void)load_descriptor_values(iter);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fdef 	bl	8001930 <load_descriptor_values>
    return iter->index != 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e031      	b.n	8001de6 <pb_field_iter_find+0x7e>
    }
    else
    {
        pb_size_t start = iter->index;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	891b      	ldrh	r3, [r3, #8]
 8001d86:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff33 	bl	8001bf4 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	089a      	lsrs	r2, r3, #2
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	4053      	eors	r3, r2
 8001daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d110      	bne.n	8001dd4 <pb_field_iter_find+0x6c>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fdbc 	bl	8001930 <load_descriptor_values>

                if (iter->tag == tag &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	8a1b      	ldrh	r3, [r3, #16]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d107      	bne.n	8001dd4 <pb_field_iter_find+0x6c>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7d9b      	ldrb	r3, [r3, #22]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8001dcc:	2b0a      	cmp	r3, #10
 8001dce:	d001      	beq.n	8001dd4 <pb_field_iter_find+0x6c>
                {
                    /* Found it */
                    return true;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e008      	b.n	8001de6 <pb_field_iter_find+0x7e>
                }
            }
        } while (iter->index != start);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	891b      	ldrh	r3, [r3, #8]
 8001dd8:	89fa      	ldrh	r2, [r7, #14]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d1d4      	bne.n	8001d88 <pb_field_iter_find+0x20>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fda6 	bl	8001930 <load_descriptor_values>
        return false;
 8001de4:	2300      	movs	r3, #0
    }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffea 	bl	8001dee <pb_const_cast>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff ff42 	bl	8001caa <pb_field_iter_begin>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f7ff ffd7 	bl	8001dee <pb_const_cast>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff49 	bl	8001cdc <pb_field_iter_begin_extension>
 8001e4a:	4603      	mov	r3, r0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	441a      	add	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d011      	beq.n	8001e9c <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e00a      	b.n	8001e94 <buf_read+0x40>
            buf[i] = source[i];
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	441a      	add	r2, r3
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	440b      	add	r3, r1
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3f0      	bcc.n	8001e7e <buf_read+0x2a>
    }
    
    return true;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <pb_read+0x16>
        return true;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e056      	b.n	8001f70 <pb_read+0xc4>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d123      	bne.n	8001f10 <pb_read+0x64>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <pb_read+0xcc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01e      	beq.n	8001f10 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8001ed2:	e011      	b.n	8001ef8 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff ffe5 	bl	8001eac <pb_read>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <pb_read+0x46>
				return false;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e03e      	b.n	8001f70 <pb_read+0xc4>
			
			count -= 16;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3b10      	subs	r3, #16
 8001ef6:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d8ea      	bhi.n	8001ed4 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4619      	mov	r1, r3
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff ffd0 	bl	8001eac <pb_read>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	e02f      	b.n	8001f70 <pb_read+0xc4>
	}
#endif

    if (stream->bytes_left < count)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90b      	bls.n	8001f32 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <pb_read+0x7c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	e000      	b.n	8001f2a <pb_read+0x7e>
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <pb_read+0xd0>)
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	60d3      	str	r3, [r2, #12]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e01e      	b.n	8001f70 <pb_read+0xc4>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	4798      	blx	r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <pb_read+0xac>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	e000      	b.n	8001f5a <pb_read+0xae>
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <pb_read+0xd4>)
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	60d3      	str	r3, [r2, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e006      	b.n	8001f70 <pb_read+0xc4>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
    return true;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	08001e55 	.word	0x08001e55
 8001f7c:	080089e4 	.word	0x080089e4
 8001f80:	080089f4 	.word	0x080089f4

08001f84 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <pb_readbyte+0x20>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	e000      	b.n	8001fa6 <pb_readbyte+0x22>
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <pb_readbyte+0x70>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	60d3      	str	r3, [r2, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	e01d      	b.n	8001fea <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <pb_readbyte+0x50>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	e000      	b.n	8001fd6 <pb_readbyte+0x52>
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <pb_readbyte+0x74>)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	60d3      	str	r3, [r2, #12]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e005      	b.n	8001fea <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	1e5a      	subs	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
    
    return true;    
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	080089e4 	.word	0x080089e4
 8001ff8:	080089f4 	.word	0x080089f4

08001ffc <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 8001ffc:	b490      	push	{r4, r7}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <pb_istream_from_buffer+0x38>)
 800200a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	461c      	mov	r4, r3
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bc90      	pop	{r4, r7}
 8002032:	4770      	bx	lr
 8002034:	08001e55 	.word	0x08001e55

08002038 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8002044:	f107 0316 	add.w	r3, r7, #22
 8002048:	4619      	mov	r1, r3
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff ff9a 	bl	8001f84 <pb_readbyte>
 8002050:	4603      	mov	r3, r0
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8002070:	2300      	movs	r3, #0
 8002072:	e064      	b.n	800213e <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 8002074:	7dbb      	ldrb	r3, [r7, #22]
 8002076:	b25b      	sxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	db02      	blt.n	8002082 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800207c:	7dbb      	ldrb	r3, [r7, #22]
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	e059      	b.n	8002136 <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8002082:	2307      	movs	r3, #7
 8002084:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800208c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800208e:	f107 0316 	add.w	r3, r7, #22
 8002092:	4619      	mov	r1, r3
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff ff75 	bl	8001f84 <pb_readbyte>
 800209a:	4603      	mov	r3, r0
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <pb_decode_varint32_eof+0x72>
                return false;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e049      	b.n	800213e <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b1f      	cmp	r3, #31
 80020ae:	d91e      	bls.n	80020ee <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b3e      	cmp	r3, #62	; 0x3e
 80020b4:	d801      	bhi.n	80020ba <pb_decode_varint32_eof+0x82>
 80020b6:	23ff      	movs	r3, #255	; 0xff
 80020b8:	e000      	b.n	80020bc <pb_decode_varint32_eof+0x84>
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80020be:	7dbb      	ldrb	r3, [r7, #22]
 80020c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <pb_decode_varint32_eof+0xc8>
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da03      	bge.n	80020d6 <pb_decode_varint32_eof+0x9e>
 80020ce:	7dbb      	ldrb	r3, [r7, #22]
 80020d0:	7dfa      	ldrb	r2, [r7, #23]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d014      	beq.n	8002100 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <pb_decode_varint32_eof+0xac>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	e000      	b.n	80020e6 <pb_decode_varint32_eof+0xae>
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <pb_decode_varint32_eof+0x110>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	60d3      	str	r3, [r2, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	e027      	b.n	800213e <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80020ee:	7dbb      	ldrb	r3, [r7, #22]
 80020f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3307      	adds	r3, #7
 8002104:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8002106:	7dbb      	ldrb	r3, [r7, #22]
 8002108:	b25b      	sxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	dbbf      	blt.n	800208e <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b23      	cmp	r3, #35	; 0x23
 8002112:	d110      	bne.n	8002136 <pb_decode_varint32_eof+0xfe>
 8002114:	7dbb      	ldrb	r3, [r7, #22]
 8002116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <pb_decode_varint32_eof+0xf4>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	e000      	b.n	800212e <pb_decode_varint32_eof+0xf6>
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <pb_decode_varint32_eof+0x110>)
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	60d3      	str	r3, [r2, #12]
 8002132:	2300      	movs	r3, #0
 8002134:	e003      	b.n	800213e <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	601a      	str	r2, [r3, #0]
   return true;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08008a00 	.word	0x08008a00

0800214c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8002156:	2200      	movs	r2, #0
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff6c 	bl	8002038 <pb_decode_varint32_eof>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800216c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b3f      	cmp	r3, #63	; 0x3f
 800218c:	d90b      	bls.n	80021a6 <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <pb_decode_varint+0x30>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	e000      	b.n	800219e <pb_decode_varint+0x32>
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <pb_decode_varint+0xc0>)
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	60d3      	str	r3, [r2, #12]
 80021a2:	2300      	movs	r3, #0
 80021a4:	e03d      	b.n	8002222 <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 80021a6:	f107 030f 	add.w	r3, r7, #15
 80021aa:	4619      	mov	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fee9 	bl	8001f84 <pb_readbyte>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <pb_decode_varint+0x56>
            return false;
 80021be:	2300      	movs	r3, #0
 80021c0:	e02f      	b.n	8002222 <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	ea02 0b00 	and.w	fp, r2, r0
 80021d6:	ea03 0c01 	and.w	ip, r3, r1
 80021da:	69f9      	ldr	r1, [r7, #28]
 80021dc:	f1a1 0620 	sub.w	r6, r1, #32
 80021e0:	f1c1 0020 	rsb	r0, r1, #32
 80021e4:	fa0c f501 	lsl.w	r5, ip, r1
 80021e8:	fa0b f606 	lsl.w	r6, fp, r6
 80021ec:	4335      	orrs	r5, r6
 80021ee:	fa2b f000 	lsr.w	r0, fp, r0
 80021f2:	4305      	orrs	r5, r0
 80021f4:	fa0b f401 	lsl.w	r4, fp, r1
 80021f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021fc:	ea42 0004 	orr.w	r0, r2, r4
 8002200:	ea43 0105 	orr.w	r1, r3, r5
 8002204:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3307      	adds	r3, #7
 800220c:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	dbb8      	blt.n	8002188 <pb_decode_varint+0x1c>
    
    *dest = result;
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800221c:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800222c:	08008a00 	.word	0x08008a00

08002230 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8002238:	f107 030f 	add.w	r3, r7, #15
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fe33 	bl	8001eac <pb_read>
 8002246:	4603      	mov	r3, r0
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <pb_skip_varint+0x26>
            return false;
 8002252:	2300      	movs	r3, #0
 8002254:	e004      	b.n	8002260 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	dbec      	blt.n	8002238 <pb_skip_varint+0x8>
    return true;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff68 	bl	800214c <pb_decode_varint32>
 800227c:	4603      	mov	r3, r0
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <pb_skip_string+0x24>
        return false;
 8002288:	2300      	movs	r3, #0
 800228a:	e006      	b.n	800229a <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fe0a 	bl	8001eac <pb_read>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff feb4 	bl	8002038 <pb_decode_varint32_eof>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <pb_decode_tag+0x3e>
    {
        return false;
 80022dc:	2300      	movs	r3, #0
 80022de:	e00b      	b.n	80022f8 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	701a      	strb	r2, [r3, #0]
    return true;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d826      	bhi.n	8002360 <pb_skip_field+0x60>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <pb_skip_field+0x18>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002331 	.word	0x08002331
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002349 	.word	0x08002349
 8002324:	08002361 	.word	0x08002361
 8002328:	08002361 	.word	0x08002361
 800232c:	08002353 	.word	0x08002353
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff7d 	bl	8002230 <pb_skip_varint>
 8002336:	4603      	mov	r3, r0
 8002338:	e01d      	b.n	8002376 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800233a:	2208      	movs	r2, #8
 800233c:	2100      	movs	r1, #0
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fdb4 	bl	8001eac <pb_read>
 8002344:	4603      	mov	r3, r0
 8002346:	e016      	b.n	8002376 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff8d 	bl	8002268 <pb_skip_string>
 800234e:	4603      	mov	r3, r0
 8002350:	e011      	b.n	8002376 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8002352:	2204      	movs	r2, #4
 8002354:	2100      	movs	r1, #0
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fda8 	bl	8001eac <pb_read>
 800235c:	4603      	mov	r3, r0
 800235e:	e00a      	b.n	8002376 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <pb_skip_field+0x6e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	e000      	b.n	8002370 <pb_skip_field+0x70>
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <pb_skip_field+0x80>)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	60d3      	str	r3, [r2, #12]
 8002374:	2300      	movs	r3, #0
    }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	08008a10 	.word	0x08008a10

08002384 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	460b      	mov	r3, r1
 8002392:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d032      	beq.n	8002406 <read_raw_value+0x82>
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d03a      	beq.n	800241a <read_raw_value+0x96>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d142      	bne.n	800242e <read_raw_value+0xaa>
    {
        case PB_WT_VARINT:
            *size = 0;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d20b      	bcs.n	80023da <read_raw_value+0x56>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <read_raw_value+0x4c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	e000      	b.n	80023d2 <read_raw_value+0x4e>
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <read_raw_value+0xc8>)
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	60d3      	str	r3, [r2, #12]
 80023d6:	2300      	movs	r3, #0
 80023d8:	e034      	b.n	8002444 <read_raw_value+0xc0>

                if (!pb_read(stream, buf, 1))
 80023da:	2201      	movs	r2, #1
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff fd64 	bl	8001eac <pb_read>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f083 0301 	eor.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <read_raw_value+0x70>
                    return false;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e027      	b.n	8002444 <read_raw_value+0xc0>
            } while (*buf++ & 0x80);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dbd5      	blt.n	80023ae <read_raw_value+0x2a>
            return true;
 8002402:	2301      	movs	r3, #1
 8002404:	e01e      	b.n	8002444 <read_raw_value+0xc0>
            
        case PB_WT_64BIT:
            *size = 8;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800240c:	2208      	movs	r2, #8
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff fd4b 	bl	8001eac <pb_read>
 8002416:	4603      	mov	r3, r0
 8002418:	e014      	b.n	8002444 <read_raw_value+0xc0>
        
        case PB_WT_32BIT:
            *size = 4;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2204      	movs	r2, #4
 800241e:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8002420:	2204      	movs	r2, #4
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fd41 	bl	8001eac <pb_read>
 800242a:	4603      	mov	r3, r0
 800242c:	e00a      	b.n	8002444 <read_raw_value+0xc0>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <read_raw_value+0xb8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	e000      	b.n	800243e <read_raw_value+0xba>
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <read_raw_value+0xcc>)
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	60d3      	str	r3, [r2, #12]
 8002442:	2300      	movs	r3, #0
    }
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08008a00 	.word	0x08008a00
 8002450:	08008a10 	.word	0x08008a10

08002454 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fe71 	bl	800214c <pb_decode_varint32>
 800246a:	4603      	mov	r3, r0
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <pb_make_string_substream+0x26>
        return false;
 8002476:	2300      	movs	r3, #0
 8002478:	e020      	b.n	80024bc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4614      	mov	r4, r2
 8002480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d20b      	bcs.n	80024a8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <pb_make_string_substream+0x4a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	e000      	b.n	80024a0 <pb_make_string_substream+0x4c>
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <pb_make_string_substream+0x70>)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60d3      	str	r3, [r2, #12]
 80024a4:	2300      	movs	r3, #0
 80024a6:	e009      	b.n	80024bc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad2      	subs	r2, r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
    return true;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}
 80024c4:	08008a24 	.word	0x08008a24

080024c8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00e      	beq.n	80024f8 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	461a      	mov	r2, r3
 80024e0:	2100      	movs	r1, #0
 80024e2:	6838      	ldr	r0, [r7, #0]
 80024e4:	f7ff fce2 	bl	8001eac <pb_read>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <pb_close_string_substream+0x30>
            return false;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e008      	b.n	800250a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <check_wire_type>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn check_wire_type(pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
    switch (PB_LTYPE(field->type))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7d9b      	ldrb	r3, [r3, #22]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	2b0b      	cmp	r3, #11
 800252a:	d837      	bhi.n	800259c <check_wire_type+0x88>
 800252c:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <check_wire_type+0x20>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002565 	.word	0x08002565
 8002538:	08002565 	.word	0x08002565
 800253c:	08002565 	.word	0x08002565
 8002540:	08002565 	.word	0x08002565
 8002544:	08002573 	.word	0x08002573
 8002548:	08002581 	.word	0x08002581
 800254c:	0800258f 	.word	0x0800258f
 8002550:	0800258f 	.word	0x0800258f
 8002554:	0800258f 	.word	0x0800258f
 8002558:	0800258f 	.word	0x0800258f
 800255c:	0800259d 	.word	0x0800259d
 8002560:	0800258f 	.word	0x0800258f
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return wire_type == PB_WT_VARINT;
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e015      	b.n	800259e <check_wire_type+0x8a>

        case PB_LTYPE_FIXED32:
            return wire_type == PB_WT_32BIT;
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b05      	cmp	r3, #5
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e00e      	b.n	800259e <check_wire_type+0x8a>

        case PB_LTYPE_FIXED64:
            return wire_type == PB_WT_64BIT;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b01      	cmp	r3, #1
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e007      	b.n	800259e <check_wire_type+0x8a>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return wire_type == PB_WT_STRING;
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b02      	cmp	r3, #2
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e000      	b.n	800259e <check_wire_type+0x8a>

        default:
            return false;
 800259c:	2300      	movs	r3, #0
    }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <decode_basic_field>:

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_field_iter_t *field)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    switch (PB_LTYPE(field->type))
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7d9b      	ldrb	r3, [r3, #22]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	2b0b      	cmp	r3, #11
 80025c0:	d844      	bhi.n	800264c <decode_basic_field+0xa0>
 80025c2:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <decode_basic_field+0x1c>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025f9 	.word	0x080025f9
 80025cc:	08002605 	.word	0x08002605
 80025d0:	08002605 	.word	0x08002605
 80025d4:	08002605 	.word	0x08002605
 80025d8:	08002611 	.word	0x08002611
 80025dc:	08002611 	.word	0x08002611
 80025e0:	0800261d 	.word	0x0800261d
 80025e4:	08002629 	.word	0x08002629
 80025e8:	08002635 	.word	0x08002635
 80025ec:	08002635 	.word	0x08002635
 80025f0:	0800264d 	.word	0x0800264d
 80025f4:	08002641 	.word	0x08002641
    {
        case PB_LTYPE_BOOL:
            return pb_dec_bool(stream, field);
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 ff5f 	bl	80034be <pb_dec_bool>
 8002600:	4603      	mov	r3, r0
 8002602:	e02e      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_dec_varint(stream, field);
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 ff6a 	bl	80034e0 <pb_dec_varint>
 800260c:	4603      	mov	r3, r0
 800260e:	e028      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_dec_fixed(stream, field);
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f001 f87e 	bl	8003714 <pb_dec_fixed>
 8002618:	4603      	mov	r3, r0
 800261a:	e022      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_BYTES:
            return pb_dec_bytes(stream, field);
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f001 f8a6 	bl	8003770 <pb_dec_bytes>
 8002624:	4603      	mov	r3, r0
 8002626:	e01c      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_STRING:
            return pb_dec_string(stream, field);
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 f914 	bl	8003858 <pb_dec_string>
 8002630:	4603      	mov	r3, r0
 8002632:	e016      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_dec_submessage(stream, field);
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f001 f98a 	bl	8003950 <pb_dec_submessage>
 800263c:	4603      	mov	r3, r0
 800263e:	e010      	b.n	8002662 <decode_basic_field+0xb6>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_dec_fixed_length_bytes(stream, field);
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 fa1e 	bl	8003a84 <pb_dec_fixed_length_bytes>
 8002648:	4603      	mov	r3, r0
 800264a:	e00a      	b.n	8002662 <decode_basic_field+0xb6>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <decode_basic_field+0xae>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	e000      	b.n	800265c <decode_basic_field+0xb0>
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <decode_basic_field+0xc0>)
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	2300      	movs	r3, #0
    }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	08008a3c 	.word	0x08008a3c

08002670 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	460b      	mov	r3, r1
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7d9b      	ldrb	r3, [r3, #22]
 8002682:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002686:	2b10      	cmp	r3, #16
 8002688:	d027      	beq.n	80026da <decode_static_field+0x6a>
 800268a:	2b10      	cmp	r3, #16
 800268c:	d802      	bhi.n	8002694 <decode_static_field+0x24>
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <decode_static_field+0x30>
 8002692:	e12e      	b.n	80028f2 <decode_static_field+0x282>
 8002694:	2b20      	cmp	r3, #32
 8002696:	d045      	beq.n	8002724 <decode_static_field+0xb4>
 8002698:	2b30      	cmp	r3, #48	; 0x30
 800269a:	f000 80f4 	beq.w	8002886 <decode_static_field+0x216>
 800269e:	e128      	b.n	80028f2 <decode_static_field+0x282>
    {
        case PB_HTYPE_REQUIRED:
            if (!check_wire_type(wire_type, field))
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff35 	bl	8002514 <check_wire_type>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <decode_static_field+0x5e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <decode_static_field+0x54>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	e000      	b.n	80026c6 <decode_static_field+0x56>
 80026c4:	4b92      	ldr	r3, [pc, #584]	; (8002910 <decode_static_field+0x2a0>)
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	60d3      	str	r3, [r2, #12]
 80026ca:	2300      	movs	r3, #0
 80026cc:	e11c      	b.n	8002908 <decode_static_field+0x298>

            return decode_basic_field(stream, field);
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff ff6b 	bl	80025ac <decode_basic_field>
 80026d6:	4603      	mov	r3, r0
 80026d8:	e116      	b.n	8002908 <decode_static_field+0x298>
            
        case PB_HTYPE_OPTIONAL:
            if (!check_wire_type(wire_type, field))
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff18 	bl	8002514 <check_wire_type>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <decode_static_field+0x98>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <decode_static_field+0x8e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	e000      	b.n	8002700 <decode_static_field+0x90>
 80026fe:	4b84      	ldr	r3, [pc, #528]	; (8002910 <decode_static_field+0x2a0>)
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	60d3      	str	r3, [r2, #12]
 8002704:	2300      	movs	r3, #0
 8002706:	e0ff      	b.n	8002908 <decode_static_field+0x298>

            if (field->pSize != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <decode_static_field+0xa8>
                *(bool*)field->pSize = true;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, field);
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff ff46 	bl	80025ac <decode_basic_field>
 8002720:	4603      	mov	r3, r0
 8002722:	e0f1      	b.n	8002908 <decode_static_field+0x298>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d16b      	bne.n	8002802 <decode_static_field+0x192>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7d9b      	ldrb	r3, [r3, #22]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	2b05      	cmp	r3, #5
 8002734:	d865      	bhi.n	8002802 <decode_static_field+0x192>
            {
                /* Packed array */
                bool status = true;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
                field->pData = (char*)field->pField + field->data_size * (*size);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	8a52      	ldrh	r2, [r2, #18]
 800274a:	4611      	mov	r1, r2
 800274c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274e:	8812      	ldrh	r2, [r2, #0]
 8002750:	fb02 f201 	mul.w	r2, r2, r1
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fe77 	bl	8002454 <pb_make_string_substream>
 8002766:	4603      	mov	r3, r0
 8002768:	f083 0301 	eor.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01e      	beq.n	80027b0 <decode_static_field+0x140>
                    return false;
 8002772:	2300      	movs	r3, #0
 8002774:	e0c8      	b.n	8002908 <decode_static_field+0x298>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, field))
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff15 	bl	80025ac <decode_basic_field>
 8002782:	4603      	mov	r3, r0
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <decode_static_field+0x126>
                    {
                        status = false;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        break;
 8002794:	e015      	b.n	80027c2 <decode_static_field+0x152>
                    }
                    (*size)++;
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	8a52      	ldrh	r2, [r2, #18]
 80027aa:	441a      	add	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <decode_static_field+0x152>
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8a9b      	ldrh	r3, [r3, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3d9      	bcc.n	8002776 <decode_static_field+0x106>
                }

                if (substream.bytes_left != 0)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <decode_static_field+0x170>
                    PB_RETURN_ERROR(stream, "array overflow");
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <decode_static_field+0x166>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	e000      	b.n	80027d8 <decode_static_field+0x168>
 80027d6:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <decode_static_field+0x2a4>)
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	60d3      	str	r3, [r2, #12]
 80027dc:	2300      	movs	r3, #0
 80027de:	e093      	b.n	8002908 <decode_static_field+0x298>
                if (!pb_close_string_substream(stream, &substream))
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fe6e 	bl	80024c8 <pb_close_string_substream>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f083 0301 	eor.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <decode_static_field+0x18c>
                    return false;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e085      	b.n	8002908 <decode_static_field+0x298>

                return status;
 80027fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002800:	e082      	b.n	8002908 <decode_static_field+0x298>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
                field->pData = (char*)field->pField + field->data_size * (*size);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	8a52      	ldrh	r2, [r2, #18]
 8002810:	4611      	mov	r1, r2
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	8812      	ldrh	r2, [r2, #0]
 8002816:	fb02 f201 	mul.w	r2, r2, r1
 800281a:	441a      	add	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	61da      	str	r2, [r3, #28]

                if (!check_wire_type(wire_type, field))
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fe75 	bl	8002514 <check_wire_type>
 800282a:	4603      	mov	r3, r0
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <decode_static_field+0x1de>
                    PB_RETURN_ERROR(stream, "wrong wire type");
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <decode_static_field+0x1d4>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	e000      	b.n	8002846 <decode_static_field+0x1d6>
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <decode_static_field+0x2a0>)
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	60d3      	str	r3, [r2, #12]
 800284a:	2300      	movs	r3, #0
 800284c:	e05c      	b.n	8002908 <decode_static_field+0x298>

                if ((*size)++ >= field->array_size)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	b291      	uxth	r1, r2
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	8011      	strh	r1, [r2, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	8a92      	ldrh	r2, [r2, #20]
 800285e:	4293      	cmp	r3, r2
 8002860:	d30b      	bcc.n	800287a <decode_static_field+0x20a>
                    PB_RETURN_ERROR(stream, "array overflow");
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <decode_static_field+0x200>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	e000      	b.n	8002872 <decode_static_field+0x202>
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <decode_static_field+0x2a4>)
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	60d3      	str	r3, [r2, #12]
 8002876:	2300      	movs	r3, #0
 8002878:	e046      	b.n	8002908 <decode_static_field+0x298>

                return decode_basic_field(stream, field);
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fe95 	bl	80025ac <decode_basic_field>
 8002882:	4603      	mov	r3, r0
 8002884:	e040      	b.n	8002908 <decode_static_field+0x298>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)field->pSize = field->tag;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	8a12      	ldrh	r2, [r2, #16]
 800288e:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE_IS_SUBMSG(field->type))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7d9b      	ldrb	r3, [r3, #22]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	2b08      	cmp	r3, #8
 800289a:	d005      	beq.n	80028a8 <decode_static_field+0x238>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7d9b      	ldrb	r3, [r3, #22]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d107      	bne.n	80028b8 <decode_static_field+0x248>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69d8      	ldr	r0, [r3, #28]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8a5b      	ldrh	r3, [r3, #18]
 80028b0:	461a      	mov	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f006 f882 	bl	80089bc <memset>
            }

            if (!check_wire_type(wire_type, field))
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe29 	bl	8002514 <check_wire_type>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <decode_static_field+0x276>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <decode_static_field+0x26c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	e000      	b.n	80028de <decode_static_field+0x26e>
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <decode_static_field+0x2a0>)
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	60d3      	str	r3, [r2, #12]
 80028e2:	2300      	movs	r3, #0
 80028e4:	e010      	b.n	8002908 <decode_static_field+0x298>

            return decode_basic_field(stream, field);
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff fe5f 	bl	80025ac <decode_basic_field>
 80028ee:	4603      	mov	r3, r0
 80028f0:	e00a      	b.n	8002908 <decode_static_field+0x298>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <decode_static_field+0x290>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	e000      	b.n	8002902 <decode_static_field+0x292>
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <decode_static_field+0x2a8>)
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	60d3      	str	r3, [r2, #12]
 8002906:	2300      	movs	r3, #0
    }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	08008a50 	.word	0x08008a50
 8002914:	08008a60 	.word	0x08008a60
 8002918:	08008a3c 	.word	0x08008a3c

0800291c <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	460b      	mov	r3, r1
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <decode_pointer_field+0x1c>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	e000      	b.n	800293a <decode_pointer_field+0x1e>
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <decode_pointer_field+0x30>)
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	60d3      	str	r3, [r2, #12]
 800293e:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	08008a70 	.word	0x08008a70

08002950 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b097      	sub	sp, #92	; 0x5c
 8002954:	af00      	add	r7, sp, #0
 8002956:	61f8      	str	r0, [r7, #28]
 8002958:	460b      	mov	r3, r1
 800295a:	617a      	str	r2, [r7, #20]
 800295c:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <decode_callback_field+0x28>
        return pb_skip_field(stream, wire_type);
 800296a:	7efb      	ldrb	r3, [r7, #27]
 800296c:	4619      	mov	r1, r3
 800296e:	69f8      	ldr	r0, [r7, #28]
 8002970:	f7ff fcc6 	bl	8002300 <pb_skip_field>
 8002974:	4603      	mov	r3, r0
 8002976:	e06d      	b.n	8002a54 <decode_callback_field+0x104>

    if (wire_type == PB_WT_STRING)
 8002978:	7efb      	ldrb	r3, [r7, #27]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d141      	bne.n	8002a02 <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 800297e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002982:	4619      	mov	r1, r3
 8002984:	69f8      	ldr	r0, [r7, #28]
 8002986:	f7ff fd65 	bl	8002454 <pb_make_string_substream>
 800298a:	4603      	mov	r3, r0
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <decode_callback_field+0x4a>
            return false;
 8002996:	2300      	movs	r3, #0
 8002998:	e05c      	b.n	8002a54 <decode_callback_field+0x104>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80029a6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	2100      	movs	r1, #0
 80029ae:	4798      	blx	r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <decode_callback_field+0x84>
                PB_RETURN_ERROR(stream, "callback failed");
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <decode_callback_field+0x7a>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	e000      	b.n	80029cc <decode_callback_field+0x7c>
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <decode_callback_field+0x10c>)
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	60d3      	str	r3, [r2, #12]
 80029d0:	2300      	movs	r3, #0
 80029d2:	e03f      	b.n	8002a54 <decode_callback_field+0x104>
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <decode_callback_field+0x92>
 80029da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029de:	429a      	cmp	r2, r3
 80029e0:	d8db      	bhi.n	800299a <decode_callback_field+0x4a>
        
        if (!pb_close_string_substream(stream, &substream))
 80029e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029e6:	4619      	mov	r1, r3
 80029e8:	69f8      	ldr	r0, [r7, #28]
 80029ea:	f7ff fd6d 	bl	80024c8 <pb_close_string_substream>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f083 0301 	eor.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <decode_callback_field+0xae>
            return false;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e02a      	b.n	8002a54 <decode_callback_field+0x104>

        return true;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e028      	b.n	8002a54 <decode_callback_field+0x104>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8002a02:	230a      	movs	r3, #10
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	7ef9      	ldrb	r1, [r7, #27]
 8002a10:	69f8      	ldr	r0, [r7, #28]
 8002a12:	f7ff fcb7 	bl	8002384 <read_raw_value>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <decode_callback_field+0xd6>
            return false;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e016      	b.n	8002a54 <decode_callback_field+0x104>
        substream = pb_istream_from_buffer(buffer, size);
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	463b      	mov	r3, r7
 8002a2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fae4 	bl	8001ffc <pb_istream_from_buffer>
 8002a34:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002a38:	463b      	mov	r3, r7
 8002a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8002a48:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4798      	blx	r3
 8002a52:	4603      	mov	r3, r0
    }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	375c      	adds	r7, #92	; 0x5c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	08008a84 	.word	0x08008a84

08002a60 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7d9b      	ldrb	r3, [r3, #22]
 8002a72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d013      	beq.n	8002aa2 <decode_field+0x42>
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d009      	beq.n	8002a92 <decode_field+0x32>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d117      	bne.n	8002ab2 <decode_field+0x52>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fdf1 	bl	8002670 <decode_static_field>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	e01a      	b.n	8002ac8 <decode_field+0x68>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4619      	mov	r1, r3
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff ff3f 	bl	800291c <decode_pointer_field>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	e012      	b.n	8002ac8 <decode_field+0x68>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff ff51 	bl	8002950 <decode_callback_field>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	e00a      	b.n	8002ac8 <decode_field+0x68>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <decode_field+0x60>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	e000      	b.n	8002ac2 <decode_field+0x62>
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <decode_field+0x70>)
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	60d3      	str	r3, [r2, #12]
 8002ac6:	2300      	movs	r3, #0
    }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	08008a3c 	.word	0x08008a3c

08002ad4 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	; 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f8f7 	bl	8001cdc <pb_field_iter_begin_extension>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f083 0301 	eor.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <default_extension_decoder+0x34>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	e000      	b.n	8002b0a <default_extension_decoder+0x36>
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <default_extension_decoder+0x6c>)
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	60d3      	str	r3, [r2, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e011      	b.n	8002b36 <default_extension_decoder+0x62>

    if (iter.tag != tag)
 8002b12:	8c3b      	ldrh	r3, [r7, #32]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d001      	beq.n	8002b20 <default_extension_decoder+0x4c>
        return true;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00a      	b.n	8002b36 <default_extension_decoder+0x62>

    extension->found = true;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2201      	movs	r2, #1
 8002b24:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8002b26:	f107 0210 	add.w	r2, r7, #16
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff96 	bl	8002a60 <decode_field>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3738      	adds	r7, #56	; 0x38
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	08008a94 	.word	0x08008a94

08002b44 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 8002b62:	e022      	b.n	8002baa <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681c      	ldr	r4, [r3, #0]
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	69f9      	ldr	r1, [r7, #28]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	47a0      	blx	r4
 8002b7e:	4603      	mov	r3, r0
 8002b80:	76fb      	strb	r3, [r7, #27]
 8002b82:	e007      	b.n	8002b94 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	69f9      	ldr	r1, [r7, #28]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <default_extension_decoder>
 8002b90:	4603      	mov	r3, r0
 8002b92:	76fb      	strb	r3, [r7, #27]

        if (!status)
 8002b94:	7efb      	ldrb	r3, [r7, #27]
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <decode_extension+0x60>
            return false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e00b      	b.n	8002bbc <decode_extension+0x78>
        
        extension = extension->next;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <decode_extension+0x76>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d0d4      	beq.n	8002b64 <decode_extension+0x20>
    }
    
    return true;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3724      	adds	r7, #36	; 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}

08002bc4 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
    pb_size_t start = iter->index;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	891b      	ldrh	r3, [r3, #8]
 8002bd0:	81fb      	strh	r3, [r7, #14]

    do {
        if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7d9b      	ldrb	r3, [r3, #22]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d101      	bne.n	8002be2 <find_extension_field+0x1e>
            return true;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e008      	b.n	8002bf4 <find_extension_field+0x30>
        (void)pb_field_iter_next(iter);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff f8ab 	bl	8001d3e <pb_field_iter_next>
    } while (iter->index != start);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	891b      	ldrh	r3, [r3, #8]
 8002bec:	89fa      	ldrh	r2, [r7, #14]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d1ef      	bne.n	8002bd2 <find_extension_field+0xe>
    
    return false;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7d9b      	ldrb	r3, [r3, #22]
 8002c08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8002c0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	2b0a      	cmp	r3, #10
 8002c16:	d124      	bne.n	8002c62 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8002c20:	e01b      	b.n	8002c5a <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f857 	bl	8001cdc <pb_field_iter_begin_extension>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00f      	beq.n	8002c54 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	2200      	movs	r2, #0
 8002c38:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f88d 	bl	8002d5e <pb_message_set_to_defaults>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <pb_field_set_to_default+0x58>
                    return false;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e080      	b.n	8002d56 <pb_field_set_to_default+0x15a>
            }
            ext = ext->next;
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e0      	bne.n	8002c22 <pb_field_set_to_default+0x26>
 8002c60:	e078      	b.n	8002d54 <pb_field_set_to_default+0x158>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8002c62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002c66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d156      	bne.n	8002d1c <pb_field_set_to_default+0x120>
    {
        bool init_data = true;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002c74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d108      	bne.n	8002c92 <pb_field_set_to_default+0x96>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e012      	b.n	8002cb8 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002c92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002c96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d005      	beq.n	8002caa <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8002c9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ca2:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d106      	bne.n	8002cb8 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8002cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d049      	beq.n	8002d54 <pb_field_set_to_default+0x158>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7d9b      	ldrb	r3, [r3, #22]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d005      	beq.n	8002cd8 <pb_field_set_to_default+0xdc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7d9b      	ldrb	r3, [r3, #22]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d118      	bne.n	8002d0a <pb_field_set_to_default+0x10e>
            {
                /* Initialize submessage to defaults */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ffe0 	bl	8001caa <pb_field_iter_begin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d030      	beq.n	8002d52 <pb_field_set_to_default+0x156>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f832 	bl	8002d5e <pb_message_set_to_defaults>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d025      	beq.n	8002d52 <pb_field_set_to_default+0x156>
                        return false;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e025      	b.n	8002d56 <pb_field_set_to_default+0x15a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69d8      	ldr	r0, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8a5b      	ldrh	r3, [r3, #18]
 8002d12:	461a      	mov	r2, r3
 8002d14:	2100      	movs	r1, #0
 8002d16:	f005 fe51 	bl	80089bc <memset>
 8002d1a:	e01b      	b.n	8002d54 <pb_field_set_to_default+0x158>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8002d1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d115      	bne.n	8002d54 <pb_field_set_to_default+0x158>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002d30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d005      	beq.n	8002d48 <pb_field_set_to_default+0x14c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8002d3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d105      	bne.n	8002d54 <pb_field_set_to_default+0x158>
        {
            *(pb_size_t*)field->pSize = 0;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
 8002d50:	e000      	b.n	8002d54 <pb_field_set_to_default+0x158>
            {
 8002d52:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8002d54:	2301      	movs	r3, #1
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3738      	adds	r7, #56	; 0x38
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8002d5e:	b590      	push	{r4, r7, lr}
 8002d60:	b08d      	sub	sp, #52	; 0x34
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8002d66:	f107 0320 	add.w	r3, r7, #32
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d021      	beq.n	8002dcc <pb_message_set_to_defaults+0x6e>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8002d90:	463b      	mov	r3, r7
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f930 	bl	8001ffc <pb_istream_from_buffer>
 8002d9c:	f107 0420 	add.w	r4, r7, #32
 8002da0:	463b      	mov	r3, r7
 8002da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002da8:	f107 031a 	add.w	r3, r7, #26
 8002dac:	f107 021c 	add.w	r2, r7, #28
 8002db0:	f107 011b 	add.w	r1, r7, #27
 8002db4:	f107 0020 	add.w	r0, r7, #32
 8002db8:	f7ff fa73 	bl	80022a2 <pb_decode_tag>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <pb_message_set_to_defaults+0x6e>
            return false;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e043      	b.n	8002e54 <pb_message_set_to_defaults+0xf6>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f7ff ff15 	bl	8002bfc <pb_field_set_to_default>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <pb_message_set_to_defaults+0x84>
            return false;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e038      	b.n	8002e54 <pb_message_set_to_defaults+0xf6>

        if (tag != 0 && iter->tag == tag)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02e      	beq.n	8002e46 <pb_message_set_to_defaults+0xe8>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	8a1b      	ldrh	r3, [r3, #16]
 8002dec:	461a      	mov	r2, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d128      	bne.n	8002e46 <pb_message_set_to_defaults+0xe8>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8002df4:	7ef9      	ldrb	r1, [r7, #27]
 8002df6:	f107 0320 	add.w	r3, r7, #32
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe2f 	bl	8002a60 <decode_field>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <pb_message_set_to_defaults+0xb4>
                return false;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e020      	b.n	8002e54 <pb_message_set_to_defaults+0xf6>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002e12:	f107 031a 	add.w	r3, r7, #26
 8002e16:	f107 021c 	add.w	r2, r7, #28
 8002e1a:	f107 011b 	add.w	r1, r7, #27
 8002e1e:	f107 0020 	add.w	r0, r7, #32
 8002e22:	f7ff fa3e 	bl	80022a2 <pb_decode_tag>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <pb_message_set_to_defaults+0xd8>
                return false;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e00e      	b.n	8002e54 <pb_message_set_to_defaults+0xf6>

            if (iter->pSize)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <pb_message_set_to_defaults+0xe8>
                *(bool*)iter->pSize = false;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7fe ff79 	bl	8001d3e <pb_field_iter_next>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1bc      	bne.n	8002dcc <pb_message_set_to_defaults+0x6e>

    return true;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3734      	adds	r7, #52	; 0x34
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b09a      	sub	sp, #104	; 0x68
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	667b      	str	r3, [r7, #100]	; 0x64

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    pb_size_t fixed_count_size = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    pb_size_t fixed_count_total_size = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

    pb_fields_seen_t fields_seen = {{0, 0}};
 8002e82:	2300      	movs	r3, #0
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
 8002e86:	2300      	movs	r3, #0
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
    const uint32_t allbits = ~(uint32_t)0;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e8e:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_field_iter_t iter;

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe ff06 	bl	8001caa <pb_field_iter_begin>

    while (stream->bytes_left)
 8002e9e:	e0e5      	b.n	800306c <pb_decode_inner+0x210>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8002ea0:	f107 0316 	add.w	r3, r7, #22
 8002ea4:	f107 0218 	add.w	r2, r7, #24
 8002ea8:	f107 0117 	add.w	r1, r7, #23
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff f9f8 	bl	80022a2 <pb_decode_tag>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f083 0301 	eor.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <pb_decode_inner+0x6e>
        {
            if (eof)
 8002ebe:	7dbb      	ldrb	r3, [r7, #22]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 80d9 	bne.w	8003078 <pb_decode_inner+0x21c>
                break;
            else
                return false;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e16c      	b.n	80031a4 <pb_decode_inner+0x348>
        }

        if (tag == 0)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <pb_decode_inner+0x98>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 80d0 	bne.w	800307c <pb_decode_inner+0x220>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <pb_decode_inner+0x8e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	e000      	b.n	8002eec <pb_decode_inner+0x90>
 8002eea:	4bb0      	ldr	r3, [pc, #704]	; (80031ac <pb_decode_inner+0x350>)
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e157      	b.n	80031a4 <pb_decode_inner+0x348>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe ff33 	bl	8001d68 <pb_field_iter_find>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f083 0301 	eor.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <pb_decode_inner+0xbe>
 8002f0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d13c      	bne.n	8002f94 <pb_decode_inner+0x138>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d82b      	bhi.n	8002f7a <pb_decode_inner+0x11e>
            {
                if (!find_extension_field(&iter))
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fe4c 	bl	8002bc4 <find_extension_field>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <pb_decode_inner+0xe4>
                    extension_range_start = (uint32_t)-1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f3e:	e001      	b.n	8002f44 <pb_decode_inner+0xe8>
                else
                    extension_range_start = iter.tag;
 8002f40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f42:	667b      	str	r3, [r7, #100]	; 0x64

                if (tag >= extension_range_start)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d816      	bhi.n	8002f7a <pb_decode_inner+0x11e>
                {
                    size_t pos = stream->bytes_left;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	653b      	str	r3, [r7, #80]	; 0x50

                    if (!decode_extension(stream, tag, wire_type, &iter))
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	7dfa      	ldrb	r2, [r7, #23]
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fdf2 	bl	8002b44 <decode_extension>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <pb_decode_inner+0x114>
                        return false;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e119      	b.n	80031a4 <pb_decode_inner+0x348>

                    if (pos != stream->bytes_left)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d175      	bne.n	8003066 <pb_decode_inner+0x20a>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff f9be 	bl	8002300 <pb_skip_field>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d06c      	beq.n	800306a <pb_decode_inner+0x20e>
                return false;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e107      	b.n	80031a4 <pb_decode_inner+0x348>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8002f94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d12e      	bne.n	8002ffe <pb_decode_inner+0x1a2>
 8002fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d128      	bne.n	8002ffe <pb_decode_inner+0x1a2>
        {
            if (fixed_count_field != iter.index) {
 8002fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fae:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d020      	beq.n	8002ff8 <pb_decode_inner+0x19c>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8002fb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d011      	beq.n	8002fe6 <pb_decode_inner+0x18a>
                    fixed_count_size != fixed_count_total_size)
 8002fc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
                if (fixed_count_field != PB_SIZE_MAX &&
 8002fc6:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d00b      	beq.n	8002fe6 <pb_decode_inner+0x18a>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <pb_decode_inner+0x180>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	e000      	b.n	8002fde <pb_decode_inner+0x182>
 8002fdc:	4b74      	ldr	r3, [pc, #464]	; (80031b0 <pb_decode_inner+0x354>)
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	60d3      	str	r3, [r2, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e0de      	b.n	80031a4 <pb_decode_inner+0x348>
                }

                fixed_count_field = iter.index;
 8002fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                fixed_count_size = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                fixed_count_total_size = iter.array_size;
 8002ff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ff4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            }

            iter.pSize = &fixed_count_size;
 8002ff8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8002ffe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11e      	bne.n	8003048 <pb_decode_inner+0x1ec>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800300a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800300c:	2b3f      	cmp	r3, #63	; 0x3f
 800300e:	d81b      	bhi.n	8003048 <pb_decode_inner+0x1ec>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8003010:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	657b      	str	r3, [r7, #84]	; 0x54
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 800301e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b29b      	uxth	r3, r3
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800302a:	4413      	add	r3, r2
 800302c:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	b29b      	uxth	r3, r3
 8003036:	4619      	mov	r1, r3
 8003038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303a:	431a      	orrs	r2, r3
 800303c:	008b      	lsls	r3, r1, #2
 800303e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003042:	440b      	add	r3, r1
 8003044:	f843 2c24 	str.w	r2, [r3, #-36]
        }

        if (!decode_field(stream, wire_type, &iter))
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	f107 021c 	add.w	r2, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fd05 	bl	8002a60 <decode_field>
 8003056:	4603      	mov	r3, r0
 8003058:	f083 0301 	eor.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <pb_decode_inner+0x210>
            return false;
 8003062:	2300      	movs	r3, #0
 8003064:	e09e      	b.n	80031a4 <pb_decode_inner+0x348>
                        continue;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <pb_decode_inner+0x210>
            continue;
 800306a:	bf00      	nop
    while (stream->bytes_left)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af15 	bne.w	8002ea0 <pb_decode_inner+0x44>
 8003076:	e002      	b.n	800307e <pb_decode_inner+0x222>
                break;
 8003078:	bf00      	nop
 800307a:	e000      	b.n	800307e <pb_decode_inner+0x222>
            break;
 800307c:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 800307e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003086:	4293      	cmp	r3, r2
 8003088:	d011      	beq.n	80030ae <pb_decode_inner+0x252>
        fixed_count_size != fixed_count_total_size)
 800308a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    if (fixed_count_field != PB_SIZE_MAX &&
 800308e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8003092:	429a      	cmp	r2, r3
 8003094:	d00b      	beq.n	80030ae <pb_decode_inner+0x252>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <pb_decode_inner+0x248>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	e000      	b.n	80030a6 <pb_decode_inner+0x24a>
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <pb_decode_inner+0x354>)
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	60d3      	str	r3, [r2, #12]
 80030aa:	2300      	movs	r3, #0
 80030ac:	e07a      	b.n	80031a4 <pb_decode_inner+0x348>
         */
        pb_size_t req_field_count;
        pb_type_t last_type;
        pb_size_t i;
        do {
            req_field_count = iter.required_field_index;
 80030ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            last_type = iter.type;
 80030b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        } while (pb_field_iter_next(&iter));
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe3c 	bl	8001d3e <pb_field_iter_next>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <pb_decode_inner+0x252>

        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.tag != 0)
 80030cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80030d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <pb_decode_inner+0x28c>
 80030d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <pb_decode_inner+0x28c>
            req_field_count++;
 80030de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80030e2:	3301      	adds	r3, #1
 80030e4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80030e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d902      	bls.n	80030f6 <pb_decode_inner+0x29a>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (req_field_count > 0)
 80030f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d051      	beq.n	80031a2 <pb_decode_inner+0x346>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003104:	e01b      	b.n	800313e <pb_decode_inner+0x2e2>
            {
                if (fields_seen.bitfield[i] != allbits)
 8003106:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003110:	4413      	add	r3, r2
 8003112:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003118:	429a      	cmp	r2, r3
 800311a:	d00b      	beq.n	8003134 <pb_decode_inner+0x2d8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <pb_decode_inner+0x2ce>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	e000      	b.n	800312c <pb_decode_inner+0x2d0>
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <pb_decode_inner+0x358>)
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	60d3      	str	r3, [r2, #12]
 8003130:	2300      	movs	r3, #0
 8003132:	e037      	b.n	80031a4 <pb_decode_inner+0x348>
            for (i = 0; i < (req_field_count >> 5); i++)
 8003134:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003138:	3301      	adds	r3, #1
 800313a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800313e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b29b      	uxth	r3, r3
 8003146:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800314a:	429a      	cmp	r2, r3
 800314c:	d3db      	bcc.n	8003106 <pb_decode_inner+0x2aa>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800314e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b00      	cmp	r3, #0
 8003158:	d023      	beq.n	80031a2 <pb_decode_inner+0x346>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800315a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	b29b      	uxth	r3, r3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003168:	4413      	add	r3, r2
 800316a:	f853 2c24 	ldr.w	r2, [r3, #-36]
                    (allbits >> (uint8_t)(32 - (req_field_count & 31))))
 800316e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f1c3 0320 	rsb	r3, r3, #32
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003184:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8003186:	429a      	cmp	r2, r3
 8003188:	d00b      	beq.n	80031a2 <pb_decode_inner+0x346>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <pb_decode_inner+0x33c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	e000      	b.n	800319a <pb_decode_inner+0x33e>
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <pb_decode_inner+0x358>)
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	60d3      	str	r3, [r2, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <pb_decode_inner+0x348>
                }
            }
        }
    }

    return true;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3768      	adds	r7, #104	; 0x68
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08008aa8 	.word	0x08008aa8
 80031b0:	08008ab4 	.word	0x08008ab4
 80031b4:	08008ad8 	.word	0x08008ad8

080031b8 <pb_decode_ex>:

bool checkreturn pb_decode_ex(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b094      	sub	sp, #80	; 0x50
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
    bool status;

    if ((flags & PB_DECODE_NOINIT) == 0)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d120      	bne.n	8003212 <pb_decode_ex+0x5a>
    {
        pb_field_iter_t iter;

        if (pb_field_iter_begin(&iter, fields, dest_struct))
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fd66 	bl	8001caa <pb_field_iter_begin>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d016      	beq.n	8003212 <pb_decode_ex+0x5a>
        {
            if (!pb_message_set_to_defaults(&iter))
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fdb8 	bl	8002d5e <pb_message_set_to_defaults>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <pb_decode_ex+0x5a>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <pb_decode_ex+0x50>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	e000      	b.n	800320a <pb_decode_ex+0x52>
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <pb_decode_ex+0xd0>)
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	60d3      	str	r3, [r2, #12]
 800320e:	2300      	movs	r3, #0
 8003210:	e036      	b.n	8003280 <pb_decode_ex+0xc8>
        }
    }

    if ((flags & PB_DECODE_DELIMITED) == 0)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <pb_decode_ex+0x78>
    {
      status = pb_decode_inner(stream, fields, dest_struct, flags);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fe1a 	bl	8002e5c <pb_decode_inner>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800322e:	e025      	b.n	800327c <pb_decode_ex+0xc4>
    }
    else
    {
      pb_istream_t substream;
      if (!pb_make_string_substream(stream, &substream))
 8003230:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003234:	4619      	mov	r1, r3
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff f90c 	bl	8002454 <pb_make_string_substream>
 800323c:	4603      	mov	r3, r0
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <pb_decode_ex+0x94>
        return false;
 8003248:	2300      	movs	r3, #0
 800324a:	e019      	b.n	8003280 <pb_decode_ex+0xc8>

      status = pb_decode_inner(&substream, fields, dest_struct, flags);
 800324c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	f7ff fe01 	bl	8002e5c <pb_decode_inner>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

      if (!pb_close_string_substream(stream, &substream))
 8003260:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff f92e 	bl	80024c8 <pb_close_string_substream>
 800326c:	4603      	mov	r3, r0
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <pb_decode_ex+0xc4>
        return false;
 8003278:	2300      	movs	r3, #0
 800327a:	e001      	b.n	8003280 <pb_decode_ex+0xc8>
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800327c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003280:	4618      	mov	r0, r3
 8003282:	3750      	adds	r7, #80	; 0x50
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	08008af0 	.word	0x08008af0

0800328c <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  return pb_decode_ex(stream, fields, dest_struct, 0);
 8003298:	2300      	movs	r3, #0
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff8a 	bl	80031b8 <pb_decode_ex>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe ff44 	bl	800214c <pb_decode_varint32>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f083 0301 	eor.w	r3, r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <pb_decode_bool+0x26>
        return false;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e008      	b.n	80032e6 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
    return true;
 80032e4:	2301      	movs	r3, #1
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80032ee:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80032fa:	f107 0308 	add.w	r3, r7, #8
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7fe ff33 	bl	800216c <pb_decode_varint>
 8003306:	4603      	mov	r3, r0
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <pb_decode_svarint+0x28>
        return false;
 8003312:	2300      	movs	r3, #0
 8003314:	e021      	b.n	800335a <pb_decode_svarint+0x6c>
    
    if (value & 1)
 8003316:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800331a:	f04f 0101 	mov.w	r1, #1
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	ea0b 0301 	and.w	r3, fp, r1
 8003326:	ea0c 0402 	and.w	r4, ip, r2
 800332a:	4323      	orrs	r3, r4
 800332c:	d00c      	beq.n	8003348 <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800332e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003332:	0862      	lsrs	r2, r4, #1
 8003334:	ea4f 0133 	mov.w	r1, r3, rrx
 8003338:	ea6f 0301 	mvn.w	r3, r1
 800333c:	ea6f 0402 	mvn.w	r4, r2
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	e9c2 3400 	strd	r3, r4, [r2]
 8003346:	e007      	b.n	8003358 <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8003348:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800334c:	0864      	lsrs	r4, r4, #1
 800334e:	ea4f 0333 	mov.w	r3, r3, rrx
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003364 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	2204      	movs	r2, #4
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fd98 	bl	8001eac <pb_read>
 800337c:	4603      	mov	r3, r0
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <pb_decode_fixed32+0x28>
        return false;
 8003388:	2300      	movs	r3, #0
 800338a:	e00d      	b.n	80033a8 <pb_decode_fixed32+0x44>

#if defined(__BYTE_ORDER) && __BYTE_ORDER == __LITTLE_ENDIAN && CHAR_BIT == 8
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
#else
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	461a      	mov	r2, r3
                       ((uint32_t)u.bytes[1] << 8) |
 8003390:	7b7b      	ldrb	r3, [r7, #13]
 8003392:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
 8003394:	431a      	orrs	r2, r3
                       ((uint32_t)u.bytes[2] << 16) |
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	041b      	lsls	r3, r3, #16
                       ((uint32_t)u.bytes[1] << 8) |
 800339a:	431a      	orrs	r2, r3
                       ((uint32_t)u.bytes[3] << 24);
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	061b      	lsls	r3, r3, #24
                       ((uint32_t)u.bytes[2] << 16) |
 80033a0:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]
#endif
    return true;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80033b0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	2208      	movs	r2, #8
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe fd71 	bl	8001eac <pb_read>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <pb_decode_fixed64+0x2a>
        return false;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e06c      	b.n	80034b4 <pb_decode_fixed64+0x104>

#if defined(__BYTE_ORDER) && __BYTE_ORDER == __LITTLE_ENDIAN && CHAR_BIT == 8
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
#else
    *(uint64_t*)dest = ((uint64_t)u.bytes[0] << 0) |
 80033da:	7a3b      	ldrb	r3, [r7, #8]
 80033dc:	fa5f fb83 	uxtb.w	fp, r3
 80033e0:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)u.bytes[1] << 8) |
 80033e4:	7a7b      	ldrb	r3, [r7, #9]
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f04f 0400 	mov.w	r4, #0
 80033f4:	0214      	lsls	r4, r2, #8
 80033f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033fa:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)u.bytes[0] << 0) |
 80033fc:	ea4b 0803 	orr.w	r8, fp, r3
 8003400:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)u.bytes[2] << 16) |
 8003404:	7abb      	ldrb	r3, [r7, #10]
 8003406:	b2d9      	uxtb	r1, r3
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f04f 0400 	mov.w	r4, #0
 8003414:	0414      	lsls	r4, r2, #16
 8003416:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800341a:	040b      	lsls	r3, r1, #16
                       ((uint64_t)u.bytes[1] << 8) |
 800341c:	ea48 0103 	orr.w	r1, r8, r3
 8003420:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)u.bytes[3] << 24) |
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f04f 0400 	mov.w	r4, #0
 800342c:	0a1e      	lsrs	r6, r3, #8
 800342e:	061d      	lsls	r5, r3, #24
                       ((uint64_t)u.bytes[2] << 16) |
 8003430:	ea41 0805 	orr.w	r8, r1, r5
 8003434:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)u.bytes[4] << 32) |
 8003438:	7b3b      	ldrb	r3, [r7, #12]
 800343a:	b2dd      	uxtb	r5, r3
 800343c:	f04f 0600 	mov.w	r6, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	f04f 0400 	mov.w	r4, #0
 8003448:	002c      	movs	r4, r5
 800344a:	2300      	movs	r3, #0
                       ((uint64_t)u.bytes[3] << 24) |
 800344c:	ea48 0103 	orr.w	r1, r8, r3
 8003450:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)u.bytes[5] << 40) |
 8003454:	7b7b      	ldrb	r3, [r7, #13]
 8003456:	b2dd      	uxtb	r5, r3
 8003458:	f04f 0600 	mov.w	r6, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	022c      	lsls	r4, r5, #8
 8003466:	2300      	movs	r3, #0
                       ((uint64_t)u.bytes[4] << 32) |
 8003468:	ea41 0803 	orr.w	r8, r1, r3
 800346c:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)u.bytes[6] << 48) |
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	b2dd      	uxtb	r5, r3
 8003474:	f04f 0600 	mov.w	r6, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	042c      	lsls	r4, r5, #16
 8003482:	2300      	movs	r3, #0
                       ((uint64_t)u.bytes[5] << 40) |
 8003484:	ea48 0103 	orr.w	r1, r8, r3
 8003488:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)u.bytes[7] << 56);
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	b2dd      	uxtb	r5, r3
 8003490:	f04f 0600 	mov.w	r6, #0
 8003494:	f04f 0800 	mov.w	r8, #0
 8003498:	f04f 0900 	mov.w	r9, #0
 800349c:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80034a0:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)u.bytes[6] << 48) |
 80034a4:	ea48 0301 	orr.w	r3, r8, r1
 80034a8:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)u.bytes[0] << 0) |
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	e9c2 3400 	strd	r3, r4, [r2]
#endif
    return true;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080034be <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff feed 	bl	80032ae <pb_decode_bool>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b08d      	sub	sp, #52	; 0x34
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7d9b      	ldrb	r3, [r3, #22]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d170      	bne.n	80035d8 <pb_dec_varint+0xf8>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fe fe35 	bl	800216c <pb_decode_varint>
 8003502:	4603      	mov	r3, r0
 8003504:	f083 0301 	eor.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <pb_dec_varint+0x32>
            return false;
 800350e:	2300      	movs	r3, #0
 8003510:	e0f7      	b.n	8003702 <pb_dec_varint+0x222>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	8a5b      	ldrh	r3, [r3, #18]
 8003516:	2b08      	cmp	r3, #8
 8003518:	d10a      	bne.n	8003530 <pb_dec_varint+0x50>
            clamped = *(pb_uint64_t*)field->pData = value;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003522:	e9c2 3400 	strd	r3, r4, [r2]
 8003526:	e9d2 3400 	ldrd	r3, r4, [r2]
 800352a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800352e:	e03d      	b.n	80035ac <pb_dec_varint+0xcc>
        else if (field->data_size == sizeof(uint32_t))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	8a5b      	ldrh	r3, [r3, #18]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d10b      	bne.n	8003550 <pb_dec_varint+0x70>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8003538:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	460a      	mov	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f04f 0400 	mov.w	r4, #0
 800354a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800354e:	e02d      	b.n	80035ac <pb_dec_varint+0xcc>
        else if (field->data_size == sizeof(uint_least16_t))
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	8a5b      	ldrh	r3, [r3, #18]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d10c      	bne.n	8003572 <pb_dec_varint+0x92>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8003558:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	b28a      	uxth	r2, r1
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8003570:	e01c      	b.n	80035ac <pb_dec_varint+0xcc>
        else if (field->data_size == sizeof(uint_least8_t))
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	8a5b      	ldrh	r3, [r3, #18]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10c      	bne.n	8003594 <pb_dec_varint+0xb4>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 800357a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	b2ca      	uxtb	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8003592:	e00b      	b.n	80035ac <pb_dec_varint+0xcc>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <pb_dec_varint+0xc2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	e000      	b.n	80035a4 <pb_dec_varint+0xc4>
 80035a2:	4b5a      	ldr	r3, [pc, #360]	; (800370c <pb_dec_varint+0x22c>)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	2300      	movs	r3, #0
 80035aa:	e0aa      	b.n	8003702 <pb_dec_varint+0x222>

        if (clamped != value)
 80035ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035b4:	42a2      	cmp	r2, r4
 80035b6:	bf08      	it	eq
 80035b8:	4299      	cmpeq	r1, r3
 80035ba:	d00b      	beq.n	80035d4 <pb_dec_varint+0xf4>
            PB_RETURN_ERROR(stream, "integer too large");
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <pb_dec_varint+0xea>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	e000      	b.n	80035cc <pb_dec_varint+0xec>
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <pb_dec_varint+0x230>)
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	60d3      	str	r3, [r2, #12]
 80035d0:	2300      	movs	r3, #0
 80035d2:	e096      	b.n	8003702 <pb_dec_varint+0x222>

        return true;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e094      	b.n	8003702 <pb_dec_varint+0x222>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7d9b      	ldrb	r3, [r3, #22]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10d      	bne.n	8003600 <pb_dec_varint+0x120>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fe7f 	bl	80032ee <pb_decode_svarint>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01e      	beq.n	800363a <pb_dec_varint+0x15a>
                return false;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e080      	b.n	8003702 <pb_dec_varint+0x222>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe fdb0 	bl	800216c <pb_decode_varint>
 800360c:	4603      	mov	r3, r0
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <pb_dec_varint+0x13c>
                return false;
 8003618:	2300      	movs	r3, #0
 800361a:	e072      	b.n	8003702 <pb_dec_varint+0x222>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Previous nanopb versions had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	8a5b      	ldrh	r3, [r3, #18]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <pb_dec_varint+0x14e>
                svalue = (pb_int64_t)value;
 8003624:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003628:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800362c:	e005      	b.n	800363a <pb_dec_varint+0x15a>
            else
                svalue = (int32_t)value;
 800362e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003632:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003636:	e9c7 3402 	strd	r3, r4, [r7, #8]
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	8a5b      	ldrh	r3, [r3, #18]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d10a      	bne.n	8003658 <pb_dec_varint+0x178>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800364a:	e9c2 3400 	strd	r3, r4, [r2]
 800364e:	e9d2 3400 	ldrd	r3, r4, [r2]
 8003652:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003656:	e03f      	b.n	80036d8 <pb_dec_varint+0x1f8>
        else if (field->data_size == sizeof(int32_t))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	8a5b      	ldrh	r3, [r3, #18]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d10b      	bne.n	8003678 <pb_dec_varint+0x198>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8003660:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	460a      	mov	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003672:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003676:	e02f      	b.n	80036d8 <pb_dec_varint+0x1f8>
        else if (field->data_size == sizeof(int_least16_t))
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	8a5b      	ldrh	r3, [r3, #18]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d10d      	bne.n	800369c <pb_dec_varint+0x1bc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8003680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	b20a      	sxth	r2, r1
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003690:	b21b      	sxth	r3, r3
 8003692:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003696:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800369a:	e01d      	b.n	80036d8 <pb_dec_varint+0x1f8>
        else if (field->data_size == sizeof(int_least8_t))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	8a5b      	ldrh	r3, [r3, #18]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <pb_dec_varint+0x1e0>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80036a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	b24a      	sxtb	r2, r1
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	f993 3000 	ldrsb.w	r3, [r3]
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80036ba:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80036be:	e00b      	b.n	80036d8 <pb_dec_varint+0x1f8>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <pb_dec_varint+0x1ee>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	e000      	b.n	80036d0 <pb_dec_varint+0x1f0>
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <pb_dec_varint+0x22c>)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	2300      	movs	r3, #0
 80036d6:	e014      	b.n	8003702 <pb_dec_varint+0x222>

        if (clamped != svalue)
 80036d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036e0:	42a2      	cmp	r2, r4
 80036e2:	bf08      	it	eq
 80036e4:	4299      	cmpeq	r1, r3
 80036e6:	d00b      	beq.n	8003700 <pb_dec_varint+0x220>
            PB_RETURN_ERROR(stream, "integer too large");
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <pb_dec_varint+0x216>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	e000      	b.n	80036f8 <pb_dec_varint+0x218>
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <pb_dec_varint+0x230>)
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	60d3      	str	r3, [r2, #12]
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <pb_dec_varint+0x222>

        return true;
 8003700:	2301      	movs	r3, #1
    }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3734      	adds	r7, #52	; 0x34
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	08008b08 	.word	0x08008b08
 8003710:	08008b1c 	.word	0x08008b1c

08003714 <pb_dec_fixed>:

static bool checkreturn pb_dec_fixed(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    {
        return pb_decode_double_as_float(stream, (float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	8a5b      	ldrh	r3, [r3, #18]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d107      	bne.n	8003736 <pb_dec_fixed+0x22>
    {
        return pb_decode_fixed32(stream, field->pData);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fe19 	bl	8003364 <pb_decode_fixed32>
 8003732:	4603      	mov	r3, r0
 8003734:	e016      	b.n	8003764 <pb_dec_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	8a5b      	ldrh	r3, [r3, #18]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d107      	bne.n	800374e <pb_dec_fixed+0x3a>
    {
        return pb_decode_fixed64(stream, field->pData);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fe33 	bl	80033b0 <pb_decode_fixed64>
 800374a:	4603      	mov	r3, r0
 800374c:	e00a      	b.n	8003764 <pb_dec_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <pb_dec_fixed+0x48>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	e000      	b.n	800375e <pb_dec_fixed+0x4a>
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <pb_dec_fixed+0x58>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	2300      	movs	r3, #0
    }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	08008b08 	.word	0x08008b08

08003770 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe fce3 	bl	800214c <pb_decode_varint32>
 8003786:	4603      	mov	r3, r0
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <pb_dec_bytes+0x26>
        return false;
 8003792:	2300      	movs	r3, #0
 8003794:	e055      	b.n	8003842 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d30b      	bcc.n	80037b6 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <pb_dec_bytes+0x3c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	e000      	b.n	80037ae <pb_dec_bytes+0x3e>
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <pb_dec_bytes+0xdc>)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	60d3      	str	r3, [r2, #12]
 80037b2:	2300      	movs	r3, #0
 80037b4:	e045      	b.n	8003842 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3302      	adds	r3, #2
 80037ba:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d20b      	bcs.n	80037dc <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <pb_dec_bytes+0x62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	e000      	b.n	80037d4 <pb_dec_bytes+0x64>
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <pb_dec_bytes+0xe0>)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	60d3      	str	r3, [r2, #12]
 80037d8:	2300      	movs	r3, #0
 80037da:	e032      	b.n	8003842 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	7d9b      	ldrb	r3, [r3, #22]
 80037e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d10b      	bne.n	8003800 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <pb_dec_bytes+0x86>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	e000      	b.n	80037f8 <pb_dec_bytes+0x88>
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <pb_dec_bytes+0xe4>)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	2300      	movs	r3, #0
 80037fe:	e020      	b.n	8003842 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	8a5b      	ldrh	r3, [r3, #18]
 8003804:	461a      	mov	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4293      	cmp	r3, r2
 800380a:	d90b      	bls.n	8003824 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <pb_dec_bytes+0xaa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	e000      	b.n	800381c <pb_dec_bytes+0xac>
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <pb_dec_bytes+0xdc>)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	60d3      	str	r3, [r2, #12]
 8003820:	2300      	movs	r3, #0
 8003822:	e00e      	b.n	8003842 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b29a      	uxth	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3302      	adds	r3, #2
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fb36 	bl	8001eac <pb_read>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	08008b30 	.word	0x08008b30
 8003850:	08008b40 	.word	0x08008b40
 8003854:	08008a70 	.word	0x08008a70

08003858 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe fc6c 	bl	800214c <pb_decode_varint32>
 8003874:	4603      	mov	r3, r0
 8003876:	f083 0301 	eor.w	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <pb_dec_string+0x2c>
        return false;
 8003880:	2300      	movs	r3, #0
 8003882:	e05a      	b.n	800393a <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388a:	d10b      	bne.n	80038a4 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <pb_dec_string+0x42>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	e000      	b.n	800389c <pb_dec_string+0x44>
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <pb_dec_string+0xec>)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60d3      	str	r3, [r2, #12]
 80038a0:	2300      	movs	r3, #0
 80038a2:	e04a      	b.n	800393a <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20b      	bcs.n	80038ca <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <pb_dec_string+0x68>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	e000      	b.n	80038c2 <pb_dec_string+0x6a>
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <pb_dec_string+0xec>)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	60d3      	str	r3, [r2, #12]
 80038c6:	2300      	movs	r3, #0
 80038c8:	e037      	b.n	800393a <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	7d9b      	ldrb	r3, [r3, #22]
 80038ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d10b      	bne.n	80038ee <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <pb_dec_string+0x8c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	e000      	b.n	80038e6 <pb_dec_string+0x8e>
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <pb_dec_string+0xf0>)
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	60d3      	str	r3, [r2, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	e025      	b.n	800393a <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	8a5b      	ldrh	r3, [r3, #18]
 80038f2:	461a      	mov	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d90b      	bls.n	8003912 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <pb_dec_string+0xb0>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	e000      	b.n	800390a <pb_dec_string+0xb2>
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <pb_dec_string+0xf4>)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	2300      	movs	r3, #0
 8003910:	e013      	b.n	800393a <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	6979      	ldr	r1, [r7, #20]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe fac2 	bl	8001eac <pb_read>
 8003928:	4603      	mov	r3, r0
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <pb_dec_string+0xe0>
        return false;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8003938:	2301      	movs	r3, #1
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08008b40 	.word	0x08008b40
 8003948:	08008a70 	.word	0x08008a70
 800394c:	08008b50 	.word	0x08008b50

08003950 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b092      	sub	sp, #72	; 0x48
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    bool status = true;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8003960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe fd74 	bl	8002454 <pb_make_string_substream>
 800396c:	4603      	mov	r3, r0
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <pb_dec_submessage+0x2c>
        return false;
 8003978:	2300      	movs	r3, #0
 800397a:	e07b      	b.n	8003a74 <pb_dec_submessage+0x124>
    
    if (field->submsg_desc == NULL)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <pb_dec_submessage+0x4c>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <pb_dec_submessage+0x42>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	e000      	b.n	8003994 <pb_dec_submessage+0x44>
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <pb_dec_submessage+0x12c>)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	2300      	movs	r3, #0
 800399a:	e06b      	b.n	8003a74 <pb_dec_submessage+0x124>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED ||
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	7d9b      	ldrb	r3, [r3, #22]
 80039a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d005      	beq.n	80039b4 <pb_dec_submessage+0x64>
        PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	7d9b      	ldrb	r3, [r3, #22]
 80039ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED ||
 80039b0:	2b30      	cmp	r3, #48	; 0x30
 80039b2:	d122      	bne.n	80039fa <pb_dec_submessage+0xaa>
    {
        pb_field_iter_t submsg_iter;
        if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	f107 0308 	add.w	r3, r7, #8
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe f972 	bl	8001caa <pb_field_iter_begin>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d016      	beq.n	80039fa <pb_dec_submessage+0xaa>
        {
            if (!pb_message_set_to_defaults(&submsg_iter))
 80039cc:	f107 0308 	add.w	r3, r7, #8
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f9c4 	bl	8002d5e <pb_message_set_to_defaults>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <pb_dec_submessage+0xaa>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <pb_dec_submessage+0xa0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	e000      	b.n	80039f2 <pb_dec_submessage+0xa2>
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <pb_dec_submessage+0x130>)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	60d3      	str	r3, [r2, #12]
 80039f6:	2300      	movs	r3, #0
 80039f8:	e03c      	b.n	8003a74 <pb_dec_submessage+0x124>
    }

    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	7d9b      	ldrb	r3, [r3, #22]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	d116      	bne.n	8003a34 <pb_dec_submessage+0xe4>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d012      	beq.n	8003a34 <pb_dec_submessage+0xe4>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	3b08      	subs	r3, #8
 8003a14:	643b      	str	r3, [r7, #64]	; 0x40
        if (callback->funcs.decode)
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <pb_dec_submessage+0xe4>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a24:	3204      	adds	r2, #4
 8003a26:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	4798      	blx	r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* Now decode the submessage contents */
    if (status)
 8003a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <pb_dec_submessage+0x104>
    {
        status = pb_decode_noinit(&substream, field->submsg_desc, field->pData);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f7ff fbb5 	bl	80031b8 <pb_decode_ex>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8003a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe fd34 	bl	80024c8 <pb_close_string_substream>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f083 0301 	eor.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <pb_dec_submessage+0x120>
        return false;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e001      	b.n	8003a74 <pb_dec_submessage+0x124>

    return status;
 8003a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3748      	adds	r7, #72	; 0x48
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08008b60 	.word	0x08008b60
 8003a80:	08008af0 	.word	0x08008af0

08003a84 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fe fb59 	bl	800214c <pb_decode_varint32>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <pb_dec_fixed_length_bytes+0x26>
        return false;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e037      	b.n	8003b1a <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d30b      	bcc.n	8003aca <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <pb_dec_fixed_length_bytes+0x3c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	e000      	b.n	8003ac2 <pb_dec_fixed_length_bytes+0x3e>
 8003ac0:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <pb_dec_fixed_length_bytes+0xa0>)
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	60d3      	str	r3, [r2, #12]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e027      	b.n	8003b1a <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	69d8      	ldr	r0, [r3, #28]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	8a5b      	ldrh	r3, [r3, #18]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2100      	movs	r1, #0
 8003adc:	f004 ff6e 	bl	80089bc <memset>
        return true;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e01a      	b.n	8003b1a <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	8a5b      	ldrh	r3, [r3, #18]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d00b      	beq.n	8003b08 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <pb_dec_fixed_length_bytes+0x7a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	e000      	b.n	8003b00 <pb_dec_fixed_length_bytes+0x7c>
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <pb_dec_fixed_length_bytes+0xa4>)
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	60d3      	str	r3, [r2, #12]
 8003b04:	2300      	movs	r3, #0
 8003b06:	e008      	b.n	8003b1a <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	8a5b      	ldrh	r3, [r3, #18]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe f9ca 	bl	8001eac <pb_read>
 8003b18:	4603      	mov	r3, r0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08008b30 	.word	0x08008b30
 8003b28:	08008b7c 	.word	0x08008b7c

08003b2c <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
    size_t i;
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
    stream->state = dest + count;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	441a      	add	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
    
    for (i = 0; i < count; i++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e00a      	b.n	8003b64 <buf_write+0x38>
        dest[i] = buf[i];
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	441a      	add	r2, r3
 8003b54:	6939      	ldr	r1, [r7, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	440b      	add	r3, r1
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3301      	adds	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3f0      	bcc.n	8003b4e <buf_write+0x22>
    
    return true;
 8003b6c:	2301      	movs	r3, #1
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8003b7c:	b4b0      	push	{r4, r5, r7}
 8003b7e:	b08b      	sub	sp, #44	; 0x2c
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
    pb_ostream_t stream;
#ifdef PB_BUFFER_ONLY
    stream.callback = (void*)1; /* Just a marker value */
#else
    stream.callback = &buf_write;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <pb_ostream_from_buffer+0x3c>)
 8003b8a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	461d      	mov	r5, r3
 8003ba0:	f107 0414 	add.w	r4, r7, #20
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	602b      	str	r3, [r5, #0]
}
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	372c      	adds	r7, #44	; 0x2c
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bcb0      	pop	{r4, r5, r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	08003b2d 	.word	0x08003b2d

08003bbc <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02f      	beq.n	8003c2e <pb_write+0x72>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02b      	beq.n	8003c2e <pb_write+0x72>
    {
        if (stream->bytes_written + count > stream->max_size)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90b      	bls.n	8003bfe <pb_write+0x42>
            PB_RETURN_ERROR(stream, "stream full");
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <pb_write+0x38>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	e000      	b.n	8003bf6 <pb_write+0x3a>
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <pb_write+0x88>)
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6113      	str	r3, [r2, #16]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e01e      	b.n	8003c3c <pb_write+0x80>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4798      	blx	r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f083 0301 	eor.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <pb_write+0x72>
            PB_RETURN_ERROR(stream, "io error");
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <pb_write+0x68>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	e000      	b.n	8003c26 <pb_write+0x6a>
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <pb_write+0x8c>)
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	6113      	str	r3, [r2, #16]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e006      	b.n	8003c3c <pb_write+0x80>
#endif
    }
    
    stream->bytes_written += count;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	60da      	str	r2, [r3, #12]
    return true;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08008ba0 	.word	0x08008ba0
 8003c48:	08008bac 	.word	0x08008bac

08003c4c <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e00a      	b.n	8003c74 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <safe_read_bool+0x22>
            return true;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e006      	b.n	8003c7c <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f1      	beq.n	8003c5e <safe_read_bool+0x12>
    }
    return false;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b08d      	sub	sp, #52	; 0x34
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 8003c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <encode_array+0x1c>
        return true;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e13c      	b.n	8003f1e <encode_array+0x296>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	7d9b      	ldrb	r3, [r3, #22]
 8003ca8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d010      	beq.n	8003cd2 <encode_array+0x4a>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	8a9b      	ldrh	r3, [r3, #20]
 8003cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90b      	bls.n	8003cd2 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <encode_array+0x40>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	e000      	b.n	8003cca <encode_array+0x42>
 8003cc8:	4b97      	ldr	r3, [pc, #604]	; (8003f28 <encode_array+0x2a0>)
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6113      	str	r3, [r2, #16]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e125      	b.n	8003f1e <encode_array+0x296>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	7d9b      	ldrb	r3, [r3, #22]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	f200 80b2 	bhi.w	8003e44 <encode_array+0x1bc>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	8a1b      	ldrh	r3, [r3, #16]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fce7 	bl	80046bc <pb_encode_tag>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <encode_array+0x76>
            return false;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e10f      	b.n	8003f1e <encode_array+0x296>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	7d9b      	ldrb	r3, [r3, #22]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d103      	bne.n	8003d12 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8003d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d10:	e047      	b.n	8003da2 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	7d9b      	ldrb	r3, [r3, #22]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d103      	bne.n	8003d26 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8003d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d24:	e03d      	b.n	8003da2 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d40:	e026      	b.n	8003d90 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	6839      	ldr	r1, [r7, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fdf1 	bl	8004930 <pb_enc_varint>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <encode_array+0xe0>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	e005      	b.n	8003d74 <encode_array+0xec>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <encode_array+0xea>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	e000      	b.n	8003d74 <encode_array+0xec>
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <encode_array+0x2a4>)
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6113      	str	r3, [r2, #16]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e0d0      	b.n	8003f1e <encode_array+0x296>
                field->pData = (char*)field->pData + field->data_size;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	8a52      	ldrh	r2, [r2, #18]
 8003d84:	441a      	add	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8003d8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d3d4      	bcc.n	8003d42 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fba9 	bl	8004504 <pb_encode_varint>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f083 0301 	eor.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <encode_array+0x13a>
            return false;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e0ad      	b.n	8003f1e <encode_array+0x296>
        
        if (stream->callback == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <encode_array+0x150>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8003dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dcc:	2100      	movs	r1, #0
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fef4 	bl	8003bbc <pb_write>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	e0a2      	b.n	8003f1e <encode_array+0x296>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ddc:	e02d      	b.n	8003e3a <encode_array+0x1b2>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	7d9b      	ldrb	r3, [r3, #22]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d005      	beq.n	8003df6 <encode_array+0x16e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7d9b      	ldrb	r3, [r3, #22]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d10b      	bne.n	8003e0e <encode_array+0x186>
            {
                if (!pb_enc_fixed(stream, field))
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fe4f 	bl	8004a9c <pb_enc_fixed>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f083 0301 	eor.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <encode_array+0x19e>
                    return false;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e087      	b.n	8003f1e <encode_array+0x296>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fd8d 	bl	8004930 <pb_enc_varint>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f083 0301 	eor.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <encode_array+0x19e>
                    return false;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e07b      	b.n	8003f1e <encode_array+0x296>
            }

            field->pData = (char*)field->pData + field->data_size;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	8a52      	ldrh	r2, [r2, #18]
 8003e2e:	441a      	add	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8003e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e36:	3301      	adds	r3, #1
 8003e38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3cd      	bcc.n	8003dde <encode_array+0x156>
 8003e42:	e06b      	b.n	8003f1c <encode_array+0x294>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e48:	e064      	b.n	8003f14 <encode_array+0x28c>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	7d9b      	ldrb	r3, [r3, #22]
 8003e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d147      	bne.n	8003ee6 <encode_array+0x25e>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	7d9b      	ldrb	r3, [r3, #22]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8003e5e:	2b07      	cmp	r3, #7
 8003e60:	d005      	beq.n	8003e6e <encode_array+0x1e6>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	7d9b      	ldrb	r3, [r3, #22]
 8003e66:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d13b      	bne.n	8003ee6 <encode_array+0x25e>
            {
                bool status;
                void *pData_orig = field->pData;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11c      	bne.n	8003ec0 <encode_array+0x238>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fc3b 	bl	8004704 <pb_encode_tag_for_field>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <encode_array+0x224>
                             pb_encode_varint(stream, 0);
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb31 	bl	8004504 <pb_encode_varint>
 8003ea2:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <encode_array+0x224>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <encode_array+0x226>
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ebe:	e006      	b.n	8003ece <encode_array+0x246>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8fe 	bl	80040c4 <encode_basic_field>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	61da      	str	r2, [r3, #28]

                if (!status)
 8003ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed8:	f083 0301 	eor.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <encode_array+0x276>
                    return false;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e01b      	b.n	8003f1e <encode_array+0x296>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8eb 	bl	80040c4 <encode_basic_field>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f083 0301 	eor.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <encode_array+0x278>
                    return false;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e00f      	b.n	8003f1e <encode_array+0x296>
            {
 8003efe:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	8a52      	ldrh	r2, [r2, #18]
 8003f08:	441a      	add	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8003f0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f10:	3301      	adds	r3, #1
 8003f12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d396      	bcc.n	8003e4a <encode_array+0x1c2>
        }
    }
    
    return true;
 8003f1c:	2301      	movs	r3, #1
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3734      	adds	r7, #52	; 0x34
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08008bb8 	.word	0x08008bb8
 8003f2c:	08008bd0 	.word	0x08008bd0

08003f30 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b090      	sub	sp, #64	; 0x40
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7d9b      	ldrb	r3, [r3, #22]
 8003f3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8003f40:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 809f 	bne.w	800408c <pb_check_proto3_default_value+0x15c>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8003f4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e0ad      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8003f5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d108      	bne.n	8003f7c <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e09e      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003f7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f84:	2b30      	cmp	r3, #48	; 0x30
 8003f86:	d108      	bne.n	8003f9a <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e08f      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8003f9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d115      	bne.n	8003fd2 <pb_check_proto3_default_value+0xa2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fe4a 	bl	8003c4c <safe_read_bool>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e073      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8003fd2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d10a      	bne.n	8003ff4 <pb_check_proto3_default_value+0xc4>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e062      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8003ff4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d108      	bne.n	8004012 <pb_check_proto3_default_value+0xe2>
        {
            return *(const char*)field->pData == '\0';
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e053      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8004012:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	2b0b      	cmp	r3, #11
 800401c:	d107      	bne.n	800402e <pb_check_proto3_default_value+0xfe>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8a5b      	ldrh	r3, [r3, #18]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e045      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800402e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	2b08      	cmp	r3, #8
 8004038:	d005      	beq.n	8004046 <pb_check_proto3_default_value+0x116>
 800403a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	2b09      	cmp	r3, #9
 8004044:	d122      	bne.n	800408c <pb_check_proto3_default_value+0x15c>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fe29 	bl	8001caa <pb_field_iter_begin>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d014      	beq.n	8004088 <pb_check_proto3_default_value+0x158>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff64 	bl	8003f30 <pb_check_proto3_default_value>
 8004068:	4603      	mov	r3, r0
 800406a:	f083 0301 	eor.w	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <pb_check_proto3_default_value+0x148>
                    {
                        return false;
 8004074:	2300      	movs	r3, #0
 8004076:	e020      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
                    }
                } while (pb_field_iter_next(&iter));
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4618      	mov	r0, r3
 800407e:	f7fd fe5e 	bl	8001d3e <pb_field_iter_next>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <pb_check_proto3_default_value+0x12e>
            }
            return true;
 8004088:	2301      	movs	r3, #1
 800408a:	e016      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
         * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
         * callback fields. These all have integer or pointer value which
         * can be compared with 0.
         */
        pb_size_t i;
        const char *p = (const char*)field->pData;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = 0; i < field->data_size; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004096:	e00a      	b.n	80040ae <pb_check_proto3_default_value+0x17e>
        {
            if (p[i] != 0)
 8004098:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <pb_check_proto3_default_value+0x178>
            {
                return false;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e008      	b.n	80040ba <pb_check_proto3_default_value+0x18a>
        for (i = 0; i < field->data_size; i++)
 80040a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040aa:	3301      	adds	r3, #1
 80040ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8a5b      	ldrh	r3, [r3, #18]
 80040b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d3ef      	bcc.n	8004098 <pb_check_proto3_default_value+0x168>
            }
        }

        return true;
 80040b8:	2301      	movs	r3, #1
    }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3740      	adds	r7, #64	; 0x40
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e061      	b.n	800419e <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb11 	bl	8004704 <pb_encode_tag_for_field>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <encode_basic_field+0x2e>
        return false;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e055      	b.n	800419e <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	7d9b      	ldrb	r3, [r3, #22]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b0b      	cmp	r3, #11
 80040fc:	d844      	bhi.n	8004188 <encode_basic_field+0xc4>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <encode_basic_field+0x40>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004135 	.word	0x08004135
 8004108:	08004141 	.word	0x08004141
 800410c:	08004141 	.word	0x08004141
 8004110:	08004141 	.word	0x08004141
 8004114:	0800414d 	.word	0x0800414d
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004159 	.word	0x08004159
 8004120:	08004165 	.word	0x08004165
 8004124:	08004171 	.word	0x08004171
 8004128:	08004171 	.word	0x08004171
 800412c:	08004189 	.word	0x08004189
 8004130:	0800417d 	.word	0x0800417d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbe0 	bl	80048fc <pb_enc_bool>
 800413c:	4603      	mov	r3, r0
 800413e:	e02e      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fbf4 	bl	8004930 <pb_enc_varint>
 8004148:	4603      	mov	r3, r0
 800414a:	e028      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fca4 	bl	8004a9c <pb_enc_fixed>
 8004154:	4603      	mov	r3, r0
 8004156:	e022      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8004158:	6839      	ldr	r1, [r7, #0]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fccc 	bl	8004af8 <pb_enc_bytes>
 8004160:	4603      	mov	r3, r0
 8004162:	e01c      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fd02 	bl	8004b70 <pb_enc_string>
 800416c:	4603      	mov	r3, r0
 800416e:	e016      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd5a 	bl	8004c2c <pb_enc_submessage>
 8004178:	4603      	mov	r3, r0
 800417a:	e010      	b.n	800419e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fd9a 	bl	8004cb8 <pb_enc_fixed_length_bytes>
 8004184:	4603      	mov	r3, r0
 8004186:	e00a      	b.n	800419e <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <encode_basic_field+0xd2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	e000      	b.n	8004198 <encode_basic_field+0xd4>
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <encode_basic_field+0xe4>)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6113      	str	r3, [r2, #16]
 800419c:	2300      	movs	r3, #0
    }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	08008bd8 	.word	0x08008bd8

080041ac <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <encode_callback_field+0x4a>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	2000      	movs	r0, #0
 80041d0:	4798      	blx	r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <encode_callback_field+0x4a>
            PB_RETURN_ERROR(stream, "callback error");
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <encode_callback_field+0x40>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	e000      	b.n	80041ee <encode_callback_field+0x42>
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <encode_callback_field+0x54>)
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6113      	str	r3, [r2, #16]
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <encode_callback_field+0x4c>
    }
    return true;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	08008bec 	.word	0x08008bec

08004204 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	7d9b      	ldrb	r3, [r3, #22]
 8004212:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d108      	bne.n	800422c <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	8a1b      	ldrh	r3, [r3, #16]
 8004224:	429a      	cmp	r2, r3
 8004226:	d026      	beq.n	8004276 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8004228:	2301      	movs	r3, #1
 800422a:	e059      	b.n	80042e0 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7d9b      	ldrb	r3, [r3, #22]
 8004230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004234:	2b10      	cmp	r3, #16
 8004236:	d11e      	bne.n	8004276 <encode_field+0x72>
    {
        if (field->pSize)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fd01 	bl	8003c4c <safe_read_bool>
 800424a:	4603      	mov	r3, r0
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00f      	beq.n	8004276 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8004256:	2301      	movs	r3, #1
 8004258:	e042      	b.n	80042e0 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7d9b      	ldrb	r3, [r3, #22]
 800425e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8004266:	6838      	ldr	r0, [r7, #0]
 8004268:	f7ff fe62 	bl	8003f30 <pb_check_proto3_default_value>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <encode_field+0x72>
                return true;
 8004272:	2301      	movs	r3, #1
 8004274:	e034      	b.n	80042e0 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	7d9b      	ldrb	r3, [r3, #22]
 8004282:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <encode_field+0x94>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	e000      	b.n	800429a <encode_field+0x96>
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <encode_field+0xe4>)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6113      	str	r3, [r2, #16]
 800429e:	2300      	movs	r3, #0
 80042a0:	e01e      	b.n	80042e0 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01c      	b.n	80042e0 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7d9b      	ldrb	r3, [r3, #22]
 80042aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d105      	bne.n	80042be <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80042b2:	6839      	ldr	r1, [r7, #0]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff79 	bl	80041ac <encode_callback_field>
 80042ba:	4603      	mov	r3, r0
 80042bc:	e010      	b.n	80042e0 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	7d9b      	ldrb	r3, [r3, #22]
 80042c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d105      	bne.n	80042d6 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fcdb 	bl	8003c88 <encode_array>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e004      	b.n	80042e0 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fef3 	bl	80040c4 <encode_basic_field>
 80042de:	4603      	mov	r3, r0
    }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	08008bfc 	.word	0x08008bfc

080042ec <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd fd97 	bl	8001e30 <pb_field_iter_begin_extension_const>
 8004302:	4603      	mov	r3, r0
 8004304:	f083 0301 	eor.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <default_extension_encoder+0x30>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	e000      	b.n	800431e <default_extension_encoder+0x32>
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <default_extension_encoder+0x50>)
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6113      	str	r3, [r2, #16]
 8004322:	2300      	movs	r3, #0
 8004324:	e006      	b.n	8004334 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff69 	bl	8004204 <encode_field>
 8004332:	4603      	mov	r3, r0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3730      	adds	r7, #48	; 0x30
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08008c14 	.word	0x08008c14

08004340 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]

    while (extension)
 8004352:	e01e      	b.n	8004392 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	4603      	mov	r3, r0
 800436c:	72fb      	strb	r3, [r7, #11]
 800436e:	e005      	b.n	800437c <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffba 	bl	80042ec <default_extension_encoder>
 8004378:	4603      	mov	r3, r0
 800437a:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800437c:	7afb      	ldrb	r3, [r7, #11]
 800437e:	f083 0301 	eor.w	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <encode_extension_field+0x4c>
            return false;
 8004388:	2300      	movs	r3, #0
 800438a:	e006      	b.n	800439a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60fb      	str	r3, [r7, #12]
    while (extension)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1dd      	bne.n	8004354 <encode_extension_field+0x14>
    }
    
    return true;
 8004398:	2301      	movs	r3, #1
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b08e      	sub	sp, #56	; 0x38
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80043ae:	f107 0310 	add.w	r3, r7, #16
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fd26 	bl	8001e08 <pb_field_iter_begin_const>
 80043bc:	4603      	mov	r3, r0
 80043be:	f083 0301 	eor.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <pb_encode+0x2a>
        return true; /* Empty message type */
 80043c8:	2301      	movs	r3, #1
 80043ca:	e02a      	b.n	8004422 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80043cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	2b0a      	cmp	r3, #10
 80043d6:	d10d      	bne.n	80043f4 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4619      	mov	r1, r3
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff ffae 	bl	8004340 <encode_extension_field>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <pb_encode+0x6e>
                return false;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e016      	b.n	8004422 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	4619      	mov	r1, r3
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff ff02 	bl	8004204 <encode_field>
 8004400:	4603      	mov	r3, r0
 8004402:	f083 0301 	eor.w	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <pb_encode+0x6e>
                return false;
 800440c:	2300      	movs	r3, #0
 800440e:	e008      	b.n	8004422 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4618      	mov	r0, r3
 8004416:	f7fd fc92 	bl	8001d3e <pb_field_iter_next>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1d5      	bne.n	80043cc <pb_encode+0x2a>
    
    return true;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	3738      	adds	r7, #56	; 0x38
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b088      	sub	sp, #32
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004442:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	09db      	lsrs	r3, r3, #7
 8004448:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800444a:	e014      	b.n	8004476 <pb_encode_varint_32+0x4c>
    {
        byte |= 0x80;
 800444c:	7efb      	ldrb	r3, [r7, #27]
 800444e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004452:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	61fa      	str	r2, [r7, #28]
 800445a:	f107 0220 	add.w	r2, r7, #32
 800445e:	4413      	add	r3, r2
 8004460:	7efa      	ldrb	r2, [r7, #27]
 8004462:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446e:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	09db      	lsrs	r3, r3, #7
 8004474:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d805      	bhi.n	8004488 <pb_encode_varint_32+0x5e>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e4      	bne.n	800444c <pb_encode_varint_32+0x22>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e1      	bne.n	800444c <pb_encode_varint_32+0x22>
    }

    if (high)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d025      	beq.n	80044da <pb_encode_varint_32+0xb0>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800449a:	b2da      	uxtb	r2, r3
 800449c:	7efb      	ldrb	r3, [r7, #27]
 800449e:	4313      	orrs	r3, r2
 80044a0:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	607b      	str	r3, [r7, #4]

        while (high)
 80044a8:	e014      	b.n	80044d4 <pb_encode_varint_32+0xaa>
        {
            byte |= 0x80;
 80044aa:	7efb      	ldrb	r3, [r7, #27]
 80044ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b0:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	61fa      	str	r2, [r7, #28]
 80044b8:	f107 0220 	add.w	r2, r7, #32
 80044bc:	4413      	add	r3, r2
 80044be:	7efa      	ldrb	r2, [r7, #27]
 80044c0:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044cc:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	09db      	lsrs	r3, r3, #7
 80044d2:	607b      	str	r3, [r7, #4]
        while (high)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e7      	bne.n	80044aa <pb_encode_varint_32+0x80>
        }
    }

    buffer[i++] = byte;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	61fa      	str	r2, [r7, #28]
 80044e0:	f107 0220 	add.w	r2, r7, #32
 80044e4:	4413      	add	r3, r2
 80044e6:	7efa      	ldrb	r2, [r7, #27]
 80044e8:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	4619      	mov	r1, r3
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fb61 	bl	8003bbc <pb_write>
 80044fa:	4603      	mov	r3, r0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8004510:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004514:	2c00      	cmp	r4, #0
 8004516:	bf08      	it	eq
 8004518:	2b80      	cmpeq	r3, #128	; 0x80
 800451a:	d20a      	bcs.n	8004532 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800451c:	783b      	ldrb	r3, [r7, #0]
 800451e:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8004520:	f107 0317 	add.w	r3, r7, #23
 8004524:	2201      	movs	r2, #1
 8004526:	4619      	mov	r1, r3
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fb47 	bl	8003bbc <pb_write>
 800452e:	4603      	mov	r3, r0
 8004530:	e00e      	b.n	8004550 <pb_encode_varint+0x4c>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	0013      	movs	r3, r2
 8004542:	2400      	movs	r4, #0
 8004544:	461a      	mov	r2, r3
 8004546:	4601      	mov	r1, r0
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ff6e 	bl	800442a <pb_encode_varint_32>
 800454e:	4603      	mov	r3, r0
#endif
    }
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}

08004558 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 8004564:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f174 0300 	sbcs.w	r3, r4, #0
 800456e:	da0d      	bge.n	800458c <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 8004570:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004574:	184b      	adds	r3, r1, r1
 8004576:	eb42 0402 	adc.w	r4, r2, r2
 800457a:	4619      	mov	r1, r3
 800457c:	4622      	mov	r2, r4
 800457e:	ea6f 0301 	mvn.w	r3, r1
 8004582:	ea6f 0402 	mvn.w	r4, r2
 8004586:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800458a:	e006      	b.n	800459a <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800458c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004590:	184b      	adds	r3, r1, r1
 8004592:	eb42 0402 	adc.w	r4, r2, r2
 8004596:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800459a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff ffb0 	bl	8004504 <pb_encode_varint>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}

080045ae <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0e1b      	lsrs	r3, r3, #24
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	2204      	movs	r2, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fae9 	bl	8003bbc <pb_write>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004604:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8004608:	7c3b      	ldrb	r3, [r7, #16]
 800460a:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800460c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	0a0b      	lsrs	r3, r1, #8
 800461a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800461e:	0a14      	lsrs	r4, r2, #8
 8004620:	b2db      	uxtb	r3, r3
 8004622:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8004624:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	0c0b      	lsrs	r3, r1, #16
 8004632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004636:	0c14      	lsrs	r4, r2, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800463c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	0e0b      	lsrs	r3, r1, #24
 800464a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800464e:	0e14      	lsrs	r4, r2, #24
 8004650:	b2db      	uxtb	r3, r3
 8004652:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8004654:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	0013      	movs	r3, r2
 8004662:	2400      	movs	r4, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8004668:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	0a13      	lsrs	r3, r2, #8
 8004676:	2400      	movs	r4, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800467c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	f04f 0400 	mov.w	r4, #0
 8004688:	0c13      	lsrs	r3, r2, #16
 800468a:	2400      	movs	r4, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8004690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	0e13      	lsrs	r3, r2, #24
 800469e:	2400      	movs	r4, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	2208      	movs	r2, #8
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fa85 	bl	8003bbc <pb_write>
 80046b2:	4603      	mov	r3, r0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd90      	pop	{r4, r7, pc}

080046bc <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 80046bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	460a      	mov	r2, r1
 80046ca:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4611      	mov	r1, r2
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 80046d8:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 80046dc:	7af9      	ldrb	r1, [r7, #11]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	ea4b 0301 	orr.w	r3, fp, r1
 80046e6:	ea4c 0402 	orr.w	r4, ip, r2
 80046ea:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 80046ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff06 	bl	8004504 <pb_encode_varint>
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004704 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	7d9b      	ldrb	r3, [r3, #22]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2b0b      	cmp	r3, #11
 8004718:	d826      	bhi.n	8004768 <pb_encode_tag_for_field+0x64>
 800471a:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <pb_encode_tag_for_field+0x1c>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004751 	.word	0x08004751
 8004724:	08004751 	.word	0x08004751
 8004728:	08004751 	.word	0x08004751
 800472c:	08004751 	.word	0x08004751
 8004730:	08004757 	.word	0x08004757
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004763 	.word	0x08004763
 800473c:	08004763 	.word	0x08004763
 8004740:	08004763 	.word	0x08004763
 8004744:	08004763 	.word	0x08004763
 8004748:	08004769 	.word	0x08004769
 800474c:	08004763 	.word	0x08004763
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
            break;
 8004754:	e014      	b.n	8004780 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 8004756:	2305      	movs	r3, #5
 8004758:	73fb      	strb	r3, [r7, #15]
            break;
 800475a:	e011      	b.n	8004780 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
            break;
 8004760:	e00e      	b.n	8004780 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8004762:	2302      	movs	r3, #2
 8004764:	73fb      	strb	r3, [r7, #15]
            break;
 8004766:	e00b      	b.n	8004780 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <pb_encode_tag_for_field+0x72>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	e000      	b.n	8004778 <pb_encode_tag_for_field+0x74>
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <pb_encode_tag_for_field+0x98>)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6113      	str	r3, [r2, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	e008      	b.n	8004792 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	8a1b      	ldrh	r3, [r3, #16]
 8004784:	461a      	mov	r2, r3
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff96 	bl	80046bc <pb_encode_tag>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	08008bd8 	.word	0x08008bd8

080047a0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f04f 0400 	mov.w	r4, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4623      	mov	r3, r4
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fea4 	bl	8004504 <pb_encode_varint>
 80047bc:	4603      	mov	r3, r0
 80047be:	f083 0301 	eor.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <pb_encode_string+0x2c>
        return false;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e005      	b.n	80047d8 <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff f9f3 	bl	8003bbc <pb_write>
 80047d6:	4603      	mov	r3, r0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd90      	pop	{r4, r7, pc}

080047e0 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b08d      	sub	sp, #52	; 0x34
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fdcc 	bl	80043a2 <pb_encode>
 800480a:	4603      	mov	r3, r0
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8004816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800481c:	2300      	movs	r3, #0
 800481e:	e064      	b.n	80048ea <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	461a      	mov	r2, r3
 800482c:	4623      	mov	r3, r4
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff fe68 	bl	8004504 <pb_encode_varint>
 8004834:	4603      	mov	r3, r0
 8004836:	f083 0301 	eor.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <pb_encode_submessage+0x64>
        return false;
 8004840:	2300      	movs	r3, #0
 8004842:	e052      	b.n	80048ea <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800484c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484e:	2100      	movs	r1, #0
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff f9b3 	bl	8003bbc <pb_write>
 8004856:	4603      	mov	r3, r0
 8004858:	e047      	b.n	80048ea <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	441a      	add	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90b      	bls.n	8004882 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <pb_encode_submessage+0x98>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	e000      	b.n	800487a <pb_encode_submessage+0x9a>
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <pb_encode_submessage+0x114>)
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6113      	str	r3, [r2, #16]
 800487e:	2300      	movs	r3, #0
 8004880:	e033      	b.n	80048ea <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fd7d 	bl	80043a2 <pb_encode>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d00b      	beq.n	80048e6 <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <pb_encode_submessage+0xfc>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	e000      	b.n	80048de <pb_encode_submessage+0xfe>
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <pb_encode_submessage+0x118>)
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6113      	str	r3, [r2, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	e001      	b.n	80048ea <pb_encode_submessage+0x10a>
    
    return status;
 80048e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3734      	adds	r7, #52	; 0x34
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd90      	pop	{r4, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	08008ba0 	.word	0x08008ba0
 80048f8:	08008c28 	.word	0x08008c28

080048fc <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f99e 	bl	8003c4c <safe_read_bool>
 8004910:	4603      	mov	r3, r0
 8004912:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fdf0 	bl	8004504 <pb_encode_varint>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}
	...

08004930 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	7d9b      	ldrb	r3, [r3, #22]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	2b02      	cmp	r3, #2
 8004944:	d149      	bne.n	80049da <pb_enc_varint+0xaa>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f04f 0400 	mov.w	r4, #0
 800494e:	e9c7 3404 	strd	r3, r4, [r7, #16]

        if (field->data_size == sizeof(uint_least8_t))
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	8a5b      	ldrh	r3, [r3, #18]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <pb_enc_varint+0x3c>
            value = *(const uint_least8_t*)field->pData;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f04f 0400 	mov.w	r4, #0
 8004966:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800496a:	e02f      	b.n	80049cc <pb_enc_varint+0x9c>
        else if (field->data_size == sizeof(uint_least16_t))
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	8a5b      	ldrh	r3, [r3, #18]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d108      	bne.n	8004986 <pb_enc_varint+0x56>
            value = *(const uint_least16_t*)field->pData;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f04f 0400 	mov.w	r4, #0
 8004980:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8004984:	e022      	b.n	80049cc <pb_enc_varint+0x9c>
        else if (field->data_size == sizeof(uint32_t))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	8a5b      	ldrh	r3, [r3, #18]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d107      	bne.n	800499e <pb_enc_varint+0x6e>
            value = *(const uint32_t*)field->pData;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f04f 0400 	mov.w	r4, #0
 8004998:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800499c:	e016      	b.n	80049cc <pb_enc_varint+0x9c>
        else if (field->data_size == sizeof(pb_uint64_t))
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	8a5b      	ldrh	r3, [r3, #18]
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d106      	bne.n	80049b4 <pb_enc_varint+0x84>
            value = *(const pb_uint64_t*)field->pData;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80049b2:	e00b      	b.n	80049cc <pb_enc_varint+0x9c>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <pb_enc_varint+0x92>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	e000      	b.n	80049c4 <pb_enc_varint+0x94>
 80049c2:	4b35      	ldr	r3, [pc, #212]	; (8004a98 <pb_enc_varint+0x168>)
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6113      	str	r3, [r2, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	e060      	b.n	8004a8e <pb_enc_varint+0x15e>

        return pb_encode_varint(stream, value);
 80049cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fd97 	bl	8004504 <pb_encode_varint>
 80049d6:	4603      	mov	r3, r0
 80049d8:	e059      	b.n	8004a8e <pb_enc_varint+0x15e>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	f04f 0400 	mov.w	r4, #0
 80049e2:	e9c7 3402 	strd	r3, r4, [r7, #8]

        if (field->data_size == sizeof(int_least8_t))
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	8a5b      	ldrh	r3, [r3, #18]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d109      	bne.n	8004a02 <pb_enc_varint+0xd2>
            value = *(const int_least8_t*)field->pData;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f993 3000 	ldrsb.w	r3, [r3]
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80049fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004a00:	e030      	b.n	8004a64 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int_least16_t))
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	8a5b      	ldrh	r3, [r3, #18]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d109      	bne.n	8004a1e <pb_enc_varint+0xee>
            value = *(const int_least16_t*)field->pData;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004a18:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004a1c:	e022      	b.n	8004a64 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int32_t))
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	8a5b      	ldrh	r3, [r3, #18]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d107      	bne.n	8004a36 <pb_enc_varint+0x106>
            value = *(const int32_t*)field->pData;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004a30:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004a34:	e016      	b.n	8004a64 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(pb_int64_t))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	8a5b      	ldrh	r3, [r3, #18]
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d106      	bne.n	8004a4c <pb_enc_varint+0x11c>
            value = *(const pb_int64_t*)field->pData;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a46:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004a4a:	e00b      	b.n	8004a64 <pb_enc_varint+0x134>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <pb_enc_varint+0x12a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	e000      	b.n	8004a5c <pb_enc_varint+0x12c>
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <pb_enc_varint+0x168>)
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6113      	str	r3, [r2, #16]
 8004a60:	2300      	movs	r3, #0
 8004a62:	e014      	b.n	8004a8e <pb_enc_varint+0x15e>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	7d9b      	ldrb	r3, [r3, #22]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d106      	bne.n	8004a7e <pb_enc_varint+0x14e>
            return pb_encode_svarint(stream, value);
 8004a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fd6f 	bl	8004558 <pb_encode_svarint>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	e007      	b.n	8004a8e <pb_enc_varint+0x15e>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8004a7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004a82:	461a      	mov	r2, r3
 8004a84:	4623      	mov	r3, r4
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fd3c 	bl	8004504 <pb_encode_varint>
 8004a8c:	4603      	mov	r3, r0

    }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd90      	pop	{r4, r7, pc}
 8004a96:	bf00      	nop
 8004a98:	08008c3c 	.word	0x08008c3c

08004a9c <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	8a5b      	ldrh	r3, [r3, #18]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fd7a 	bl	80045ae <pb_encode_fixed32>
 8004aba:	4603      	mov	r3, r0
 8004abc:	e016      	b.n	8004aec <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	8a5b      	ldrh	r3, [r3, #18]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d107      	bne.n	8004ad6 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fd91 	bl	80045f4 <pb_encode_fixed64>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e00a      	b.n	8004aec <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <pb_enc_fixed+0x48>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	e000      	b.n	8004ae6 <pb_enc_fixed+0x4a>
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <pb_enc_fixed+0x58>)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6113      	str	r3, [r2, #16]
 8004aea:	2300      	movs	r3, #0
    }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	08008c3c 	.word	0x08008c3c

08004af8 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2100      	movs	r1, #0
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fe42 	bl	80047a0 <pb_encode_string>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	e021      	b.n	8004b64 <pb_enc_bytes+0x6c>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	7d9b      	ldrb	r3, [r3, #22]
 8004b24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d112      	bne.n	8004b52 <pb_enc_bytes+0x5a>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	3302      	adds	r3, #2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	8a52      	ldrh	r2, [r2, #18]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d90b      	bls.n	8004b52 <pb_enc_bytes+0x5a>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <pb_enc_bytes+0x50>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	e000      	b.n	8004b4a <pb_enc_bytes+0x52>
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <pb_enc_bytes+0x74>)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6113      	str	r3, [r2, #16]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e008      	b.n	8004b64 <pb_enc_bytes+0x6c>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1c99      	adds	r1, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe1f 	bl	80047a0 <pb_encode_string>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08008c50 	.word	0x08008c50

08004b70 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	8a5b      	ldrh	r3, [r3, #18]
 8004b82:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	7d9b      	ldrb	r3, [r3, #22]
 8004b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d103      	bne.n	8004b9e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e011      	b.n	8004bc2 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <pb_enc_string+0x42>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	e000      	b.n	8004bb4 <pb_enc_string+0x44>
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <pb_enc_string+0xb4>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6113      	str	r3, [r2, #16]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e02f      	b.n	8004c1c <pb_enc_string+0xac>

        max_size -= 1;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e020      	b.n	8004c10 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8004bd2:	e005      	b.n	8004be0 <pb_enc_string+0x70>
        {
            size++;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
            p++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d203      	bcs.n	8004bf0 <pb_enc_string+0x80>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f1      	bne.n	8004bd4 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <pb_enc_string+0x96>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	e000      	b.n	8004c08 <pb_enc_string+0x98>
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <pb_enc_string+0xb8>)
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6113      	str	r3, [r2, #16]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e005      	b.n	8004c1c <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fdc3 	bl	80047a0 <pb_encode_string>
 8004c1a:	4603      	mov	r3, r0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	08008c64 	.word	0x08008c64
 8004c28:	08008c78 	.word	0x08008c78

08004c2c <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <pb_enc_submessage+0x20>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	e000      	b.n	8004c4e <pb_enc_submessage+0x22>
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <pb_enc_submessage+0x88>)
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6113      	str	r3, [r2, #16]
 8004c52:	2300      	movs	r3, #0
 8004c54:	e029      	b.n	8004caa <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	7d9b      	ldrb	r3, [r3, #22]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	d11a      	bne.n	8004c98 <pb_enc_submessage+0x6c>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	3b08      	subs	r3, #8
 8004c70:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	3204      	adds	r2, #4
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f083 0301 	eor.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <pb_enc_submessage+0x6c>
                return false;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e008      	b.n	8004caa <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fd9c 	bl	80047e0 <pb_encode_submessage>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08008c8c 	.word	0x08008c8c

08004cb8 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	69d9      	ldr	r1, [r3, #28]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	8a5b      	ldrh	r3, [r3, #18]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fd67 	bl	80047a0 <pb_encode_string>
 8004cd2:	4603      	mov	r3, r0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_MspInit+0x44>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_MspInit+0x44>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_MspInit+0x44>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_MspInit+0x44>)
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_MspInit+0x44>)
 8004d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d04:	6453      	str	r3, [r2, #68]	; 0x44
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_MspInit+0x44>)
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	; 0x30
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2c:	f107 031c 	add.w	r3, r7, #28
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d144      	bne.n	8004dd0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5e:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	4a34      	ldr	r2, [pc, #208]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6a:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d76:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4a2e      	ldr	r2, [pc, #184]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	6313      	str	r3, [r2, #48]	; 0x30
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = encoder_sx1_Pin;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d92:	2302      	movs	r3, #2
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx1_GPIO_Port, &GPIO_InitStruct);
 8004da2:	f107 031c 	add.w	r3, r7, #28
 8004da6:	4619      	mov	r1, r3
 8004da8:	4823      	ldr	r0, [pc, #140]	; (8004e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8004daa:	f000 fb53 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder_sx2_Pin;
 8004dae:	2308      	movs	r3, #8
 8004db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db2:	2302      	movs	r3, #2
 8004db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx2_GPIO_Port, &GPIO_InitStruct);
 8004dc2:	f107 031c 	add.w	r3, r7, #28
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	481c      	ldr	r0, [pc, #112]	; (8004e3c <HAL_TIM_Encoder_MspInit+0x118>)
 8004dca:	f000 fb43 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004dce:	e02c      	b.n	8004e2a <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d127      	bne.n	8004e2a <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004dda:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004de0:	f043 0308 	orr.w	r3, r3, #8
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_dx1_Pin|encoder_dx2_Pin;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	f107 031c 	add.w	r3, r7, #28
 8004e22:	4619      	mov	r1, r3
 8004e24:	4804      	ldr	r0, [pc, #16]	; (8004e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8004e26:	f000 fb15 	bl	8005454 <HAL_GPIO_Init>
}
 8004e2a:	bf00      	nop
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40020000 	.word	0x40020000
 8004e3c:	40020400 	.word	0x40020400
 8004e40:	40000c00 	.word	0x40000c00

08004e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_TIM_Base_MspInit+0x80>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10c      	bne.n	8004e70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004e6e:	e022      	b.n	8004eb6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_TIM_Base_MspInit+0x88>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10c      	bne.n	8004e94 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]
}
 8004e92:	e010      	b.n	8004eb6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004ea4:	f043 0310 	orr.w	r3, r3, #16
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_TIM_Base_MspInit+0x84>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40001000 	.word	0x40001000

08004ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <HAL_TIM_MspPostInit+0x64>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d11c      	bne.n	8004f30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_TIM_MspPostInit+0x68>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_TIM_MspPostInit+0x68>)
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_TIM_MspPostInit+0x68>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 8004f0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f14:	2302      	movs	r3, #2
 8004f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f20:	2302      	movs	r3, #2
 8004f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <HAL_TIM_MspPostInit+0x6c>)
 8004f2c:	f000 fa92 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f30:	bf00      	nop
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40020c00 	.word	0x40020c00

08004f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_UART_MspInit+0x7c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d127      	bne.n	8004fb6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f6c:	f043 0320 	orr.w	r3, r3, #32
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_UART_MspInit+0x80>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f96:	23c0      	movs	r3, #192	; 0xc0
 8004f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HAL_UART_MspInit+0x84>)
 8004fb2:	f000 fa4f 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004fb6:	bf00      	nop
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40011400 	.word	0x40011400
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020800 	.word	0x40020800

08004fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fde:	e7fe      	b.n	8004fde <HardFault_Handler+0x4>

08004fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fe4:	e7fe      	b.n	8004fe4 <MemManage_Handler+0x4>

08004fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fea:	e7fe      	b.n	8004fea <BusFault_Handler+0x4>

08004fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ff0:	e7fe      	b.n	8004ff0 <UsageFault_Handler+0x4>

08004ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800500e:	b480      	push	{r7}
 8005010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005020:	f000 f8c4 	bl	80051ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}

08005028 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <TIM3_IRQHandler+0x10>)
 800502e:	f001 fdec 	bl	8006c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2000006c 	.word	0x2000006c

0800503c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005040:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005044:	f000 fbca 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}

0800504c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <TIM6_DAC_IRQHandler+0x10>)
 8005052:	f001 fdda 	bl	8006c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000012c 	.word	0x2000012c

08005060 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <USART6_IRQHandler+0x10>)
 8005066:	f002 fea3 	bl	8007db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	2000016c 	.word	0x2000016c

08005074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <SystemInit+0x5c>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <SystemInit+0x5c>)
 8005080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <SystemInit+0x60>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <SystemInit+0x60>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <SystemInit+0x60>)
 8005096:	2200      	movs	r2, #0
 8005098:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800509a:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <SystemInit+0x60>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	490d      	ldr	r1, [pc, #52]	; (80050d4 <SystemInit+0x60>)
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <SystemInit+0x64>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <SystemInit+0x60>)
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <SystemInit+0x68>)
 80050aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <SystemInit+0x60>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <SystemInit+0x60>)
 80050b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <SystemInit+0x60>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <SystemInit+0x5c>)
 80050c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050c4:	609a      	str	r2, [r3, #8]
#endif
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	e000ed00 	.word	0xe000ed00
 80050d4:	40023800 	.word	0x40023800
 80050d8:	fef6ffff 	.word	0xfef6ffff
 80050dc:	24003010 	.word	0x24003010

080050e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050e6:	e003      	b.n	80050f0 <LoopCopyDataInit>

080050e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050ee:	3104      	adds	r1, #4

080050f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050f0:	480b      	ldr	r0, [pc, #44]	; (8005120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050f8:	d3f6      	bcc.n	80050e8 <CopyDataInit>
  ldr  r2, =_sbss
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050fc:	e002      	b.n	8005104 <LoopFillZerobss>

080050fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005100:	f842 3b04 	str.w	r3, [r2], #4

08005104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005108:	d3f9      	bcc.n	80050fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800510a:	f7ff ffb3 	bl	8005074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800510e:	f003 fc31 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005112:	f7fb fdc9 	bl	8000ca8 <main>
  bx  lr    
 8005116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005118:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800511c:	08008cf8 	.word	0x08008cf8
  ldr  r0, =_sdata
 8005120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005124:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005128:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800512c:	20000348 	.word	0x20000348

08005130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005130:	e7fe      	b.n	8005130 <ADC_IRQHandler>

08005132 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005136:	2003      	movs	r0, #3
 8005138:	f000 f928 	bl	800538c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800513c:	2000      	movs	r0, #0
 800513e:	f000 f805 	bl	800514c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005142:	f7ff fdcb 	bl	8004cdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_InitTick+0x54>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_InitTick+0x58>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005162:	fbb3 f3f1 	udiv	r3, r3, r1
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f943 	bl	80053f6 <HAL_SYSTICK_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e00e      	b.n	8005198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d80a      	bhi.n	8005196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005180:	2200      	movs	r2, #0
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005188:	f000 f90b 	bl	80053a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800518c:	4a06      	ldr	r2, [pc, #24]	; (80051a8 <HAL_InitTick+0x5c>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000004 	.word	0x20000004
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	20000008 	.word	0x20000008

080051ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_IncTick+0x20>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_IncTick+0x24>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HAL_IncTick+0x24>)
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c
 80051d0:	20000344 	.word	0x20000344

080051d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return uwTick;
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <HAL_GetTick+0x14>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000344 	.word	0x20000344

080051ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <__NVIC_SetPriorityGrouping+0x40>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800521a:	4a04      	ldr	r2, [pc, #16]	; (800522c <__NVIC_SetPriorityGrouping+0x40>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	60d3      	str	r3, [r2, #12]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000ed00 	.word	0xe000ed00
 8005230:	05fa0000 	.word	0x05fa0000

08005234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <__NVIC_GetPriorityGrouping+0x18>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f003 0307 	and.w	r3, r3, #7
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0b      	blt.n	800527a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <__NVIC_EnableIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b00      	cmp	r3, #0
 800529e:	db0a      	blt.n	80052b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	490c      	ldr	r1, [pc, #48]	; (80052d8 <__NVIC_SetPriority+0x4c>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	440b      	add	r3, r1
 80052b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b4:	e00a      	b.n	80052cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4908      	ldr	r1, [pc, #32]	; (80052dc <__NVIC_SetPriority+0x50>)
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3b04      	subs	r3, #4
 80052c4:	0112      	lsls	r2, r2, #4
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	761a      	strb	r2, [r3, #24]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000e100 	.word	0xe000e100
 80052dc:	e000ed00 	.word	0xe000ed00

080052e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f1c3 0307 	rsb	r3, r3, #7
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf28      	it	cs
 80052fe:	2304      	movcs	r3, #4
 8005300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3304      	adds	r3, #4
 8005306:	2b06      	cmp	r3, #6
 8005308:	d902      	bls.n	8005310 <NVIC_EncodePriority+0x30>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3b03      	subs	r3, #3
 800530e:	e000      	b.n	8005312 <NVIC_EncodePriority+0x32>
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	401a      	ands	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43d9      	mvns	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	4313      	orrs	r3, r2
         );
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	; 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005358:	d301      	bcc.n	800535e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800535a:	2301      	movs	r3, #1
 800535c:	e00f      	b.n	800537e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <SysTick_Config+0x40>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3b01      	subs	r3, #1
 8005364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005366:	210f      	movs	r1, #15
 8005368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800536c:	f7ff ff8e 	bl	800528c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <SysTick_Config+0x40>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005376:	4b04      	ldr	r3, [pc, #16]	; (8005388 <SysTick_Config+0x40>)
 8005378:	2207      	movs	r2, #7
 800537a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	e000e010 	.word	0xe000e010

0800538c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff29 	bl	80051ec <__NVIC_SetPriorityGrouping>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	4603      	mov	r3, r0
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053b4:	f7ff ff3e 	bl	8005234 <__NVIC_GetPriorityGrouping>
 80053b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f7ff ff8e 	bl	80052e0 <NVIC_EncodePriority>
 80053c4:	4602      	mov	r2, r0
 80053c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff5d 	bl	800528c <__NVIC_SetPriority>
}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff31 	bl	8005250 <__NVIC_EnableIRQ>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ffa2 	bl	8005348 <SysTick_Config>
 8005404:	4603      	mov	r3, r0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d004      	beq.n	800542c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2280      	movs	r2, #128	; 0x80
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e00c      	b.n	8005446 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2205      	movs	r2, #5
 8005430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
 8005472:	e175      	b.n	8005760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005474:	2201      	movs	r2, #1
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	f040 8164 	bne.w	800575a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0x4e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d123      	bne.n	80054ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	08da      	lsrs	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3208      	adds	r2, #8
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	08da      	lsrs	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3208      	adds	r2, #8
 80054e4:	69b9      	ldr	r1, [r7, #24]
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d00b      	beq.n	800553e <HAL_GPIO_Init+0xea>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d007      	beq.n	800553e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005532:	2b11      	cmp	r3, #17
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b12      	cmp	r3, #18
 800553c:	d130      	bne.n	80055a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2203      	movs	r2, #3
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005574:	2201      	movs	r2, #1
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 0201 	and.w	r2, r3, #1
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	2203      	movs	r2, #3
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80be 	beq.w	800575a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055de:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_GPIO_Init+0x320>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	4a64      	ldr	r2, [pc, #400]	; (8005774 <HAL_GPIO_Init+0x320>)
 80055e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ea:	4b62      	ldr	r3, [pc, #392]	; (8005774 <HAL_GPIO_Init+0x320>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80055f6:	4a60      	ldr	r2, [pc, #384]	; (8005778 <HAL_GPIO_Init+0x324>)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a57      	ldr	r2, [pc, #348]	; (800577c <HAL_GPIO_Init+0x328>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d037      	beq.n	8005692 <HAL_GPIO_Init+0x23e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a56      	ldr	r2, [pc, #344]	; (8005780 <HAL_GPIO_Init+0x32c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d031      	beq.n	800568e <HAL_GPIO_Init+0x23a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a55      	ldr	r2, [pc, #340]	; (8005784 <HAL_GPIO_Init+0x330>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02b      	beq.n	800568a <HAL_GPIO_Init+0x236>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a54      	ldr	r2, [pc, #336]	; (8005788 <HAL_GPIO_Init+0x334>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d025      	beq.n	8005686 <HAL_GPIO_Init+0x232>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a53      	ldr	r2, [pc, #332]	; (800578c <HAL_GPIO_Init+0x338>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01f      	beq.n	8005682 <HAL_GPIO_Init+0x22e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <HAL_GPIO_Init+0x33c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d019      	beq.n	800567e <HAL_GPIO_Init+0x22a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <HAL_GPIO_Init+0x340>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <HAL_GPIO_Init+0x226>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_GPIO_Init+0x344>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00d      	beq.n	8005676 <HAL_GPIO_Init+0x222>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a4f      	ldr	r2, [pc, #316]	; (800579c <HAL_GPIO_Init+0x348>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <HAL_GPIO_Init+0x21e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_GPIO_Init+0x34c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d101      	bne.n	800566e <HAL_GPIO_Init+0x21a>
 800566a:	2309      	movs	r3, #9
 800566c:	e012      	b.n	8005694 <HAL_GPIO_Init+0x240>
 800566e:	230a      	movs	r3, #10
 8005670:	e010      	b.n	8005694 <HAL_GPIO_Init+0x240>
 8005672:	2308      	movs	r3, #8
 8005674:	e00e      	b.n	8005694 <HAL_GPIO_Init+0x240>
 8005676:	2307      	movs	r3, #7
 8005678:	e00c      	b.n	8005694 <HAL_GPIO_Init+0x240>
 800567a:	2306      	movs	r3, #6
 800567c:	e00a      	b.n	8005694 <HAL_GPIO_Init+0x240>
 800567e:	2305      	movs	r3, #5
 8005680:	e008      	b.n	8005694 <HAL_GPIO_Init+0x240>
 8005682:	2304      	movs	r3, #4
 8005684:	e006      	b.n	8005694 <HAL_GPIO_Init+0x240>
 8005686:	2303      	movs	r3, #3
 8005688:	e004      	b.n	8005694 <HAL_GPIO_Init+0x240>
 800568a:	2302      	movs	r3, #2
 800568c:	e002      	b.n	8005694 <HAL_GPIO_Init+0x240>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_GPIO_Init+0x240>
 8005692:	2300      	movs	r3, #0
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	f002 0203 	and.w	r2, r2, #3
 800569a:	0092      	lsls	r2, r2, #2
 800569c:	4093      	lsls	r3, r2
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80056a4:	4934      	ldr	r1, [pc, #208]	; (8005778 <HAL_GPIO_Init+0x324>)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	3302      	adds	r3, #2
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056b2:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <HAL_GPIO_Init+0x350>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056d6:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <HAL_GPIO_Init+0x350>)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <HAL_GPIO_Init+0x350>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <HAL_GPIO_Init+0x350>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <HAL_GPIO_Init+0x350>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_GPIO_Init+0x350>)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005730:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <HAL_GPIO_Init+0x350>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <HAL_GPIO_Init+0x350>)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3301      	adds	r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	f67f ae86 	bls.w	8005474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005768:	bf00      	nop
 800576a:	3724      	adds	r7, #36	; 0x24
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40023800 	.word	0x40023800
 8005778:	40013800 	.word	0x40013800
 800577c:	40020000 	.word	0x40020000
 8005780:	40020400 	.word	0x40020400
 8005784:	40020800 	.word	0x40020800
 8005788:	40020c00 	.word	0x40020c00
 800578c:	40021000 	.word	0x40021000
 8005790:	40021400 	.word	0x40021400
 8005794:	40021800 	.word	0x40021800
 8005798:	40021c00 	.word	0x40021c00
 800579c:	40022000 	.word	0x40022000
 80057a0:	40022400 	.word	0x40022400
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
 80057b4:	4613      	mov	r3, r2
 80057b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b8:	787b      	ldrb	r3, [r7, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80057c4:	e003      	b.n	80057ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	041a      	lsls	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057e6:	4b08      	ldr	r3, [pc, #32]	; (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057f2:	4a05      	ldr	r2, [pc, #20]	; (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb ffd0 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e25e      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8087 	beq.w	800593e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005830:	4b96      	ldr	r3, [pc, #600]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 030c 	and.w	r3, r3, #12
 8005838:	2b04      	cmp	r3, #4
 800583a:	d00c      	beq.n	8005856 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583c:	4b93      	ldr	r3, [pc, #588]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b08      	cmp	r3, #8
 8005846:	d112      	bne.n	800586e <HAL_RCC_OscConfig+0x62>
 8005848:	4b90      	ldr	r3, [pc, #576]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005854:	d10b      	bne.n	800586e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005856:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d06c      	beq.n	800593c <HAL_RCC_OscConfig+0x130>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d168      	bne.n	800593c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e238      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x7a>
 8005878:	4b84      	ldr	r3, [pc, #528]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a83      	ldr	r2, [pc, #524]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800587e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e02e      	b.n	80058e4 <HAL_RCC_OscConfig+0xd8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x9c>
 800588e:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a7e      	ldr	r2, [pc, #504]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b7c      	ldr	r3, [pc, #496]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7b      	ldr	r2, [pc, #492]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e01d      	b.n	80058e4 <HAL_RCC_OscConfig+0xd8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCC_OscConfig+0xc0>
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a75      	ldr	r2, [pc, #468]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e00b      	b.n	80058e4 <HAL_RCC_OscConfig+0xd8>
 80058cc:	4b6f      	ldr	r3, [pc, #444]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6e      	ldr	r2, [pc, #440]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6b      	ldr	r2, [pc, #428]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80058de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d013      	beq.n	8005914 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7ff fc72 	bl	80051d4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f4:	f7ff fc6e 	bl	80051d4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b64      	cmp	r3, #100	; 0x64
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e1ec      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0xe8>
 8005912:	e014      	b.n	800593e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7ff fc5e 	bl	80051d4 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591c:	f7ff fc5a 	bl	80051d4 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1d8      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x110>
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d069      	beq.n	8005a1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800594a:	4b50      	ldr	r3, [pc, #320]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00b      	beq.n	800596e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005956:	4b4d      	ldr	r3, [pc, #308]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b08      	cmp	r3, #8
 8005960:	d11c      	bne.n	800599c <HAL_RCC_OscConfig+0x190>
 8005962:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d116      	bne.n	800599c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_RCC_OscConfig+0x17a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e1ac      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005986:	4b41      	ldr	r3, [pc, #260]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	493d      	ldr	r1, [pc, #244]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	e040      	b.n	8005a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d023      	beq.n	80059ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a4:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7ff fc10 	bl	80051d4 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b8:	f7ff fc0c 	bl	80051d4 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e18a      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ca:	4b30      	ldr	r3, [pc, #192]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d6:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4929      	ldr	r1, [pc, #164]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]
 80059ea:	e018      	b.n	8005a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 80059f2:	f023 0301 	bic.w	r3, r3, #1
 80059f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7ff fbec 	bl	80051d4 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a00:	f7ff fbe8 	bl	80051d4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e166      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d038      	beq.n	8005a9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d019      	beq.n	8005a66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7ff fbc9 	bl	80051d4 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a46:	f7ff fbc5 	bl	80051d4 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e143      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x23a>
 8005a64:	e01a      	b.n	8005a9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7ff fbaf 	bl	80051d4 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	e00a      	b.n	8005a90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7ff fbab 	bl	80051d4 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d903      	bls.n	8005a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e129      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
 8005a8c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a90:	4b95      	ldr	r3, [pc, #596]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ee      	bne.n	8005a7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80a4 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aaa:	4b8f      	ldr	r3, [pc, #572]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10d      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4b8c      	ldr	r3, [pc, #560]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	4a8b      	ldr	r2, [pc, #556]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ac2:	4b89      	ldr	r3, [pc, #548]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad2:	4b86      	ldr	r3, [pc, #536]	; (8005cec <HAL_RCC_OscConfig+0x4e0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d118      	bne.n	8005b10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ade:	4b83      	ldr	r3, [pc, #524]	; (8005cec <HAL_RCC_OscConfig+0x4e0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a82      	ldr	r2, [pc, #520]	; (8005cec <HAL_RCC_OscConfig+0x4e0>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aea:	f7ff fb73 	bl	80051d4 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7ff fb6f 	bl	80051d4 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	; 0x64
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0ed      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b04:	4b79      	ldr	r3, [pc, #484]	; (8005cec <HAL_RCC_OscConfig+0x4e0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d106      	bne.n	8005b26 <HAL_RCC_OscConfig+0x31a>
 8005b18:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a72      	ldr	r2, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
 8005b24:	e02d      	b.n	8005b82 <HAL_RCC_OscConfig+0x376>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCC_OscConfig+0x33c>
 8005b2e:	4b6e      	ldr	r3, [pc, #440]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a6d      	ldr	r2, [pc, #436]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b6b      	ldr	r3, [pc, #428]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a6a      	ldr	r2, [pc, #424]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
 8005b46:	e01c      	b.n	8005b82 <HAL_RCC_OscConfig+0x376>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_OscConfig+0x35e>
 8005b50:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a64      	ldr	r2, [pc, #400]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5c:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	4a61      	ldr	r2, [pc, #388]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	6713      	str	r3, [r2, #112]	; 0x70
 8005b68:	e00b      	b.n	8005b82 <HAL_RCC_OscConfig+0x376>
 8005b6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	4b5c      	ldr	r3, [pc, #368]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	4a5b      	ldr	r2, [pc, #364]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d015      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8a:	f7ff fb23 	bl	80051d4 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7ff fb1f 	bl	80051d4 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e09b      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	4b4f      	ldr	r3, [pc, #316]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCC_OscConfig+0x386>
 8005bb4:	e014      	b.n	8005be0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7ff fb0d 	bl	80051d4 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7ff fb09 	bl	80051d4 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e085      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd4:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ee      	bne.n	8005bbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d105      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d071      	beq.n	8005cde <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d069      	beq.n	8005cda <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d14b      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a35      	ldr	r2, [pc, #212]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7ff fadb 	bl	80051d4 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c22:	f7ff fad7 	bl	80051d4 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e055      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c34:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f0      	bne.n	8005c22 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	019b      	lsls	r3, r3, #6
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	071b      	lsls	r3, r3, #28
 8005c6c:	491e      	ldr	r1, [pc, #120]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7e:	f7ff faa9 	bl	80051d4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c86:	f7ff faa5 	bl	80051d4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e023      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x47a>
 8005ca4:	e01b      	b.n	8005cde <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a0f      	ldr	r2, [pc, #60]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7ff fa8f 	bl	80051d4 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cba:	f7ff fa8b 	bl	80051d4 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e009      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCC_OscConfig+0x4dc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x4ae>
 8005cd8:	e001      	b.n	8005cde <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40007000 	.word	0x40007000

08005cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0ce      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d08:	4b69      	ldr	r3, [pc, #420]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d910      	bls.n	8005d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b66      	ldr	r3, [pc, #408]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 020f 	bic.w	r2, r3, #15
 8005d1e:	4964      	ldr	r1, [pc, #400]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b62      	ldr	r3, [pc, #392]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0b6      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d020      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d50:	4b58      	ldr	r3, [pc, #352]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a57      	ldr	r2, [pc, #348]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d68:	4b52      	ldr	r3, [pc, #328]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a51      	ldr	r2, [pc, #324]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d74:	4b4f      	ldr	r3, [pc, #316]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	494c      	ldr	r1, [pc, #304]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d040      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b46      	ldr	r3, [pc, #280]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d115      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e07d      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d107      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db2:	4b40      	ldr	r3, [pc, #256]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e071      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc2:	4b3c      	ldr	r3, [pc, #240]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e069      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dd2:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 0203 	bic.w	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4935      	ldr	r1, [pc, #212]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de4:	f7ff f9f6 	bl	80051d4 <HAL_GetTick>
 8005de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	e00a      	b.n	8005e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dec:	f7ff f9f2 	bl	80051d4 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e051      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e02:	4b2c      	ldr	r3, [pc, #176]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 020c 	and.w	r2, r3, #12
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d1eb      	bne.n	8005dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e14:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d210      	bcs.n	8005e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 020f 	bic.w	r2, r3, #15
 8005e2a:	4921      	ldr	r1, [pc, #132]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e030      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e50:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4915      	ldr	r1, [pc, #84]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	490d      	ldr	r1, [pc, #52]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e82:	f000 f81d 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 8005e86:	4601      	mov	r1, r0
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e94:	5cd3      	ldrb	r3, [r2, r3]
 8005e96:	fa21 f303 	lsr.w	r3, r1, r3
 8005e9a:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <HAL_RCC_ClockConfig+0x1cc>)
 8005e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f7ff f954 	bl	800514c <HAL_InitTick>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023c00 	.word	0x40023c00
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	08008ca8 	.word	0x08008ca8
 8005ebc:	20000004 	.word	0x20000004

08005ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ed6:	4b50      	ldr	r3, [pc, #320]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d007      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 808d 	bne.w	8006006 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eec:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005eee:	60bb      	str	r3, [r7, #8]
       break;
 8005ef0:	e08c      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ef2:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef4:	60bb      	str	r3, [r7, #8]
      break;
 8005ef6:	e089      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ef8:	4b47      	ldr	r3, [pc, #284]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f00:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f02:	4b45      	ldr	r3, [pc, #276]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d023      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0e:	4b42      	ldr	r3, [pc, #264]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	f04f 0400 	mov.w	r4, #0
 8005f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	ea03 0501 	and.w	r5, r3, r1
 8005f24:	ea04 0602 	and.w	r6, r4, r2
 8005f28:	4a3d      	ldr	r2, [pc, #244]	; (8006020 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f2a:	fb02 f106 	mul.w	r1, r2, r6
 8005f2e:	2200      	movs	r2, #0
 8005f30:	fb02 f205 	mul.w	r2, r2, r5
 8005f34:	440a      	add	r2, r1
 8005f36:	493a      	ldr	r1, [pc, #232]	; (8006020 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f38:	fba5 0101 	umull	r0, r1, r5, r1
 8005f3c:	1853      	adds	r3, r2, r1
 8005f3e:	4619      	mov	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f04f 0400 	mov.w	r4, #0
 8005f46:	461a      	mov	r2, r3
 8005f48:	4623      	mov	r3, r4
 8005f4a:	f7fa f975 	bl	8000238 <__aeabi_uldivmod>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e049      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f56:	4b30      	ldr	r3, [pc, #192]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	099b      	lsrs	r3, r3, #6
 8005f5c:	f04f 0400 	mov.w	r4, #0
 8005f60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	ea03 0501 	and.w	r5, r3, r1
 8005f6c:	ea04 0602 	and.w	r6, r4, r2
 8005f70:	4629      	mov	r1, r5
 8005f72:	4632      	mov	r2, r6
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	f04f 0400 	mov.w	r4, #0
 8005f7c:	0154      	lsls	r4, r2, #5
 8005f7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f82:	014b      	lsls	r3, r1, #5
 8005f84:	4619      	mov	r1, r3
 8005f86:	4622      	mov	r2, r4
 8005f88:	1b49      	subs	r1, r1, r5
 8005f8a:	eb62 0206 	sbc.w	r2, r2, r6
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	f04f 0400 	mov.w	r4, #0
 8005f96:	0194      	lsls	r4, r2, #6
 8005f98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f9c:	018b      	lsls	r3, r1, #6
 8005f9e:	1a5b      	subs	r3, r3, r1
 8005fa0:	eb64 0402 	sbc.w	r4, r4, r2
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	00e2      	lsls	r2, r4, #3
 8005fae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fb2:	00d9      	lsls	r1, r3, #3
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	195b      	adds	r3, r3, r5
 8005fba:	eb44 0406 	adc.w	r4, r4, r6
 8005fbe:	f04f 0100 	mov.w	r1, #0
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	02a2      	lsls	r2, r4, #10
 8005fc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fcc:	0299      	lsls	r1, r3, #10
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f04f 0400 	mov.w	r4, #0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4623      	mov	r3, r4
 8005fe0:	f7fa f92a 	bl	8000238 <__aeabi_uldivmod>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	60bb      	str	r3, [r7, #8]
      break;
 8006004:	e002      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006008:	60bb      	str	r3, [r7, #8]
      break;
 800600a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800600c:	68bb      	ldr	r3, [r7, #8]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800
 800601c:	00f42400 	.word	0x00f42400
 8006020:	017d7840 	.word	0x017d7840

08006024 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <HAL_RCC_GetHCLKFreq+0x14>)
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000004 	.word	0x20000004

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006040:	f7ff fff0 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 8006044:	4601      	mov	r1, r0
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0a9b      	lsrs	r3, r3, #10
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4a03      	ldr	r2, [pc, #12]	; (8006060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006058:	4618      	mov	r0, r3
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40023800 	.word	0x40023800
 8006060:	08008cb8 	.word	0x08008cb8

08006064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006068:	f7ff ffdc 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 800606c:	4601      	mov	r1, r0
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	0b5b      	lsrs	r3, r3, #13
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	4a03      	ldr	r2, [pc, #12]	; (8006088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40023800 	.word	0x40023800
 8006088:	08008cb8 	.word	0x08008cb8

0800608c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060b4:	4b69      	ldr	r3, [pc, #420]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060be:	6093      	str	r3, [r2, #8]
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	4964      	ldr	r1, [pc, #400]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d017      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060e6:	4b5d      	ldr	r3, [pc, #372]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	4959      	ldr	r1, [pc, #356]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006104:	d101      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006112:	2301      	movs	r3, #1
 8006114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d017      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006122:	4b4e      	ldr	r3, [pc, #312]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006128:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	494a      	ldr	r1, [pc, #296]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006140:	d101      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800614e:	2301      	movs	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800615e:	2301      	movs	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 808b 	beq.w	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006170:	4b3a      	ldr	r3, [pc, #232]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4a39      	ldr	r2, [pc, #228]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	; 0x40
 800617c:	4b37      	ldr	r3, [pc, #220]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006188:	4b35      	ldr	r3, [pc, #212]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a34      	ldr	r2, [pc, #208]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006194:	f7ff f81e 	bl	80051d4 <HAL_GetTick>
 8006198:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619c:	f7ff f81a 	bl	80051d4 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	; 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e38d      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ae:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ba:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d035      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d02e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d8:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a1a      	ldr	r2, [pc, #104]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061fa:	4a18      	ldr	r2, [pc, #96]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006200:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b01      	cmp	r3, #1
 800620a:	d114      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fe ffe2 	bl	80051d4 <HAL_GetTick>
 8006210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	e00a      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fe ffde 	bl	80051d4 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e34f      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622a:	4b0c      	ldr	r3, [pc, #48]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ee      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006242:	d111      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006252:	400b      	ands	r3, r1
 8006254:	4901      	ldr	r1, [pc, #4]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006256:	4313      	orrs	r3, r2
 8006258:	608b      	str	r3, [r1, #8]
 800625a:	e00b      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800625c:	40023800 	.word	0x40023800
 8006260:	40007000 	.word	0x40007000
 8006264:	0ffffcff 	.word	0x0ffffcff
 8006268:	4bb3      	ldr	r3, [pc, #716]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4ab2      	ldr	r2, [pc, #712]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006272:	6093      	str	r3, [r2, #8]
 8006274:	4bb0      	ldr	r3, [pc, #704]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006280:	49ad      	ldr	r1, [pc, #692]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006282:	4313      	orrs	r3, r2
 8006284:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006292:	4ba9      	ldr	r3, [pc, #676]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	4aa7      	ldr	r2, [pc, #668]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800629a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062a2:	4ba5      	ldr	r3, [pc, #660]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	49a2      	ldr	r1, [pc, #648]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c0:	4b9d      	ldr	r3, [pc, #628]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ce:	499a      	ldr	r1, [pc, #616]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e2:	4b95      	ldr	r3, [pc, #596]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f0:	4991      	ldr	r1, [pc, #580]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006304:	4b8c      	ldr	r3, [pc, #560]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006312:	4989      	ldr	r1, [pc, #548]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006326:	4b84      	ldr	r3, [pc, #528]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006334:	4980      	ldr	r1, [pc, #512]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006348:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f023 0203 	bic.w	r2, r3, #3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	4978      	ldr	r1, [pc, #480]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636a:	4b73      	ldr	r3, [pc, #460]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f023 020c 	bic.w	r2, r3, #12
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006378:	496f      	ldr	r1, [pc, #444]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800638c:	4b6a      	ldr	r3, [pc, #424]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	4967      	ldr	r1, [pc, #412]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063ae:	4b62      	ldr	r3, [pc, #392]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	495e      	ldr	r1, [pc, #376]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d0:	4b59      	ldr	r3, [pc, #356]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	4956      	ldr	r1, [pc, #344]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063f2:	4b51      	ldr	r3, [pc, #324]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	494d      	ldr	r1, [pc, #308]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006414:	4b48      	ldr	r3, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006422:	4945      	ldr	r1, [pc, #276]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006436:	4b40      	ldr	r3, [pc, #256]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	493c      	ldr	r1, [pc, #240]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006458:	4b37      	ldr	r3, [pc, #220]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006466:	4934      	ldr	r1, [pc, #208]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006480:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006488:	492b      	ldr	r1, [pc, #172]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006498:	d101      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800649a:	2301      	movs	r3, #1
 800649c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ba:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c8:	491b      	ldr	r1, [pc, #108]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064dc:	4b16      	ldr	r3, [pc, #88]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ec:	4912      	ldr	r1, [pc, #72]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006510:	4909      	ldr	r1, [pc, #36]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00f      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	4985      	ldr	r1, [pc, #532]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006550:	4b80      	ldr	r3, [pc, #512]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006556:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006560:	497c      	ldr	r1, [pc, #496]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d005      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006576:	f040 80d6 	bne.w	8006726 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800657a:	4b76      	ldr	r3, [pc, #472]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a75      	ldr	r2, [pc, #468]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006586:	f7fe fe25 	bl	80051d4 <HAL_GetTick>
 800658a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800658e:	f7fe fe21 	bl	80051d4 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b64      	cmp	r3, #100	; 0x64
 800659a:	d901      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e194      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065a0:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d021      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11d      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065c0:	4b64      	ldr	r3, [pc, #400]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065ce:	4b61      	ldr	r3, [pc, #388]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	019a      	lsls	r2, r3, #6
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4957      	ldr	r1, [pc, #348]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02e      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006626:	d129      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006628:	4b4a      	ldr	r3, [pc, #296]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006636:	4b47      	ldr	r3, [pc, #284]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	0f1b      	lsrs	r3, r3, #28
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	019a      	lsls	r2, r3, #6
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	071b      	lsls	r3, r3, #28
 800665c:	493d      	ldr	r1, [pc, #244]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006664:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	f023 021f 	bic.w	r2, r3, #31
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	3b01      	subs	r3, #1
 8006674:	4937      	ldr	r1, [pc, #220]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006696:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669c:	0f1b      	lsrs	r3, r3, #28
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	019a      	lsls	r2, r3, #6
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	431a      	orrs	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	061b      	lsls	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	071b      	lsls	r3, r3, #28
 80066bc:	4925      	ldr	r1, [pc, #148]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	019a      	lsls	r2, r3, #6
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	071b      	lsls	r3, r3, #28
 80066ec:	4919      	ldr	r1, [pc, #100]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006700:	f7fe fd68 	bl	80051d4 <HAL_GetTick>
 8006704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006706:	e008      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006708:	f7fe fd64 	bl	80051d4 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b64      	cmp	r3, #100	; 0x64
 8006714:	d901      	bls.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e0d7      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800671a:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b01      	cmp	r3, #1
 800672a:	f040 80cd 	bne.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800673a:	f7fe fd4b 	bl	80051d4 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006740:	e00a      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006742:	f7fe fd47 	bl	80051d4 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b64      	cmp	r3, #100	; 0x64
 800674e:	d903      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0ba      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006764:	d0ed      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02e      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d12a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800678e:	4b51      	ldr	r3, [pc, #324]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800679c:	4b4d      	ldr	r3, [pc, #308]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	019a      	lsls	r2, r3, #6
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	4944      	ldr	r1, [pc, #272]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ca:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	3b01      	subs	r3, #1
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	493d      	ldr	r1, [pc, #244]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d022      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f8:	d11d      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006808:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	431a      	orrs	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	4929      	ldr	r1, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d028      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	019a      	lsls	r2, r3, #6
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	4917      	ldr	r1, [pc, #92]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4911      	ldr	r1, [pc, #68]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0e      	ldr	r2, [pc, #56]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a0:	f7fe fc98 	bl	80051d4 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068a8:	f7fe fc94 	bl	80051d4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e007      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c6:	d1ef      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800

080068d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e01d      	b.n	8006926 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fe faa0 	bl	8004e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f000 fc90 	bl	800723c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <HAL_TIM_Base_Start_IT+0x50>)
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d00b      	beq.n	8006972 <HAL_TIM_Base_Start_IT+0x42>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006960:	d007      	beq.n	8006972 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	00010007 	.word	0x00010007

08006984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e01d      	b.n	80069d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f815 	bl	80069da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f000 fc3a 	bl	800723c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2201      	movs	r2, #1
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 ffb2 	bl	800796c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a17      	ldr	r2, [pc, #92]	; (8006a6c <HAL_TIM_PWM_Start+0x7c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x2c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <HAL_TIM_PWM_Start+0x80>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d101      	bne.n	8006a20 <HAL_TIM_PWM_Start+0x30>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_TIM_PWM_Start+0x32>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_TIM_PWM_Start+0x84>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	d00b      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x70>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400
 8006a74:	00010007 	.word	0x00010007

08006a78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e07b      	b.n	8006b84 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fe f93f 	bl	8004d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b34      	ldr	r3, [pc, #208]	; (8006b8c <HAL_TIM_Encoder_Init+0x114>)
 8006aba:	400b      	ands	r3, r1
 8006abc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f000 fbb7 	bl	800723c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4b27      	ldr	r3, [pc, #156]	; (8006b90 <HAL_TIM_Encoder_Init+0x118>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	4313      	orrs	r3, r2
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_TIM_Encoder_Init+0x11c>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4b20      	ldr	r3, [pc, #128]	; (8006b98 <HAL_TIM_Encoder_Init+0x120>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	4313      	orrs	r3, r2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	011a      	lsls	r2, r3, #4
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	031b      	lsls	r3, r3, #12
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	fffebff8 	.word	0xfffebff8
 8006b90:	fffffcfc 	.word	0xfffffcfc
 8006b94:	fffff3f3 	.word	0xfffff3f3
 8006b98:	ffff0f0f 	.word	0xffff0f0f

08006b9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_TIM_Encoder_Start+0x16>
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d008      	beq.n	8006bc2 <HAL_TIM_Encoder_Start+0x26>
 8006bb0:	e00f      	b.n	8006bd2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fed6 	bl	800796c <TIM_CCxChannelCmd>
      break;
 8006bc0:	e016      	b.n	8006bf0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2104      	movs	r1, #4
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fece 	bl	800796c <TIM_CCxChannelCmd>
      break;
 8006bd0:	e00e      	b.n	8006bf0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fec6 	bl	800796c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2201      	movs	r2, #1
 8006be6:	2104      	movs	r1, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 febf 	bl	800796c <TIM_CCxChannelCmd>
      break;
 8006bee:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d122      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d11b      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0202 	mvn.w	r2, #2
 8006c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fad7 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 8006c52:	e005      	b.n	8006c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fac9 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fada 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d122      	bne.n	8006cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d11b      	bne.n	8006cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0204 	mvn.w	r2, #4
 8006c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 faad 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 8006ca6:	e005      	b.n	8006cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa9f 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fab0 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d122      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d11b      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0208 	mvn.w	r2, #8
 8006cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa83 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 8006cfa:	e005      	b.n	8006d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa75 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa86 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d122      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d11b      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f06f 0210 	mvn.w	r2, #16
 8006d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2208      	movs	r2, #8
 8006d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa59 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 8006d4e:	e005      	b.n	8006d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa4b 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa5c 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10e      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d107      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0201 	mvn.w	r2, #1
 8006d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fa fbcf 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d10e      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d107      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fe65 	bl	8007a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc8:	d10e      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd4:	2b80      	cmp	r3, #128	; 0x80
 8006dd6:	d107      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fe58 	bl	8007a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d10e      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d107      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa0a 	bl	8007228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d10e      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d107      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0220 	mvn.w	r2, #32
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fe18 	bl	8007a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e105      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b14      	cmp	r3, #20
 8006e76:	f200 80f0 	bhi.w	800705a <HAL_TIM_PWM_ConfigChannel+0x212>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	0800705b 	.word	0x0800705b
 8006e88:	0800705b 	.word	0x0800705b
 8006e8c:	0800705b 	.word	0x0800705b
 8006e90:	08006f15 	.word	0x08006f15
 8006e94:	0800705b 	.word	0x0800705b
 8006e98:	0800705b 	.word	0x0800705b
 8006e9c:	0800705b 	.word	0x0800705b
 8006ea0:	08006f57 	.word	0x08006f57
 8006ea4:	0800705b 	.word	0x0800705b
 8006ea8:	0800705b 	.word	0x0800705b
 8006eac:	0800705b 	.word	0x0800705b
 8006eb0:	08006f97 	.word	0x08006f97
 8006eb4:	0800705b 	.word	0x0800705b
 8006eb8:	0800705b 	.word	0x0800705b
 8006ebc:	0800705b 	.word	0x0800705b
 8006ec0:	08006fd9 	.word	0x08006fd9
 8006ec4:	0800705b 	.word	0x0800705b
 8006ec8:	0800705b 	.word	0x0800705b
 8006ecc:	0800705b 	.word	0x0800705b
 8006ed0:	08007019 	.word	0x08007019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fa4e 	bl	800737c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0208 	orr.w	r2, r2, #8
 8006eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0204 	bic.w	r2, r2, #4
 8006efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6999      	ldr	r1, [r3, #24]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	619a      	str	r2, [r3, #24]
      break;
 8006f12:	e0a3      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 faa0 	bl	8007460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6999      	ldr	r1, [r3, #24]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	021a      	lsls	r2, r3, #8
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	619a      	str	r2, [r3, #24]
      break;
 8006f54:	e082      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 faf7 	bl	8007550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0208 	orr.w	r2, r2, #8
 8006f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0204 	bic.w	r2, r2, #4
 8006f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69d9      	ldr	r1, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	61da      	str	r2, [r3, #28]
      break;
 8006f94:	e062      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fb4d 	bl	800763c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69da      	ldr	r2, [r3, #28]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69d9      	ldr	r1, [r3, #28]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	021a      	lsls	r2, r3, #8
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	61da      	str	r2, [r3, #28]
      break;
 8006fd6:	e041      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fb84 	bl	80076ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0208 	orr.w	r2, r2, #8
 8006ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0204 	bic.w	r2, r2, #4
 8007002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007016:	e021      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fbb6 	bl	8007790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007058:	e000      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800705a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop

08007078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_TIM_ConfigClockSource+0x18>
 800708c:	2302      	movs	r3, #2
 800708e:	e0a6      	b.n	80071de <HAL_TIM_ConfigClockSource+0x166>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4b4f      	ldr	r3, [pc, #316]	; (80071e8 <HAL_TIM_ConfigClockSource+0x170>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d067      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0x120>
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	d80b      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x6c>
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d073      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x140>
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d802      	bhi.n	80070da <HAL_TIM_ConfigClockSource+0x62>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d06f      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80070d8:	e078      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d06c      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x140>
 80070de:	2b30      	cmp	r3, #48	; 0x30
 80070e0:	d06a      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80070e2:	e073      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070e4:	2b70      	cmp	r3, #112	; 0x70
 80070e6:	d00d      	beq.n	8007104 <HAL_TIM_ConfigClockSource+0x8c>
 80070e8:	2b70      	cmp	r3, #112	; 0x70
 80070ea:	d804      	bhi.n	80070f6 <HAL_TIM_ConfigClockSource+0x7e>
 80070ec:	2b50      	cmp	r3, #80	; 0x50
 80070ee:	d033      	beq.n	8007158 <HAL_TIM_ConfigClockSource+0xe0>
 80070f0:	2b60      	cmp	r3, #96	; 0x60
 80070f2:	d041      	beq.n	8007178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80070f4:	e06a      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fa:	d066      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x152>
 80070fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007100:	d017      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007102:	e063      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	6899      	ldr	r1, [r3, #8]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f000 fc0a 	bl	800792c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	609a      	str	r2, [r3, #8]
      break;
 8007130:	e04c      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6899      	ldr	r1, [r3, #8]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f000 fbf3 	bl	800792c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007154:	609a      	str	r2, [r3, #8]
      break;
 8007156:	e039      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6859      	ldr	r1, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	461a      	mov	r2, r3
 8007166:	f000 fb67 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2150      	movs	r1, #80	; 0x50
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fbc0 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 8007176:	e029      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	461a      	mov	r2, r3
 8007186:	f000 fb86 	bl	8007896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2160      	movs	r1, #96	; 0x60
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fbb0 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 8007196:	e019      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6859      	ldr	r1, [r3, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	461a      	mov	r2, r3
 80071a6:	f000 fb47 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2140      	movs	r1, #64	; 0x40
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fba0 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 80071b6:	e009      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f000 fb97 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 80071c8:	e000      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80071ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	fffeff88 	.word	0xfffeff88

080071ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a40      	ldr	r2, [pc, #256]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725a:	d00f      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a3d      	ldr	r2, [pc, #244]	; (8007354 <TIM_Base_SetConfig+0x118>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <TIM_Base_SetConfig+0x11c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3b      	ldr	r2, [pc, #236]	; (800735c <TIM_Base_SetConfig+0x120>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <TIM_Base_SetConfig+0x124>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d108      	bne.n	800728e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a2f      	ldr	r2, [pc, #188]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d027      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2c      	ldr	r2, [pc, #176]	; (8007354 <TIM_Base_SetConfig+0x118>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d023      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <TIM_Base_SetConfig+0x11c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <TIM_Base_SetConfig+0x120>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a29      	ldr	r2, [pc, #164]	; (8007360 <TIM_Base_SetConfig+0x124>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <TIM_Base_SetConfig+0x128>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <TIM_Base_SetConfig+0x12c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a26      	ldr	r2, [pc, #152]	; (800736c <TIM_Base_SetConfig+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a25      	ldr	r2, [pc, #148]	; (8007370 <TIM_Base_SetConfig+0x134>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a24      	ldr	r2, [pc, #144]	; (8007374 <TIM_Base_SetConfig+0x138>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a23      	ldr	r2, [pc, #140]	; (8007378 <TIM_Base_SetConfig+0x13c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <TIM_Base_SetConfig+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d103      	bne.n	800733c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	615a      	str	r2, [r3, #20]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40010000 	.word	0x40010000
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40010400 	.word	0x40010400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800
 8007370:	40001800 	.word	0x40001800
 8007374:	40001c00 	.word	0x40001c00
 8007378:	40002000 	.word	0x40002000

0800737c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f023 0201 	bic.w	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <TIM_OC1_SetConfig+0xd8>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 0302 	bic.w	r3, r3, #2
 80073c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a21      	ldr	r2, [pc, #132]	; (8007458 <TIM_OC1_SetConfig+0xdc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC1_SetConfig+0x64>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a20      	ldr	r2, [pc, #128]	; (800745c <TIM_OC1_SetConfig+0xe0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10c      	bne.n	80073fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0308 	bic.w	r3, r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 0304 	bic.w	r3, r3, #4
 80073f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a16      	ldr	r2, [pc, #88]	; (8007458 <TIM_OC1_SetConfig+0xdc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC1_SetConfig+0x8e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <TIM_OC1_SetConfig+0xe0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d111      	bne.n	800742e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	621a      	str	r2, [r3, #32]
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	fffeff8f 	.word	0xfffeff8f
 8007458:	40010000 	.word	0x40010000
 800745c:	40010400 	.word	0x40010400

08007460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0210 	bic.w	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <TIM_OC2_SetConfig+0xe4>)
 800748c:	4013      	ands	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0320 	bic.w	r3, r3, #32
 80074aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a23      	ldr	r2, [pc, #140]	; (8007548 <TIM_OC2_SetConfig+0xe8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_OC2_SetConfig+0x68>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a22      	ldr	r2, [pc, #136]	; (800754c <TIM_OC2_SetConfig+0xec>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d10d      	bne.n	80074e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a18      	ldr	r2, [pc, #96]	; (8007548 <TIM_OC2_SetConfig+0xe8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_OC2_SetConfig+0x94>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <TIM_OC2_SetConfig+0xec>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d113      	bne.n	800751c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	feff8fff 	.word	0xfeff8fff
 8007548:	40010000 	.word	0x40010000
 800754c:	40010400 	.word	0x40010400

08007550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <TIM_OC3_SetConfig+0xe0>)
 800757c:	4013      	ands	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a22      	ldr	r2, [pc, #136]	; (8007634 <TIM_OC3_SetConfig+0xe4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC3_SetConfig+0x66>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a21      	ldr	r2, [pc, #132]	; (8007638 <TIM_OC3_SetConfig+0xe8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10d      	bne.n	80075d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a17      	ldr	r2, [pc, #92]	; (8007634 <TIM_OC3_SetConfig+0xe4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC3_SetConfig+0x92>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <TIM_OC3_SetConfig+0xe8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d113      	bne.n	800760a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	fffeff8f 	.word	0xfffeff8f
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400

0800763c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <TIM_OC4_SetConfig+0xa4>)
 8007668:	4013      	ands	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a13      	ldr	r2, [pc, #76]	; (80076e4 <TIM_OC4_SetConfig+0xa8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC4_SetConfig+0x68>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <TIM_OC4_SetConfig+0xac>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d109      	bne.n	80076b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	feff8fff 	.word	0xfeff8fff
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40010400 	.word	0x40010400

080076ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <TIM_OC5_SetConfig+0x98>)
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800772c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	041b      	lsls	r3, r3, #16
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a12      	ldr	r2, [pc, #72]	; (8007788 <TIM_OC5_SetConfig+0x9c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC5_SetConfig+0x5e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a11      	ldr	r2, [pc, #68]	; (800778c <TIM_OC5_SetConfig+0xa0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d109      	bne.n	800775e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007750:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	621a      	str	r2, [r3, #32]
}
 8007778:	bf00      	nop
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	fffeff8f 	.word	0xfffeff8f
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400

08007790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4b1c      	ldr	r3, [pc, #112]	; (800782c <TIM_OC6_SetConfig+0x9c>)
 80077bc:	4013      	ands	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	051b      	lsls	r3, r3, #20
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a13      	ldr	r2, [pc, #76]	; (8007830 <TIM_OC6_SetConfig+0xa0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC6_SetConfig+0x60>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a12      	ldr	r2, [pc, #72]	; (8007834 <TIM_OC6_SetConfig+0xa4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d109      	bne.n	8007804 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	feff8fff 	.word	0xfeff8fff
 8007830:	40010000 	.word	0x40010000
 8007834:	40010400 	.word	0x40010400

08007838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007896:	b480      	push	{r7}
 8007898:	b087      	sub	sp, #28
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f023 0210 	bic.w	r2, r3, #16
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	f043 0307 	orr.w	r3, r3, #7
 8007918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	609a      	str	r2, [r3, #8]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	021a      	lsls	r2, r3, #8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	431a      	orrs	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4313      	orrs	r3, r2
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	609a      	str	r2, [r3, #8]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	2201      	movs	r2, #1
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	43db      	mvns	r3, r3
 800798e:	401a      	ands	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1a      	ldr	r2, [r3, #32]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 031f 	and.w	r3, r3, #31
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	fa01 f303 	lsl.w	r3, r1, r3
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e045      	b.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d108      	bne.n	8007a16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e040      	b.n	8007b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fd fa38 	bl	8004f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa90 	bl	8008010 <UART_SetConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e022      	b.n	8007b40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fd28 	bl	8008558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b26:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fdaf 	bl	800869c <UART_CheckIdleState>
 8007b3e:	4603      	mov	r3, r0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d17f      	bne.n	8007c60 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_UART_Transmit+0x24>
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e078      	b.n	8007c62 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_UART_Transmit+0x36>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e071      	b.n	8007c62 <HAL_UART_Transmit+0x11a>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2221      	movs	r2, #33	; 0x21
 8007b90:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007b92:	f7fd fb1f 	bl	80051d4 <HAL_GetTick>
 8007b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	d108      	bne.n	8007bc4 <HAL_UART_Transmit+0x7c>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d104      	bne.n	8007bc4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e003      	b.n	8007bcc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bcc:	e02c      	b.n	8007c28 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fd8e 	bl	80086fa <UART_WaitOnFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e03c      	b.n	8007c62 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	3302      	adds	r3, #2
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	e007      	b.n	8007c16 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	3301      	adds	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1cc      	bne.n	8007bce <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2140      	movs	r1, #64	; 0x40
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fd5b 	bl	80086fa <UART_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e009      	b.n	8007c62 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	f040 808a 	bne.w	8007d98 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_UART_Receive_IT+0x24>
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e082      	b.n	8007d9a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Receive_IT+0x36>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e07b      	b.n	8007d9a <HAL_UART_Receive_IT+0x12e>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cce:	d10e      	bne.n	8007cee <HAL_UART_Receive_IT+0x82>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_UART_Receive_IT+0x78>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ce2:	e02d      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cec:	e028      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10d      	bne.n	8007d12 <HAL_UART_Receive_IT+0xa6>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <HAL_UART_Receive_IT+0x9c>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d06:	e01b      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	227f      	movs	r2, #127	; 0x7f
 8007d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d10:	e016      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1a:	d10d      	bne.n	8007d38 <HAL_UART_Receive_IT+0xcc>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_UART_Receive_IT+0xc2>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	227f      	movs	r2, #127	; 0x7f
 8007d28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d2c:	e008      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	223f      	movs	r2, #63	; 0x3f
 8007d32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d36:	e003      	b.n	8007d40 <HAL_UART_Receive_IT+0xd4>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2222      	movs	r2, #34	; 0x22
 8007d4a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d64:	d107      	bne.n	8007d76 <HAL_UART_Receive_IT+0x10a>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <HAL_UART_Receive_IT+0x13c>)
 8007d72:	661a      	str	r2, [r3, #96]	; 0x60
 8007d74:	e002      	b.n	8007d7c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <HAL_UART_Receive_IT+0x140>)
 8007d7a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007d92:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	080088cf 	.word	0x080088cf
 8007dac:	08008829 	.word	0x08008829

08007db0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d113      	bne.n	8007e06 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00e      	beq.n	8007e06 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80eb 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
      }
      return;
 8007e04:	e0e5      	b.n	8007fd2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80c0 	beq.w	8007f8e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80b5 	beq.w	8007f8e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <HAL_UART_IRQHandler+0x9c>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e44:	f043 0201 	orr.w	r2, r3, #1
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00e      	beq.n	8007e74 <HAL_UART_IRQHandler+0xc4>
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2202      	movs	r2, #2
 8007e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6c:	f043 0204 	orr.w	r2, r3, #4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00e      	beq.n	8007e9c <HAL_UART_IRQHandler+0xec>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e94:	f043 0202 	orr.w	r2, r3, #2
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d07f      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00c      	beq.n	8007efa <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efe:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0a:	2b40      	cmp	r3, #64	; 0x40
 8007f0c:	d004      	beq.n	8007f18 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d031      	beq.n	8007f7c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc36 	bl	800878a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d123      	bne.n	8007f74 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d013      	beq.n	8007f6c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f48:	4a26      	ldr	r2, [pc, #152]	; (8007fe4 <HAL_UART_IRQHandler+0x234>)
 8007f4a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fd fa5c 	bl	800540e <HAL_DMA_Abort_IT>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d016      	beq.n	8007f8a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f66:	4610      	mov	r0, r2
 8007f68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6a:	e00e      	b.n	8007f8a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f845 	bl	8007ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f72:	e00a      	b.n	8007f8a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f841 	bl	8007ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7a:	e006      	b.n	8007f8a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f83d 	bl	8007ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007f88:	e025      	b.n	8007fd6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8a:	bf00      	nop
    return;
 8007f8c:	e023      	b.n	8007fd6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00d      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d017      	beq.n	8007fda <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
    }
    return;
 8007fb2:	e012      	b.n	8007fda <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00e      	beq.n	8007fdc <HAL_UART_IRQHandler+0x22c>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d009      	beq.n	8007fdc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc14 	bl	80087f6 <UART_EndTransmit_IT>
    return;
 8007fce:	bf00      	nop
 8007fd0:	e004      	b.n	8007fdc <HAL_UART_IRQHandler+0x22c>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e002      	b.n	8007fdc <HAL_UART_IRQHandler+0x22c>
    return;
 8007fd6:	bf00      	nop
 8007fd8:	e000      	b.n	8007fdc <HAL_UART_IRQHandler+0x22c>
    return;
 8007fda:	bf00      	nop
  }

}
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080087cb 	.word	0x080087cb

08007fe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	4bb1      	ldr	r3, [pc, #708]	; (8008304 <UART_SetConfig+0x2f4>)
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	6939      	ldr	r1, [r7, #16]
 8008048:	430b      	orrs	r3, r1
 800804a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a9f      	ldr	r2, [pc, #636]	; (8008308 <UART_SetConfig+0x2f8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d121      	bne.n	80080d4 <UART_SetConfig+0xc4>
 8008090:	4b9e      	ldr	r3, [pc, #632]	; (800830c <UART_SetConfig+0x2fc>)
 8008092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d816      	bhi.n	80080cc <UART_SetConfig+0xbc>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x94>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080c1 	.word	0x080080c1
 80080ac:	080080bb 	.word	0x080080bb
 80080b0:	080080c7 	.word	0x080080c7
 80080b4:	2301      	movs	r3, #1
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e151      	b.n	800835e <UART_SetConfig+0x34e>
 80080ba:	2302      	movs	r3, #2
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e14e      	b.n	800835e <UART_SetConfig+0x34e>
 80080c0:	2304      	movs	r3, #4
 80080c2:	77fb      	strb	r3, [r7, #31]
 80080c4:	e14b      	b.n	800835e <UART_SetConfig+0x34e>
 80080c6:	2308      	movs	r3, #8
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e148      	b.n	800835e <UART_SetConfig+0x34e>
 80080cc:	2310      	movs	r3, #16
 80080ce:	77fb      	strb	r3, [r7, #31]
 80080d0:	bf00      	nop
 80080d2:	e144      	b.n	800835e <UART_SetConfig+0x34e>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a8d      	ldr	r2, [pc, #564]	; (8008310 <UART_SetConfig+0x300>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d134      	bne.n	8008148 <UART_SetConfig+0x138>
 80080de:	4b8b      	ldr	r3, [pc, #556]	; (800830c <UART_SetConfig+0x2fc>)
 80080e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e4:	f003 030c 	and.w	r3, r3, #12
 80080e8:	2b0c      	cmp	r3, #12
 80080ea:	d829      	bhi.n	8008140 <UART_SetConfig+0x130>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0xe4>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008129 	.word	0x08008129
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008141 	.word	0x08008141
 8008100:	08008141 	.word	0x08008141
 8008104:	08008135 	.word	0x08008135
 8008108:	08008141 	.word	0x08008141
 800810c:	08008141 	.word	0x08008141
 8008110:	08008141 	.word	0x08008141
 8008114:	0800812f 	.word	0x0800812f
 8008118:	08008141 	.word	0x08008141
 800811c:	08008141 	.word	0x08008141
 8008120:	08008141 	.word	0x08008141
 8008124:	0800813b 	.word	0x0800813b
 8008128:	2300      	movs	r3, #0
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e117      	b.n	800835e <UART_SetConfig+0x34e>
 800812e:	2302      	movs	r3, #2
 8008130:	77fb      	strb	r3, [r7, #31]
 8008132:	e114      	b.n	800835e <UART_SetConfig+0x34e>
 8008134:	2304      	movs	r3, #4
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e111      	b.n	800835e <UART_SetConfig+0x34e>
 800813a:	2308      	movs	r3, #8
 800813c:	77fb      	strb	r3, [r7, #31]
 800813e:	e10e      	b.n	800835e <UART_SetConfig+0x34e>
 8008140:	2310      	movs	r3, #16
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	bf00      	nop
 8008146:	e10a      	b.n	800835e <UART_SetConfig+0x34e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a71      	ldr	r2, [pc, #452]	; (8008314 <UART_SetConfig+0x304>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d120      	bne.n	8008194 <UART_SetConfig+0x184>
 8008152:	4b6e      	ldr	r3, [pc, #440]	; (800830c <UART_SetConfig+0x2fc>)
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008158:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800815c:	2b10      	cmp	r3, #16
 800815e:	d00f      	beq.n	8008180 <UART_SetConfig+0x170>
 8008160:	2b10      	cmp	r3, #16
 8008162:	d802      	bhi.n	800816a <UART_SetConfig+0x15a>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <UART_SetConfig+0x164>
 8008168:	e010      	b.n	800818c <UART_SetConfig+0x17c>
 800816a:	2b20      	cmp	r3, #32
 800816c:	d005      	beq.n	800817a <UART_SetConfig+0x16a>
 800816e:	2b30      	cmp	r3, #48	; 0x30
 8008170:	d009      	beq.n	8008186 <UART_SetConfig+0x176>
 8008172:	e00b      	b.n	800818c <UART_SetConfig+0x17c>
 8008174:	2300      	movs	r3, #0
 8008176:	77fb      	strb	r3, [r7, #31]
 8008178:	e0f1      	b.n	800835e <UART_SetConfig+0x34e>
 800817a:	2302      	movs	r3, #2
 800817c:	77fb      	strb	r3, [r7, #31]
 800817e:	e0ee      	b.n	800835e <UART_SetConfig+0x34e>
 8008180:	2304      	movs	r3, #4
 8008182:	77fb      	strb	r3, [r7, #31]
 8008184:	e0eb      	b.n	800835e <UART_SetConfig+0x34e>
 8008186:	2308      	movs	r3, #8
 8008188:	77fb      	strb	r3, [r7, #31]
 800818a:	e0e8      	b.n	800835e <UART_SetConfig+0x34e>
 800818c:	2310      	movs	r3, #16
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	bf00      	nop
 8008192:	e0e4      	b.n	800835e <UART_SetConfig+0x34e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a5f      	ldr	r2, [pc, #380]	; (8008318 <UART_SetConfig+0x308>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d120      	bne.n	80081e0 <UART_SetConfig+0x1d0>
 800819e:	4b5b      	ldr	r3, [pc, #364]	; (800830c <UART_SetConfig+0x2fc>)
 80081a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d00f      	beq.n	80081cc <UART_SetConfig+0x1bc>
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d802      	bhi.n	80081b6 <UART_SetConfig+0x1a6>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <UART_SetConfig+0x1b0>
 80081b4:	e010      	b.n	80081d8 <UART_SetConfig+0x1c8>
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d005      	beq.n	80081c6 <UART_SetConfig+0x1b6>
 80081ba:	2bc0      	cmp	r3, #192	; 0xc0
 80081bc:	d009      	beq.n	80081d2 <UART_SetConfig+0x1c2>
 80081be:	e00b      	b.n	80081d8 <UART_SetConfig+0x1c8>
 80081c0:	2300      	movs	r3, #0
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e0cb      	b.n	800835e <UART_SetConfig+0x34e>
 80081c6:	2302      	movs	r3, #2
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e0c8      	b.n	800835e <UART_SetConfig+0x34e>
 80081cc:	2304      	movs	r3, #4
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	e0c5      	b.n	800835e <UART_SetConfig+0x34e>
 80081d2:	2308      	movs	r3, #8
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e0c2      	b.n	800835e <UART_SetConfig+0x34e>
 80081d8:	2310      	movs	r3, #16
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	bf00      	nop
 80081de:	e0be      	b.n	800835e <UART_SetConfig+0x34e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a4d      	ldr	r2, [pc, #308]	; (800831c <UART_SetConfig+0x30c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d124      	bne.n	8008234 <UART_SetConfig+0x224>
 80081ea:	4b48      	ldr	r3, [pc, #288]	; (800830c <UART_SetConfig+0x2fc>)
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f8:	d012      	beq.n	8008220 <UART_SetConfig+0x210>
 80081fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fe:	d802      	bhi.n	8008206 <UART_SetConfig+0x1f6>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d007      	beq.n	8008214 <UART_SetConfig+0x204>
 8008204:	e012      	b.n	800822c <UART_SetConfig+0x21c>
 8008206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820a:	d006      	beq.n	800821a <UART_SetConfig+0x20a>
 800820c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008210:	d009      	beq.n	8008226 <UART_SetConfig+0x216>
 8008212:	e00b      	b.n	800822c <UART_SetConfig+0x21c>
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e0a1      	b.n	800835e <UART_SetConfig+0x34e>
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
 800821e:	e09e      	b.n	800835e <UART_SetConfig+0x34e>
 8008220:	2304      	movs	r3, #4
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e09b      	b.n	800835e <UART_SetConfig+0x34e>
 8008226:	2308      	movs	r3, #8
 8008228:	77fb      	strb	r3, [r7, #31]
 800822a:	e098      	b.n	800835e <UART_SetConfig+0x34e>
 800822c:	2310      	movs	r3, #16
 800822e:	77fb      	strb	r3, [r7, #31]
 8008230:	bf00      	nop
 8008232:	e094      	b.n	800835e <UART_SetConfig+0x34e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a39      	ldr	r2, [pc, #228]	; (8008320 <UART_SetConfig+0x310>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d124      	bne.n	8008288 <UART_SetConfig+0x278>
 800823e:	4b33      	ldr	r3, [pc, #204]	; (800830c <UART_SetConfig+0x2fc>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824c:	d012      	beq.n	8008274 <UART_SetConfig+0x264>
 800824e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008252:	d802      	bhi.n	800825a <UART_SetConfig+0x24a>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <UART_SetConfig+0x258>
 8008258:	e012      	b.n	8008280 <UART_SetConfig+0x270>
 800825a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800825e:	d006      	beq.n	800826e <UART_SetConfig+0x25e>
 8008260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008264:	d009      	beq.n	800827a <UART_SetConfig+0x26a>
 8008266:	e00b      	b.n	8008280 <UART_SetConfig+0x270>
 8008268:	2301      	movs	r3, #1
 800826a:	77fb      	strb	r3, [r7, #31]
 800826c:	e077      	b.n	800835e <UART_SetConfig+0x34e>
 800826e:	2302      	movs	r3, #2
 8008270:	77fb      	strb	r3, [r7, #31]
 8008272:	e074      	b.n	800835e <UART_SetConfig+0x34e>
 8008274:	2304      	movs	r3, #4
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	e071      	b.n	800835e <UART_SetConfig+0x34e>
 800827a:	2308      	movs	r3, #8
 800827c:	77fb      	strb	r3, [r7, #31]
 800827e:	e06e      	b.n	800835e <UART_SetConfig+0x34e>
 8008280:	2310      	movs	r3, #16
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	bf00      	nop
 8008286:	e06a      	b.n	800835e <UART_SetConfig+0x34e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a25      	ldr	r2, [pc, #148]	; (8008324 <UART_SetConfig+0x314>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d124      	bne.n	80082dc <UART_SetConfig+0x2cc>
 8008292:	4b1e      	ldr	r3, [pc, #120]	; (800830c <UART_SetConfig+0x2fc>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008298:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a0:	d012      	beq.n	80082c8 <UART_SetConfig+0x2b8>
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a6:	d802      	bhi.n	80082ae <UART_SetConfig+0x29e>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <UART_SetConfig+0x2ac>
 80082ac:	e012      	b.n	80082d4 <UART_SetConfig+0x2c4>
 80082ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b2:	d006      	beq.n	80082c2 <UART_SetConfig+0x2b2>
 80082b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082b8:	d009      	beq.n	80082ce <UART_SetConfig+0x2be>
 80082ba:	e00b      	b.n	80082d4 <UART_SetConfig+0x2c4>
 80082bc:	2300      	movs	r3, #0
 80082be:	77fb      	strb	r3, [r7, #31]
 80082c0:	e04d      	b.n	800835e <UART_SetConfig+0x34e>
 80082c2:	2302      	movs	r3, #2
 80082c4:	77fb      	strb	r3, [r7, #31]
 80082c6:	e04a      	b.n	800835e <UART_SetConfig+0x34e>
 80082c8:	2304      	movs	r3, #4
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e047      	b.n	800835e <UART_SetConfig+0x34e>
 80082ce:	2308      	movs	r3, #8
 80082d0:	77fb      	strb	r3, [r7, #31]
 80082d2:	e044      	b.n	800835e <UART_SetConfig+0x34e>
 80082d4:	2310      	movs	r3, #16
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	bf00      	nop
 80082da:	e040      	b.n	800835e <UART_SetConfig+0x34e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <UART_SetConfig+0x318>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d139      	bne.n	800835a <UART_SetConfig+0x34a>
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <UART_SetConfig+0x2fc>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f4:	d027      	beq.n	8008346 <UART_SetConfig+0x336>
 80082f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082fa:	d817      	bhi.n	800832c <UART_SetConfig+0x31c>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01c      	beq.n	800833a <UART_SetConfig+0x32a>
 8008300:	e027      	b.n	8008352 <UART_SetConfig+0x342>
 8008302:	bf00      	nop
 8008304:	efff69f3 	.word	0xefff69f3
 8008308:	40011000 	.word	0x40011000
 800830c:	40023800 	.word	0x40023800
 8008310:	40004400 	.word	0x40004400
 8008314:	40004800 	.word	0x40004800
 8008318:	40004c00 	.word	0x40004c00
 800831c:	40005000 	.word	0x40005000
 8008320:	40011400 	.word	0x40011400
 8008324:	40007800 	.word	0x40007800
 8008328:	40007c00 	.word	0x40007c00
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008330:	d006      	beq.n	8008340 <UART_SetConfig+0x330>
 8008332:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008336:	d009      	beq.n	800834c <UART_SetConfig+0x33c>
 8008338:	e00b      	b.n	8008352 <UART_SetConfig+0x342>
 800833a:	2300      	movs	r3, #0
 800833c:	77fb      	strb	r3, [r7, #31]
 800833e:	e00e      	b.n	800835e <UART_SetConfig+0x34e>
 8008340:	2302      	movs	r3, #2
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e00b      	b.n	800835e <UART_SetConfig+0x34e>
 8008346:	2304      	movs	r3, #4
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e008      	b.n	800835e <UART_SetConfig+0x34e>
 800834c:	2308      	movs	r3, #8
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e005      	b.n	800835e <UART_SetConfig+0x34e>
 8008352:	2310      	movs	r3, #16
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	bf00      	nop
 8008358:	e001      	b.n	800835e <UART_SetConfig+0x34e>
 800835a:	2310      	movs	r3, #16
 800835c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008366:	d17c      	bne.n	8008462 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b08      	cmp	r3, #8
 800836c:	d859      	bhi.n	8008422 <UART_SetConfig+0x412>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <UART_SetConfig+0x364>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	08008399 	.word	0x08008399
 8008378:	080083b7 	.word	0x080083b7
 800837c:	080083d5 	.word	0x080083d5
 8008380:	08008423 	.word	0x08008423
 8008384:	080083ed 	.word	0x080083ed
 8008388:	08008423 	.word	0x08008423
 800838c:	08008423 	.word	0x08008423
 8008390:	08008423 	.word	0x08008423
 8008394:	0800840b 	.word	0x0800840b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008398:	f7fd fe50 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 800839c:	4603      	mov	r3, r0
 800839e:	005a      	lsls	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	085b      	lsrs	r3, r3, #1
 80083a6:	441a      	add	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	61bb      	str	r3, [r7, #24]
        break;
 80083b4:	e038      	b.n	8008428 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80083b6:	f7fd fe55 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 80083ba:	4603      	mov	r3, r0
 80083bc:	005a      	lsls	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	085b      	lsrs	r3, r3, #1
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	61bb      	str	r3, [r7, #24]
        break;
 80083d2:	e029      	b.n	8008428 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	085a      	lsrs	r2, r3, #1
 80083da:	4b5d      	ldr	r3, [pc, #372]	; (8008550 <UART_SetConfig+0x540>)
 80083dc:	4413      	add	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6852      	ldr	r2, [r2, #4]
 80083e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	61bb      	str	r3, [r7, #24]
        break;
 80083ea:	e01d      	b.n	8008428 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80083ec:	f7fd fd68 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 80083f0:	4603      	mov	r3, r0
 80083f2:	005a      	lsls	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	b29b      	uxth	r3, r3
 8008406:	61bb      	str	r3, [r7, #24]
        break;
 8008408:	e00e      	b.n	8008428 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	fbb2 f3f3 	udiv	r3, r2, r3
 800841c:	b29b      	uxth	r3, r3
 800841e:	61bb      	str	r3, [r7, #24]
        break;
 8008420:	e002      	b.n	8008428 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
        break;
 8008426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b0f      	cmp	r3, #15
 800842c:	d916      	bls.n	800845c <UART_SetConfig+0x44c>
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008434:	d212      	bcs.n	800845c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f023 030f 	bic.w	r3, r3, #15
 800843e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	b29b      	uxth	r3, r3
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	b29a      	uxth	r2, r3
 800844c:	89fb      	ldrh	r3, [r7, #14]
 800844e:	4313      	orrs	r3, r2
 8008450:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	89fa      	ldrh	r2, [r7, #14]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e06e      	b.n	800853a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]
 8008460:	e06b      	b.n	800853a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008462:	7ffb      	ldrb	r3, [r7, #31]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d857      	bhi.n	8008518 <UART_SetConfig+0x508>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x460>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008495 	.word	0x08008495
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008519 	.word	0x08008519
 8008480:	080084e5 	.word	0x080084e5
 8008484:	08008519 	.word	0x08008519
 8008488:	08008519 	.word	0x08008519
 800848c:	08008519 	.word	0x08008519
 8008490:	08008501 	.word	0x08008501
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008494:	f7fd fdd2 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8008498:	4602      	mov	r2, r0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	441a      	add	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	61bb      	str	r3, [r7, #24]
        break;
 80084ae:	e036      	b.n	800851e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80084b0:	f7fd fdd8 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 80084b4:	4602      	mov	r2, r0
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	441a      	add	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	61bb      	str	r3, [r7, #24]
        break;
 80084ca:	e028      	b.n	800851e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	085a      	lsrs	r2, r3, #1
 80084d2:	4b20      	ldr	r3, [pc, #128]	; (8008554 <UART_SetConfig+0x544>)
 80084d4:	4413      	add	r3, r2
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6852      	ldr	r2, [r2, #4]
 80084da:	fbb3 f3f2 	udiv	r3, r3, r2
 80084de:	b29b      	uxth	r3, r3
 80084e0:	61bb      	str	r3, [r7, #24]
        break;
 80084e2:	e01c      	b.n	800851e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80084e4:	f7fd fcec 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 80084e8:	4602      	mov	r2, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	085b      	lsrs	r3, r3, #1
 80084f0:	441a      	add	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	61bb      	str	r3, [r7, #24]
        break;
 80084fe:	e00e      	b.n	800851e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008512:	b29b      	uxth	r3, r3
 8008514:	61bb      	str	r3, [r7, #24]
        break;
 8008516:	e002      	b.n	800851e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
        break;
 800851c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b0f      	cmp	r3, #15
 8008522:	d908      	bls.n	8008536 <UART_SetConfig+0x526>
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852a:	d204      	bcs.n	8008536 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	60da      	str	r2, [r3, #12]
 8008534:	e001      	b.n	800853a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	01e84800 	.word	0x01e84800
 8008554:	00f42400 	.word	0x00f42400

08008558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	f003 0310 	and.w	r3, r3, #16
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01a      	beq.n	800866e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008656:	d10a      	bne.n	800866e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	605a      	str	r2, [r3, #4]
  }
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80086aa:	f7fc fd93 	bl	80051d4 <HAL_GetTick>
 80086ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d10e      	bne.n	80086dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f814 	bl	80086fa <UART_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e00a      	b.n	80086f2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800870a:	e02a      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008712:	d026      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008714:	f7fc fd5e 	bl	80051d4 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	429a      	cmp	r2, r3
 8008722:	d302      	bcc.n	800872a <UART_WaitOnFlagUntilTimeout+0x30>
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d11b      	bne.n	8008762 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008738:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0201 	bic.w	r2, r2, #1
 8008748:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2220      	movs	r2, #32
 800874e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e00f      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4013      	ands	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	bf0c      	ite	eq
 8008772:	2301      	moveq	r3, #1
 8008774:	2300      	movne	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	429a      	cmp	r2, r3
 800877e:	d0c5      	beq.n	800870c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0201 	bic.w	r2, r2, #1
 80087b0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fc07 	bl	8007ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800880c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fbe4 	bl	8007fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008836:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800883c:	2b22      	cmp	r3, #34	; 0x22
 800883e:	d13a      	bne.n	80088b6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008848:	89bb      	ldrh	r3, [r7, #12]
 800884a:	b2d9      	uxtb	r1, r3
 800884c:	89fb      	ldrh	r3, [r7, #14]
 800884e:	b2da      	uxtb	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008854:	400a      	ands	r2, r1
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d121      	bne.n	80088c6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008890:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0201 	bic.w	r2, r2, #1
 80088a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7f8 ff00 	bl	80016b4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b4:	e007      	b.n	80088c6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0208 	orr.w	r2, r2, #8
 80088c4:	619a      	str	r2, [r3, #24]
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e2:	2b22      	cmp	r3, #34	; 0x22
 80088e4:	d13a      	bne.n	800895c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80088f4:	89ba      	ldrh	r2, [r7, #12]
 80088f6:	89fb      	ldrh	r3, [r7, #14]
 80088f8:	4013      	ands	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008904:	1c9a      	adds	r2, r3, #2
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008910:	b29b      	uxth	r3, r3
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d121      	bne.n	800896c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008936:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0201 	bic.w	r2, r2, #1
 8008946:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7f8 fead 	bl	80016b4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800895a:	e007      	b.n	800896c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0208 	orr.w	r2, r2, #8
 800896a:	619a      	str	r2, [r3, #24]
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0d      	ldr	r6, [pc, #52]	; (80089ac <__libc_init_array+0x38>)
 8008978:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897a:	1ba4      	subs	r4, r4, r6
 800897c:	10a4      	asrs	r4, r4, #2
 800897e:	2500      	movs	r5, #0
 8008980:	42a5      	cmp	r5, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	4e0b      	ldr	r6, [pc, #44]	; (80089b4 <__libc_init_array+0x40>)
 8008986:	4c0c      	ldr	r4, [pc, #48]	; (80089b8 <__libc_init_array+0x44>)
 8008988:	f000 f820 	bl	80089cc <_init>
 800898c:	1ba4      	subs	r4, r4, r6
 800898e:	10a4      	asrs	r4, r4, #2
 8008990:	2500      	movs	r5, #0
 8008992:	42a5      	cmp	r5, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800899c:	4798      	blx	r3
 800899e:	3501      	adds	r5, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089a6:	4798      	blx	r3
 80089a8:	3501      	adds	r5, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	08008cec 	.word	0x08008cec
 80089b0:	08008cec 	.word	0x08008cec
 80089b4:	08008cec 	.word	0x08008cec
 80089b8:	08008cf4 	.word	0x08008cf4

080089bc <memset>:
 80089bc:	4402      	add	r2, r0
 80089be:	4603      	mov	r3, r0
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d100      	bne.n	80089c6 <memset+0xa>
 80089c4:	4770      	bx	lr
 80089c6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ca:	e7f9      	b.n	80089c0 <memset+0x4>

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
