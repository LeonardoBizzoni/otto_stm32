
rosserial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000074  080060ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080060ac  00020228  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bb3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000274a  00000000  00000000  00032c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b2b6  00000000  00000000  000370b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b13d  00000000  00000000  00062366  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa8c5  00000000  00000000  0006d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004344  00000000  00000000  00167de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	08005dc0 	.word	0x08005dc0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	08005dc0 	.word	0x08005dc0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f94b 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f005 f8b8 	bl	80056cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f965 	bl	8000852 <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a0:	f000 f92d 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000220 	.word	0x20000220

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000220 	.word	0x20000220

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <__NVIC_SetPriorityGrouping+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	4313      	orrs	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x40>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	05fa0000 	.word	0x05fa0000

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff29 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff3e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff8e 	bl	800073c <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff31 	bl	80006ac <__NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffa2 	bl	80007a4 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff feb8 	bl	80005ec <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e099      	b.n	80009bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a8:	e00f      	b.n	80008ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008aa:	f7ff fe9f 	bl	80005ec <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d908      	bls.n	80008ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2220      	movs	r2, #32
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e078      	b.n	80009bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e8      	bne.n	80008aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_DMA_Init+0x158>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	2b04      	cmp	r3, #4
 8000922:	d107      	bne.n	8000934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4313      	orrs	r3, r2
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa99 	bl	8000ea8 <DMA_CheckFifoParam>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800098a:	2301      	movs	r3, #1
 800098c:	e016      	b.n	80009bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa50 	bl	8000e3c <DMA_CalcBaseAndBitshift>
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	e010803f 	.word	0xe010803f

080009c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d101      	bne.n	80009ee <HAL_DMA_Start_IT+0x26>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e048      	b.n	8000a80 <HAL_DMA_Start_IT+0xb8>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d137      	bne.n	8000a72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f9e2 	bl	8000de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a20:	223f      	movs	r2, #63	; 0x3f
 8000a22:	409a      	lsls	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0216 	orr.w	r2, r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a46:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0201 	orr.w	r2, r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e005      	b.n	8000a7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d004      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00c      	b.n	8000ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x258>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_DMA_IRQHandler+0x25c>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0a9b      	lsrs	r3, r3, #10
 8000ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	2208      	movs	r2, #8
 8000af8:	409a      	lsls	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01a      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	2208      	movs	r2, #8
 8000b26:	409a      	lsls	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b66:	f043 0202 	orr.w	r2, r3, #2
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b72:	2204      	movs	r2, #4
 8000b74:	409a      	lsls	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	2204      	movs	r2, #4
 8000b92:	409a      	lsls	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9c:	f043 0204 	orr.w	r2, r3, #4
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	2210      	movs	r2, #16
 8000baa:	409a      	lsls	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d043      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d018      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d024      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	4798      	blx	r3
 8000bfa:	e01f      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
 8000c0c:	e016      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0208 	bic.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	2220      	movs	r2, #32
 8000c42:	409a      	lsls	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 808e 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8086 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c62:	2220      	movs	r2, #32
 8000c64:	409a      	lsls	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d136      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0216 	bic.w	r2, r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_DMA_IRQHandler+0x1da>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0208 	bic.w	r2, r2, #8
 8000cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cba:	223f      	movs	r2, #63	; 0x3f
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d07d      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	4798      	blx	r3
        }
        return;
 8000ce2:	e078      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01c      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d108      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d030      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
 8000d10:	e02b      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d027      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
 8000d22:	e022      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
 8000d24:	20000008 	.word	0x20000008
 8000d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0210 	bic.w	r2, r2, #16
 8000d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d032      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d307      	bcc.n	8000db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f2      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x2ca>
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4798      	blx	r3
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd6:	bf00      	nop
    }
  }
}
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop

08000de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b40      	cmp	r3, #64	; 0x40
 8000e0c:	d108      	bne.n	8000e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1e:	e007      	b.n	8000e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b10      	subs	r3, #16
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <DMA_CalcBaseAndBitshift+0x60>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d908      	bls.n	8000e7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	1d1a      	adds	r2, r3, #4
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	659a      	str	r2, [r3, #88]	; 0x58
 8000e7a:	e006      	b.n	8000e8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	08005f34 	.word	0x08005f34
 8000ea4:	fffffc00 	.word	0xfffffc00

08000ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11f      	bne.n	8000f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d855      	bhi.n	8000f74 <DMA_CheckFifoParam+0xcc>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DMA_CheckFifoParam+0x28>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ef3 	.word	0x08000ef3
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000f75 	.word	0x08000f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d045      	beq.n	8000f78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ef0:	e042      	b.n	8000f78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000efa:	d13f      	bne.n	8000f7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f00:	e03c      	b.n	8000f7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0a:	d121      	bne.n	8000f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d836      	bhi.n	8000f80 <DMA_CheckFifoParam+0xd8>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <DMA_CheckFifoParam+0x70>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f2f 	.word	0x08000f2f
 8000f20:	08000f29 	.word	0x08000f29
 8000f24:	08000f41 	.word	0x08000f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2c:	e02f      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3e:	e021      	b.n	8000f84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f48:	d11e      	bne.n	8000f88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4e:	e01b      	b.n	8000f88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d902      	bls.n	8000f5c <DMA_CheckFifoParam+0xb4>
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d003      	beq.n	8000f62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f5a:	e018      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f60:	e015      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00e      	beq.n	8000f8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
      break;
 8000f72:	e00b      	b.n	8000f8c <DMA_CheckFifoParam+0xe4>
      break;
 8000f74:	bf00      	nop
 8000f76:	e00a      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e008      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e006      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;   
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f8c:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e175      	b.n	80012a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8164 	bne.w	80012a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x4e>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	69b9      	ldr	r1, [r7, #24]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d00b      	beq.n	8001086 <HAL_GPIO_Init+0xea>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	2b11      	cmp	r3, #17
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b12      	cmp	r3, #18
 8001084:	d130      	bne.n	80010e8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80be 	beq.w	80012a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <HAL_GPIO_Init+0x320>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800113e:	4a60      	ldr	r2, [pc, #384]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_GPIO_Init+0x328>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d037      	beq.n	80011da <HAL_GPIO_Init+0x23e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d031      	beq.n	80011d6 <HAL_GPIO_Init+0x23a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x236>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x232>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x338>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x33c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x22a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x340>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x348>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x34c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x21a>
 80011b2:	2309      	movs	r3, #9
 80011b4:	e012      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011b6:	230a      	movs	r3, #10
 80011b8:	e010      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ec:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_GPIO_Init+0x350>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_GPIO_Init+0x350>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_GPIO_Init+0x350>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_GPIO_Init+0x350>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_GPIO_Init+0x350>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae86 	bls.w	8000fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	3724      	adds	r7, #36	; 0x24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40022000 	.word	0x40022000
 80012e8:	40022400 	.word	0x40022400
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e25e      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b96      	ldr	r3, [pc, #600]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001320:	4b93      	ldr	r3, [pc, #588]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
 800132c:	4b90      	ldr	r3, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x130>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e238      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x7a>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x9c>
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6b      	ldr	r2, [pc, #428]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff f90c 	bl	80005ec <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff f908 	bl	80005ec <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1ec      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff f8f8 	bl	80005ec <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff f8f4 	bl	80005ec <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1d8      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x110>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d069      	beq.n	8001502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1ac      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	493d      	ldr	r1, [pc, #244]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e040      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff f8aa 	bl	80005ec <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff f8a6 	bl	80005ec <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e18a      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4929      	ldr	r1, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff f886 	bl	80005ec <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff f882 	bl	80005ec <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e166      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d038      	beq.n	8001580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff f863 	bl	80005ec <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff f85f 	bl	80005ec <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e143      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x23a>
 8001548:	e01a      	b.n	8001580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff f849 	bl	80005ec <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff f845 	bl	80005ec <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d903      	bls.n	8001574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e129      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
 8001570:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b95      	ldr	r3, [pc, #596]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a4 	beq.w	80016d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a8b      	ldr	r2, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <HAL_RCC_OscConfig+0x4e0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <HAL_RCC_OscConfig+0x4e0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a82      	ldr	r2, [pc, #520]	; (80017d0 <HAL_RCC_OscConfig+0x4e0>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff f80d 	bl	80005ec <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff f809 	bl	80005ec <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0ed      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <HAL_RCC_OscConfig+0x4e0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x31a>
 80015fc:	4b73      	ldr	r3, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a72      	ldr	r2, [pc, #456]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e02d      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x33c>
 8001612:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a6d      	ldr	r2, [pc, #436]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x35e>
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a64      	ldr	r2, [pc, #400]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a61      	ldr	r2, [pc, #388]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7fe ffbd 	bl	80005ec <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7fe ffb9 	bl	80005ec <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e09b      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x386>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7fe ffa7 	bl	80005ec <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7fe ffa3 	bl	80005ec <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e085      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d071      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d069      	beq.n	80017be <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d14b      	bne.n	800178a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a35      	ldr	r2, [pc, #212]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80016f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7fe ff75 	bl	80005ec <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7fe ff71 	bl	80005ec <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e055      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	019b      	lsls	r3, r3, #6
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	071b      	lsls	r3, r3, #28
 8001750:	491e      	ldr	r1, [pc, #120]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800175c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7fe ff43 	bl	80005ec <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7fe ff3f 	bl	80005ec <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e023      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x47a>
 8001788:	e01b      	b.n	80017c2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 8001790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7fe ff29 	bl	80005ec <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7fe ff25 	bl	80005ec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e009      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x4dc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x4ae>
 80017bc:	e001      	b.n	80017c2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0ce      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b69      	ldr	r3, [pc, #420]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d910      	bls.n	800181c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 020f 	bic.w	r2, r3, #15
 8001802:	4964      	ldr	r1, [pc, #400]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b62      	ldr	r3, [pc, #392]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b6      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b52      	ldr	r3, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a51      	ldr	r2, [pc, #324]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494c      	ldr	r1, [pc, #304]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d040      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b46      	ldr	r3, [pc, #280]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07d      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e071      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e069      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4935      	ldr	r1, [pc, #212]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7fe fe90 	bl	80005ec <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7fe fe8c 	bl	80005ec <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e051      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d210      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 020f 	bic.w	r2, r3, #15
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e030      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4915      	ldr	r1, [pc, #84]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f81d 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 800196a:	4601      	mov	r1, r0
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	fa21 f303 	lsr.w	r3, r1, r3
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f7fe fdee 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	08006010 	.word	0x08006010
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ba:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x32>
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d008      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x38>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 808d 	bne.w	8001aea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019d2:	60bb      	str	r3, [r7, #8]
       break;
 80019d4:	e08c      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x160>)
 80019d8:	60bb      	str	r3, [r7, #8]
      break;
 80019da:	e089      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019e6:	4b45      	ldr	r3, [pc, #276]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d023      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	ea03 0501 	and.w	r5, r3, r1
 8001a08:	ea04 0602 	and.w	r6, r4, r2
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a0e:	fb02 f106 	mul.w	r1, r2, r6
 8001a12:	2200      	movs	r2, #0
 8001a14:	fb02 f205 	mul.w	r2, r2, r5
 8001a18:	440a      	add	r2, r1
 8001a1a:	493a      	ldr	r1, [pc, #232]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a1c:	fba5 0101 	umull	r0, r1, r5, r1
 8001a20:	1853      	adds	r3, r2, r1
 8001a22:	4619      	mov	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	f7fe fc0b 	bl	8000248 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e049      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	ea03 0501 	and.w	r5, r3, r1
 8001a50:	ea04 0602 	and.w	r6, r4, r2
 8001a54:	4629      	mov	r1, r5
 8001a56:	4632      	mov	r2, r6
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	0154      	lsls	r4, r2, #5
 8001a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a66:	014b      	lsls	r3, r1, #5
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	1b49      	subs	r1, r1, r5
 8001a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f04f 0400 	mov.w	r4, #0
 8001a7a:	0194      	lsls	r4, r2, #6
 8001a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a80:	018b      	lsls	r3, r1, #6
 8001a82:	1a5b      	subs	r3, r3, r1
 8001a84:	eb64 0402 	sbc.w	r4, r4, r2
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	00e2      	lsls	r2, r4, #3
 8001a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a96:	00d9      	lsls	r1, r3, #3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	195b      	adds	r3, r3, r5
 8001a9e:	eb44 0406 	adc.w	r4, r4, r6
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	02a2      	lsls	r2, r4, #10
 8001aac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ab0:	0299      	lsls	r1, r3, #10
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4621      	mov	r1, r4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f04f 0400 	mov.w	r4, #0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	f7fe fbc0 	bl	8000248 <__aeabi_uldivmod>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0x158>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	60bb      	str	r3, [r7, #8]
      break;
 8001ae8:	e002      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001aec:	60bb      	str	r3, [r7, #8]
      break;
 8001aee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af0:	68bb      	ldr	r3, [r7, #8]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	017d7840 	.word	0x017d7840

08001b08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08006020 	.word	0x08006020

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffdc 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b50:	4601      	mov	r1, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08006020 	.word	0x08006020

08001b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d012      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ba2:	6093      	str	r3, [r2, #8]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	4964      	ldr	r1, [pc, #400]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d017      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	4959      	ldr	r1, [pc, #356]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001be8:	d101      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d017      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	494a      	ldr	r1, [pc, #296]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c24:	d101      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 808b 	beq.w	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c78:	f7fe fcb8 	bl	80005ec <HAL_GetTick>
 8001c7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fcb4 	bl	80005ec <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e38d      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d035      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d02e      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d114      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fc7c 	bl	80005ec <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fc78 	bl	80005ec <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e34f      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d26:	d111      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	4901      	ldr	r1, [pc, #4]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000
 8001d48:	0ffffcff 	.word	0x0ffffcff
 8001d4c:	4bb3      	ldr	r3, [pc, #716]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4ab2      	ldr	r2, [pc, #712]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d56:	6093      	str	r3, [r2, #8]
 8001d58:	4bb0      	ldr	r3, [pc, #704]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	49ad      	ldr	r1, [pc, #692]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d76:	4ba9      	ldr	r3, [pc, #676]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7c:	4aa7      	ldr	r2, [pc, #668]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d86:	4ba5      	ldr	r3, [pc, #660]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	49a2      	ldr	r1, [pc, #648]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001da4:	4b9d      	ldr	r3, [pc, #628]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db2:	499a      	ldr	r1, [pc, #616]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dc6:	4b95      	ldr	r3, [pc, #596]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dd4:	4991      	ldr	r1, [pc, #580]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df6:	4989      	ldr	r1, [pc, #548]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e0a:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4980      	ldr	r1, [pc, #512]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4978      	ldr	r1, [pc, #480]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e4e:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	f023 020c 	bic.w	r2, r3, #12
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	496f      	ldr	r1, [pc, #444]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4967      	ldr	r1, [pc, #412]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e92:	4b62      	ldr	r3, [pc, #392]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	495e      	ldr	r1, [pc, #376]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	4956      	ldr	r1, [pc, #344]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ed6:	4b51      	ldr	r3, [pc, #324]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ef8:	4b48      	ldr	r3, [pc, #288]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	4945      	ldr	r1, [pc, #276]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	493c      	ldr	r1, [pc, #240]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f4a:	4934      	ldr	r1, [pc, #208]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d011      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f6c:	492b      	ldr	r1, [pc, #172]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fac:	491b      	ldr	r1, [pc, #108]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd0:	4912      	ldr	r1, [pc, #72]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00f      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800200a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800200e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	e002      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	4985      	ldr	r1, [pc, #532]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002034:	4b80      	ldr	r3, [pc, #512]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002044:	497c      	ldr	r1, [pc, #496]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800205a:	f040 80d6 	bne.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206a:	f7fe fabf 	bl	80005ec <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002072:	f7fe fabb 	bl	80005ec <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e194      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d021      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d11d      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020a4:	4b64      	ldr	r3, [pc, #400]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020b2:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b8:	0e1b      	lsrs	r3, r3, #24
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	019a      	lsls	r2, r3, #6
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	071b      	lsls	r3, r3, #28
 80020d8:	4957      	ldr	r1, [pc, #348]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d02e      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210a:	d129      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	0f1b      	lsrs	r3, r3, #28
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	019a      	lsls	r2, r3, #6
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	493d      	ldr	r1, [pc, #244]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214e:	f023 021f 	bic.w	r2, r3, #31
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	3b01      	subs	r3, #1
 8002158:	4937      	ldr	r1, [pc, #220]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002172:	0e1b      	lsrs	r3, r3, #24
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002180:	0f1b      	lsrs	r3, r3, #28
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	019a      	lsls	r2, r3, #6
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	431a      	orrs	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	431a      	orrs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	071b      	lsls	r3, r3, #28
 80021a0:	4925      	ldr	r1, [pc, #148]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d011      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	019a      	lsls	r2, r3, #6
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	071b      	lsls	r3, r3, #28
 80021d0:	4919      	ldr	r1, [pc, #100]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7fe fa02 	bl	80005ec <HAL_GetTick>
 80021e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ec:	f7fe f9fe 	bl	80005ec <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0d7      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	f040 80cd 	bne.w	80023ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221e:	f7fe f9e5 	bl	80005ec <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002226:	f7fe f9e1 	bl	80005ec <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d903      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ba      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002238:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002248:	d0ed      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02e      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12a      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002272:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002280:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	0f1b      	lsrs	r3, r3, #28
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	071b      	lsls	r3, r3, #28
 80022a6:	4944      	ldr	r1, [pc, #272]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022dc:	d11d      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	0e1b      	lsrs	r3, r3, #24
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	0f1b      	lsrs	r3, r3, #28
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	019a      	lsls	r2, r3, #6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	4929      	ldr	r1, [pc, #164]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d028      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	0e1b      	lsrs	r3, r3, #24
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	019a      	lsls	r2, r3, #6
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	4917      	ldr	r1, [pc, #92]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	4911      	ldr	r1, [pc, #68]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe f932 	bl	80005ec <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800238c:	f7fe f92e 	bl	80005ec <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e007      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023aa:	d1ef      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01d      	b.n	800240a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f003 f996 	bl	8005714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 f8ee 	bl	80025dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_TIM_Base_Start+0x50>)
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d00b      	beq.n	800244e <HAL_TIM_Base_Start+0x3a>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d007      	beq.n	800244e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	00010007 	.word	0x00010007

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_TIM_ConfigClockSource+0x18>
 800247c:	2302      	movs	r3, #2
 800247e:	e0a6      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x166>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <HAL_TIM_ConfigClockSource+0x170>)
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d067      	beq.n	8002588 <HAL_TIM_ConfigClockSource+0x120>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d80b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x6c>
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d073      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0x140>
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d802      	bhi.n	80024ca <HAL_TIM_ConfigClockSource+0x62>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d06f      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024c8:	e078      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d06c      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0x140>
 80024ce:	2b30      	cmp	r3, #48	; 0x30
 80024d0:	d06a      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024d2:	e073      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024d4:	2b70      	cmp	r3, #112	; 0x70
 80024d6:	d00d      	beq.n	80024f4 <HAL_TIM_ConfigClockSource+0x8c>
 80024d8:	2b70      	cmp	r3, #112	; 0x70
 80024da:	d804      	bhi.n	80024e6 <HAL_TIM_ConfigClockSource+0x7e>
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d033      	beq.n	8002548 <HAL_TIM_ConfigClockSource+0xe0>
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d041      	beq.n	8002568 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024e4:	e06a      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d066      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x152>
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f0:	d017      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024f2:	e063      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f000 f984 	bl	8002810 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002516:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e04c      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f000 f96d 	bl	8002810 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002544:	609a      	str	r2, [r3, #8]
      break;
 8002546:	e039      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	461a      	mov	r2, r3
 8002556:	f000 f8e1 	bl	800271c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2150      	movs	r1, #80	; 0x50
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f93a 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 8002566:	e029      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	461a      	mov	r2, r3
 8002576:	f000 f900 	bl	800277a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2160      	movs	r1, #96	; 0x60
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f92a 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 8002586:	e019      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	461a      	mov	r2, r3
 8002596:	f000 f8c1 	bl	800271c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f91a 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 80025a6:	e009      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f000 f911 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 80025b8:	e000      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	fffeff88 	.word	0xfffeff88

080025dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d00f      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <TIM_Base_SetConfig+0x118>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00b      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3c      	ldr	r2, [pc, #240]	; (80026f8 <TIM_Base_SetConfig+0x11c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <TIM_Base_SetConfig+0x120>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <TIM_Base_SetConfig+0x124>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d027      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <TIM_Base_SetConfig+0x118>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d023      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <TIM_Base_SetConfig+0x11c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01f      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <TIM_Base_SetConfig+0x120>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01b      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <TIM_Base_SetConfig+0x124>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d017      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <TIM_Base_SetConfig+0x128>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <TIM_Base_SetConfig+0x12c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00f      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <TIM_Base_SetConfig+0x130>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00b      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <TIM_Base_SetConfig+0x134>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <TIM_Base_SetConfig+0x138>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d003      	beq.n	800268e <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <TIM_Base_SetConfig+0x13c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d108      	bne.n	80026a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0xf8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <TIM_Base_SetConfig+0x124>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40000c00 	.word	0x40000c00
 8002700:	40010400 	.word	0x40010400
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800
 8002710:	40001800 	.word	0x40001800
 8002714:	40001c00 	.word	0x40001c00
 8002718:	40002000 	.word	0x40002000

0800271c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 030a 	bic.w	r3, r3, #10
 8002758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0210 	bic.w	r2, r3, #16
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 0307 	orr.w	r3, r3, #7
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	431a      	orrs	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002864:	2302      	movs	r3, #2
 8002866:	e045      	b.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40010000 	.word	0x40010000
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e040      	b.n	800299c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f002 ff10 	bl	8005750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa7a 	bl	8002e40 <UART_SetConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e022      	b.n	800299c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fd12 	bl	8003388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002982:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fd99 	bl	80034cc <UART_CheckIdleState>
 800299a:	4603      	mov	r3, r0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d164      	bne.n	8002a84 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_Transmit_DMA+0x22>
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e05d      	b.n	8002a86 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Transmit_DMA+0x34>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e056      	b.n	8002a86 <HAL_UART_Transmit_DMA+0xe2>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d02a      	beq.n	8002a60 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0e:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_UART_Transmit_DMA+0xec>)
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_UART_Transmit_DMA+0xf0>)
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_UART_Transmit_DMA+0xf4>)
 8002a20:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a26:	2200      	movs	r2, #0
 8002a28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4619      	mov	r1, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3328      	adds	r3, #40	; 0x28
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	f7fd ffc3 	bl	80009c8 <HAL_DMA_Start_IT>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e012      	b.n	8002a86 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08003625 	.word	0x08003625
 8002a94:	08003675 	.word	0x08003675
 8002a98:	08003711 	.word	0x08003711

08002a9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d16c      	bne.n	8002b8c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_UART_Receive_DMA+0x22>
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e065      	b.n	8002b8e <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Receive_DMA+0x34>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e05e      	b.n	8002b8e <HAL_UART_Receive_DMA+0xf2>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	; 0x22
 8002af0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d02a      	beq.n	8002b50 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_UART_Receive_DMA+0xfc>)
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_UART_Receive_DMA+0x100>)
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0e:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <HAL_UART_Receive_DMA+0x104>)
 8002b10:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	4619      	mov	r1, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	f7fd ff4b 	bl	80009c8 <HAL_DMA_Start_IT>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e01e      	b.n	8002b8e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b86:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	08003691 	.word	0x08003691
 8002b9c:	080036f5 	.word	0x080036f5
 8002ba0:	08003711 	.word	0x08003711

08002ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80eb 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
      return;
 8002bf8:	e0e5      	b.n	8002dc6 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80c0 	beq.w	8002d82 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80b5 	beq.w	8002d82 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <HAL_UART_IRQHandler+0x9c>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00e      	beq.n	8002c68 <HAL_UART_IRQHandler+0xc4>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	f043 0204 	orr.w	r2, r3, #4
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <HAL_UART_IRQHandler+0xec>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2204      	movs	r2, #4
 8002c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	f043 0202 	orr.w	r2, r3, #2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cba:	f043 0208 	orr.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07f      	beq.n	8002dca <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d004      	beq.n	8002d0c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d031      	beq.n	8002d70 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fc69 	bl	80035e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d123      	bne.n	8002d68 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_UART_IRQHandler+0x234>)
 8002d3e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fe9f 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d016      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5e:	e00e      	b.n	8002d7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f863 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d66:	e00a      	b.n	8002d7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f85f 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6e:	e006      	b.n	8002d7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f85b 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002d7c:	e025      	b.n	8002dca <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7e:	bf00      	nop
    return;
 8002d80:	e023      	b.n	8002dca <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    }
    return;
 8002da6:	e012      	b.n	8002dce <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x22c>
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fcf9 	bl	80037b4 <UART_EndTransmit_IT>
    return;
 8002dc2:	bf00      	nop
 8002dc4:	e004      	b.n	8002dd0 <HAL_UART_IRQHandler+0x22c>
      return;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <HAL_UART_IRQHandler+0x22c>
    return;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HAL_UART_IRQHandler+0x22c>
    return;
 8002dce:	bf00      	nop
  }

}
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08003789 	.word	0x08003789

08002ddc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4bb1      	ldr	r3, [pc, #708]	; (8003134 <UART_SetConfig+0x2f4>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6939      	ldr	r1, [r7, #16]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a9f      	ldr	r2, [pc, #636]	; (8003138 <UART_SetConfig+0x2f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d121      	bne.n	8002f04 <UART_SetConfig+0xc4>
 8002ec0:	4b9e      	ldr	r3, [pc, #632]	; (800313c <UART_SetConfig+0x2fc>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d816      	bhi.n	8002efc <UART_SetConfig+0xbc>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0x94>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef1 	.word	0x08002ef1
 8002edc:	08002eeb 	.word	0x08002eeb
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e151      	b.n	800318e <UART_SetConfig+0x34e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e14e      	b.n	800318e <UART_SetConfig+0x34e>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e14b      	b.n	800318e <UART_SetConfig+0x34e>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e148      	b.n	800318e <UART_SetConfig+0x34e>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	bf00      	nop
 8002f02:	e144      	b.n	800318e <UART_SetConfig+0x34e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a8d      	ldr	r2, [pc, #564]	; (8003140 <UART_SetConfig+0x300>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d134      	bne.n	8002f78 <UART_SetConfig+0x138>
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <UART_SetConfig+0x2fc>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d829      	bhi.n	8002f70 <UART_SetConfig+0x130>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0xe4>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	08002f71 	.word	0x08002f71
 8002f2c:	08002f71 	.word	0x08002f71
 8002f30:	08002f71 	.word	0x08002f71
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f71 	.word	0x08002f71
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f71 	.word	0x08002f71
 8002f44:	08002f5f 	.word	0x08002f5f
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f71 	.word	0x08002f71
 8002f54:	08002f6b 	.word	0x08002f6b
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e117      	b.n	800318e <UART_SetConfig+0x34e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e114      	b.n	800318e <UART_SetConfig+0x34e>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e111      	b.n	800318e <UART_SetConfig+0x34e>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e10e      	b.n	800318e <UART_SetConfig+0x34e>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	bf00      	nop
 8002f76:	e10a      	b.n	800318e <UART_SetConfig+0x34e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a71      	ldr	r2, [pc, #452]	; (8003144 <UART_SetConfig+0x304>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d120      	bne.n	8002fc4 <UART_SetConfig+0x184>
 8002f82:	4b6e      	ldr	r3, [pc, #440]	; (800313c <UART_SetConfig+0x2fc>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d00f      	beq.n	8002fb0 <UART_SetConfig+0x170>
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d802      	bhi.n	8002f9a <UART_SetConfig+0x15a>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0x164>
 8002f98:	e010      	b.n	8002fbc <UART_SetConfig+0x17c>
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d005      	beq.n	8002faa <UART_SetConfig+0x16a>
 8002f9e:	2b30      	cmp	r3, #48	; 0x30
 8002fa0:	d009      	beq.n	8002fb6 <UART_SetConfig+0x176>
 8002fa2:	e00b      	b.n	8002fbc <UART_SetConfig+0x17c>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0f1      	b.n	800318e <UART_SetConfig+0x34e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0ee      	b.n	800318e <UART_SetConfig+0x34e>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0eb      	b.n	800318e <UART_SetConfig+0x34e>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0e8      	b.n	800318e <UART_SetConfig+0x34e>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	bf00      	nop
 8002fc2:	e0e4      	b.n	800318e <UART_SetConfig+0x34e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5f      	ldr	r2, [pc, #380]	; (8003148 <UART_SetConfig+0x308>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d120      	bne.n	8003010 <UART_SetConfig+0x1d0>
 8002fce:	4b5b      	ldr	r3, [pc, #364]	; (800313c <UART_SetConfig+0x2fc>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d00f      	beq.n	8002ffc <UART_SetConfig+0x1bc>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d802      	bhi.n	8002fe6 <UART_SetConfig+0x1a6>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0x1b0>
 8002fe4:	e010      	b.n	8003008 <UART_SetConfig+0x1c8>
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d005      	beq.n	8002ff6 <UART_SetConfig+0x1b6>
 8002fea:	2bc0      	cmp	r3, #192	; 0xc0
 8002fec:	d009      	beq.n	8003002 <UART_SetConfig+0x1c2>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x1c8>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e0cb      	b.n	800318e <UART_SetConfig+0x34e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e0c8      	b.n	800318e <UART_SetConfig+0x34e>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e0c5      	b.n	800318e <UART_SetConfig+0x34e>
 8003002:	2308      	movs	r3, #8
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e0c2      	b.n	800318e <UART_SetConfig+0x34e>
 8003008:	2310      	movs	r3, #16
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	bf00      	nop
 800300e:	e0be      	b.n	800318e <UART_SetConfig+0x34e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <UART_SetConfig+0x30c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d124      	bne.n	8003064 <UART_SetConfig+0x224>
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <UART_SetConfig+0x2fc>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d012      	beq.n	8003050 <UART_SetConfig+0x210>
 800302a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302e:	d802      	bhi.n	8003036 <UART_SetConfig+0x1f6>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <UART_SetConfig+0x204>
 8003034:	e012      	b.n	800305c <UART_SetConfig+0x21c>
 8003036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303a:	d006      	beq.n	800304a <UART_SetConfig+0x20a>
 800303c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003040:	d009      	beq.n	8003056 <UART_SetConfig+0x216>
 8003042:	e00b      	b.n	800305c <UART_SetConfig+0x21c>
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0a1      	b.n	800318e <UART_SetConfig+0x34e>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e09e      	b.n	800318e <UART_SetConfig+0x34e>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e09b      	b.n	800318e <UART_SetConfig+0x34e>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e098      	b.n	800318e <UART_SetConfig+0x34e>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	bf00      	nop
 8003062:	e094      	b.n	800318e <UART_SetConfig+0x34e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a39      	ldr	r2, [pc, #228]	; (8003150 <UART_SetConfig+0x310>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d124      	bne.n	80030b8 <UART_SetConfig+0x278>
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <UART_SetConfig+0x2fc>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d012      	beq.n	80030a4 <UART_SetConfig+0x264>
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d802      	bhi.n	800308a <UART_SetConfig+0x24a>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <UART_SetConfig+0x258>
 8003088:	e012      	b.n	80030b0 <UART_SetConfig+0x270>
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d006      	beq.n	800309e <UART_SetConfig+0x25e>
 8003090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003094:	d009      	beq.n	80030aa <UART_SetConfig+0x26a>
 8003096:	e00b      	b.n	80030b0 <UART_SetConfig+0x270>
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e077      	b.n	800318e <UART_SetConfig+0x34e>
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e074      	b.n	800318e <UART_SetConfig+0x34e>
 80030a4:	2304      	movs	r3, #4
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e071      	b.n	800318e <UART_SetConfig+0x34e>
 80030aa:	2308      	movs	r3, #8
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e06e      	b.n	800318e <UART_SetConfig+0x34e>
 80030b0:	2310      	movs	r3, #16
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	bf00      	nop
 80030b6:	e06a      	b.n	800318e <UART_SetConfig+0x34e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <UART_SetConfig+0x314>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d124      	bne.n	800310c <UART_SetConfig+0x2cc>
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <UART_SetConfig+0x2fc>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d012      	beq.n	80030f8 <UART_SetConfig+0x2b8>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d802      	bhi.n	80030de <UART_SetConfig+0x29e>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <UART_SetConfig+0x2ac>
 80030dc:	e012      	b.n	8003104 <UART_SetConfig+0x2c4>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	d006      	beq.n	80030f2 <UART_SetConfig+0x2b2>
 80030e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e8:	d009      	beq.n	80030fe <UART_SetConfig+0x2be>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x2c4>
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e04d      	b.n	800318e <UART_SetConfig+0x34e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e04a      	b.n	800318e <UART_SetConfig+0x34e>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e047      	b.n	800318e <UART_SetConfig+0x34e>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e044      	b.n	800318e <UART_SetConfig+0x34e>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	bf00      	nop
 800310a:	e040      	b.n	800318e <UART_SetConfig+0x34e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a11      	ldr	r2, [pc, #68]	; (8003158 <UART_SetConfig+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d139      	bne.n	800318a <UART_SetConfig+0x34a>
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <UART_SetConfig+0x2fc>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d027      	beq.n	8003176 <UART_SetConfig+0x336>
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312a:	d817      	bhi.n	800315c <UART_SetConfig+0x31c>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01c      	beq.n	800316a <UART_SetConfig+0x32a>
 8003130:	e027      	b.n	8003182 <UART_SetConfig+0x342>
 8003132:	bf00      	nop
 8003134:	efff69f3 	.word	0xefff69f3
 8003138:	40011000 	.word	0x40011000
 800313c:	40023800 	.word	0x40023800
 8003140:	40004400 	.word	0x40004400
 8003144:	40004800 	.word	0x40004800
 8003148:	40004c00 	.word	0x40004c00
 800314c:	40005000 	.word	0x40005000
 8003150:	40011400 	.word	0x40011400
 8003154:	40007800 	.word	0x40007800
 8003158:	40007c00 	.word	0x40007c00
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	d006      	beq.n	8003170 <UART_SetConfig+0x330>
 8003162:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003166:	d009      	beq.n	800317c <UART_SetConfig+0x33c>
 8003168:	e00b      	b.n	8003182 <UART_SetConfig+0x342>
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e00e      	b.n	800318e <UART_SetConfig+0x34e>
 8003170:	2302      	movs	r3, #2
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e00b      	b.n	800318e <UART_SetConfig+0x34e>
 8003176:	2304      	movs	r3, #4
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e008      	b.n	800318e <UART_SetConfig+0x34e>
 800317c:	2308      	movs	r3, #8
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e005      	b.n	800318e <UART_SetConfig+0x34e>
 8003182:	2310      	movs	r3, #16
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	bf00      	nop
 8003188:	e001      	b.n	800318e <UART_SetConfig+0x34e>
 800318a:	2310      	movs	r3, #16
 800318c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d17c      	bne.n	8003292 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d859      	bhi.n	8003252 <UART_SetConfig+0x412>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0x364>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031e7 	.word	0x080031e7
 80031ac:	08003205 	.word	0x08003205
 80031b0:	08003253 	.word	0x08003253
 80031b4:	0800321d 	.word	0x0800321d
 80031b8:	08003253 	.word	0x08003253
 80031bc:	08003253 	.word	0x08003253
 80031c0:	08003253 	.word	0x08003253
 80031c4:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031c8:	f7fe fcaa 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 80031cc:	4603      	mov	r3, r0
 80031ce:	005a      	lsls	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	441a      	add	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	61bb      	str	r3, [r7, #24]
        break;
 80031e4:	e038      	b.n	8003258 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031e6:	f7fe fcaf 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 80031ea:	4603      	mov	r3, r0
 80031ec:	005a      	lsls	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	61bb      	str	r3, [r7, #24]
        break;
 8003202:	e029      	b.n	8003258 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	085a      	lsrs	r2, r3, #1
 800320a:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <UART_SetConfig+0x540>)
 800320c:	4413      	add	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	fbb3 f3f2 	udiv	r3, r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e01d      	b.n	8003258 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800321c:	f7fe fbc2 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8003220:	4603      	mov	r3, r0
 8003222:	005a      	lsls	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	441a      	add	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	b29b      	uxth	r3, r3
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e00e      	b.n	8003258 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e002      	b.n	8003258 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
        break;
 8003256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d916      	bls.n	800328c <UART_SetConfig+0x44c>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d212      	bcs.n	800328c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f023 030f 	bic.w	r3, r3, #15
 800326e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	b29a      	uxth	r2, r3
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	4313      	orrs	r3, r2
 8003280:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	89fa      	ldrh	r2, [r7, #14]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e06e      	b.n	800336a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
 8003290:	e06b      	b.n	800336a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003292:	7ffb      	ldrb	r3, [r7, #31]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d857      	bhi.n	8003348 <UART_SetConfig+0x508>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x460>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032e1 	.word	0x080032e1
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	08003349 	.word	0x08003349
 80032b0:	08003315 	.word	0x08003315
 80032b4:	08003349 	.word	0x08003349
 80032b8:	08003349 	.word	0x08003349
 80032bc:	08003349 	.word	0x08003349
 80032c0:	08003331 	.word	0x08003331
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032c4:	f7fe fc2c 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	61bb      	str	r3, [r7, #24]
        break;
 80032de:	e036      	b.n	800334e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032e0:	f7fe fc32 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	61bb      	str	r3, [r7, #24]
        break;
 80032fa:	e028      	b.n	800334e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085a      	lsrs	r2, r3, #1
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <UART_SetConfig+0x544>)
 8003304:	4413      	add	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	fbb3 f3f2 	udiv	r3, r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	61bb      	str	r3, [r7, #24]
        break;
 8003312:	e01c      	b.n	800334e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003314:	f7fe fb46 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	61bb      	str	r3, [r7, #24]
        break;
 800332e:	e00e      	b.n	800334e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	61bb      	str	r3, [r7, #24]
        break;
 8003346:	e002      	b.n	800334e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
        break;
 800334c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d908      	bls.n	8003366 <UART_SetConfig+0x526>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335a:	d204      	bcs.n	8003366 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e001      	b.n	800336a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	01e84800 	.word	0x01e84800
 8003384:	00f42400 	.word	0x00f42400

08003388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01a      	beq.n	800349e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003486:	d10a      	bne.n	800349e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034da:	f7fd f887 	bl	80005ec <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d10e      	bne.n	800350c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f814 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e00a      	b.n	8003522 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e02a      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003542:	d026      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fd f852 	bl	80005ec <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <UART_WaitOnFlagUntilTimeout+0x30>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11b      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003568:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0c5      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035d0:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	d014      	beq.n	8003666 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003652:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003662:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003664:	e002      	b.n	800366c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff fbb8 	bl	8002ddc <HAL_UART_TxCpltCallback>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fbb4 	bl	8002df0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a6:	d01e      	beq.n	80036e6 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036be:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036de:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fb8c 	bl	8002e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fb88 	bl	8002e18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003728:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d109      	bne.n	800374c <UART_DMAError+0x3c>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b21      	cmp	r3, #33	; 0x21
 800373c:	d106      	bne.n	800374c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff37 	bl	80035ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d109      	bne.n	800376e <UART_DMAError+0x5e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b22      	cmp	r3, #34	; 0x22
 800375e:	d106      	bne.n	800376e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003768:	6978      	ldr	r0, [r7, #20]
 800376a:	f7ff ff3b 	bl	80035e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff fb56 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fb40 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff faff 	bl	8002ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <_ZN3ros3MsgC1Ev+0x1c>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	08006000 	.word	0x08006000

08003808 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
      data("")
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ffe8 	bl	80037e8 <_ZN3ros3MsgC1Ev>
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <_ZN8std_msgs6StringC1Ev+0x28>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003822:	605a      	str	r2, [r3, #4]
    {
    }
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	08005fe8 	.word	0x08005fe8
 8003834:	08005dd8 	.word	0x08005dd8

08003838 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fcf4 	bl	8000238 <strlen>
 8003850:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f9bb 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3304      	adds	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	18d0      	adds	r0, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4619      	mov	r1, r3
 8003874:	f002 f95c 	bl	8005b30 <memcpy>
      offset += length_data;
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4413      	add	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003880:	68fb      	ldr	r3, [r7, #12]
    }
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	441a      	add	r2, r3
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f9b4 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3304      	adds	r3, #4
 80038ae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d20c      	bcs.n	80038da <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	441a      	add	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	440b      	add	r3, r1
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	3301      	adds	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e7ec      	b.n	80038b4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	3b01      	subs	r3, #1
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
     return offset;
 80038fe:	693b      	ldr	r3, [r7, #16]
    }
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	08005ddc 	.word	0x08005ddc

08003924 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	08005dec 	.word	0x08005dec

08003940 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
      data()
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff3a 	bl	80037e8 <_ZN3ros3MsgC1Ev>
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ffde 	bl	8003940 <_ZN3ros4TimeC1Ev>
    {
    }
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	08005fd0 	.word	0x08005fd0

08003994 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	b2ca      	uxtb	r2, r1
 80039ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	0a19      	lsrs	r1, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	b2ca      	uxtb	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	0c19      	lsrs	r1, r3, #16
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3302      	adds	r3, #2
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	b2ca      	uxtb	r2, r1
 80039d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0e19      	lsrs	r1, r3, #24
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3303      	adds	r3, #3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	b2ca      	uxtb	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	b2ca      	uxtb	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0a19      	lsrs	r1, r3, #8
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	b2ca      	uxtb	r2, r1
 8003a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	0c19      	lsrs	r1, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3302      	adds	r3, #2
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4413      	add	r3, r2
 8003a1a:	b2ca      	uxtb	r2, r1
 8003a1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0e19      	lsrs	r1, r3, #24
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3303      	adds	r3, #3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b2ca      	uxtb	r2, r1
 8003a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3304      	adds	r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a36:	68fb      	ldr	r3, [r7, #12]
    }
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	440b      	add	r3, r1
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	440b      	add	r3, r1
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3303      	adds	r3, #3
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	440b      	add	r3, r1
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	440b      	add	r3, r1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	440b      	add	r3, r1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3303      	adds	r3, #3
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	440b      	add	r3, r1
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
     return offset;
 8003afe:	68fb      	ldr	r3, [r7, #12]
    }
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	08005e10 	.word	0x08005e10

08003b28 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	08005e20 	.word	0x08005e20

08003b44 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe4a 	bl	80037e8 <_ZN3ros3MsgC1Ev>
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	809a      	strh	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
    {
    }
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08005fb8 	.word	0x08005fb8
 8003b88:	08005dd8 	.word	0x08005dd8

08003b8c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8899      	ldrh	r1, [r3, #4]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b2ca      	uxtb	r2, r1
 8003ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	889b      	ldrh	r3, [r3, #4]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b299      	uxth	r1, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	b2ca      	uxtb	r2, r1
 8003bba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fc fb36 	bl	8000238 <strlen>
 8003bcc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fffd 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3304      	adds	r3, #4
 8003be0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	18d0      	adds	r0, r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f001 ff9e 	bl	8005b30 <memcpy>
      offset += length_topic_name;
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fb19 	bl	8000238 <strlen>
 8003c06:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	6979      	ldr	r1, [r7, #20]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ffe0 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	18d0      	adds	r0, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f001 ff81 	bl	8005b30 <memcpy>
      offset += length_message_type;
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4413      	add	r3, r2
 8003c34:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fafc 	bl	8000238 <strlen>
 8003c40:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	6939      	ldr	r1, [r7, #16]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ffc3 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3304      	adds	r3, #4
 8003c54:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	18d0      	adds	r0, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4619      	mov	r1, r3
 8003c64:	f001 ff64 	bl	8005b30 <memcpy>
      offset += length_md5sum;
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2ca      	uxtb	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0a19      	lsrs	r1, r3, #8
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b2ca      	uxtb	r2, r1
 8003c90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	0c19      	lsrs	r1, r3, #16
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b2ca      	uxtb	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0e19      	lsrs	r1, r3, #24
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3303      	adds	r3, #3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	b2ca      	uxtb	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	61fb      	str	r3, [r7, #28]
      return offset;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
    }
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	889b      	ldrh	r3, [r3, #4]
 8003ce2:	b21a      	sxth	r2, r3
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	440b      	add	r3, r1
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	441a      	add	r2, r3
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff7f 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3304      	adds	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	441a      	add	r2, r3
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	440b      	add	r3, r1
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	e7ec      	b.n	8003d1e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f107 0310 	add.w	r3, r7, #16
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff4c 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d20c      	bcs.n	8003daa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	441a      	add	r2, r3
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	7812      	ldrb	r2, [r2, #0]
 8003da0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	3301      	adds	r3, #1
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	e7ec      	b.n	8003d84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	3b01      	subs	r3, #1
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 ff19 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3304      	adds	r3, #4
 8003de4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d20c      	bcs.n	8003e10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	440b      	add	r3, r1
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e7ec      	b.n	8003dea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	3b01      	subs	r3, #1
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	441a      	add	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	440a      	add	r2, r1
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	440b      	add	r3, r1
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	440b      	add	r3, r1
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3303      	adds	r3, #3
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	440b      	add	r3, r1
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3304      	adds	r3, #4
 8003e86:	61bb      	str	r3, [r7, #24]
     return offset;
 8003e88:	69bb      	ldr	r3, [r7, #24]
    }
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3728      	adds	r7, #40	; 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	08005e44 	.word	0x08005e44

08003eb0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	08005e60 	.word	0x08005e60

08003ecc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fc86 	bl	80037e8 <_ZN3ros3MsgC1Ev>
 8003edc:	4a06      	ldr	r2, [pc, #24]	; (8003ef8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	711a      	strb	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003eec:	609a      	str	r2, [r3, #8]
    {
    }
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08005fa0 	.word	0x08005fa0
 8003efc:	08005dd8 	.word	0x08005dd8

08003f00 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	7912      	ldrb	r2, [r2, #4]
 8003f18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc f987 	bl	8000238 <strlen>
 8003f2a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fe4e 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	18d0      	adds	r0, r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f001 fdef 	bl	8005b30 <memcpy>
      offset += length_msg;
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4413      	add	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	441a      	add	r2, r3
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fe3e 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d20c      	bcs.n	8003fc6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	440b      	add	r3, r1
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e7ec      	b.n	8003fa0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
     return offset;
 8003fea:	693b      	ldr	r3, [r7, #16]
    }
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	08005e84 	.word	0x08005e84

08004010 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	08005e98 	.word	0x08005e98

0800402c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fbd6 	bl	80037e8 <_ZN3ros3MsgC1Ev>
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	611a      	str	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	619a      	str	r2, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	61da      	str	r2, [r3, #28]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08005f88 	.word	0x08005f88

08004074 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6859      	ldr	r1, [r3, #4]
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4413      	add	r3, r2
 800408c:	b2ca      	uxtb	r2, r1
 800408e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0a19      	lsrs	r1, r3, #8
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	3301      	adds	r3, #1
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4413      	add	r3, r2
 800409e:	b2ca      	uxtb	r2, r1
 80040a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0c19      	lsrs	r1, r3, #16
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	3302      	adds	r3, #2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	b2ca      	uxtb	r2, r1
 80040b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0e19      	lsrs	r1, r3, #24
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	3303      	adds	r3, #3
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	4413      	add	r3, r2
 80040c2:	b2ca      	uxtb	r2, r1
 80040c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	3304      	adds	r3, #4
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80040cc:	2300      	movs	r3, #0
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d22b      	bcs.n	8004132 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80040e8:	6939      	ldr	r1, [r7, #16]
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	b2ca      	uxtb	r2, r1
 80040f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	0a19      	lsrs	r1, r3, #8
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	b2ca      	uxtb	r2, r1
 8004102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	0c19      	lsrs	r1, r3, #16
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	3302      	adds	r3, #2
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	b2ca      	uxtb	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	0e19      	lsrs	r1, r3, #24
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	3303      	adds	r3, #3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4413      	add	r3, r2
 8004120:	b2ca      	uxtb	r2, r1
 8004122:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	3304      	adds	r3, #4
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	3301      	adds	r3, #1
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	e7ce      	b.n	80040d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4413      	add	r3, r2
 800413c:	b2ca      	uxtb	r2, r1
 800413e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	0a19      	lsrs	r1, r3, #8
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	3301      	adds	r3, #1
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	b2ca      	uxtb	r2, r1
 8004150:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	0c19      	lsrs	r1, r3, #16
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	3302      	adds	r3, #2
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	4413      	add	r3, r2
 8004160:	b2ca      	uxtb	r2, r1
 8004162:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	0e19      	lsrs	r1, r3, #24
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	3303      	adds	r3, #3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4413      	add	r3, r2
 8004172:	b2ca      	uxtb	r2, r1
 8004174:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	3304      	adds	r3, #4
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	429a      	cmp	r2, r3
 8004188:	d22b      	bcs.n	80041e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	b2ca      	uxtb	r2, r1
 80041a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0a19      	lsrs	r1, r3, #8
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	3301      	adds	r3, #1
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	b2ca      	uxtb	r2, r1
 80041b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0c19      	lsrs	r1, r3, #16
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	3302      	adds	r3, #2
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	0e19      	lsrs	r1, r3, #24
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	3303      	adds	r3, #3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	b2ca      	uxtb	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	3304      	adds	r3, #4
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3301      	adds	r3, #1
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	e7ce      	b.n	8004180 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69d9      	ldr	r1, [r3, #28]
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	b2ca      	uxtb	r2, r1
 80041ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	0a19      	lsrs	r1, r3, #8
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	3301      	adds	r3, #1
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	b2ca      	uxtb	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	0c19      	lsrs	r1, r3, #16
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	3302      	adds	r3, #2
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	4413      	add	r3, r2
 8004210:	b2ca      	uxtb	r2, r1
 8004212:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	0e19      	lsrs	r1, r3, #24
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	3303      	adds	r3, #3
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	b2ca      	uxtb	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	3304      	adds	r3, #4
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d228      	bcs.n	800428c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fb fff6 	bl	8000238 <strlen>
 800424c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fcbd 	bl	8004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	3304      	adds	r3, #4
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	18d0      	adds	r0, r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4619      	mov	r1, r3
 8004278:	f001 fc5a 	bl	8005b30 <memcpy>
      offset += length_stringsi;
 800427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	4413      	add	r3, r2
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3301      	adds	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	e7d1      	b.n	8004230 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800428e:	4618      	mov	r0, r3
 8004290:	3728      	adds	r7, #40	; 0x28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004296:	b580      	push	{r7, lr}
 8004298:	b08e      	sub	sp, #56	; 0x38
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	3301      	adds	r3, #1
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	4313      	orrs	r3, r2
 80042be:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	3302      	adds	r3, #2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	3303      	adds	r3, #3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	3304      	adds	r3, #4
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d90a      	bls.n	800430a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f001 fc2a 	bl	8005b58 <realloc>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004310:	2300      	movs	r3, #0
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431a:	429a      	cmp	r2, r3
 800431c:	d236      	bcs.n	800438c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	440a      	add	r2, r1
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	3301      	adds	r3, #1
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	440b      	add	r3, r1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	3302      	adds	r3, #2
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	440b      	add	r3, r1
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	3303      	adds	r3, #3
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	440b      	add	r3, r1
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	3304      	adds	r3, #4
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	3208      	adds	r2, #8
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	3301      	adds	r3, #1
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
 800438a:	e7c3      	b.n	8004314 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	3301      	adds	r3, #1
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	4413      	add	r3, r2
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	3302      	adds	r3, #2
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	3303      	adds	r3, #3
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	3304      	adds	r3, #4
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d90a      	bls.n	80043f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f001 fbb6 	bl	8005b58 <realloc>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004402:	429a      	cmp	r2, r3
 8004404:	d236      	bcs.n	8004474 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	440a      	add	r2, r1
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	3301      	adds	r3, #1
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	440b      	add	r3, r1
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	3302      	adds	r3, #2
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	440b      	add	r3, r1
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	3303      	adds	r3, #3
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	440b      	add	r3, r1
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	3304      	adds	r3, #4
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	3214      	adds	r2, #20
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	3301      	adds	r3, #1
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004472:	e7c3      	b.n	80043fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	3301      	adds	r3, #1
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	3302      	adds	r3, #2
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80044a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a4:	3303      	adds	r3, #3
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	3304      	adds	r3, #4
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d90a      	bls.n	80044da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f001 fb42 	bl	8005b58 <realloc>
 80044d4:	4602      	mov	r2, r0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80044e0:	2300      	movs	r3, #0
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d23f      	bcs.n	800456e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	441a      	add	r2, r3
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fb89 	bl	8004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	3304      	adds	r3, #4
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	429a      	cmp	r2, r3
 8004514:	d20c      	bcs.n	8004530 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	441a      	add	r2, r3
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	3b01      	subs	r3, #1
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	440b      	add	r3, r1
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	3301      	adds	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e7ec      	b.n	800450a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	3b01      	subs	r3, #1
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	4413      	add	r3, r2
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	3b01      	subs	r3, #1
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800454c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	3220      	adds	r2, #32
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	3301      	adds	r3, #1
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	e7ba      	b.n	80044e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004570:	4618      	mov	r0, r3
 8004572:	3738      	adds	r7, #56	; 0x38
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	08005f3c 	.word	0x08005f3c

08004594 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	08005ebc 	.word	0x08005ebc

080045b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	611a      	str	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68d8      	ldr	r0, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6891      	ldr	r1, [r2, #8]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	4798      	blx	r3
 80045fc:	4603      	mov	r3, r0
  };
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
  }
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 128;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	425b      	negs	r3, r3
 8004632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 256;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
      htim(&htim2), huart(&huart3), rind(0), twind(0), tfind(0){
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <_ZN13STM32HardwareC1Ev+0x3c>)
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <_ZN13STM32HardwareC1Ev+0x40>)
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    }
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000094 	.word	0x20000094
 8004684:	200000d4 	.word	0x200000d4

08004688 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(TIM_HandleTypeDef *htim_, UART_HandleTypeDef *huart_):
      htim(htim_), huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f809 	bl	80046a8 <_ZN13STM32Hardware10reset_rbufEv>

      HAL_TIM_Base_Start(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd feba 	bl	8002414 <HAL_TIM_Base_Start>
    }
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6858      	ldr	r0, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3308      	adds	r3, #8
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7fe f9ee 	bl	8002a9c <HAL_UART_Receive_DMA>
    }
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
      int c = -1;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046d4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff9e 	bl	800461e <_ZN13STM32Hardware10getRdmaIndEv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	429c      	cmp	r4, r3
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	7a1b      	ldrb	r3, [r3, #8]
 8004706:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
      return c;
 8004718:	68fb      	ldr	r3, [r7, #12]
    }
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}
	...

08004724 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	2b20      	cmp	r3, #32
 8004734:	d108      	bne.n	8004748 <_ZN13STM32Hardware5flushEv+0x24>
 8004736:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <_ZN13STM32Hardware5flushEv+0xb0>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	f083 0301 	eor.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <_ZN13STM32Hardware5flushEv+0x24>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <_ZN13STM32Hardware5flushEv+0x26>
 8004748:	2300      	movs	r3, #0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03e      	beq.n	80047cc <_ZN13STM32Hardware5flushEv+0xa8>
        mutex = true;
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <_ZN13STM32Hardware5flushEv+0xb0>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004760:	429a      	cmp	r2, r3
 8004762:	d030      	beq.n	80047c6 <_ZN13STM32Hardware5flushEv+0xa2>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004770:	429a      	cmp	r2, r3
 8004772:	d20a      	bcs.n	800478a <_ZN13STM32Hardware5flushEv+0x66>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004782:	b29b      	uxth	r3, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	e006      	b.n	8004798 <_ZN13STM32Hardware5flushEv+0x74>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004790:	b29b      	uxth	r3, r3
 8004792:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004796:	b29b      	uxth	r3, r3
 8004798:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6858      	ldr	r0, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80047a4:	3388      	adds	r3, #136	; 0x88
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	3304      	adds	r3, #4
 80047ac:	89fa      	ldrh	r2, [r7, #14]
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fe f8f8 	bl	80029a4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80047ba:	89fb      	ldrh	r3, [r7, #14]
 80047bc:	4413      	add	r3, r2
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
        }
        mutex = false;
 80047c6:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <_ZN13STM32Hardware5flushEv+0xb0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
      }
    }
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000090 	.word	0x20000090

080047d8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]


      int n = length;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ee:	bfa8      	it	ge
 80047f0:	f44f 7380 	movge.w	r3, #256	; 0x100
 80047f4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80047fc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4293      	cmp	r3, r2
 8004804:	bf28      	it	cs
 8004806:	4613      	movcs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004810:	3388      	adds	r3, #136	; 0x88
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f987 	bl	8005b30 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4413      	add	r3, r2
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

      if(n != n_tail){
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d00b      	beq.n	8004854 <_ZN13STM32Hardware5writeEPhi+0x7c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	18d1      	adds	r1, r2, r3
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	461a      	mov	r2, r3
 8004850:	f001 f96e 	bl	8005b30 <memcpy>
      }

      flush();
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ff65 	bl	8004724 <_ZN13STM32Hardware5flushEv>
    }
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick(); }
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	f7fb febf 	bl	80005ec <HAL_GetTick>
 800486e:	4603      	mov	r3, r0
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	f2ad 6df4 	subw	sp, sp, #1780	; 0x6f4
 800487e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004880:	f7fb fe62 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004884:	f000 f848 	bl	8004918 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004888:	f000 f986 	bl	8004b98 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800488c:	f000 f95e 	bl	8004b4c <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8004890:	f000 f8cc 	bl	8004a2c <_ZL12MX_TIM2_Initv>
  MX_USART3_UART_Init();
 8004894:	f000 f926 	bl	8004ae4 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
	ros::NodeHandle nh;
 8004898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f9ed 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

	std_msgs::String str_msg;
 80048a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe ffae 	bl	8003808 <_ZN8std_msgs6StringC1Ev>
	ros::Publisher chatter("chatter", &str_msg);
 80048ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048b0:	f107 0014 	add.w	r0, r7, #20
 80048b4:	2300      	movs	r3, #0
 80048b6:	4916      	ldr	r1, [pc, #88]	; (8004910 <main+0x98>)
 80048b8:	f7ff fe7a 	bl	80045b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
	char hello[] = "Hello world!";
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <main+0x9c>)
 80048c0:	461c      	mov	r4, r3
 80048c2:	4613      	mov	r3, r2
 80048c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c6:	c407      	stmia	r4!, {r0, r1, r2}
 80048c8:	7023      	strb	r3, [r4, #0]

	nh.initNode();
 80048ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fa54 	bl	8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 80048d4:	f107 0214 	add.w	r2, r7, #20
 80048d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fa69 	bl	8004db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		str_msg.data = hello;
 80048e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e8:	1d3a      	adds	r2, r7, #4
 80048ea:	605a      	str	r2, [r3, #4]
		chatter.publish(&str_msg);
 80048ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fe71 	bl	80045de <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 80048fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fa86 	bl	8004e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

		//HAL_UART_Transmit(&huart3, (uint8_t*)hello, strlen(hello), 100);


		HAL_Delay(1000);
 8004906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800490a:	f7fb fe7b 	bl	8000604 <HAL_Delay>
		str_msg.data = hello;
 800490e:	e7e9      	b.n	80048e4 <main+0x6c>
 8004910:	08005ee0 	.word	0x08005ee0
 8004914:	08005ee8 	.word	0x08005ee8

08004918 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b0b8      	sub	sp, #224	; 0xe0
 800491c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800491e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004922:	2234      	movs	r2, #52	; 0x34
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f001 f90d 	bl	8005b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800492c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	2290      	movs	r2, #144	; 0x90
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f8fe 	bl	8005b46 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <_Z18SystemClock_Configv+0x10c>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <_Z18SystemClock_Configv+0x10c>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <_Z18SystemClock_Configv+0x10c>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004962:	4b31      	ldr	r3, [pc, #196]	; (8004a28 <_Z18SystemClock_Configv+0x110>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800496a:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <_Z18SystemClock_Configv+0x110>)
 800496c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <_Z18SystemClock_Configv+0x110>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800497e:	2302      	movs	r3, #2
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004984:	2301      	movs	r3, #1
 8004986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800498a:	2310      	movs	r3, #16
 800498c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004990:	2300      	movs	r3, #0
 8004992:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004996:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc fca8 	bl	80012f0 <HAL_RCC_OscConfig>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80049b0:	f000 f90a 	bl	8004bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b4:	230f      	movs	r3, #15
 80049b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80049d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc fefb 	bl	80017d4 <HAL_RCC_ClockConfig>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80049ee:	f000 f8eb 	bl	8004bc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80049f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80049f8:	2300      	movs	r3, #0
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd f8b5 	bl	8001b70 <HAL_RCCEx_PeriphCLKConfig>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8004a16:	f000 f8d7 	bl	8004bc8 <Error_Handler>
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	37e0      	adds	r7, #224	; 0xe0
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000

08004a2c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a32:	f107 0310 	add.w	r3, r7, #16
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
 8004a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a4a:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004a52:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a64:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a70:	481b      	ldr	r0, [pc, #108]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a72:	f7fd fca3 	bl	80023bc <HAL_TIM_Base_Init>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8004a86:	f000 f89f 	bl	8004bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a90:	f107 0310 	add.w	r3, r7, #16
 8004a94:	4619      	mov	r1, r3
 8004a96:	4812      	ldr	r0, [pc, #72]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004a98:	f7fd fce6 	bl	8002468 <HAL_TIM_ConfigClockSource>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8004aac:	f000 f88c 	bl	8004bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4808      	ldr	r0, [pc, #32]	; (8004ae0 <_ZL12MX_TIM2_Initv+0xb4>)
 8004abe:	f7fd fec7 	bl	8002850 <HAL_TIMEx_MasterConfigSynchronization>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8004ad2:	f000 f879 	bl	8004bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ad6:	bf00      	nop
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000094 	.word	0x20000094

08004ae4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <_ZL19MX_USART3_UART_Initv+0x64>)
 8004aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b08:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b26:	4807      	ldr	r0, [pc, #28]	; (8004b44 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004b28:	f7fd feee 	bl	8002908 <HAL_UART_Init>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8004b3c:	f000 f844 	bl	8004bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	200000d4 	.word	0x200000d4
 8004b48:	40004800 	.word	0x40004800

08004b4c <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <_ZL11MX_DMA_Initv+0x48>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <_ZL11MX_DMA_Initv+0x48>)
 8004b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <_ZL11MX_DMA_Initv+0x48>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	200c      	movs	r0, #12
 8004b70:	f7fb fe45 	bl	80007fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004b74:	200c      	movs	r0, #12
 8004b76:	f7fb fe5e 	bl	8000836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	200e      	movs	r0, #14
 8004b80:	f7fb fe3d 	bl	80007fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004b84:	200e      	movs	r0, #14
 8004b86:	f7fb fe56 	bl	8000836 <HAL_NVIC_EnableIRQ>

}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800

08004b98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <_ZL12MX_GPIO_Initv+0x2c>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <_ZL12MX_GPIO_Initv+0x2c>)
 8004ba4:	f043 0308 	orr.w	r3, r3, #8
 8004ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <_ZL12MX_GPIO_Initv+0x2c>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]

}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d80d      	bhi.n	8004c06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	fa22 f103 	lsr.w	r1, r2, r3
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b2ca      	uxtb	r2, r1
 8004bfc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e7ee      	b.n	8004be4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d811      	bhi.n	8004c50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	00d2      	lsls	r2, r2, #3
 8004c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e7ea      	b.n	8004c26 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	08005f74 	.word	0x08005f74

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ffe8 	bl	8004c5c <_ZN3ros15NodeHandleBase_C1Ev>
 8004c8c:	4a3a      	ldr	r2, [pc, #232]	; (8004d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fcd4 	bl	8004644 <_ZN13STM32HardwareC1Ev>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f9be 	bl	800402c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b18      	cmp	r3, #24
 8004cb8:	d80a      	bhi.n	8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e7f1      	b.n	8004cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d80b      	bhi.n	8004cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3301      	adds	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e7f0      	b.n	8004cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d20a      	bcs.n	8004d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e7f0      	b.n	8004cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1e:	d20a      	bcs.n	8004d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	e7f0      	b.n	8004d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
    req_param_resp.ints = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    req_param_resp.floats_length = 0;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
    req_param_resp.floats = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
    req_param_resp.ints_length = 0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
    req_param_resp.ints = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4

    spin_timeout_ = 0;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	08005f60 	.word	0x08005f60

08004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fc7d 	bl	8004688 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
    bytes_ = 0;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
    index_ = 0;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
    topic_ = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
  };
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b18      	cmp	r3, #24
 8004dc8:	dc1c      	bgt.n	8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8004dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	60da      	str	r2, [r3, #12]
        return true;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e004      	b.n	8004e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e7df      	b.n	8004dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004e04:	2300      	movs	r3, #0
  }
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fd1f 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 8004e24:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 368c 	ldr.w	r3, [r3, #1676]	; 0x68c
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d903      	bls.n	8004e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
    if (mode_ != MODE_FIRST_FF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3690 	ldr.w	r3, [r3, #1680]	; 0x690
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d903      	bls.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
      if (spin_timeout_ > 0)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d014      	beq.n	8004e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fcf8 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bf8c      	ite	hi
 8004e82:	2301      	movhi	r3, #1
 8004e84:	2300      	movls	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8004e8c:	f06f 0301 	mvn.w	r3, #1
 8004e90:	e197      	b.n	80051c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fc16 	bl	80046c8 <_ZN13STM32Hardware4readEv>
 8004e9c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f2c0 8177 	blt.w	8005194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 2680 	ldr.w	r2, [r3, #1664]	; 0x680
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d11e      	bne.n	8004efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	f8c2 167c 	str.w	r1, [r2, #1660]	; 0x67c
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	b2d1      	uxtb	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	460a      	mov	r2, r1
 8004ed8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
        bytes_--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004ee2:	1e5a      	subs	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1b4      	bne.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8004efc:	e7af      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d128      	bne.n	8004f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2bff      	cmp	r3, #255	; 0xff
 8004f0c:	d10d      	bne.n	8004f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f103 0214 	add.w	r2, r3, #20
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2690 	str.w	r2, [r3, #1680]	; 0x690
 8004f28:	e799      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fc97 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bf8c      	ite	hi
 8004f42:	2301      	movhi	r3, #1
 8004f44:	2300      	movls	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d088      	beq.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
          return SPIN_TIMEOUT;
 8004f54:	f06f 0301 	mvn.w	r3, #1
 8004f58:	e133      	b.n	80051c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d11b      	bne.n	8004f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2bfe      	cmp	r3, #254	; 0xfe
 8004f68:	d107      	bne.n	8004f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8004f78:	e771      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
          if (configured_ == false)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f43f af65 	beq.w	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f918 	bl	80051ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004f9a:	e760      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d113      	bne.n	8004fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        index_ = 0;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
        mode_++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        checksum_ = data;               /* first byte for calculating size checksum */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
 8004fcc:	e747      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d110      	bne.n	8004ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 2674 	ldr.w	r2, [r3, #1652]	; 0x674
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8004ff8:	e731      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005000:	2b04      	cmp	r3, #4
 8005002:	d116      	bne.n	8005032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 800500a:	425a      	negs	r2, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	bf58      	it	pl
 8005012:	4253      	negpl	r3, r2
 8005014:	2bff      	cmp	r3, #255	; 0xff
 8005016:	d107      	bne.n	8005028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8005026:	e71a      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8005030:	e715      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005038:	2b05      	cmp	r3, #5
 800503a:	d10f      	bne.n	800505c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        checksum_ = data;               /* first byte included in checksum */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
 800505a:	e700      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8005062:	2b06      	cmp	r3, #6
 8005064:	d117      	bne.n	8005096 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 2678 	ldr.w	r2, [r3, #1656]	; 0x678
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_ = MODE_MESSAGE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2207      	movs	r2, #7
 800507c:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if (bytes_ == 0)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8005086:	2b00      	cmp	r3, #0
 8005088:	f47f aee9 	bne.w	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2208      	movs	r2, #8
 8005090:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 8005094:	e6e3      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800509c:	2b08      	cmp	r3, #8
 800509e:	f47f aede 	bne.w	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if ((checksum_ % 256) == 255)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 80050b0:	425a      	negs	r2, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	bf58      	it	pl
 80050b8:	4253      	negpl	r3, r2
 80050ba:	2bff      	cmp	r3, #255	; 0xff
 80050bc:	f47f aecf 	bne.w	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d110      	bne.n	80050ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f87d 	bl	80051ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f898 	bl	8005206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            last_sync_receive_time = c_time;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
            return SPIN_ERR;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ea:	e06a      	b.n	80051c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80050f2:	2b0a      	cmp	r3, #10
 80050f4:	d107      	bne.n	8005106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f962 	bl	80053c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005104:	e6ab      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800510c:	2b06      	cmp	r3, #6
 800510e:	d10e      	bne.n	800512e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7ff f8b9 	bl	8004296 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 800512c:	e697      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005134:	2b0b      	cmp	r3, #11
 8005136:	d104      	bne.n	8005142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8005140:	e68d      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005148:	3b64      	subs	r3, #100	; 0x64
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f43f ae81 	beq.w	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005162:	3b64      	subs	r3, #100	; 0x64
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	6858      	ldr	r0, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8005176:	3b64      	subs	r3, #100	; 0x64
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	f502 72d4 	add.w	r2, r2, #424	; 0x1a8
 800518e:	4611      	mov	r1, r2
 8005190:	4798      	blx	r3
    while (true)
 8005192:	e664      	b.n	8004e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005194:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00f      	beq.n	80051c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d906      	bls.n	80051c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f809 	bl	80051ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
    return SPIN_OK;
 80051c0:	2300      	movs	r3, #0
  }
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe fbc4 	bl	8003964 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f107 020c 	add.w	r2, r7, #12
 80051e6:	210a      	movs	r1, #10
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
    rt_time = hardware_.time();
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fb36 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  }
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005206:	b590      	push	{r4, r7, lr}
 8005208:	b08b      	sub	sp, #44	; 0x2c
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800520e:	f107 030c 	add.w	r3, r7, #12
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fc96 	bl	8003b44 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2b18      	cmp	r3, #24
 8005220:	dc5b      	bgt.n	80052da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 800522a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d04f      	beq.n	80052d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 800523a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	b29b      	uxth	r3, r3
 8005242:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4608      	mov	r0, r1
 8005278:	4798      	blx	r3
 800527a:	4603      	mov	r3, r0
 800527c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528a:	6859      	ldr	r1, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4608      	mov	r0, r1
 80052a2:	4798      	blx	r3
 80052a4:	4603      	mov	r3, r0
 80052a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80052a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ac:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681c      	ldr	r4, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	f502 72b5 	add.w	r2, r2, #362	; 0x16a
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f9a0 	bl	8004606 <_ZN3ros9Publisher15getEndpointTypeEv>
 80052c6:	4601      	mov	r1, r0
 80052c8:	f107 030c 	add.w	r3, r7, #12
 80052cc:	461a      	mov	r2, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	3301      	adds	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
 80052d8:	e7a0      	b.n	800521c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	2b18      	cmp	r3, #24
 80052e2:	dc68      	bgt.n	80053b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d05b      	beq.n	80053ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b29b      	uxth	r3, r3
 8005308:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4608      	mov	r0, r1
 8005340:	4798      	blx	r3
 8005342:	4603      	mov	r3, r0
 8005344:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4608      	mov	r0, r1
 800536a:	4798      	blx	r3
 800536c:	4603      	mov	r3, r0
 800536e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005374:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681c      	ldr	r4, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3304      	adds	r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4608      	mov	r0, r1
 80053a0:	4798      	blx	r3
 80053a2:	4601      	mov	r1, r0
 80053a4:	f107 030c 	add.w	r3, r7, #12
 80053a8:	461a      	mov	r2, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	3301      	adds	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
 80053b4:	e793      	b.n	80052de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
  }
 80053be:	bf00      	nop
 80053c0:	372c      	adds	r7, #44	; 0x2c
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd90      	pop	{r4, r7, pc}
	...

080053c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fac4 	bl	8003964 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fa3e 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80053f2:	f107 0308 	add.w	r3, r7, #8
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fb23 	bl	8003a44 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4915      	ldr	r1, [pc, #84]	; (8005458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005404:	fba1 1303 	umull	r1, r3, r1, r3
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4b11      	ldr	r3, [pc, #68]	; (8005458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005414:	fba3 0302 	umull	r0, r3, r3, r2
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800541e:	fb00 f303 	mul.w	r3, r0, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	4a0d      	ldr	r2, [pc, #52]	; (800545c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	440b      	add	r3, r1
 800542c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8a4 	bl	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fa0e 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
  }
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	10624dd3 	.word	0x10624dd3
 800545c:	000f4240 	.word	0x000f4240

08005460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b63      	cmp	r3, #99	; 0x63
 8005470:	dd09      	ble.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8005482:	2300      	movs	r3, #0
 8005484:	e077      	b.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	f502 726a 	add.w	r2, r2, #936	; 0x3a8
 8005492:	3207      	adds	r2, #7
 8005494:	4611      	mov	r1, r2
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
 800549a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	22ff      	movs	r2, #255	; 0xff
 80054a0:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
    message_out[1] = PROTOCOL_VER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	22fe      	movs	r2, #254	; 0xfe
 80054a8:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	121b      	asrs	r3, r3, #8
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 23aa 	ldrb.w	r2, [r3, #938]	; 0x3aa
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 80054d0:	4413      	add	r3, r2
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f883 23ad 	strb.w	r2, [r3, #941]	; 0x3ad
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	121b      	asrs	r3, r3, #8
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae

    /* calculate checksum */
    int chk = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80054fa:	2305      	movs	r3, #5
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3307      	adds	r3, #7
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	da0d      	bge.n	8005524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	4413      	add	r3, r2
 800550e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3301      	adds	r3, #1
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e7ec      	b.n	80054fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3307      	adds	r3, #7
 8005528:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	425a      	negs	r2, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	bf58      	it	pl
 8005534:	4253      	negpl	r3, r2
 8005536:	b2da      	uxtb	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	6179      	str	r1, [r7, #20]
 800553e:	43d2      	mvns	r2, r2
 8005540:	b2d1      	uxtb	r1, r2
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	460a      	mov	r2, r1
 8005548:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8

    if (l <= OUTPUT_SIZE)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005552:	dc0a      	bgt.n	800556a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1d18      	adds	r0, r3, #4
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4619      	mov	r1, r3
 8005562:	f7ff f939 	bl	80047d8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e005      	b.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800556a:	4905      	ldr	r1, [pc, #20]	; (8005580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f849 	bl	8005604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	08005ef8 	.word	0x08005ef8

08005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f965 	bl	8004862 <_ZN13STM32Hardware4timeEv>
 8005598:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4915      	ldr	r1, [pc, #84]	; (80055f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80055a2:	fba1 1303 	umull	r1, r3, r1, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80055ba:	fba3 0302 	umull	r0, r3, r3, r2
 80055be:	099b      	lsrs	r3, r3, #6
 80055c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055c4:	fb00 f303 	mul.w	r3, r0, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	1aca      	subs	r2, r1, r3
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80055d4:	4413      	add	r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    normalizeSecNSec(sec_offset, nsec_offset);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 f842 	bl	8005674 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	10624dd3 	.word	0x10624dd3
 80055fc:	000f4240 	.word	0x000f4240
 8005600:	3b9aca00 	.word	0x3b9aca00

08005604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	2103      	movs	r1, #3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f804 	bl	8005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	460b      	mov	r3, r1
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fc4a 	bl	8003ecc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005638:	7afb      	ldrb	r3, [r7, #11]
 800563a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f107 0214 	add.w	r2, r7, #20
 800564a:	2107      	movs	r1, #7
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	4798      	blx	r3
  }
 8005650:	bf00      	nop
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
  };
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/ros_time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	0a5a      	lsrs	r2, r3, #9
 8005684:	490f      	ldr	r1, [pc, #60]	; (80056c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005686:	fba1 1202 	umull	r1, r2, r1, r2
 800568a:	09d2      	lsrs	r2, r2, #7
 800568c:	490e      	ldr	r1, [pc, #56]	; (80056c8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800568e:	fb01 f202 	mul.w	r2, r1, r2
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	0a5b      	lsrs	r3, r3, #9
 800569c:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	09db      	lsrs	r3, r3, #7
 80056a4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	00044b83 	.word	0x00044b83
 80056c8:	3b9aca00 	.word	0x3b9aca00

080056cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <HAL_MspInit+0x44>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <HAL_MspInit+0x44>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <HAL_MspInit+0x44>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_MspInit+0x44>)
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	4a08      	ldr	r2, [pc, #32]	; (8005710 <HAL_MspInit+0x44>)
 80056f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f4:	6453      	str	r3, [r2, #68]	; 0x44
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_MspInit+0x44>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800

08005714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d10b      	bne.n	800573e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_TIM_Base_MspInit+0x38>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	4a08      	ldr	r2, [pc, #32]	; (800574c <HAL_TIM_Base_MspInit+0x38>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6413      	str	r3, [r2, #64]	; 0x40
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <HAL_TIM_Base_MspInit+0x38>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800

08005750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <HAL_UART_MspInit+0x148>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f040 808d 	bne.w	800588e <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005774:	4b49      	ldr	r3, [pc, #292]	; (800589c <HAL_UART_MspInit+0x14c>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	4a48      	ldr	r2, [pc, #288]	; (800589c <HAL_UART_MspInit+0x14c>)
 800577a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577e:	6413      	str	r3, [r2, #64]	; 0x40
 8005780:	4b46      	ldr	r3, [pc, #280]	; (800589c <HAL_UART_MspInit+0x14c>)
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800578c:	4b43      	ldr	r3, [pc, #268]	; (800589c <HAL_UART_MspInit+0x14c>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	4a42      	ldr	r2, [pc, #264]	; (800589c <HAL_UART_MspInit+0x14c>)
 8005792:	f043 0308 	orr.w	r3, r3, #8
 8005796:	6313      	str	r3, [r2, #48]	; 0x30
 8005798:	4b40      	ldr	r3, [pc, #256]	; (800589c <HAL_UART_MspInit+0x14c>)
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057aa:	2302      	movs	r3, #2
 80057ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b2:	2303      	movs	r3, #3
 80057b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057b6:	2307      	movs	r3, #7
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	4619      	mov	r1, r3
 80057c0:	4837      	ldr	r0, [pc, #220]	; (80058a0 <HAL_UART_MspInit+0x150>)
 80057c2:	f7fb fbeb 	bl	8000f9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80057c6:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057c8:	4a37      	ldr	r2, [pc, #220]	; (80058a8 <HAL_UART_MspInit+0x158>)
 80057ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057d4:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057da:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057e8:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057ee:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_UART_MspInit+0x154>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005800:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <HAL_UART_MspInit+0x154>)
 8005802:	2200      	movs	r2, #0
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005806:	4827      	ldr	r0, [pc, #156]	; (80058a4 <HAL_UART_MspInit+0x154>)
 8005808:	f7fb f830 	bl	800086c <HAL_DMA_Init>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005812:	f7ff f9d9 	bl	8004bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <HAL_UART_MspInit+0x154>)
 800581a:	66da      	str	r2, [r3, #108]	; 0x6c
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_UART_MspInit+0x154>)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <HAL_UART_MspInit+0x160>)
 8005826:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005828:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_UART_MspInit+0x15c>)
 800582a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800582e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005830:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005836:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005838:	2200      	movs	r2, #0
 800583a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_UART_MspInit+0x15c>)
 800583e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005842:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005846:	2200      	movs	r2, #0
 8005848:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800584a:	4b18      	ldr	r3, [pc, #96]	; (80058ac <HAL_UART_MspInit+0x15c>)
 800584c:	2200      	movs	r2, #0
 800584e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005858:	2200      	movs	r2, #0
 800585a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_UART_MspInit+0x15c>)
 800585e:	2200      	movs	r2, #0
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005862:	4812      	ldr	r0, [pc, #72]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005864:	f7fb f802 	bl	800086c <HAL_DMA_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 800586e:	f7ff f9ab 	bl	8004bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <HAL_UART_MspInit+0x15c>)
 8005876:	669a      	str	r2, [r3, #104]	; 0x68
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <HAL_UART_MspInit+0x15c>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800587e:	2200      	movs	r2, #0
 8005880:	2100      	movs	r1, #0
 8005882:	2027      	movs	r0, #39	; 0x27
 8005884:	f7fa ffbb 	bl	80007fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005888:	2027      	movs	r0, #39	; 0x27
 800588a:	f7fa ffd4 	bl	8000836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800588e:	bf00      	nop
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40004800 	.word	0x40004800
 800589c:	40023800 	.word	0x40023800
 80058a0:	40020c00 	.word	0x40020c00
 80058a4:	20000154 	.word	0x20000154
 80058a8:	40026028 	.word	0x40026028
 80058ac:	200001b4 	.word	0x200001b4
 80058b0:	40026058 	.word	0x40026058

080058b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058c6:	e7fe      	b.n	80058c6 <HardFault_Handler+0x4>

080058c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058cc:	e7fe      	b.n	80058cc <MemManage_Handler+0x4>

080058ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058ce:	b480      	push	{r7}
 80058d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058d2:	e7fe      	b.n	80058d2 <BusFault_Handler+0x4>

080058d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058d8:	e7fe      	b.n	80058d8 <UsageFault_Handler+0x4>

080058da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058f6:	b480      	push	{r7}
 80058f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058fa:	bf00      	nop
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005908:	f7fa fe5c 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800590c:	bf00      	nop
 800590e:	bd80      	pop	{r7, pc}

08005910 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005914:	4802      	ldr	r0, [pc, #8]	; (8005920 <DMA1_Stream1_IRQHandler+0x10>)
 8005916:	f7fb f8d9 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000154 	.word	0x20000154

08005924 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005928:	4802      	ldr	r0, [pc, #8]	; (8005934 <DMA1_Stream3_IRQHandler+0x10>)
 800592a:	f7fb f8cf 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	200001b4 	.word	0x200001b4

08005938 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800593c:	4802      	ldr	r0, [pc, #8]	; (8005948 <USART3_IRQHandler+0x10>)
 800593e:	f7fd f931 	bl	8002ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200000d4 	.word	0x200000d4

0800594c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
	return 1;
 8005950:	2301      	movs	r3, #1
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_kill>:

int _kill(int pid, int sig)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005966:	f000 f8b9 	bl	8005adc <__errno>
 800596a:	4602      	mov	r2, r0
 800596c:	2316      	movs	r3, #22
 800596e:	6013      	str	r3, [r2, #0]
	return -1;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_exit>:

void _exit (int status)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ffe7 	bl	800595c <_kill>
	while (1) {}		/* Make sure we hang here */
 800598e:	e7fe      	b.n	800598e <_exit+0x12>

08005990 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <_sbrk+0x50>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <_sbrk+0x16>
		heap_end = &end;
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <_sbrk+0x50>)
 80059a2:	4a10      	ldr	r2, [pc, #64]	; (80059e4 <_sbrk+0x54>)
 80059a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <_sbrk+0x50>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <_sbrk+0x50>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4413      	add	r3, r2
 80059b4:	466a      	mov	r2, sp
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d907      	bls.n	80059ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80059ba:	f000 f88f 	bl	8005adc <__errno>
 80059be:	4602      	mov	r2, r0
 80059c0:	230c      	movs	r3, #12
 80059c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c8:	e006      	b.n	80059d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <_sbrk+0x50>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a03      	ldr	r2, [pc, #12]	; (80059e0 <_sbrk+0x50>)
 80059d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000214 	.word	0x20000214
 80059e4:	20000228 	.word	0x20000228

080059e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <SystemInit+0x5c>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <SystemInit+0x5c>)
 80059f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80059fc:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <SystemInit+0x60>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a11      	ldr	r2, [pc, #68]	; (8005a48 <SystemInit+0x60>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <SystemInit+0x60>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <SystemInit+0x60>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	490d      	ldr	r1, [pc, #52]	; (8005a48 <SystemInit+0x60>)
 8005a14:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <SystemInit+0x64>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <SystemInit+0x60>)
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <SystemInit+0x68>)
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <SystemInit+0x60>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <SystemInit+0x60>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <SystemInit+0x60>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a32:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <SystemInit+0x5c>)
 8005a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a38:	609a      	str	r2, [r3, #8]
#endif
}
 8005a3a:	bf00      	nop
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	e000ed00 	.word	0xe000ed00
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	fef6ffff 	.word	0xfef6ffff
 8005a50:	24003010 	.word	0x24003010

08005a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a5a:	e003      	b.n	8005a64 <LoopCopyDataInit>

08005a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a62:	3104      	adds	r1, #4

08005a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a64:	480b      	ldr	r0, [pc, #44]	; (8005a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a6c:	d3f6      	bcc.n	8005a5c <CopyDataInit>
  ldr  r2, =_sbss
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a70:	e002      	b.n	8005a78 <LoopFillZerobss>

08005a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a74:	f842 3b04 	str.w	r3, [r2], #4

08005a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a7c:	d3f9      	bcc.n	8005a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a7e:	f7ff ffb3 	bl	80059e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a82:	f000 f831 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a86:	f7fe fef7 	bl	8004878 <main>
  bx  lr    
 8005a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a8c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005a90:	08006038 	.word	0x08006038
  ldr  r0, =_sdata
 8005a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a98:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8005a9c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005aa0:	20000228 	.word	0x20000228

08005aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005aa4:	e7fe      	b.n	8005aa4 <ADC_IRQHandler>

08005aa6 <__cxa_pure_virtual>:
 8005aa6:	b508      	push	{r3, lr}
 8005aa8:	f000 f80c 	bl	8005ac4 <_ZSt9terminatev>

08005aac <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005aac:	b508      	push	{r3, lr}
 8005aae:	4780      	blx	r0
 8005ab0:	f000 f80d 	bl	8005ace <abort>

08005ab4 <_ZSt13get_terminatev>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <_ZSt13get_terminatev+0xc>)
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	f3bf 8f5b 	dmb	ish
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2000000c 	.word	0x2000000c

08005ac4 <_ZSt9terminatev>:
 8005ac4:	b508      	push	{r3, lr}
 8005ac6:	f7ff fff5 	bl	8005ab4 <_ZSt13get_terminatev>
 8005aca:	f7ff ffef 	bl	8005aac <_ZN10__cxxabiv111__terminateEPFvvE>

08005ace <abort>:
 8005ace:	b508      	push	{r3, lr}
 8005ad0:	2006      	movs	r0, #6
 8005ad2:	f000 f871 	bl	8005bb8 <raise>
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7ff ff50 	bl	800597c <_exit>

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	; (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000010 	.word	0x20000010

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4e0d      	ldr	r6, [pc, #52]	; (8005b20 <__libc_init_array+0x38>)
 8005aec:	4c0d      	ldr	r4, [pc, #52]	; (8005b24 <__libc_init_array+0x3c>)
 8005aee:	1ba4      	subs	r4, r4, r6
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	2500      	movs	r5, #0
 8005af4:	42a5      	cmp	r5, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	4e0b      	ldr	r6, [pc, #44]	; (8005b28 <__libc_init_array+0x40>)
 8005afa:	4c0c      	ldr	r4, [pc, #48]	; (8005b2c <__libc_init_array+0x44>)
 8005afc:	f000 f960 	bl	8005dc0 <_init>
 8005b00:	1ba4      	subs	r4, r4, r6
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	2500      	movs	r5, #0
 8005b06:	42a5      	cmp	r5, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b10:	4798      	blx	r3
 8005b12:	3501      	adds	r5, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b1a:	4798      	blx	r3
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	08006030 	.word	0x08006030
 8005b24:	08006030 	.word	0x08006030
 8005b28:	08006030 	.word	0x08006030
 8005b2c:	08006034 	.word	0x08006034

08005b30 <memcpy>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	1e43      	subs	r3, r0, #1
 8005b34:	440a      	add	r2, r1
 8005b36:	4291      	cmp	r1, r2
 8005b38:	d100      	bne.n	8005b3c <memcpy+0xc>
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b44:	e7f7      	b.n	8005b36 <memcpy+0x6>

08005b46 <memset>:
 8005b46:	4402      	add	r2, r0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d100      	bne.n	8005b50 <memset+0xa>
 8005b4e:	4770      	bx	lr
 8005b50:	f803 1b01 	strb.w	r1, [r3], #1
 8005b54:	e7f9      	b.n	8005b4a <memset+0x4>
	...

08005b58 <realloc>:
 8005b58:	4b02      	ldr	r3, [pc, #8]	; (8005b64 <realloc+0xc>)
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	f000 b8a0 	b.w	8005ca4 <_realloc_r>
 8005b64:	20000010 	.word	0x20000010

08005b68 <_raise_r>:
 8005b68:	291f      	cmp	r1, #31
 8005b6a:	b538      	push	{r3, r4, r5, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	460d      	mov	r5, r1
 8005b70:	d904      	bls.n	8005b7c <_raise_r+0x14>
 8005b72:	2316      	movs	r3, #22
 8005b74:	6003      	str	r3, [r0, #0]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b7e:	b112      	cbz	r2, 8005b86 <_raise_r+0x1e>
 8005b80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b84:	b94b      	cbnz	r3, 8005b9a <_raise_r+0x32>
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 f830 	bl	8005bec <_getpid_r>
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4601      	mov	r1, r0
 8005b90:	4620      	mov	r0, r4
 8005b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b96:	f000 b817 	b.w	8005bc8 <_kill_r>
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d00a      	beq.n	8005bb4 <_raise_r+0x4c>
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	d103      	bne.n	8005baa <_raise_r+0x42>
 8005ba2:	2316      	movs	r3, #22
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e7e7      	b.n	8005b7a <_raise_r+0x12>
 8005baa:	2400      	movs	r4, #0
 8005bac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	4798      	blx	r3
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e7e0      	b.n	8005b7a <_raise_r+0x12>

08005bb8 <raise>:
 8005bb8:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <raise+0xc>)
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7ff bfd3 	b.w	8005b68 <_raise_r>
 8005bc2:	bf00      	nop
 8005bc4:	20000010 	.word	0x20000010

08005bc8 <_kill_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4c07      	ldr	r4, [pc, #28]	; (8005be8 <_kill_r+0x20>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4605      	mov	r5, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	f7ff fec1 	bl	800595c <_kill>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	d102      	bne.n	8005be4 <_kill_r+0x1c>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	b103      	cbz	r3, 8005be4 <_kill_r+0x1c>
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	bf00      	nop
 8005be8:	20000224 	.word	0x20000224

08005bec <_getpid_r>:
 8005bec:	f7ff beae 	b.w	800594c <_getpid>

08005bf0 <_malloc_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	1ccd      	adds	r5, r1, #3
 8005bf4:	f025 0503 	bic.w	r5, r5, #3
 8005bf8:	3508      	adds	r5, #8
 8005bfa:	2d0c      	cmp	r5, #12
 8005bfc:	bf38      	it	cc
 8005bfe:	250c      	movcc	r5, #12
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	4606      	mov	r6, r0
 8005c04:	db01      	blt.n	8005c0a <_malloc_r+0x1a>
 8005c06:	42a9      	cmp	r1, r5
 8005c08:	d903      	bls.n	8005c12 <_malloc_r+0x22>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	2000      	movs	r0, #0
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	f000 f87d 	bl	8005d10 <__malloc_lock>
 8005c16:	4a21      	ldr	r2, [pc, #132]	; (8005c9c <_malloc_r+0xac>)
 8005c18:	6814      	ldr	r4, [r2, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	b991      	cbnz	r1, 8005c44 <_malloc_r+0x54>
 8005c1e:	4c20      	ldr	r4, [pc, #128]	; (8005ca0 <_malloc_r+0xb0>)
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	b91b      	cbnz	r3, 8005c2c <_malloc_r+0x3c>
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 f863 	bl	8005cf0 <_sbrk_r>
 8005c2a:	6020      	str	r0, [r4, #0]
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 f85e 	bl	8005cf0 <_sbrk_r>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d124      	bne.n	8005c82 <_malloc_r+0x92>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	6033      	str	r3, [r6, #0]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f868 	bl	8005d12 <__malloc_unlock>
 8005c42:	e7e4      	b.n	8005c0e <_malloc_r+0x1e>
 8005c44:	680b      	ldr	r3, [r1, #0]
 8005c46:	1b5b      	subs	r3, r3, r5
 8005c48:	d418      	bmi.n	8005c7c <_malloc_r+0x8c>
 8005c4a:	2b0b      	cmp	r3, #11
 8005c4c:	d90f      	bls.n	8005c6e <_malloc_r+0x7e>
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	50cd      	str	r5, [r1, r3]
 8005c52:	18cc      	adds	r4, r1, r3
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 f85c 	bl	8005d12 <__malloc_unlock>
 8005c5a:	f104 000b 	add.w	r0, r4, #11
 8005c5e:	1d23      	adds	r3, r4, #4
 8005c60:	f020 0007 	bic.w	r0, r0, #7
 8005c64:	1ac3      	subs	r3, r0, r3
 8005c66:	d0d3      	beq.n	8005c10 <_malloc_r+0x20>
 8005c68:	425a      	negs	r2, r3
 8005c6a:	50e2      	str	r2, [r4, r3]
 8005c6c:	e7d0      	b.n	8005c10 <_malloc_r+0x20>
 8005c6e:	428c      	cmp	r4, r1
 8005c70:	684b      	ldr	r3, [r1, #4]
 8005c72:	bf16      	itet	ne
 8005c74:	6063      	strne	r3, [r4, #4]
 8005c76:	6013      	streq	r3, [r2, #0]
 8005c78:	460c      	movne	r4, r1
 8005c7a:	e7eb      	b.n	8005c54 <_malloc_r+0x64>
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6849      	ldr	r1, [r1, #4]
 8005c80:	e7cc      	b.n	8005c1c <_malloc_r+0x2c>
 8005c82:	1cc4      	adds	r4, r0, #3
 8005c84:	f024 0403 	bic.w	r4, r4, #3
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d005      	beq.n	8005c98 <_malloc_r+0xa8>
 8005c8c:	1a21      	subs	r1, r4, r0
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f82e 	bl	8005cf0 <_sbrk_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0cf      	beq.n	8005c38 <_malloc_r+0x48>
 8005c98:	6025      	str	r5, [r4, #0]
 8005c9a:	e7db      	b.n	8005c54 <_malloc_r+0x64>
 8005c9c:	20000218 	.word	0x20000218
 8005ca0:	2000021c 	.word	0x2000021c

08005ca4 <_realloc_r>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	4614      	mov	r4, r2
 8005caa:	460e      	mov	r6, r1
 8005cac:	b921      	cbnz	r1, 8005cb8 <_realloc_r+0x14>
 8005cae:	4611      	mov	r1, r2
 8005cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cb4:	f7ff bf9c 	b.w	8005bf0 <_malloc_r>
 8005cb8:	b922      	cbnz	r2, 8005cc4 <_realloc_r+0x20>
 8005cba:	f000 f82b 	bl	8005d14 <_free_r>
 8005cbe:	4625      	mov	r5, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc4:	f000 f874 	bl	8005db0 <_malloc_usable_size_r>
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d20f      	bcs.n	8005cec <_realloc_r+0x48>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f7ff ff8e 	bl	8005bf0 <_malloc_r>
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d0f2      	beq.n	8005cc0 <_realloc_r+0x1c>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4622      	mov	r2, r4
 8005cde:	f7ff ff27 	bl	8005b30 <memcpy>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f000 f815 	bl	8005d14 <_free_r>
 8005cea:	e7e9      	b.n	8005cc0 <_realloc_r+0x1c>
 8005cec:	4635      	mov	r5, r6
 8005cee:	e7e7      	b.n	8005cc0 <_realloc_r+0x1c>

08005cf0 <_sbrk_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4c06      	ldr	r4, [pc, #24]	; (8005d0c <_sbrk_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	f7ff fe48 	bl	8005990 <_sbrk>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_sbrk_r+0x1a>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_sbrk_r+0x1a>
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20000224 	.word	0x20000224

08005d10 <__malloc_lock>:
 8005d10:	4770      	bx	lr

08005d12 <__malloc_unlock>:
 8005d12:	4770      	bx	lr

08005d14 <_free_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4605      	mov	r5, r0
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d045      	beq.n	8005da8 <_free_r+0x94>
 8005d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d20:	1f0c      	subs	r4, r1, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfb8      	it	lt
 8005d26:	18e4      	addlt	r4, r4, r3
 8005d28:	f7ff fff2 	bl	8005d10 <__malloc_lock>
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <_free_r+0x98>)
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	4610      	mov	r0, r2
 8005d32:	b933      	cbnz	r3, 8005d42 <_free_r+0x2e>
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	6014      	str	r4, [r2, #0]
 8005d38:	4628      	mov	r0, r5
 8005d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d3e:	f7ff bfe8 	b.w	8005d12 <__malloc_unlock>
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	d90c      	bls.n	8005d60 <_free_r+0x4c>
 8005d46:	6821      	ldr	r1, [r4, #0]
 8005d48:	1862      	adds	r2, r4, r1
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	bf04      	itt	eq
 8005d4e:	681a      	ldreq	r2, [r3, #0]
 8005d50:	685b      	ldreq	r3, [r3, #4]
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	bf04      	itt	eq
 8005d56:	1852      	addeq	r2, r2, r1
 8005d58:	6022      	streq	r2, [r4, #0]
 8005d5a:	6004      	str	r4, [r0, #0]
 8005d5c:	e7ec      	b.n	8005d38 <_free_r+0x24>
 8005d5e:	4613      	mov	r3, r2
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	b10a      	cbz	r2, 8005d68 <_free_r+0x54>
 8005d64:	42a2      	cmp	r2, r4
 8005d66:	d9fa      	bls.n	8005d5e <_free_r+0x4a>
 8005d68:	6819      	ldr	r1, [r3, #0]
 8005d6a:	1858      	adds	r0, r3, r1
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d10b      	bne.n	8005d88 <_free_r+0x74>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	4401      	add	r1, r0
 8005d74:	1858      	adds	r0, r3, r1
 8005d76:	4282      	cmp	r2, r0
 8005d78:	6019      	str	r1, [r3, #0]
 8005d7a:	d1dd      	bne.n	8005d38 <_free_r+0x24>
 8005d7c:	6810      	ldr	r0, [r2, #0]
 8005d7e:	6852      	ldr	r2, [r2, #4]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	4401      	add	r1, r0
 8005d84:	6019      	str	r1, [r3, #0]
 8005d86:	e7d7      	b.n	8005d38 <_free_r+0x24>
 8005d88:	d902      	bls.n	8005d90 <_free_r+0x7c>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	e7d3      	b.n	8005d38 <_free_r+0x24>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	1821      	adds	r1, r4, r0
 8005d94:	428a      	cmp	r2, r1
 8005d96:	bf04      	itt	eq
 8005d98:	6811      	ldreq	r1, [r2, #0]
 8005d9a:	6852      	ldreq	r2, [r2, #4]
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	bf04      	itt	eq
 8005da0:	1809      	addeq	r1, r1, r0
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	605c      	str	r4, [r3, #4]
 8005da6:	e7c7      	b.n	8005d38 <_free_r+0x24>
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	bf00      	nop
 8005dac:	20000218 	.word	0x20000218

08005db0 <_malloc_usable_size_r>:
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f18      	subs	r0, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfbc      	itt	lt
 8005dba:	580b      	ldrlt	r3, [r1, r0]
 8005dbc:	18c0      	addlt	r0, r0, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
