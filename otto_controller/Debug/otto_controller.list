
otto_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  080053dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080053dc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db5b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3b  00000000  00000000  0002db95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00030738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002823f  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a58  00000000  00000000  000595f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1de0  00000000  00000000  0006304f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  00154eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800538c 	.word	0x0800538c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800538c 	.word	0x0800538c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7Encoder8GetCountEv>:
  Encoder(TIM_HandleTypeDef *timer, int ticks_per_meters);


  void Setup();

  int GetCount() {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    int count = ((int) __HAL_TIM_GET_COUNTER(this->timer_)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        - ((this->timer_->Init.Period) / 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
    return count;
 8000554:	68fb      	ldr	r3, [r7, #12]
  }
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period / 2));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>:
//  timer_ = timer;
//  wheel_circumference_ = wheel_circ;
//
//}

Encoder::Encoder(TIM_HandleTypeDef *timer, int ticks_per_meter) {
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  timer_ = timer;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	601a      	str	r2, [r3, #0]
  ticks_per_meter_ = ticks_per_meter;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	615a      	str	r2, [r3, #20]

}
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	213c      	movs	r1, #60	; 0x3c
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 ffce 	bl	800355c <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ffce 	bl	8000562 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005cc:	f001 fae2 	bl	8001b94 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005ee:	f001 fad1 	bl	8001b94 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff9d 	bl	8000538 <_ZN7Encoder8GetCountEv>
 80005fe:	4602      	mov	r2, r0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffac 	bl	8000562 <_ZN7Encoder10ResetCountEv>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN7Encoder9GetMetersEv>:
//  float meters = ((float) this->ticks_ * this->wheel_circumference_)
//      / TICKS_PER_REVOLUTION;
//  return meters;
//}

float Encoder::GetMeters() {
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  float meters = (((float) this->ticks_) / this->ticks_per_meter_);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000636:	edc7 7a03 	vstr	s15, [r7, #12]
  return meters;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <_ZN7Encoder17GetLinearVelocityEv>:


float Encoder::GetLinearVelocity() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffc0 	bl	80005de <_ZN7Encoder12UpdateValuesEv>
  float meters = this->GetMeters();
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffd7 	bl	8000612 <_ZN7Encoder9GetMetersEv>
 8000664:	ed87 0a05 	vstr	s0, [r7, #20]
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800067a:	edc7 7a04 	vstr	s15, [r7, #16]
  if (deltaTime == 0)
 800067e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d102      	bne.n	8000692 <_ZN7Encoder17GetLinearVelocityEv+0x42>
    return 0;
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	e00c      	b.n	80006ac <_ZN7Encoder17GetLinearVelocityEv+0x5c>
  float linear_velocity = (meters / (deltaTime / 1000));
 8000692:	edd7 7a04 	vldr	s15, [r7, #16]
 8000696:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006bc <_ZN7Encoder17GetLinearVelocityEv+0x6c>
 800069a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800069e:	edd7 6a05 	vldr	s13, [r7, #20]
 80006a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a6:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	ee07 3a90 	vmov	s15, r3
}
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	447a0000 	.word	0x447a0000

080006c0 <_ZN8OdometryC1Ev>:
  float left_velocity_;
  float right_velocity_;


 public:
  Odometry() {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    left_velocity_ = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    right_velocity_ = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  }
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <_ZN8Odometry12UpdateValuesEff>:

  void UpdateValues(float linear_vel, float angular_vel) {
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80006f4:	edc7 0a01 	vstr	s1, [r7, #4]
    left_velocity_ = linear_vel - (BASELINE * angular_vel)/2;
 80006f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000700:	edd7 7a01 	vldr	s15, [r7, #4]
 8000704:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000708:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000760 <_ZN8Odometry12UpdateValuesEff+0x78>
 800070c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000710:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000714:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000718:	ee36 7b47 	vsub.f64	d7, d6, d7
 800071c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	edc3 7a00 	vstr	s15, [r3]
    right_velocity_ = linear_vel + (BASELINE * angular_vel)/2;
 8000726:	edd7 7a02 	vldr	s15, [r7, #8]
 800072a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800072e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000736:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000760 <_ZN8Odometry12UpdateValuesEff+0x78>
 800073a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800073e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000742:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000746:	ee36 7b07 	vadd.f64	d7, d6, d7
 800074a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edc3 7a01 	vstr	s15, [r3, #4]
  }
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	33333333 	.word	0x33333333
 8000764:	3fd33333 	.word	0x3fd33333

08000768 <_ZN8Odometry15GetLeftVelocityEv>:

  float GetLeftVelocity(){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    return left_velocity_;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	ee07 3a90 	vmov	s15, r3
  }
 8000778:	eeb0 0a67 	vmov.f32	s0, s15
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_ZN8Odometry16GetRightVelocityEv>:
  float GetRightVelocity(){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
    return right_velocity_;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	ee07 3a90 	vmov	s15, r3
  }
 8000796:	eeb0 0a67 	vmov.f32	s0, s15
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
  GPIO_TypeDef *dir_gpio_port_;
  uint16_t dir_pin_;
  TIM_HandleTypeDef *pwm_timer_;
  uint32_t pwm_channel_;

  MotorController(GPIO_TypeDef *sleep_gpio_port, uint16_t sleep_pin,
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80fb      	strh	r3, [r7, #6]
                  GPIO_TypeDef *dir_gpio_port, uint16_t dir_pin,
                  TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel) {
    this->sleep_gpio_port_ = sleep_gpio_port;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	601a      	str	r2, [r3, #0]
    this->sleep_pin_ = sleep_pin;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	88fa      	ldrh	r2, [r7, #6]
 80007be:	809a      	strh	r2, [r3, #4]
    this->dir_gpio_port_ = dir_gpio_port;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	609a      	str	r2, [r3, #8]
    this->dir_pin_ = dir_pin;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	8b3a      	ldrh	r2, [r7, #24]
 80007ca:	819a      	strh	r2, [r3, #12]
    this->pwm_timer_ = pwm_timer;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	611a      	str	r2, [r3, #16]
    this->pwm_channel_ = pwm_channel;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6a3a      	ldr	r2, [r7, #32]
 80007d6:	615a      	str	r2, [r3, #20]
  }
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <_ZN15MotorController5setupEv>:

  void setup() {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm_timer_, pwm_channel_);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4610      	mov	r0, r2
 80007fa:	f002 fdd9 	bl	80033b0 <HAL_TIM_PWM_Start>
  }
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <_ZN15MotorController9set_speedEi>:

  void set_speed(int duty_cycle) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
    if (duty_cycle >= 0) {
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	f2c0 8083 	blt.w	8000920 <_ZN15MotorController9set_speedEi+0x118>
      //set direction to forward
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_SET);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6898      	ldr	r0, [r3, #8]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	899b      	ldrh	r3, [r3, #12]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	f001 fc9f 	bl	8002168 <HAL_GPIO_WritePin>

      //check if duty_cycle exceeds maximum
      if (duty_cycle > MAX_DUTY_CYCLE)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	f240 3216 	movw	r2, #790	; 0x316
 8000830:	4293      	cmp	r3, r2
 8000832:	dd3d      	ble.n	80008b0 <_ZN15MotorController9set_speedEi+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d106      	bne.n	800084a <_ZN15MotorController9set_speedEi+0x42>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	691b      	ldr	r3, [r3, #16]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f240 3216 	movw	r2, #790	; 0x316
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
 8000848:	e0f5      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d106      	bne.n	8000860 <_ZN15MotorController9set_speedEi+0x58>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f240 3216 	movw	r2, #790	; 0x316
 800085c:	639a      	str	r2, [r3, #56]	; 0x38
 800085e:	e0ea      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	2b08      	cmp	r3, #8
 8000866:	d106      	bne.n	8000876 <_ZN15MotorController9set_speedEi+0x6e>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f240 3216 	movw	r2, #790	; 0x316
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
 8000874:	e0df      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	2b0c      	cmp	r3, #12
 800087c:	d106      	bne.n	800088c <_ZN15MotorController9set_speedEi+0x84>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f240 3216 	movw	r2, #790	; 0x316
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
 800088a:	e0d4      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	2b10      	cmp	r3, #16
 8000892:	d106      	bne.n	80008a2 <_ZN15MotorController9set_speedEi+0x9a>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f240 3216 	movw	r2, #790	; 0x316
 800089e:	659a      	str	r2, [r3, #88]	; 0x58
 80008a0:	e0c9      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f240 3216 	movw	r2, #790	; 0x316
 80008ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80008ae:	e0c2      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
      else
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, duty_cycle);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <_ZN15MotorController9set_speedEi+0xbc>
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
 80008c2:	e0b8      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d105      	bne.n	80008d8 <_ZN15MotorController9set_speedEi+0xd0>
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
 80008d6:	e0ae      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d105      	bne.n	80008ec <_ZN15MotorController9set_speedEi+0xe4>
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ea:	e0a4      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	2b0c      	cmp	r3, #12
 80008f2:	d105      	bne.n	8000900 <_ZN15MotorController9set_speedEi+0xf8>
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40
 80008fe:	e09a      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	2b10      	cmp	r3, #16
 8000906:	d105      	bne.n	8000914 <_ZN15MotorController9set_speedEi+0x10c>
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	659a      	str	r2, [r3, #88]	; 0x58
 8000912:	e090      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	65da      	str	r2, [r3, #92]	; 0x5c
 800091e:	e08a      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>

    } else if (duty_cycle < 0){
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f280 8087 	bge.w	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
      //set direction to backwards
      HAL_GPIO_WritePin(dir_gpio_port_, dir_pin_, GPIO_PIN_RESET);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6898      	ldr	r0, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	899b      	ldrh	r3, [r3, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	f001 fc18 	bl	8002168 <HAL_GPIO_WritePin>

      //check if duty_cycle is lower than minimum
      if (duty_cycle < -MAX_DUTY_CYCLE)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <_ZN15MotorController9set_speedEi+0x248>)
 800093c:	4293      	cmp	r3, r2
 800093e:	da3d      	bge.n	80009bc <_ZN15MotorController9set_speedEi+0x1b4>
        __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, MAX_DUTY_CYCLE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d106      	bne.n	8000956 <_ZN15MotorController9set_speedEi+0x14e>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f240 3216 	movw	r2, #790	; 0x316
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
 8000954:	e06f      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d106      	bne.n	800096c <_ZN15MotorController9set_speedEi+0x164>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f240 3216 	movw	r2, #790	; 0x316
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
 800096a:	e064      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d106      	bne.n	8000982 <_ZN15MotorController9set_speedEi+0x17a>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f240 3216 	movw	r2, #790	; 0x316
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000980:	e059      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	2b0c      	cmp	r3, #12
 8000988:	d106      	bne.n	8000998 <_ZN15MotorController9set_speedEi+0x190>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f240 3216 	movw	r2, #790	; 0x316
 8000994:	641a      	str	r2, [r3, #64]	; 0x40
 8000996:	e04e      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	2b10      	cmp	r3, #16
 800099e:	d106      	bne.n	80009ae <_ZN15MotorController9set_speedEi+0x1a6>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f240 3216 	movw	r2, #790	; 0x316
 80009aa:	659a      	str	r2, [r3, #88]	; 0x58
 80009ac:	e043      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f240 3216 	movw	r2, #790	; 0x316
 80009b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80009ba:	e03c      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
      else
        //invert sign to make duty_cycle positive
      __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, -duty_cycle);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d106      	bne.n	80009d2 <_ZN15MotorController9set_speedEi+0x1ca>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	425a      	negs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
 80009d0:	e031      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d106      	bne.n	80009e8 <_ZN15MotorController9set_speedEi+0x1e0>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	425a      	negs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	639a      	str	r2, [r3, #56]	; 0x38
 80009e6:	e026      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d106      	bne.n	80009fe <_ZN15MotorController9set_speedEi+0x1f6>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	425a      	negs	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80009fc:	e01b      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d106      	bne.n	8000a14 <_ZN15MotorController9set_speedEi+0x20c>
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	425a      	negs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
 8000a12:	e010      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	2b10      	cmp	r3, #16
 8000a1a:	d106      	bne.n	8000a2a <_ZN15MotorController9set_speedEi+0x222>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	425a      	negs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	659a      	str	r2, [r3, #88]	; 0x58
 8000a28:	e005      	b.n	8000a36 <_ZN15MotorController9set_speedEi+0x22e>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	425a      	negs	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	889b      	ldrh	r3, [r3, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4619      	mov	r1, r3
 8000a42:	f001 fb91 	bl	8002168 <HAL_GPIO_WritePin>

  }
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	fffffcea 	.word	0xfffffcea

08000a54 <_ZN15MotorController5coastEv>:
  void brake() {
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(pwm_timer_, pwm_channel_, 0);
  }

  void coast() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sleep_gpio_port_, sleep_pin_, GPIO_PIN_RESET);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f001 fb7e 	bl	8002168 <HAL_GPIO_WritePin>
  }
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZN3PidC1Efff>:
  float previous_error_;

  int min_;
  int max_;

  Pid(float kp, float ki, float kd) {
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a84:	ed87 1a00 	vstr	s2, [r7]
    this->kp_ = kp;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	601a      	str	r2, [r3, #0]
    this->ki_ = ki;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
    this->kd_ = kd;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	609a      	str	r2, [r3, #8]

    this->error_ = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    this->setpoint_ = 0;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]

    this->previous_error_ = 0;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
    this->error_sum_ = 0;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]

    this->min_ = -MAX_DUTY_CYCLE;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <_ZN3PidC1Efff+0x64>)
 8000abe:	61da      	str	r2, [r3, #28]
    this->max_ = MAX_DUTY_CYCLE;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f240 3216 	movw	r2, #790	; 0x316
 8000ac6:	621a      	str	r2, [r3, #32]

  }
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	fffffcea 	.word	0xfffffcea

08000adc <_ZN3Pid3setEf>:
    this->previous_error_ = 0;
    this->error_sum_ = 0;

  }

  void set(float setpoint) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	ed87 0a00 	vstr	s0, [r7]
    this->setpoint_ = setpoint;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	611a      	str	r2, [r3, #16]
  }
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_ZN3Pid6updateEf>:

  int update(float measure) {
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	ed87 0a00 	vstr	s0, [r7]

    this->error_ = this->setpoint_ - measure;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b0c:	edd7 7a00 	vldr	s15, [r7]
 8000b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	edc3 7a03 	vstr	s15, [r3, #12]

    //proportional term
    float output = this->error_ * this->kp_;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]

    //integral term without windup
    error_sum_ += this->error_;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	edc3 7a05 	vstr	s15, [r3, #20]
    output += error_sum_ * this->ki_;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b54:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b5c:	edc7 7a03 	vstr	s15, [r7, #12]

    //derivative term
    output += (this->error_ - this->previous_error_) * kd_;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a03 	vstr	s15, [r7, #12]
    this->previous_error_ = this->error_;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	619a      	str	r2, [r3, #24]

    int integer_output = static_cast<int> (output);
 8000b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b96:	ee17 3a90 	vmov	r3, s15
 8000b9a:	60bb      	str	r3, [r7, #8]
//    if(integer_output > this->max_)
//      integer_output = this->max_;
//    else if (integer_output < this->min_)
//      integer_output = this->min_;

    return integer_output;
 8000b9c:	68bb      	ldr	r3, [r7, #8]

  }
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bb0:	f000 ff9f 	bl	8001af2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bb4:	f000 f848 	bl	8000c48 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bb8:	f000 fb20 	bl	80011fc <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 8000bbc:	f000 f8ea 	bl	8000d94 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8000bc0:	f000 f946 	bl	8000e50 <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 8000bc4:	f000 f9a2 	bl	8000f0c <_ZL12MX_TIM4_Initv>
	MX_TIM5_Init();
 8000bc8:	f000 fa40 	bl	800104c <_ZL12MX_TIM5_Initv>
	MX_USART6_UART_Init();
 8000bcc:	f000 fae0 	bl	8001190 <_ZL19MX_USART6_UART_Initv>
	MX_TIM6_Init();
 8000bd0:	f000 fa9c 	bl	800110c <_ZL12MX_TIM6_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000bd4:	f000 f8c2 	bl	8000d5c <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */

	left_encoder.Setup();
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <main+0x74>)
 8000bda:	f7ff fce7 	bl	80005ac <_ZN7Encoder5SetupEv>
	right_encoder.Setup();
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <main+0x78>)
 8000be0:	f7ff fce4 	bl	80005ac <_ZN7Encoder5SetupEv>

	left_motor.setup();
 8000be4:	4810      	ldr	r0, [pc, #64]	; (8000c28 <main+0x7c>)
 8000be6:	f7ff fdfe 	bl	80007e6 <_ZN15MotorController5setupEv>
	right_motor.setup();
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <main+0x80>)
 8000bec:	f7ff fdfb 	bl	80007e6 <_ZN15MotorController5setupEv>
	left_motor.coast();
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <main+0x7c>)
 8000bf2:	f7ff ff2f 	bl	8000a54 <_ZN15MotorController5coastEv>
	right_motor.coast();
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <main+0x80>)
 8000bf8:	f7ff ff2c 	bl	8000a54 <_ZN15MotorController5coastEv>

	tx_buffer = (uint8_t*) &odom_msg;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <main+0x84>)
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <main+0x88>)
 8000c00:	601a      	str	r2, [r3, #0]
	rx_buffer = (uint8_t*) &vel_msg;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <main+0x8c>)
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <main+0x90>)
 8000c06:	601a      	str	r2, [r3, #0]

	//Enables UART RX interrupt
	HAL_UART_Receive_IT(&huart6, rx_buffer, 8);
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <main+0x8c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <main+0x94>)
 8000c12:	f003 fd0b 	bl	800462c <HAL_UART_Receive_IT>

	//Enables TIM6 interrupt (used for periodic transmission)
	HAL_TIM_Base_Start_IT(&htim6);
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <main+0x98>)
 8000c18:	f002 fb6a 	bl	80032f0 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c1c:	e7fe      	b.n	8000c1c <main+0x70>
 8000c1e:	bf00      	nop
 8000c20:	20000200 	.word	0x20000200
 8000c24:	200001e8 	.word	0x200001e8
 8000c28:	2000029c 	.word	0x2000029c
 8000c2c:	200002b4 	.word	0x200002b4
 8000c30:	200002cc 	.word	0x200002cc
 8000c34:	200002d4 	.word	0x200002d4
 8000c38:	200002d0 	.word	0x200002d0
 8000c3c:	200002e0 	.word	0x200002e0
 8000c40:	20000168 	.word	0x20000168
 8000c44:	20000128 	.word	0x20000128

08000c48 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0b8      	sub	sp, #224	; 0xe0
 8000c4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c52:	2234      	movs	r2, #52	; 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fb90 	bl	800537c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2290      	movs	r2, #144	; 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fb81 	bl	800537c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <_Z18SystemClock_Configv+0x10c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a35      	ldr	r2, [pc, #212]	; (8000d54 <_Z18SystemClock_Configv+0x10c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <_Z18SystemClock_Configv+0x10c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <_Z18SystemClock_Configv+0x110>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <_Z18SystemClock_Configv+0x110>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <_Z18SystemClock_Configv+0x110>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fa7e 	bl	80021cc <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <_Z18SystemClock_Configv+0x9c>
		Error_Handler();
 8000ce0:	f000 fc4e 	bl	8001580 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fcd1 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 8000d1e:	f000 fc2f 	bl	8001580 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d26:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fe8b 	bl	8002a4c <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_Z18SystemClock_Configv+0x102>
		Error_Handler();
 8000d46:	f000 fc1b 	bl	8001580 <Error_Handler>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	37e0      	adds	r7, #224	; 0xe0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2102      	movs	r1, #2
 8000d64:	201d      	movs	r0, #29
 8000d66:	f000 fffc 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d6a:	201d      	movs	r0, #29
 8000d6c:	f001 f815 	bl	8001d9a <HAL_NVIC_EnableIRQ>
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8000d70:	2202      	movs	r2, #2
 8000d72:	2102      	movs	r1, #2
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f000 fff4 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d7a:	2036      	movs	r0, #54	; 0x36
 8000d7c:	f001 f80d 	bl	8001d9a <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	2047      	movs	r0, #71	; 0x47
 8000d86:	f000 ffec 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d8a:	2047      	movs	r0, #71	; 0x47
 8000d8c:	f001 f805 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2224      	movs	r2, #36	; 0x24
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 faea 	bl	800537c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de2:	2301      	movs	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df2:	2301      	movs	r3, #1
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000e06:	f002 fb17 	bl	8003438 <HAL_TIM_Encoder_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL12MX_TIM2_Initv+0x8a>
		Error_Handler();
 8000e1a:	f000 fbb1 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000e2c:	f003 faa4 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 8000e40:	f000 fb9e 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000028 	.word	0x20000028

08000e50 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000e72:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 159;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e84:	229f      	movs	r2, #159	; 0x9f
 8000e86:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000e96:	f002 f9ff 	bl	8003298 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_ZL12MX_TIM3_Initv+0x5e>
		Error_Handler();
 8000eaa:	f000 fb69 	bl	8001580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ebc:	f002 fdbc 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <_ZL12MX_TIM3_Initv+0x84>
		Error_Handler();
 8000ed0:	f000 fb56 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ee2:	f003 fa49 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <_ZL12MX_TIM3_Initv+0xaa>
		Error_Handler();
 8000ef6:	f000 fb43 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000068 	.word	0x20000068
 8000f08:	40000400 	.word	0x40000400

08000f0c <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f40:	4a41      	ldr	r2, [pc, #260]	; (8001048 <_ZL12MX_TIM4_Initv+0x13c>)
 8000f42:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 799;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f52:	f240 321f 	movw	r2, #799	; 0x31f
 8000f56:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000f64:	4837      	ldr	r0, [pc, #220]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f66:	f002 f997 	bl	8003298 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_ZL12MX_TIM4_Initv+0x72>
		Error_Handler();
 8000f7a:	f000 fb01 	bl	8001580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000f8c:	f002 fd54 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <_ZL12MX_TIM4_Initv+0x98>
		Error_Handler();
 8000fa0:	f000 faee 	bl	8001580 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000fa4:	4827      	ldr	r0, [pc, #156]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000fa6:	f002 f9cd 	bl	8003344 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZL12MX_TIM4_Initv+0xb2>
		Error_Handler();
 8000fba:	f000 fae1 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000fce:	f003 f9d3 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf14      	ite	ne
 8000fd8:	2301      	movne	r3, #1
 8000fda:	2300      	moveq	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <_ZL12MX_TIM4_Initv+0xda>
		Error_Handler();
 8000fe2:	f000 facd 	bl	8001580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8000ffe:	f002 fc03 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <_ZL12MX_TIM4_Initv+0x10a>
		Error_Handler();
 8001012:	f000 fab5 	bl	8001580 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001016:	463b      	mov	r3, r7
 8001018:	220c      	movs	r2, #12
 800101a:	4619      	mov	r1, r3
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 800101e:	f002 fbf3 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_ZL12MX_TIM4_Initv+0x12a>
		Error_Handler();
 8001032:	f000 faa5 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <_ZL12MX_TIM4_Initv+0x138>)
 8001038:	f000 fc2c 	bl	8001894 <HAL_TIM_MspPostInit>

}
 800103c:	bf00      	nop
 800103e:	3738      	adds	r7, #56	; 0x38
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a8 	.word	0x200000a8
 8001048:	40000800 	.word	0x40000800

0800104c <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2224      	movs	r2, #36	; 0x24
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f98e 	bl	800537c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <_ZL12MX_TIM5_Initv+0xbc>)
 800106e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 800107e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001082:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001090:	2303      	movs	r3, #3
 8001092:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 80010bc:	f002 f9bc 	bl	8003438 <HAL_TIM_Encoder_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <_ZL12MX_TIM5_Initv+0x88>
		Error_Handler();
 80010d0:	f000 fa56 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <_ZL12MX_TIM5_Initv+0xb8>)
 80010e2:	f003 f949 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_ZL12MX_TIM5_Initv+0xae>
		Error_Handler();
 80010f6:	f000 fa43 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000e8 	.word	0x200000e8
 8001108:	40000c00 	.word	0x40000c00

0800110c <_ZL12MX_TIM6_Initv>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <_ZL12MX_TIM6_Initv+0x80>)
 8001120:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 9999;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 8001124:	f242 720f 	movw	r2, #9999	; 0x270f
 8001128:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 799;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 8001132:	f240 321f 	movw	r2, #799	; 0x31f
 8001136:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800113e:	4812      	ldr	r0, [pc, #72]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 8001140:	f002 f8aa 	bl	8003298 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <_ZL12MX_TIM6_Initv+0x4c>
		Error_Handler();
 8001154:	f000 fa14 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4808      	ldr	r0, [pc, #32]	; (8001188 <_ZL12MX_TIM6_Initv+0x7c>)
 8001166:	f003 f907 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_ZL12MX_TIM6_Initv+0x72>
		Error_Handler();
 800117a:	f000 fa01 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000128 	.word	0x20000128
 800118c:	40001000 	.word	0x40001000

08001190 <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <_ZL19MX_USART6_UART_Initv+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a8:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_ODD;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011b6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <_ZL19MX_USART6_UART_Initv+0x64>)
 80011d8:	f003 f948 	bl	800446c <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <_ZL19MX_USART6_UART_Initv+0x60>
		Error_Handler();
 80011ec:	f000 f9c8 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000168 	.word	0x20000168
 80011f8:	40011400 	.word	0x40011400

080011fc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b5e      	ldr	r3, [pc, #376]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a5d      	ldr	r2, [pc, #372]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	4b4c      	ldr	r3, [pc, #304]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a4b      	ldr	r2, [pc, #300]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a45      	ldr	r2, [pc, #276]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a3f      	ldr	r2, [pc, #252]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <_ZL12MX_GPIO_Initv+0x190>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, dir2_Pin | dir1_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012a8:	4839      	ldr	r0, [pc, #228]	; (8001390 <_ZL12MX_GPIO_Initv+0x194>)
 80012aa:	f000 ff5d 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, sleep2_Pin | sleep1_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012b4:	4836      	ldr	r0, [pc, #216]	; (8001390 <_ZL12MX_GPIO_Initv+0x194>)
 80012b6:	f000 ff57 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : user_button_Pin */
	GPIO_InitStruct.Pin = user_button_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <_ZL12MX_GPIO_Initv+0x198>)
 80012c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4832      	ldr	r0, [pc, #200]	; (8001398 <_ZL12MX_GPIO_Initv+0x19c>)
 80012d0:	f000 fda0 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pin : current2_Pin */
	GPIO_InitStruct.Pin = current2_Pin;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(current2_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	482c      	ldr	r0, [pc, #176]	; (8001398 <_ZL12MX_GPIO_Initv+0x19c>)
 80012e8:	f000 fd94 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pin : current1_Pin */
	GPIO_InitStruct.Pin = current1_Pin;
 80012ec:	2308      	movs	r3, #8
 80012ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <_ZL12MX_GPIO_Initv+0x1a0>)
 8001300:	f000 fd88 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pin : fault2_Pin */
	GPIO_InitStruct.Pin = fault2_Pin;
 8001304:	2340      	movs	r3, #64	; 0x40
 8001306:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <_ZL12MX_GPIO_Initv+0x1a0>)
 8001318:	f000 fd7c 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : dir2_Pin dir1_Pin */
	GPIO_InitStruct.Pin = dir2_Pin | dir1_Pin;
 800131c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001320:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <_ZL12MX_GPIO_Initv+0x194>)
 8001336:	f000 fd6d 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : sleep2_Pin sleep1_Pin */
	GPIO_InitStruct.Pin = sleep2_Pin | sleep1_Pin;
 800133a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800133e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	480f      	ldr	r0, [pc, #60]	; (8001390 <_ZL12MX_GPIO_Initv+0x194>)
 8001354:	f000 fd5e 	bl	8001e14 <HAL_GPIO_Init>

	/*Configure GPIO pin : fault1_Pin */
	GPIO_InitStruct.Pin = fault1_Pin;
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <_ZL12MX_GPIO_Initv+0x1a4>)
 800136e:	f000 fd51 	bl	8001e14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2028      	movs	r0, #40	; 0x28
 8001378:	f000 fcf3 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f000 fd0c 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40021400 	.word	0x40021400
 8001394:	10110000 	.word	0x10110000
 8001398:	40020800 	.word	0x40020800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	//TIMER 100Hz PID control
	if (htim->Instance == TIM3) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d14d      	bne.n	8001452 <HAL_TIM_PeriodElapsedCallback+0xae>

		left_velocity = left_encoder.GetLinearVelocity();
 80013b6:	4830      	ldr	r0, [pc, #192]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80013b8:	f7ff f94a 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80013bc:	eef0 7a40 	vmov.f32	s15, s0
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80013c2:	edc3 7a00 	vstr	s15, [r3]
		left_dutycycle = left_pid.update(left_velocity);
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	482b      	ldr	r0, [pc, #172]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80013d2:	f7ff fb92 	bl	8000afa <_ZN3Pid6updateEf>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013da:	601a      	str	r2, [r3, #0]
		left_motor.set_speed(left_dutycycle);
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4829      	ldr	r0, [pc, #164]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80013e4:	f7ff fa10 	bl	8000808 <_ZN15MotorController9set_speedEi>

		right_velocity = right_encoder.GetLinearVelocity();
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80013ea:	f7ff f931 	bl	8000650 <_ZN7Encoder17GetLinearVelocityEv>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
		right_dutycycle = right_pid.update(right_velocity);
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001404:	f7ff fb79 	bl	8000afa <_ZN3Pid6updateEf>
 8001408:	4602      	mov	r2, r0
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800140c:	601a      	str	r2, [r3, #0]
		right_motor.set_speed(right_dutycycle);
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001416:	f7ff f9f7 	bl	8000808 <_ZN15MotorController9set_speedEi>

		float difference = left_velocity - right_velocity;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	edc7 7a03 	vstr	s15, [r7, #12]

		int cross_dutycycle = cross_pid.update(difference);
 800142e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001434:	f7ff fb61 	bl	8000afa <_ZN3Pid6updateEf>
 8001438:	60b8      	str	r0, [r7, #8]

		left_dutycycle += cross_dutycycle;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001444:	6013      	str	r3, [r2, #0]
		right_dutycycle -= cross_dutycycle;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001450:	6013      	str	r3, [r2, #0]

	}

	//TIMER 2Hz Transmit
	if (htim->Instance == TIM6) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d106      	bne.n	800146a <HAL_TIM_PeriodElapsedCallback+0xc6>

		//TODO odometry

		HAL_UART_Transmit(&huart6, tx_buffer, 8, 100);
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800145e:	6819      	ldr	r1, [r3, #0]
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	2208      	movs	r2, #8
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001466:	f003 f84f 	bl	8004508 <HAL_UART_Transmit>
	}
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40000400 	.word	0x40000400
 8001478:	20000200 	.word	0x20000200
 800147c:	20000220 	.word	0x20000220
 8001480:	20000228 	.word	0x20000228
 8001484:	20000294 	.word	0x20000294
 8001488:	2000029c 	.word	0x2000029c
 800148c:	200001e8 	.word	0x200001e8
 8001490:	20000224 	.word	0x20000224
 8001494:	2000024c 	.word	0x2000024c
 8001498:	20000298 	.word	0x20000298
 800149c:	200002b4 	.word	0x200002b4
 80014a0:	20000270 	.word	0x20000270
 80014a4:	40001000 	.word	0x40001000
 80014a8:	200002cc 	.word	0x200002cc
 80014ac:	20000168 	.word	0x20000168

080014b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	odom.UpdateValues(vel_msg.linear_velocity, vel_msg.angular_velocity);
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_UART_RxCpltCallback+0x7c>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_RxCpltCallback+0x7c>)
 80014c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014c4:	eef0 0a47 	vmov.f32	s1, s14
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_UART_RxCpltCallback+0x80>)
 80014ce:	f7ff f90b 	bl	80006e8 <_ZN8Odometry12UpdateValuesEff>

	float left_setpoint = odom.GetLeftVelocity();
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <HAL_UART_RxCpltCallback+0x80>)
 80014d4:	f7ff f948 	bl	8000768 <_ZN8Odometry15GetLeftVelocityEv>
 80014d8:	ed87 0a05 	vstr	s0, [r7, #20]
	float right_setpoint = odom.GetRightVelocity();
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <HAL_UART_RxCpltCallback+0x80>)
 80014de:	f7ff f952 	bl	8000786 <_ZN8Odometry16GetRightVelocityEv>
 80014e2:	ed87 0a04 	vstr	s0, [r7, #16]

	left_pid.set(left_setpoint);
 80014e6:	ed97 0a05 	vldr	s0, [r7, #20]
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <HAL_UART_RxCpltCallback+0x84>)
 80014ec:	f7ff faf6 	bl	8000adc <_ZN3Pid3setEf>
	right_pid.set(right_setpoint);
 80014f0:	ed97 0a04 	vldr	s0, [r7, #16]
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <HAL_UART_RxCpltCallback+0x88>)
 80014f6:	f7ff faf1 	bl	8000adc <_ZN3Pid3setEf>

	float cross_setpoint = left_setpoint - right_setpoint;
 80014fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80014fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	edc7 7a03 	vstr	s15, [r7, #12]
	cross_pid.set(cross_setpoint);
 800150a:	ed97 0a03 	vldr	s0, [r7, #12]
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <HAL_UART_RxCpltCallback+0x8c>)
 8001510:	f7ff fae4 	bl	8000adc <_ZN3Pid3setEf>

	HAL_UART_Receive_IT(&huart6, rx_buffer, 8);
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_UART_RxCpltCallback+0x90>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2208      	movs	r2, #8
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_UART_RxCpltCallback+0x94>)
 800151e:	f003 f885 	bl	800462c <HAL_UART_Receive_IT>

}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002e0 	.word	0x200002e0
 8001530:	20000218 	.word	0x20000218
 8001534:	20000228 	.word	0x20000228
 8001538:	2000024c 	.word	0x2000024c
 800153c:	20000270 	.word	0x20000270
 8001540:	200002d0 	.word	0x200002d0
 8001544:	20000168 	.word	0x20000168

08001548 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	//Blue user button on the NUCLEO board
	if (GPIO_Pin == GPIO_PIN_13) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001558:	d109      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0x26>
		if (mode == 0) {
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_GPIO_EXTI_Callback+0x30>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0x26>
			mode = 1;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_GPIO_EXTI_Callback+0x30>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
			//Enables TIM3 interrupt (used for PID control)
			HAL_TIM_Base_Start_IT(&htim3);
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <HAL_GPIO_EXTI_Callback+0x34>)
 800156a:	f001 fec1 	bl	80032f0 <HAL_TIM_Base_Start_IT>

		}

	}
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002e8 	.word	0x200002e8
 800157c:	20000068 	.word	0x20000068

08001580 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_Z41__static_initialization_and_destruction_0ii>:
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d148      	bne.n	8001632 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d143      	bne.n	8001632 <_Z41__static_initialization_and_destruction_0ii+0xa2>
Encoder right_encoder = Encoder(&htim5, RIGHT_TICKS_PER_METER);
 80015aa:	4a24      	ldr	r2, [pc, #144]	; (800163c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015ac:	4924      	ldr	r1, [pc, #144]	; (8001640 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015ae:	4825      	ldr	r0, [pc, #148]	; (8001644 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015b0:	f7fe ffe9 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Encoder left_encoder = Encoder(&htim2, LEFT_TICKS_PER_METER);
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80015b6:	4925      	ldr	r1, [pc, #148]	; (800164c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80015b8:	4825      	ldr	r0, [pc, #148]	; (8001650 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80015ba:	f7fe ffe4 	bl	8000586 <_ZN7EncoderC1EP17TIM_HandleTypeDefi>
Odometry odom = Odometry();
 80015be:	4825      	ldr	r0, [pc, #148]	; (8001654 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80015c0:	f7ff f87e 	bl	80006c0 <_ZN8OdometryC1Ev>
Pid left_pid(180, 200, 0);
 80015c4:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8001658 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80015c8:	eddf 0a24 	vldr	s1, [pc, #144]	; 800165c <_Z41__static_initialization_and_destruction_0ii+0xcc>
 80015cc:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001660 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80015d0:	4824      	ldr	r0, [pc, #144]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80015d2:	f7ff fa4f 	bl	8000a74 <_ZN3PidC1Efff>
Pid right_pid(185, 195, 0);
 80015d6:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001658 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80015da:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001668 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80015de:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800166c <_Z41__static_initialization_and_destruction_0ii+0xdc>
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80015e4:	f7ff fa46 	bl	8000a74 <_ZN3PidC1Efff>
Pid cross_pid(50, 20, 0);
 80015e8:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001658 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80015ec:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80015f0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001674 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 80015f4:	4820      	ldr	r0, [pc, #128]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80015f6:	f7ff fa3d 	bl	8000a74 <_ZN3PidC1Efff>
TIM_CHANNEL_4);
 80015fa:	230c      	movs	r3, #12
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800160a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800160e:	491c      	ldr	r1, [pc, #112]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001612:	f7ff f8c7 	bl	80007a4 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
TIM_CHANNEL_3);
 8001616:	2308      	movs	r3, #8
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	4915      	ldr	r1, [pc, #84]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800162c:	4816      	ldr	r0, [pc, #88]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800162e:	f7ff f8b9 	bl	80007a4 <_ZN15MotorControllerC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000300dd 	.word	0x000300dd
 8001640:	200000e8 	.word	0x200000e8
 8001644:	200001e8 	.word	0x200001e8
 8001648:	0002fccc 	.word	0x0002fccc
 800164c:	20000028 	.word	0x20000028
 8001650:	20000200 	.word	0x20000200
 8001654:	20000218 	.word	0x20000218
 8001658:	00000000 	.word	0x00000000
 800165c:	43480000 	.word	0x43480000
 8001660:	43340000 	.word	0x43340000
 8001664:	20000228 	.word	0x20000228
 8001668:	43430000 	.word	0x43430000
 800166c:	43390000 	.word	0x43390000
 8001670:	2000024c 	.word	0x2000024c
 8001674:	42480000 	.word	0x42480000
 8001678:	20000270 	.word	0x20000270
 800167c:	200000a8 	.word	0x200000a8
 8001680:	40021400 	.word	0x40021400
 8001684:	2000029c 	.word	0x2000029c
 8001688:	200002b4 	.word	0x200002b4

0800168c <_GLOBAL__sub_I_htim2>:
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
 8001690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff ff7b 	bl	8001590 <_Z41__static_initialization_and_destruction_0ii>
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_MspInit+0x44>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_MspInit+0x44>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_MspInit+0x44>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x44>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x44>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x44>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d144      	bne.n	8001790 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a3a      	ldr	r2, [pc, #232]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a34      	ldr	r2, [pc, #208]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = encoder_sx1_Pin;
 800174e:	2320      	movs	r3, #32
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175e:	2301      	movs	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx1_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <HAL_TIM_Encoder_MspInit+0x114>)
 800176a:	f000 fb53 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder_sx2_Pin;
 800176e:	2308      	movs	r3, #8
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800177e:	2301      	movs	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(encoder_sx2_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	481c      	ldr	r0, [pc, #112]	; (80017fc <HAL_TIM_Encoder_MspInit+0x118>)
 800178a:	f000 fb43 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800178e:	e02c      	b.n	80017ea <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d127      	bne.n	80017ea <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_dx1_Pin|encoder_dx2_Pin;
 80017ca:	2303      	movs	r3, #3
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017da:	2302      	movs	r3, #2
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <HAL_TIM_Encoder_MspInit+0x114>)
 80017e6:	f000 fb15 	bl	8001e14 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40000c00 	.word	0x40000c00

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_TIM_Base_MspInit+0x80>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800182e:	e022      	b.n	8001876 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a15      	ldr	r2, [pc, #84]	; (800188c <HAL_TIM_Base_MspInit+0x88>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10c      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
}
 8001852:	e010      	b.n	8001876 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x8c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10b      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_TIM_Base_MspInit+0x84>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40000400 	.word	0x40000400
 8001888:	40023800 	.word	0x40023800
 800188c:	40000800 	.word	0x40000800
 8001890:	40001000 	.word	0x40001000

08001894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_TIM_MspPostInit+0x64>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d11c      	bne.n	80018f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_TIM_MspPostInit+0x68>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_TIM_MspPostInit+0x68>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_TIM_MspPostInit+0x68>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 80018ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_TIM_MspPostInit+0x6c>)
 80018ec:	f000 fa92 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40000800 	.word	0x40000800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x7c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d127      	bne.n	8001976 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_UART_MspInit+0x80>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_MspInit+0x80>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001966:	2308      	movs	r3, #8
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_UART_MspInit+0x84>)
 8001972:	f000 fa4f 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40011400 	.word	0x40011400
 8001984:	40023800 	.word	0x40023800
 8001988:	40020800 	.word	0x40020800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f8c4 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM3_IRQHandler+0x10>)
 80019ee:	f001 fdec 	bl	80035ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000068 	.word	0x20000068

080019fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a04:	f000 fbca 	bl	800219c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM6_DAC_IRQHandler+0x10>)
 8001a12:	f001 fdda 	bl	80035ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000128 	.word	0x20000128

08001a20 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USART6_IRQHandler+0x10>)
 8001a26:	f002 fea3 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000168 	.word	0x20000168

08001a34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <SystemInit+0x5c>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <SystemInit+0x5c>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <SystemInit+0x60>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <SystemInit+0x60>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <SystemInit+0x60>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <SystemInit+0x60>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <SystemInit+0x60>)
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <SystemInit+0x64>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <SystemInit+0x60>)
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <SystemInit+0x68>)
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <SystemInit+0x60>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <SystemInit+0x60>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x60>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SystemInit+0x5c>)
 8001a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a84:	609a      	str	r2, [r3, #8]
#endif
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	40023800 	.word	0x40023800
 8001a98:	fef6ffff 	.word	0xfef6ffff
 8001a9c:	24003010 	.word	0x24003010

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aa6:	e003      	b.n	8001ab0 <LoopCopyDataInit>

08001aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aae:	3104      	adds	r1, #4

08001ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab8:	d3f6      	bcc.n	8001aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001abc:	e002      	b.n	8001ac4 <LoopFillZerobss>

08001abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac0:	f842 3b04 	str.w	r3, [r2], #4

08001ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac8:	d3f9      	bcc.n	8001abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aca:	f7ff ffb3 	bl	8001a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f003 fc31 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff f86b 	bl	8000bac <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001adc:	080053d0 	.word	0x080053d0
  ldr  r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ae8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001aec:	200002f0 	.word	0x200002f0

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>

08001af2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af6:	2003      	movs	r0, #3
 8001af8:	f000 f928 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f805 	bl	8001b0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b02:	f7ff fdcb 	bl	800169c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f943 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f000 f90b 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	200002ec 	.word	0x200002ec

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200002ec 	.word	0x200002ec

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	05fa0000 	.word	0x05fa0000

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d004      	beq.n	8001dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00c      	b.n	8001e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2205      	movs	r2, #5
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e175      	b.n	8002120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8164 	bne.w	800211a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x4e>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d123      	bne.n	8001eaa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	69b9      	ldr	r1, [r7, #24]
 8001ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0203 	and.w	r2, r3, #3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d00b      	beq.n	8001efe <HAL_GPIO_Init+0xea>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef2:	2b11      	cmp	r3, #17
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80be 	beq.w	800211a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_GPIO_Init+0x320>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a64      	ldr	r2, [pc, #400]	; (8002134 <HAL_GPIO_Init+0x320>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_GPIO_Init+0x320>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fb6:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_GPIO_Init+0x324>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_GPIO_Init+0x328>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d037      	beq.n	8002052 <HAL_GPIO_Init+0x23e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x32c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_GPIO_Init+0x23a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a55      	ldr	r2, [pc, #340]	; (8002144 <HAL_GPIO_Init+0x330>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <HAL_GPIO_Init+0x236>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_GPIO_Init+0x334>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x232>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a53      	ldr	r2, [pc, #332]	; (800214c <HAL_GPIO_Init+0x338>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x22e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_GPIO_Init+0x33c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x22a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x340>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x226>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_GPIO_Init+0x344>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x222>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x348>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x21e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x34c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x21a>
 800202a:	2309      	movs	r3, #9
 800202c:	e012      	b.n	8002054 <HAL_GPIO_Init+0x240>
 800202e:	230a      	movs	r3, #10
 8002030:	e010      	b.n	8002054 <HAL_GPIO_Init+0x240>
 8002032:	2308      	movs	r3, #8
 8002034:	e00e      	b.n	8002054 <HAL_GPIO_Init+0x240>
 8002036:	2307      	movs	r3, #7
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x240>
 800203a:	2306      	movs	r3, #6
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x240>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x240>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x240>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x240>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x240>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x240>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002064:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_GPIO_Init+0x324>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_GPIO_Init+0x350>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <HAL_GPIO_Init+0x350>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_GPIO_Init+0x350>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_GPIO_Init+0x350>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae86 	bls.w	8001e34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40022400 	.word	0x40022400
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f9c4 	bl	8001548 <HAL_GPIO_EXTI_Callback>
  }
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e25e      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b96      	ldr	r3, [pc, #600]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d00c      	beq.n	8002216 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fc:	4b93      	ldr	r3, [pc, #588]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
 8002208:	4b90      	ldr	r3, [pc, #576]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06c      	beq.n	80022fc <HAL_RCC_OscConfig+0x130>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d168      	bne.n	80022fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e238      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x7a>
 8002238:	4b84      	ldr	r3, [pc, #528]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a83      	ldr	r2, [pc, #524]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e02e      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x9c>
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b7c      	ldr	r3, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7b      	ldr	r2, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0xc0>
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a75      	ldr	r2, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b73      	ldr	r3, [pc, #460]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a72      	ldr	r2, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b6c      	ldr	r3, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6b      	ldr	r2, [pc, #428]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc72 	bl	8001b94 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fc6e 	bl	8001b94 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1ec      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe8>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc5e 	bl	8001b94 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fc5a 	bl	8001b94 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1d8      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x110>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d069      	beq.n	80023de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230a:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x190>
 8002322:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x17a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1ac      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	493d      	ldr	r1, [pc, #244]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e040      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a38      	ldr	r2, [pc, #224]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff fc10 	bl	8001b94 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002378:	f7ff fc0c 	bl	8001b94 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e18a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4929      	ldr	r1, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff fbec 	bl	8001b94 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff fbe8 	bl	8001b94 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e166      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d038      	beq.n	800245c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d019      	beq.n	8002426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_RCC_OscConfig+0x280>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff fbc9 	bl	8001b94 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fbc5 	bl	8001b94 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e143      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x23a>
 8002424:	e01a      	b.n	800245c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x280>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7ff fbaf 	bl	8001b94 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243a:	f7ff fbab 	bl	8001b94 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d903      	bls.n	8002450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e129      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
 800244c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b95      	ldr	r3, [pc, #596]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a4 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b8f      	ldr	r3, [pc, #572]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b8c      	ldr	r3, [pc, #560]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a8b      	ldr	r2, [pc, #556]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b89      	ldr	r3, [pc, #548]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_RCC_OscConfig+0x4e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800249e:	4b83      	ldr	r3, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x4e0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a82      	ldr	r2, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x4e0>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb73 	bl	8001b94 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff fb6f 	bl	8001b94 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0ed      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b79      	ldr	r3, [pc, #484]	; (80026ac <HAL_RCC_OscConfig+0x4e0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x31a>
 80024d8:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x33c>
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x35e>
 8002510:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 800252a:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5b      	ldr	r2, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff fb23 	bl	8001b94 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fb1f 	bl	8001b94 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e09b      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x386>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7ff fb0d 	bl	8001b94 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb09 	bl	8001b94 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e085      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a3f      	ldr	r2, [pc, #252]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d071      	beq.n	800269e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d14b      	bne.n	8002666 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff fadb 	bl	8001b94 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff fad7 	bl	8001b94 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e055      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	019b      	lsls	r3, r3, #6
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	3b01      	subs	r3, #1
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	071b      	lsls	r3, r3, #28
 800262c:	491e      	ldr	r1, [pc, #120]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff faa9 	bl	8001b94 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7ff faa5 	bl	8001b94 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e023      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x47a>
 8002664:	e01b      	b.n	800269e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800266c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7ff fa8f 	bl	8001b94 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff fa8b 	bl	8001b94 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e009      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_OscConfig+0x4dc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x4ae>
 8002698:	e001      	b.n	800269e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0ce      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b69      	ldr	r3, [pc, #420]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	4964      	ldr	r1, [pc, #400]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b6      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b58      	ldr	r3, [pc, #352]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a51      	ldr	r2, [pc, #324]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494c      	ldr	r1, [pc, #304]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07d      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e071      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e069      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7ff f9f6 	bl	8001b94 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7ff f9f2 	bl	8001b94 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e051      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4921      	ldr	r1, [pc, #132]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e030      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4915      	ldr	r1, [pc, #84]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490d      	ldr	r1, [pc, #52]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f81d 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002846:	4601      	mov	r1, r0
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	fa21 f303 	lsr.w	r3, r1, r3
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff f954 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00
 8002874:	40023800 	.word	0x40023800
 8002878:	080053a4 	.word	0x080053a4
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002896:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d007      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x32>
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d008      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x38>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 808d 	bne.w	80029c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80028ae:	60bb      	str	r3, [r7, #8]
       break;
 80028b0:	e08c      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028b4:	60bb      	str	r3, [r7, #8]
      break;
 80028b6:	e089      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028c2:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d023      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ce:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	ea03 0501 	and.w	r5, r3, r1
 80028e4:	ea04 0602 	and.w	r6, r4, r2
 80028e8:	4a3d      	ldr	r2, [pc, #244]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028ea:	fb02 f106 	mul.w	r1, r2, r6
 80028ee:	2200      	movs	r2, #0
 80028f0:	fb02 f205 	mul.w	r2, r2, r5
 80028f4:	440a      	add	r2, r1
 80028f6:	493a      	ldr	r1, [pc, #232]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028f8:	fba5 0101 	umull	r0, r1, r5, r1
 80028fc:	1853      	adds	r3, r2, r1
 80028fe:	4619      	mov	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f04f 0400 	mov.w	r4, #0
 8002906:	461a      	mov	r2, r3
 8002908:	4623      	mov	r3, r4
 800290a:	f7fd fc95 	bl	8000238 <__aeabi_uldivmod>
 800290e:	4603      	mov	r3, r0
 8002910:	460c      	mov	r4, r1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e049      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	ea03 0501 	and.w	r5, r3, r1
 800292c:	ea04 0602 	and.w	r6, r4, r2
 8002930:	4629      	mov	r1, r5
 8002932:	4632      	mov	r2, r6
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0154      	lsls	r4, r2, #5
 800293e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002942:	014b      	lsls	r3, r1, #5
 8002944:	4619      	mov	r1, r3
 8002946:	4622      	mov	r2, r4
 8002948:	1b49      	subs	r1, r1, r5
 800294a:	eb62 0206 	sbc.w	r2, r2, r6
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	0194      	lsls	r4, r2, #6
 8002958:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800295c:	018b      	lsls	r3, r1, #6
 800295e:	1a5b      	subs	r3, r3, r1
 8002960:	eb64 0402 	sbc.w	r4, r4, r2
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	00e2      	lsls	r2, r4, #3
 800296e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002972:	00d9      	lsls	r1, r3, #3
 8002974:	460b      	mov	r3, r1
 8002976:	4614      	mov	r4, r2
 8002978:	195b      	adds	r3, r3, r5
 800297a:	eb44 0406 	adc.w	r4, r4, r6
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	02a2      	lsls	r2, r4, #10
 8002988:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800298c:	0299      	lsls	r1, r3, #10
 800298e:	460b      	mov	r3, r1
 8002990:	4614      	mov	r4, r2
 8002992:	4618      	mov	r0, r3
 8002994:	4621      	mov	r1, r4
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f04f 0400 	mov.w	r4, #0
 800299c:	461a      	mov	r2, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	f7fd fc4a 	bl	8000238 <__aeabi_uldivmod>
 80029a4:	4603      	mov	r3, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	60bb      	str	r3, [r7, #8]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029c8:	60bb      	str	r3, [r7, #8]
      break;
 80029ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029cc:	68bb      	ldr	r3, [r7, #8]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	017d7840 	.word	0x017d7840

080029e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4601      	mov	r1, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	080053b4 	.word	0x080053b4

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a28:	f7ff ffdc 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4601      	mov	r1, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	080053b4 	.word	0x080053b4

08002a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a74:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a7e:	6093      	str	r3, [r2, #8]
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	4964      	ldr	r1, [pc, #400]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d017      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	4959      	ldr	r1, [pc, #356]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d017      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	494a      	ldr	r1, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 808b 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b48:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a34      	ldr	r2, [pc, #208]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7ff f81e 	bl	8001b94 <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7ff f81a 	bl	8001b94 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e38d      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d035      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d02e      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d114      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe ffe2 	bl	8001b94 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe ffde 	bl	8001b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e34f      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ee      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c02:	d111      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c12:	400b      	ands	r3, r1
 8002c14:	4901      	ldr	r1, [pc, #4]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000
 8002c24:	0ffffcff 	.word	0x0ffffcff
 8002c28:	4bb3      	ldr	r3, [pc, #716]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4ab2      	ldr	r2, [pc, #712]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	4bb0      	ldr	r3, [pc, #704]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	49ad      	ldr	r1, [pc, #692]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c52:	4ba9      	ldr	r3, [pc, #676]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c58:	4aa7      	ldr	r2, [pc, #668]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c62:	4ba5      	ldr	r3, [pc, #660]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	49a2      	ldr	r1, [pc, #648]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c80:	4b9d      	ldr	r3, [pc, #628]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8e:	499a      	ldr	r1, [pc, #616]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca2:	4b95      	ldr	r3, [pc, #596]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb0:	4991      	ldr	r1, [pc, #580]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd2:	4989      	ldr	r1, [pc, #548]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ce6:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4980      	ldr	r1, [pc, #512]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d08:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4978      	ldr	r1, [pc, #480]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f023 020c 	bic.w	r2, r3, #12
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d38:	496f      	ldr	r1, [pc, #444]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	4967      	ldr	r1, [pc, #412]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	495e      	ldr	r1, [pc, #376]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	4956      	ldr	r1, [pc, #344]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002db2:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dd4:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	4945      	ldr	r1, [pc, #276]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002df6:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	493c      	ldr	r1, [pc, #240]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e26:	4934      	ldr	r1, [pc, #208]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d011      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e48:	492b      	ldr	r1, [pc, #172]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	491b      	ldr	r1, [pc, #108]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eac:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed0:	4909      	ldr	r1, [pc, #36]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	4985      	ldr	r1, [pc, #532]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f20:	497c      	ldr	r1, [pc, #496]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f36:	f040 80d6 	bne.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f3a:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a75      	ldr	r2, [pc, #468]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe fe25 	bl	8001b94 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f4e:	f7fe fe21 	bl	8001b94 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e194      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f60:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d021      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11d      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f80:	4b64      	ldr	r3, [pc, #400]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f8e:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	019a      	lsls	r2, r3, #6
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	071b      	lsls	r3, r3, #28
 8002fb4:	4957      	ldr	r1, [pc, #348]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02e      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d129      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	0f1b      	lsrs	r3, r3, #28
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	019a      	lsls	r2, r3, #6
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	071b      	lsls	r3, r3, #28
 800301c:	493d      	ldr	r1, [pc, #244]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302a:	f023 021f 	bic.w	r2, r3, #31
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	3b01      	subs	r3, #1
 8003034:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01d      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304e:	0e1b      	lsrs	r3, r3, #24
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	0f1b      	lsrs	r3, r3, #28
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	019a      	lsls	r2, r3, #6
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	431a      	orrs	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	071b      	lsls	r3, r3, #28
 800307c:	4925      	ldr	r1, [pc, #148]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	019a      	lsls	r2, r3, #6
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	071b      	lsls	r3, r3, #28
 80030ac:	4919      	ldr	r1, [pc, #100]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe fd68 	bl	8001b94 <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030c8:	f7fe fd64 	bl	8001b94 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0d7      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 80cd 	bne.w	8003288 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fa:	f7fe fd4b 	bl	8001b94 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003102:	f7fe fd47 	bl	8001b94 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	; 0x64
 800310e:	d903      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0ba      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003114:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003124:	d0ed      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003142:	2b00      	cmp	r3, #0
 8003144:	d02e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800314e:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	019a      	lsls	r2, r3, #6
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	4944      	ldr	r1, [pc, #272]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	493d      	ldr	r1, [pc, #244]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b8:	d11d      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	0e1b      	lsrs	r3, r3, #24
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	0f1b      	lsrs	r3, r3, #28
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	4929      	ldr	r1, [pc, #164]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0e1b      	lsrs	r3, r3, #24
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4917      	ldr	r1, [pc, #92]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4911      	ldr	r1, [pc, #68]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe fc98 	bl	8001b94 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003268:	f7fe fc94 	bl	8001b94 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e007      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003286:	d1ef      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01d      	b.n	80032e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe faa0 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fc90 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_TIM_Base_Start_IT+0x50>)
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d00b      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x42>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d007      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	00010007 	.word	0x00010007

08003344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01d      	b.n	8003392 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f815 	bl	800339a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f000 fc3a 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 ffb2 	bl	800432c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <HAL_TIM_PWM_Start+0x7c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_TIM_PWM_Start+0x2c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a16      	ldr	r2, [pc, #88]	; (8003430 <HAL_TIM_PWM_Start+0x80>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_TIM_PWM_Start+0x30>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_TIM_PWM_Start+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_TIM_PWM_Start+0x84>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d00b      	beq.n	8003420 <HAL_TIM_PWM_Start+0x70>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340e:	d007      	beq.n	8003420 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40010400 	.word	0x40010400
 8003434:	00010007 	.word	0x00010007

08003438 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e07b      	b.n	8003544 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe f93f 	bl	80016e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_TIM_Encoder_Init+0x114>)
 800347a:	400b      	ands	r3, r1
 800347c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f000 fbb7 	bl	8003bfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_TIM_Encoder_Init+0x118>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	4313      	orrs	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_TIM_Encoder_Init+0x11c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_TIM_Encoder_Init+0x120>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	4313      	orrs	r3, r2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	011a      	lsls	r2, r3, #4
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	031b      	lsls	r3, r3, #12
 80034f8:	4313      	orrs	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800350e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4313      	orrs	r3, r2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	fffebff8 	.word	0xfffebff8
 8003550:	fffffcfc 	.word	0xfffffcfc
 8003554:	fffff3f3 	.word	0xfffff3f3
 8003558:	ffff0f0f 	.word	0xffff0f0f

0800355c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_TIM_Encoder_Start+0x16>
 800356c:	2b04      	cmp	r3, #4
 800356e:	d008      	beq.n	8003582 <HAL_TIM_Encoder_Start+0x26>
 8003570:	e00f      	b.n	8003592 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fed6 	bl	800432c <TIM_CCxChannelCmd>
      break;
 8003580:	e016      	b.n	80035b0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	2104      	movs	r1, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fece 	bl	800432c <TIM_CCxChannelCmd>
      break;
 8003590:	e00e      	b.n	80035b0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fec6 	bl	800432c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	2104      	movs	r1, #4
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 febf 	bl	800432c <TIM_CCxChannelCmd>
      break;
 80035ae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d122      	bne.n	8003626 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d11b      	bne.n	8003626 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f06f 0202 	mvn.w	r2, #2
 80035f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fad7 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 8003612:	e005      	b.n	8003620 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fac9 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fada 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d122      	bne.n	800367a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d11b      	bne.n	800367a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0204 	mvn.w	r2, #4
 800364a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 faad 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 8003666:	e005      	b.n	8003674 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa9f 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fab0 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d122      	bne.n	80036ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11b      	bne.n	80036ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0208 	mvn.w	r2, #8
 800369e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2204      	movs	r2, #4
 80036a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa83 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 80036ba:	e005      	b.n	80036c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fa75 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa86 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d122      	bne.n	8003722 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d11b      	bne.n	8003722 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0210 	mvn.w	r2, #16
 80036f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2208      	movs	r2, #8
 80036f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa59 	bl	8003bc0 <HAL_TIM_IC_CaptureCallback>
 800370e:	e005      	b.n	800371c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa4b 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa5c 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10e      	bne.n	800374e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0201 	mvn.w	r2, #1
 8003746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fd fe2b 	bl	80013a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d10e      	bne.n	800377a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d107      	bne.n	800377a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fe65 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fe58 	bl	8004458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa0a 	bl	8003be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0220 	mvn.w	r2, #32
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fe18 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800381e:	2302      	movs	r3, #2
 8003820:	e105      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b14      	cmp	r3, #20
 8003836:	f200 80f0 	bhi.w	8003a1a <HAL_TIM_PWM_ConfigChannel+0x212>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003895 	.word	0x08003895
 8003844:	08003a1b 	.word	0x08003a1b
 8003848:	08003a1b 	.word	0x08003a1b
 800384c:	08003a1b 	.word	0x08003a1b
 8003850:	080038d5 	.word	0x080038d5
 8003854:	08003a1b 	.word	0x08003a1b
 8003858:	08003a1b 	.word	0x08003a1b
 800385c:	08003a1b 	.word	0x08003a1b
 8003860:	08003917 	.word	0x08003917
 8003864:	08003a1b 	.word	0x08003a1b
 8003868:	08003a1b 	.word	0x08003a1b
 800386c:	08003a1b 	.word	0x08003a1b
 8003870:	08003957 	.word	0x08003957
 8003874:	08003a1b 	.word	0x08003a1b
 8003878:	08003a1b 	.word	0x08003a1b
 800387c:	08003a1b 	.word	0x08003a1b
 8003880:	08003999 	.word	0x08003999
 8003884:	08003a1b 	.word	0x08003a1b
 8003888:	08003a1b 	.word	0x08003a1b
 800388c:	08003a1b 	.word	0x08003a1b
 8003890:	080039d9 	.word	0x080039d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa4e 	bl	8003d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0208 	orr.w	r2, r2, #8
 80038ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	619a      	str	r2, [r3, #24]
      break;
 80038d2:	e0a3      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 faa0 	bl	8003e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6999      	ldr	r1, [r3, #24]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	021a      	lsls	r2, r3, #8
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	619a      	str	r2, [r3, #24]
      break;
 8003914:	e082      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 faf7 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0208 	orr.w	r2, r2, #8
 8003930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0204 	bic.w	r2, r2, #4
 8003940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	61da      	str	r2, [r3, #28]
      break;
 8003954:	e062      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fb4d 	bl	8003ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69d9      	ldr	r1, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	021a      	lsls	r2, r3, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	61da      	str	r2, [r3, #28]
      break;
 8003996:	e041      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb84 	bl	80040ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0208 	orr.w	r2, r2, #8
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039d6:	e021      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fbb6 	bl	8004150 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003a1a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0a6      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x166>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_TIM_ConfigClockSource+0x170>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d067      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x120>
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d80b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x6c>
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d073      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x140>
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d802      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x62>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d06f      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a98:	e078      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d06c      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x140>
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d06a      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003aa2:	e073      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003aa4:	2b70      	cmp	r3, #112	; 0x70
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x8c>
 8003aa8:	2b70      	cmp	r3, #112	; 0x70
 8003aaa:	d804      	bhi.n	8003ab6 <HAL_TIM_ConfigClockSource+0x7e>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d033      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xe0>
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d041      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ab4:	e06a      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	d066      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x152>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d017      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ac2:	e063      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6899      	ldr	r1, [r3, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f000 fc0a 	bl	80042ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ae6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]
      break;
 8003af0:	e04c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f000 fbf3 	bl	80042ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b14:	609a      	str	r2, [r3, #8]
      break;
 8003b16:	e039      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f000 fb67 	bl	80041f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2150      	movs	r1, #80	; 0x50
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fbc0 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e029      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f000 fb86 	bl	8004256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2160      	movs	r1, #96	; 0x60
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fbb0 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003b56:	e019      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f000 fb47 	bl	80041f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fba0 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003b76:	e009      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 fb97 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	fffeff88 	.word	0xfffeff88

08003bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a40      	ldr	r2, [pc, #256]	; (8003d10 <TIM_Base_SetConfig+0x114>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d00f      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3d      	ldr	r2, [pc, #244]	; (8003d14 <TIM_Base_SetConfig+0x118>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3c      	ldr	r2, [pc, #240]	; (8003d18 <TIM_Base_SetConfig+0x11c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3b      	ldr	r2, [pc, #236]	; (8003d1c <TIM_Base_SetConfig+0x120>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3a      	ldr	r2, [pc, #232]	; (8003d20 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d108      	bne.n	8003c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <TIM_Base_SetConfig+0x114>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02b      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d027      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <TIM_Base_SetConfig+0x118>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d023      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <TIM_Base_SetConfig+0x11c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <TIM_Base_SetConfig+0x120>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01b      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <TIM_Base_SetConfig+0x124>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d017      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <TIM_Base_SetConfig+0x128>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <TIM_Base_SetConfig+0x12c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00f      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <TIM_Base_SetConfig+0x130>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <TIM_Base_SetConfig+0x134>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <TIM_Base_SetConfig+0x138>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <TIM_Base_SetConfig+0x13c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <TIM_Base_SetConfig+0x114>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0xf8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <TIM_Base_SetConfig+0x124>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	615a      	str	r2, [r3, #20]
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40010400 	.word	0x40010400
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800
 8003d30:	40001800 	.word	0x40001800
 8003d34:	40001c00 	.word	0x40001c00
 8003d38:	40002000 	.word	0x40002000

08003d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0201 	bic.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <TIM_OC1_SetConfig+0xd8>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 0302 	bic.w	r3, r3, #2
 8003d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <TIM_OC1_SetConfig+0xdc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_OC1_SetConfig+0x64>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <TIM_OC1_SetConfig+0xe0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d10c      	bne.n	8003dba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0308 	bic.w	r3, r3, #8
 8003da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <TIM_OC1_SetConfig+0xdc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC1_SetConfig+0x8e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <TIM_OC1_SetConfig+0xe0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	fffeff8f 	.word	0xfffeff8f
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010400 	.word	0x40010400

08003e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0210 	bic.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <TIM_OC2_SetConfig+0xe4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0320 	bic.w	r3, r3, #32
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <TIM_OC2_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC2_SetConfig+0x68>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <TIM_OC2_SetConfig+0xec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10d      	bne.n	8003ea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_OC2_SetConfig+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC2_SetConfig+0x94>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <TIM_OC2_SetConfig+0xec>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d113      	bne.n	8003edc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	feff8fff 	.word	0xfeff8fff
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <TIM_OC3_SetConfig+0xe0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC3_SetConfig+0x66>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <TIM_OC3_SetConfig+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x92>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <TIM_OC3_SetConfig+0xe8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	fffeff8f 	.word	0xfffeff8f
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <TIM_OC4_SetConfig+0xa4>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_OC4_SetConfig+0xa8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC4_SetConfig+0x68>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <TIM_OC4_SetConfig+0xac>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	feff8fff 	.word	0xfeff8fff
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40010400 	.word	0x40010400

080040ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <TIM_OC5_SetConfig+0x98>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <TIM_OC5_SetConfig+0x9c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_OC5_SetConfig+0x5e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a11      	ldr	r2, [pc, #68]	; (800414c <TIM_OC5_SetConfig+0xa0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d109      	bne.n	800411e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	fffeff8f 	.word	0xfffeff8f
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400

08004150 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <TIM_OC6_SetConfig+0x9c>)
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	051b      	lsls	r3, r3, #20
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <TIM_OC6_SetConfig+0xa0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC6_SetConfig+0x60>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <TIM_OC6_SetConfig+0xa4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d109      	bne.n	80041c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	feff8fff 	.word	0xfeff8fff
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40010400 	.word	0x40010400

080041f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 030a 	bic.w	r3, r3, #10
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f043 0307 	orr.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	431a      	orrs	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2201      	movs	r2, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	43db      	mvns	r3, r3
 800434e:	401a      	ands	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e045      	b.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40010000 	.word	0x40010000
 800442c:	40010400 	.word	0x40010400

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e040      	b.n	8004500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fa38 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa90 	bl	80049d0 <UART_SetConfig>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fd28 	bl	8004f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fdaf 	bl	800505c <UART_CheckIdleState>
 80044fe:	4603      	mov	r3, r0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	2b20      	cmp	r3, #32
 800451e:	d17f      	bne.n	8004620 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_UART_Transmit+0x24>
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e078      	b.n	8004622 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit+0x36>
 800453a:	2302      	movs	r3, #2
 800453c:	e071      	b.n	8004622 <HAL_UART_Transmit+0x11a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2221      	movs	r2, #33	; 0x21
 8004550:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004552:	f7fd fb1f 	bl	8001b94 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x7c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800458c:	e02c      	b.n	80045e8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fd8e 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e03c      	b.n	8004622 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3302      	adds	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e007      	b.n	80045d6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1cc      	bne.n	800458e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fd5b 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e009      	b.n	8004622 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463e:	2b20      	cmp	r3, #32
 8004640:	f040 808a 	bne.w	8004758 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Receive_IT+0x24>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e082      	b.n	800475a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_UART_Receive_IT+0x36>
 800465e:	2302      	movs	r3, #2
 8004660:	e07b      	b.n	800475a <HAL_UART_Receive_IT+0x12e>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d10e      	bne.n	80046ae <HAL_UART_Receive_IT+0x82>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_UART_Receive_IT+0x78>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800469e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a2:	e02d      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	; 0xff
 80046a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ac:	e028      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10d      	bne.n	80046d2 <HAL_UART_Receive_IT+0xa6>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_UART_Receive_IT+0x9c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c6:	e01b      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	227f      	movs	r2, #127	; 0x7f
 80046cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d0:	e016      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046da:	d10d      	bne.n	80046f8 <HAL_UART_Receive_IT+0xcc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_UART_Receive_IT+0xc2>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	227f      	movs	r2, #127	; 0x7f
 80046e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ec:	e008      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	223f      	movs	r2, #63	; 0x3f
 80046f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f6:	e003      	b.n	8004700 <HAL_UART_Receive_IT+0xd4>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2222      	movs	r2, #34	; 0x22
 800470a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d107      	bne.n	8004736 <HAL_UART_Receive_IT+0x10a>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_UART_Receive_IT+0x13c>)
 8004732:	661a      	str	r2, [r3, #96]	; 0x60
 8004734:	e002      	b.n	800473c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <HAL_UART_Receive_IT+0x140>)
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004752:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	0800528f 	.word	0x0800528f
 800476c:	080051e9 	.word	0x080051e9

08004770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d113      	bne.n	80047c6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80eb 	beq.w	8004992 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
      }
      return;
 80047c4:	e0e5      	b.n	8004992 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80c0 	beq.w	800494e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80b5 	beq.w	800494e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <HAL_UART_IRQHandler+0x9c>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2201      	movs	r2, #1
 80047fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004804:	f043 0201 	orr.w	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <HAL_UART_IRQHandler+0xc4>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2202      	movs	r2, #2
 8004826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00e      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2204      	movs	r2, #4
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	f043 0202 	orr.w	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d013      	beq.n	800488e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004886:	f043 0208 	orr.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d07f      	beq.n	8004996 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048be:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d004      	beq.n	80048d8 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d031      	beq.n	800493c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fc36 	bl	800514a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d123      	bne.n	8004934 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fa:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_UART_IRQHandler+0x234>)
 800490a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004910:	4618      	mov	r0, r3
 8004912:	f7fd fa5c 	bl	8001dce <HAL_DMA_Abort_IT>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d016      	beq.n	800494a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004926:	4610      	mov	r0, r2
 8004928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492a:	e00e      	b.n	800494a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f845 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004932:	e00a      	b.n	800494a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f841 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493a:	e006      	b.n	800494a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f83d 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004948:	e025      	b.n	8004996 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494a:	bf00      	nop
    return;
 800494c:	e023      	b.n	8004996 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004966:	2b00      	cmp	r3, #0
 8004968:	d017      	beq.n	800499a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
    }
    return;
 8004972:	e012      	b.n	800499a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00e      	beq.n	800499c <HAL_UART_IRQHandler+0x22c>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fc14 	bl	80051b6 <UART_EndTransmit_IT>
    return;
 800498e:	bf00      	nop
 8004990:	e004      	b.n	800499c <HAL_UART_IRQHandler+0x22c>
      return;
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <HAL_UART_IRQHandler+0x22c>
    return;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_UART_IRQHandler+0x22c>
    return;
 800499a:	bf00      	nop
  }

}
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	0800518b 	.word	0x0800518b

080049a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4bb1      	ldr	r3, [pc, #708]	; (8004cc4 <UART_SetConfig+0x2f4>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	6939      	ldr	r1, [r7, #16]
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a9f      	ldr	r2, [pc, #636]	; (8004cc8 <UART_SetConfig+0x2f8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d121      	bne.n	8004a94 <UART_SetConfig+0xc4>
 8004a50:	4b9e      	ldr	r3, [pc, #632]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d816      	bhi.n	8004a8c <UART_SetConfig+0xbc>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x94>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a81 	.word	0x08004a81
 8004a6c:	08004a7b 	.word	0x08004a7b
 8004a70:	08004a87 	.word	0x08004a87
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e151      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e14e      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e14b      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e148      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	bf00      	nop
 8004a92:	e144      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a8d      	ldr	r2, [pc, #564]	; (8004cd0 <UART_SetConfig+0x300>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d134      	bne.n	8004b08 <UART_SetConfig+0x138>
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d829      	bhi.n	8004b00 <UART_SetConfig+0x130>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0xe4>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004b01 	.word	0x08004b01
 8004ad4:	08004aef 	.word	0x08004aef
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004afb 	.word	0x08004afb
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e117      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e114      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e111      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e10e      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	bf00      	nop
 8004b06:	e10a      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a71      	ldr	r2, [pc, #452]	; (8004cd4 <UART_SetConfig+0x304>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d120      	bne.n	8004b54 <UART_SetConfig+0x184>
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d00f      	beq.n	8004b40 <UART_SetConfig+0x170>
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d802      	bhi.n	8004b2a <UART_SetConfig+0x15a>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <UART_SetConfig+0x164>
 8004b28:	e010      	b.n	8004b4c <UART_SetConfig+0x17c>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d005      	beq.n	8004b3a <UART_SetConfig+0x16a>
 8004b2e:	2b30      	cmp	r3, #48	; 0x30
 8004b30:	d009      	beq.n	8004b46 <UART_SetConfig+0x176>
 8004b32:	e00b      	b.n	8004b4c <UART_SetConfig+0x17c>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e0f1      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e0ee      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b40:	2304      	movs	r3, #4
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e0eb      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b46:	2308      	movs	r3, #8
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0e8      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	bf00      	nop
 8004b52:	e0e4      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a5f      	ldr	r2, [pc, #380]	; (8004cd8 <UART_SetConfig+0x308>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d120      	bne.n	8004ba0 <UART_SetConfig+0x1d0>
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d00f      	beq.n	8004b8c <UART_SetConfig+0x1bc>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d802      	bhi.n	8004b76 <UART_SetConfig+0x1a6>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0x1b0>
 8004b74:	e010      	b.n	8004b98 <UART_SetConfig+0x1c8>
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d005      	beq.n	8004b86 <UART_SetConfig+0x1b6>
 8004b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b7c:	d009      	beq.n	8004b92 <UART_SetConfig+0x1c2>
 8004b7e:	e00b      	b.n	8004b98 <UART_SetConfig+0x1c8>
 8004b80:	2300      	movs	r3, #0
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e0cb      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b86:	2302      	movs	r3, #2
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e0c8      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e0c5      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b92:	2308      	movs	r3, #8
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e0c2      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	bf00      	nop
 8004b9e:	e0be      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4d      	ldr	r2, [pc, #308]	; (8004cdc <UART_SetConfig+0x30c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d124      	bne.n	8004bf4 <UART_SetConfig+0x224>
 8004baa:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d012      	beq.n	8004be0 <UART_SetConfig+0x210>
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	d802      	bhi.n	8004bc6 <UART_SetConfig+0x1f6>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <UART_SetConfig+0x204>
 8004bc4:	e012      	b.n	8004bec <UART_SetConfig+0x21c>
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bca:	d006      	beq.n	8004bda <UART_SetConfig+0x20a>
 8004bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd0:	d009      	beq.n	8004be6 <UART_SetConfig+0x216>
 8004bd2:	e00b      	b.n	8004bec <UART_SetConfig+0x21c>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0a1      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e09e      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e09b      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e098      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	bf00      	nop
 8004bf2:	e094      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a39      	ldr	r2, [pc, #228]	; (8004ce0 <UART_SetConfig+0x310>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d124      	bne.n	8004c48 <UART_SetConfig+0x278>
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0c:	d012      	beq.n	8004c34 <UART_SetConfig+0x264>
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d802      	bhi.n	8004c1a <UART_SetConfig+0x24a>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <UART_SetConfig+0x258>
 8004c18:	e012      	b.n	8004c40 <UART_SetConfig+0x270>
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1e:	d006      	beq.n	8004c2e <UART_SetConfig+0x25e>
 8004c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c24:	d009      	beq.n	8004c3a <UART_SetConfig+0x26a>
 8004c26:	e00b      	b.n	8004c40 <UART_SetConfig+0x270>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e077      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e074      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e071      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e06e      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	bf00      	nop
 8004c46:	e06a      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <UART_SetConfig+0x314>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d124      	bne.n	8004c9c <UART_SetConfig+0x2cc>
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d012      	beq.n	8004c88 <UART_SetConfig+0x2b8>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	d802      	bhi.n	8004c6e <UART_SetConfig+0x29e>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <UART_SetConfig+0x2ac>
 8004c6c:	e012      	b.n	8004c94 <UART_SetConfig+0x2c4>
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c72:	d006      	beq.n	8004c82 <UART_SetConfig+0x2b2>
 8004c74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c78:	d009      	beq.n	8004c8e <UART_SetConfig+0x2be>
 8004c7a:	e00b      	b.n	8004c94 <UART_SetConfig+0x2c4>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e04d      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e04a      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e047      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e044      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	bf00      	nop
 8004c9a:	e040      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <UART_SetConfig+0x318>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d139      	bne.n	8004d1a <UART_SetConfig+0x34a>
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <UART_SetConfig+0x2fc>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb4:	d027      	beq.n	8004d06 <UART_SetConfig+0x336>
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cba:	d817      	bhi.n	8004cec <UART_SetConfig+0x31c>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <UART_SetConfig+0x32a>
 8004cc0:	e027      	b.n	8004d12 <UART_SetConfig+0x342>
 8004cc2:	bf00      	nop
 8004cc4:	efff69f3 	.word	0xefff69f3
 8004cc8:	40011000 	.word	0x40011000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40004400 	.word	0x40004400
 8004cd4:	40004800 	.word	0x40004800
 8004cd8:	40004c00 	.word	0x40004c00
 8004cdc:	40005000 	.word	0x40005000
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	40007800 	.word	0x40007800
 8004ce8:	40007c00 	.word	0x40007c00
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d006      	beq.n	8004d00 <UART_SetConfig+0x330>
 8004cf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cf6:	d009      	beq.n	8004d0c <UART_SetConfig+0x33c>
 8004cf8:	e00b      	b.n	8004d12 <UART_SetConfig+0x342>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e00e      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e00b      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004d06:	2304      	movs	r3, #4
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e008      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e005      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004d12:	2310      	movs	r3, #16
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	bf00      	nop
 8004d18:	e001      	b.n	8004d1e <UART_SetConfig+0x34e>
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d26:	d17c      	bne.n	8004e22 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d859      	bhi.n	8004de2 <UART_SetConfig+0x412>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x364>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004de3 	.word	0x08004de3
 8004d44:	08004dad 	.word	0x08004dad
 8004d48:	08004de3 	.word	0x08004de3
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004de3 	.word	0x08004de3
 8004d54:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d58:	f7fd fe50 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	005a      	lsls	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e038      	b.n	8004de8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d76:	f7fd fe55 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	005a      	lsls	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	61bb      	str	r3, [r7, #24]
        break;
 8004d92:	e029      	b.n	8004de8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	085a      	lsrs	r2, r3, #1
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <UART_SetConfig+0x540>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6852      	ldr	r2, [r2, #4]
 8004da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	61bb      	str	r3, [r7, #24]
        break;
 8004daa:	e01d      	b.n	8004de8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dac:	f7fd fd68 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004db0:	4603      	mov	r3, r0
 8004db2:	005a      	lsls	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	441a      	add	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	61bb      	str	r3, [r7, #24]
        break;
 8004dc8:	e00e      	b.n	8004de8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	61bb      	str	r3, [r7, #24]
        break;
 8004de0:	e002      	b.n	8004de8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
        break;
 8004de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d916      	bls.n	8004e1c <UART_SetConfig+0x44c>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d212      	bcs.n	8004e1c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f023 030f 	bic.w	r3, r3, #15
 8004dfe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	89fa      	ldrh	r2, [r7, #14]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e06e      	b.n	8004efa <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
 8004e20:	e06b      	b.n	8004efa <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d857      	bhi.n	8004ed8 <UART_SetConfig+0x508>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x460>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e71 	.word	0x08004e71
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004ed9 	.word	0x08004ed9
 8004e40:	08004ea5 	.word	0x08004ea5
 8004e44:	08004ed9 	.word	0x08004ed9
 8004e48:	08004ed9 	.word	0x08004ed9
 8004e4c:	08004ed9 	.word	0x08004ed9
 8004e50:	08004ec1 	.word	0x08004ec1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e54:	f7fd fdd2 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	441a      	add	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	61bb      	str	r3, [r7, #24]
        break;
 8004e6e:	e036      	b.n	8004ede <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e70:	f7fd fdd8 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	61bb      	str	r3, [r7, #24]
        break;
 8004e8a:	e028      	b.n	8004ede <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085a      	lsrs	r2, r3, #1
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <UART_SetConfig+0x544>)
 8004e94:	4413      	add	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6852      	ldr	r2, [r2, #4]
 8004e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
        break;
 8004ea2:	e01c      	b.n	8004ede <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ea4:	f7fd fcec 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	61bb      	str	r3, [r7, #24]
        break;
 8004ebe:	e00e      	b.n	8004ede <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
        break;
 8004ed6:	e002      	b.n	8004ede <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
        break;
 8004edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b0f      	cmp	r3, #15
 8004ee2:	d908      	bls.n	8004ef6 <UART_SetConfig+0x526>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eea:	d204      	bcs.n	8004ef6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	60da      	str	r2, [r3, #12]
 8004ef4:	e001      	b.n	8004efa <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	01e84800 	.word	0x01e84800
 8004f14:	00f42400 	.word	0x00f42400

08004f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d10a      	bne.n	800502e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800506a:	f7fc fd93 	bl	8001b94 <HAL_GetTick>
 800506e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d10e      	bne.n	800509c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f814 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e00a      	b.n	80050b2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ca:	e02a      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d2:	d026      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fc fd5e 	bl	8001b94 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <UART_WaitOnFlagUntilTimeout+0x30>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11b      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e00f      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0c5      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005160:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff fc07 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fbe4 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	d13a      	bne.n	8005276 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005208:	89bb      	ldrh	r3, [r7, #12]
 800520a:	b2d9      	uxtb	r1, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	400a      	ands	r2, r1
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d121      	bne.n	8005286 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005250:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc f91e 	bl	80014b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005274:	e007      	b.n	8005286 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0208 	orr.w	r2, r2, #8
 8005284:	619a      	str	r2, [r3, #24]
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800529c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a2:	2b22      	cmp	r3, #34	; 0x22
 80052a4:	d13a      	bne.n	800531c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052b4:	89ba      	ldrh	r2, [r7, #12]
 80052b6:	89fb      	ldrh	r3, [r7, #14]
 80052b8:	4013      	ands	r3, r2
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d121      	bne.n	800532c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fc f8cb 	bl	80014b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531a:	e007      	b.n	800532c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	619a      	str	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4e0d      	ldr	r6, [pc, #52]	; (800536c <__libc_init_array+0x38>)
 8005338:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533a:	1ba4      	subs	r4, r4, r6
 800533c:	10a4      	asrs	r4, r4, #2
 800533e:	2500      	movs	r5, #0
 8005340:	42a5      	cmp	r5, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	4e0b      	ldr	r6, [pc, #44]	; (8005374 <__libc_init_array+0x40>)
 8005346:	4c0c      	ldr	r4, [pc, #48]	; (8005378 <__libc_init_array+0x44>)
 8005348:	f000 f820 	bl	800538c <_init>
 800534c:	1ba4      	subs	r4, r4, r6
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	2500      	movs	r5, #0
 8005352:	42a5      	cmp	r5, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800535c:	4798      	blx	r3
 800535e:	3501      	adds	r5, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005366:	4798      	blx	r3
 8005368:	3501      	adds	r5, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	080053c4 	.word	0x080053c4
 8005370:	080053c4 	.word	0x080053c4
 8005374:	080053c4 	.word	0x080053c4
 8005378:	080053cc 	.word	0x080053cc

0800537c <memset>:
 800537c:	4402      	add	r2, r0
 800537e:	4603      	mov	r3, r0
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	f803 1b01 	strb.w	r1, [r3], #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>

0800538c <_init>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr

08005398 <_fini>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr
