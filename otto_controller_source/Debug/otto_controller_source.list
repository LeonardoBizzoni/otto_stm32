
otto_controller_source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d28  08004d28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d30  08004d30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08004d48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004d48  00020288  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3e4  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d33  00000000  00000000  0002d41e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274ae  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009765  00000000  00000000  00057f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f16e5  00000000  00000000  00061693  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152d78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  00152df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004cf0 	.word	0x08004cf0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004cf0 	.word	0x08004cf0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f94b 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f004 f90a 	bl	8004760 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f965 	bl	8000842 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f92d 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000284 	.word	0x20000284

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000284 	.word	0x20000284

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	05fa0000 	.word	0x05fa0000

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff3e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff31 	bl	800069c <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff feb8 	bl	80005dc <HAL_GetTick>
 800086c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e099      	b.n	80009ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2202      	movs	r2, #2
 8000884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f022 0201 	bic.w	r2, r2, #1
 8000896:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000898:	e00f      	b.n	80008ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800089a:	f7ff fe9f 	bl	80005dc <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d908      	bls.n	80008ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2220      	movs	r2, #32
 80008ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2203      	movs	r2, #3
 80008b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008b6:	2303      	movs	r3, #3
 80008b8:	e078      	b.n	80009ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e8      	bne.n	800089a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <HAL_DMA_Init+0x158>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	4313      	orrs	r3, r2
 800090a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	2b04      	cmp	r3, #4
 8000912:	d107      	bne.n	8000924 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4313      	orrs	r3, r2
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	4313      	orrs	r3, r2
 8000922:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f023 0307 	bic.w	r3, r3, #7
 800093a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4313      	orrs	r3, r2
 8000944:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	2b04      	cmp	r3, #4
 800094c:	d117      	bne.n	800097e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4313      	orrs	r3, r2
 8000956:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00e      	beq.n	800097e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fa0b 	bl	8000d7c <DMA_CheckFifoParam>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d008      	beq.n	800097e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2240      	movs	r2, #64	; 0x40
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800097a:	2301      	movs	r3, #1
 800097c:	e016      	b.n	80009ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f9c2 	bl	8000d10 <DMA_CalcBaseAndBitshift>
 800098c:	4603      	mov	r3, r0
 800098e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000994:	223f      	movs	r2, #63	; 0x3f
 8000996:	409a      	lsls	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	e010803f 	.word	0xe010803f

080009b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d004      	beq.n	80009d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00c      	b.n	80009f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2205      	movs	r2, #5
 80009da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a08:	4b92      	ldr	r3, [pc, #584]	; (8000c54 <HAL_DMA_IRQHandler+0x258>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a92      	ldr	r2, [pc, #584]	; (8000c58 <HAL_DMA_IRQHandler+0x25c>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0a9b      	lsrs	r3, r3, #10
 8000a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a26:	2208      	movs	r2, #8
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d01a      	beq.n	8000a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d013      	beq.n	8000a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 0204 	bic.w	r2, r2, #4
 8000a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a54:	2208      	movs	r2, #8
 8000a56:	409a      	lsls	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4013      	ands	r3, r2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d012      	beq.n	8000a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a96:	f043 0202 	orr.w	r2, r3, #2
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d012      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000acc:	f043 0204 	orr.w	r2, r3, #4
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad8:	2210      	movs	r2, #16
 8000ada:	409a      	lsls	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d043      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d03c      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	2210      	movs	r2, #16
 8000af8:	409a      	lsls	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d018      	beq.n	8000b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d024      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	4798      	blx	r3
 8000b2a:	e01f      	b.n	8000b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01b      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	4798      	blx	r3
 8000b3c:	e016      	b.n	8000b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d107      	bne.n	8000b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0208 	bic.w	r2, r2, #8
 8000b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b70:	2220      	movs	r2, #32
 8000b72:	409a      	lsls	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 808e 	beq.w	8000c9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 8086 	beq.w	8000c9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b92:	2220      	movs	r2, #32
 8000b94:	409a      	lsls	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d136      	bne.n	8000c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0216 	bic.w	r2, r2, #22
 8000bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <HAL_DMA_IRQHandler+0x1da>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0208 	bic.w	r2, r2, #8
 8000be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bea:	223f      	movs	r2, #63	; 0x3f
 8000bec:	409a      	lsls	r2, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d07d      	beq.n	8000d06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	4798      	blx	r3
        }
        return;
 8000c12:	e078      	b.n	8000d06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d01c      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d108      	bne.n	8000c42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d030      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
 8000c40:	e02b      	b.n	8000c9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d027      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	4798      	blx	r3
 8000c52:	e022      	b.n	8000c9a <HAL_DMA_IRQHandler+0x29e>
 8000c54:	20000008 	.word	0x20000008
 8000c58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0210 	bic.w	r2, r2, #16
 8000c78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d032      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d022      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d307      	bcc.n	8000ce2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f2      	bne.n	8000cc6 <HAL_DMA_IRQHandler+0x2ca>
 8000ce0:	e000      	b.n	8000ce4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000ce2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3
 8000d04:	e000      	b.n	8000d08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d06:	bf00      	nop
    }
  }
}
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop

08000d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3b10      	subs	r3, #16
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <DMA_CalcBaseAndBitshift+0x60>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <DMA_CalcBaseAndBitshift+0x64>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d908      	bls.n	8000d50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <DMA_CalcBaseAndBitshift+0x68>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	1d1a      	adds	r2, r3, #4
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	659a      	str	r2, [r3, #88]	; 0x58
 8000d4e:	e006      	b.n	8000d5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <DMA_CalcBaseAndBitshift+0x68>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	aaaaaaab 	.word	0xaaaaaaab
 8000d74:	08004d08 	.word	0x08004d08
 8000d78:	fffffc00 	.word	0xfffffc00

08000d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11f      	bne.n	8000dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d855      	bhi.n	8000e48 <DMA_CheckFifoParam+0xcc>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <DMA_CheckFifoParam+0x28>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000db5 	.word	0x08000db5
 8000da8:	08000dc7 	.word	0x08000dc7
 8000dac:	08000db5 	.word	0x08000db5
 8000db0:	08000e49 	.word	0x08000e49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d045      	beq.n	8000e4c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc4:	e042      	b.n	8000e4c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dce:	d13f      	bne.n	8000e50 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dd4:	e03c      	b.n	8000e50 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dde:	d121      	bne.n	8000e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d836      	bhi.n	8000e54 <DMA_CheckFifoParam+0xd8>
 8000de6:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <DMA_CheckFifoParam+0x70>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e03 	.word	0x08000e03
 8000df4:	08000dfd 	.word	0x08000dfd
 8000df8:	08000e15 	.word	0x08000e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8000e00:	e02f      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d024      	beq.n	8000e58 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e12:	e021      	b.n	8000e58 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e1c:	d11e      	bne.n	8000e5c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e22:	e01b      	b.n	8000e5c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d902      	bls.n	8000e30 <DMA_CheckFifoParam+0xb4>
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d003      	beq.n	8000e36 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e2e:	e018      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
      break;
 8000e34:	e015      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00e      	beq.n	8000e60 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
      break;
 8000e46:	e00b      	b.n	8000e60 <DMA_CheckFifoParam+0xe4>
      break;
 8000e48:	bf00      	nop
 8000e4a:	e00a      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;
 8000e4c:	bf00      	nop
 8000e4e:	e008      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;
 8000e50:	bf00      	nop
 8000e52:	e006      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;
 8000e54:	bf00      	nop
 8000e56:	e004      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;
 8000e58:	bf00      	nop
 8000e5a:	e002      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;   
 8000e5c:	bf00      	nop
 8000e5e:	e000      	b.n	8000e62 <DMA_CheckFifoParam+0xe6>
      break;
 8000e60:	bf00      	nop
    }
  } 
  
  return status; 
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e175      	b.n	800117c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8164 	bne.w	8001176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x4e>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	69b9      	ldr	r1, [r7, #24]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d00b      	beq.n	8000f5a <HAL_GPIO_Init+0xea>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80be 	beq.w	8001176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <HAL_GPIO_Init+0x320>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a64      	ldr	r2, [pc, #400]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001012:	4a60      	ldr	r2, [pc, #384]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_GPIO_Init+0x328>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d037      	beq.n	80010ae <HAL_GPIO_Init+0x23e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_GPIO_Init+0x32c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d031      	beq.n	80010aa <HAL_GPIO_Init+0x23a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a55      	ldr	r2, [pc, #340]	; (80011a0 <HAL_GPIO_Init+0x330>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d02b      	beq.n	80010a6 <HAL_GPIO_Init+0x236>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <HAL_GPIO_Init+0x334>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x232>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a53      	ldr	r2, [pc, #332]	; (80011a8 <HAL_GPIO_Init+0x338>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x22e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x33c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x22a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x340>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x226>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x344>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x222>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x348>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x21e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x34c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x21a>
 8001086:	2309      	movs	r3, #9
 8001088:	e012      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 800108a:	230a      	movs	r3, #10
 800108c:	e010      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 800108e:	2308      	movs	r3, #8
 8001090:	e00e      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 8001092:	2307      	movs	r3, #7
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 8001096:	2306      	movs	r3, #6
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x240>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010c0:	4934      	ldr	r1, [pc, #208]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <HAL_GPIO_Init+0x350>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_GPIO_Init+0x350>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_GPIO_Init+0x350>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <HAL_GPIO_Init+0x350>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_GPIO_Init+0x350>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x350>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_GPIO_Init+0x350>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <HAL_GPIO_Init+0x350>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae86 	bls.w	8000e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	40022000 	.word	0x40022000
 80011bc:	40022400 	.word	0x40022400
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e25e      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b04      	cmp	r3, #4
 8001226:	d00c      	beq.n	8001242 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001228:	4b93      	ldr	r3, [pc, #588]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d112      	bne.n	800125a <HAL_RCC_OscConfig+0x62>
 8001234:	4b90      	ldr	r3, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d06c      	beq.n	8001328 <HAL_RCC_OscConfig+0x130>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d168      	bne.n	8001328 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e238      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x7a>
 8001264:	4b84      	ldr	r3, [pc, #528]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a83      	ldr	r2, [pc, #524]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e02e      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x9c>
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7e      	ldr	r2, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7b      	ldr	r2, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0xc0>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 80012b8:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6b      	ldr	r2, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff f980 	bl	80005dc <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff f97c 	bl	80005dc <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1ec      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe8>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff f96c 	bl	80005dc <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff f968 	bl	80005dc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1d8      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x110>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d069      	beq.n	800140a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001336:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x190>
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x17a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1ac      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	493d      	ldr	r1, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e040      	b.n	800140a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d023      	beq.n	80013d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff f91e 	bl	80005dc <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff f91a 	bl	80005dc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e18a      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4929      	ldr	r1, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
 80013d6:	e018      	b.n	800140a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff f8fa 	bl	80005dc <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff f8f6 	bl	80005dc <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e166      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d038      	beq.n	8001488 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142a:	f7ff f8d7 	bl	80005dc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff f8d3 	bl	80005dc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e143      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x23a>
 8001450:	e01a      	b.n	8001488 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x280>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff f8bd 	bl	80005dc <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff f8b9 	bl	80005dc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d903      	bls.n	800147c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e129      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
 8001478:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b95      	ldr	r3, [pc, #596]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a4 	beq.w	80015de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a8b      	ldr	r2, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014be:	4b86      	ldr	r3, [pc, #536]	; (80016d8 <HAL_RCC_OscConfig+0x4e0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ca:	4b83      	ldr	r3, [pc, #524]	; (80016d8 <HAL_RCC_OscConfig+0x4e0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a82      	ldr	r2, [pc, #520]	; (80016d8 <HAL_RCC_OscConfig+0x4e0>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f881 	bl	80005dc <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff f87d 	bl	80005dc <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	; 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0ed      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f0:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <HAL_RCC_OscConfig+0x4e0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x31a>
 8001504:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a72      	ldr	r2, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e02d      	b.n	800156e <HAL_RCC_OscConfig+0x376>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x33c>
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x376>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x35e>
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a64      	ldr	r2, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a61      	ldr	r2, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x376>
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff f831 	bl	80005dc <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff f82d 	bl	80005dc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e09b      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x386>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff f81b 	bl	80005dc <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff f817 	bl	80005dc <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e085      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d071      	beq.n	80016ca <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d069      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d14b      	bne.n	8001692 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7fe ffe9 	bl	80005dc <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7fe ffe5 	bl	80005dc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e055      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	019b      	lsls	r3, r3, #6
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	061b      	lsls	r3, r3, #24
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	071b      	lsls	r3, r3, #28
 8001658:	491e      	ldr	r1, [pc, #120]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7fe ffb7 	bl	80005dc <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7fe ffb3 	bl	80005dc <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e023      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x47a>
 8001690:	e01b      	b.n	80016ca <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 8001698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169e:	f7fe ff9d 	bl	80005dc <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7fe ff99 	bl	80005dc <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e009      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x4dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ae>
 80016c4:	e001      	b.n	80016ca <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0ce      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b69      	ldr	r3, [pc, #420]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d910      	bls.n	8001724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 020f 	bic.w	r2, r3, #15
 800170a:	4964      	ldr	r1, [pc, #400]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b6      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494c      	ldr	r1, [pc, #304]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d040      	beq.n	8001800 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07d      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e071      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e069      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d0:	f7fe ff04 	bl	80005dc <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7fe ff00 	bl	80005dc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e051      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d210      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 020f 	bic.w	r2, r3, #15
 8001816:	4921      	ldr	r1, [pc, #132]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e030      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4915      	ldr	r1, [pc, #84]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490d      	ldr	r1, [pc, #52]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186e:	f000 f81d 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001872:	4601      	mov	r1, r0
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	fa21 f303 	lsr.w	r3, r1, r3
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f7fe fe62 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004d10 	.word	0x08004d10
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d007      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x32>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d008      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x38>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 808d 	bne.w	80019f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018da:	60bb      	str	r3, [r7, #8]
       break;
 80018dc:	e08c      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e089      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	ea03 0501 	and.w	r5, r3, r1
 8001910:	ea04 0602 	and.w	r6, r4, r2
 8001914:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001916:	fb02 f106 	mul.w	r1, r2, r6
 800191a:	2200      	movs	r2, #0
 800191c:	fb02 f205 	mul.w	r2, r2, r5
 8001920:	440a      	add	r2, r1
 8001922:	493a      	ldr	r1, [pc, #232]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001924:	fba5 0101 	umull	r0, r1, r5, r1
 8001928:	1853      	adds	r3, r2, r1
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	461a      	mov	r2, r3
 8001934:	4623      	mov	r3, r4
 8001936:	f7fe fc7f 	bl	8000238 <__aeabi_uldivmod>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e049      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	ea03 0501 	and.w	r5, r3, r1
 8001958:	ea04 0602 	and.w	r6, r4, r2
 800195c:	4629      	mov	r1, r5
 800195e:	4632      	mov	r2, r6
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	0154      	lsls	r4, r2, #5
 800196a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800196e:	014b      	lsls	r3, r1, #5
 8001970:	4619      	mov	r1, r3
 8001972:	4622      	mov	r2, r4
 8001974:	1b49      	subs	r1, r1, r5
 8001976:	eb62 0206 	sbc.w	r2, r2, r6
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f04f 0400 	mov.w	r4, #0
 8001982:	0194      	lsls	r4, r2, #6
 8001984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001988:	018b      	lsls	r3, r1, #6
 800198a:	1a5b      	subs	r3, r3, r1
 800198c:	eb64 0402 	sbc.w	r4, r4, r2
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	00e2      	lsls	r2, r4, #3
 800199a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800199e:	00d9      	lsls	r1, r3, #3
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	195b      	adds	r3, r3, r5
 80019a6:	eb44 0406 	adc.w	r4, r4, r6
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	02a2      	lsls	r2, r4, #10
 80019b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019b8:	0299      	lsls	r1, r3, #10
 80019ba:	460b      	mov	r3, r1
 80019bc:	4614      	mov	r4, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	f7fe fc34 	bl	8000238 <__aeabi_uldivmod>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	60bb      	str	r3, [r7, #8]
      break;
 80019f0:	e002      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019f4:	60bb      	str	r3, [r7, #8]
      break;
 80019f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f8:	68bb      	ldr	r3, [r7, #8]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	017d7840 	.word	0x017d7840

08001a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a30:	4601      	mov	r1, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0a9b      	lsrs	r3, r3, #10
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	5cd3      	ldrb	r3, [r2, r3]
 8001a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08004d20 	.word	0x08004d20

08001a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a54:	f7ff ffdc 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a58:	4601      	mov	r1, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0b5b      	lsrs	r3, r3, #13
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08004d20 	.word	0x08004d20

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aaa:	6093      	str	r3, [r2, #8]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	4964      	ldr	r1, [pc, #400]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d017      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	4959      	ldr	r1, [pc, #356]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af0:	d101      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d017      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 808b 	beq.w	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b80:	f7fe fd2c 	bl	80005dc <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7fe fd28 	bl	80005dc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e38d      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d035      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d02e      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d114      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fcf0 	bl	80005dc <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe fcec 	bl	80005dc <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e34f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ee      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c2e:	d111      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	4901      	ldr	r1, [pc, #4]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	0ffffcff 	.word	0x0ffffcff
 8001c54:	4bb3      	ldr	r3, [pc, #716]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4ab2      	ldr	r2, [pc, #712]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c5e:	6093      	str	r3, [r2, #8]
 8001c60:	4bb0      	ldr	r3, [pc, #704]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	49ad      	ldr	r1, [pc, #692]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c7e:	4ba9      	ldr	r3, [pc, #676]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c84:	4aa7      	ldr	r2, [pc, #668]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c8e:	4ba5      	ldr	r3, [pc, #660]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	49a2      	ldr	r1, [pc, #648]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cac:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cba:	499a      	ldr	r1, [pc, #616]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cce:	4b95      	ldr	r3, [pc, #596]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cdc:	4991      	ldr	r1, [pc, #580]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cf0:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	4989      	ldr	r1, [pc, #548]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d12:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4980      	ldr	r1, [pc, #512]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4978      	ldr	r1, [pc, #480]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	f023 020c 	bic.w	r2, r3, #12
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	496f      	ldr	r1, [pc, #444]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4967      	ldr	r1, [pc, #412]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	495e      	ldr	r1, [pc, #376]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	4956      	ldr	r1, [pc, #344]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	4945      	ldr	r1, [pc, #276]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	493c      	ldr	r1, [pc, #240]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e52:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d011      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e74:	492b      	ldr	r1, [pc, #172]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb4:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed8:	4912      	ldr	r1, [pc, #72]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001efc:	4909      	ldr	r1, [pc, #36]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00f      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f20:	e002      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	4985      	ldr	r1, [pc, #532]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4c:	497c      	ldr	r1, [pc, #496]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f62:	f040 80d6 	bne.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f72:	f7fe fb33 	bl	80005dc <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f7a:	f7fe fb2f 	bl	80005dc <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e194      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11d      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fac:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	019a      	lsls	r2, r3, #6
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	071b      	lsls	r3, r3, #28
 8001fe0:	4957      	ldr	r1, [pc, #348]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d02e      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002012:	d129      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002028:	0f1b      	lsrs	r3, r3, #28
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	019a      	lsls	r2, r3, #6
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	071b      	lsls	r3, r3, #28
 8002048:	493d      	ldr	r1, [pc, #244]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002056:	f023 021f 	bic.w	r2, r3, #31
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	3b01      	subs	r3, #1
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01d      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	0e1b      	lsrs	r3, r3, #24
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002088:	0f1b      	lsrs	r3, r3, #28
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	019a      	lsls	r2, r3, #6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	071b      	lsls	r3, r3, #28
 80020a8:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	019a      	lsls	r2, r3, #6
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	071b      	lsls	r3, r3, #28
 80020d8:	4919      	ldr	r1, [pc, #100]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ec:	f7fe fa76 	bl	80005dc <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020f4:	f7fe fa72 	bl	80005dc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0d7      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b01      	cmp	r3, #1
 8002116:	f040 80cd 	bne.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002126:	f7fe fa59 	bl	80005dc <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800212e:	f7fe fa55 	bl	80005dc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d903      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ba      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002140:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002150:	d0ed      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02e      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002188:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	0f1b      	lsrs	r3, r3, #28
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	019a      	lsls	r2, r3, #6
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	4944      	ldr	r1, [pc, #272]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021b6:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	493d      	ldr	r1, [pc, #244]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d022      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e4:	d11d      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	0e1b      	lsrs	r3, r3, #24
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	019a      	lsls	r2, r3, #6
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	071b      	lsls	r3, r3, #28
 800221a:	4929      	ldr	r1, [pc, #164]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4917      	ldr	r1, [pc, #92]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7fe f9a6 	bl	80005dc <HAL_GetTick>
 8002290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002294:	f7fe f9a2 	bl	80005dc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e007      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b2:	d1ef      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e01d      	b.n	8002312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f002 faec 	bl	80048c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fc42 	bl	8002b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_TIM_Base_Start_IT+0x50>)
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d00b      	beq.n	800235e <HAL_TIM_Base_Start_IT+0x42>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d007      	beq.n	800235e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	00010007 	.word	0x00010007

08002370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e01d      	b.n	80023be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f002 fabc 	bl	8004914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f000 fbec 	bl	8002b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07b      	b.n	80024d4 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f002 f9d9 	bl	80047a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_TIM_Encoder_Init+0x114>)
 800240a:	400b      	ands	r3, r1
 800240c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f000 fbb7 	bl	8002b8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_TIM_Encoder_Init+0x118>)
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	4313      	orrs	r3, r2
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_TIM_Encoder_Init+0x11c>)
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_TIM_Encoder_Init+0x120>)
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	4313      	orrs	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	011a      	lsls	r2, r3, #4
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	031b      	lsls	r3, r3, #12
 8002488:	4313      	orrs	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4313      	orrs	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffebff8 	.word	0xfffebff8
 80024e0:	fffffcfc 	.word	0xfffffcfc
 80024e4:	fffff3f3 	.word	0xfffff3f3
 80024e8:	ffff0f0f 	.word	0xffff0f0f

080024ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_TIM_Encoder_Start+0x16>
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d008      	beq.n	8002512 <HAL_TIM_Encoder_Start+0x26>
 8002500:	e00f      	b.n	8002522 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fed6 	bl	80032bc <TIM_CCxChannelCmd>
      break;
 8002510:	e016      	b.n	8002540 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	2104      	movs	r1, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fece 	bl	80032bc <TIM_CCxChannelCmd>
      break;
 8002520:	e00e      	b.n	8002540 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fec6 	bl	80032bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	2104      	movs	r1, #4
 8002538:	4618      	mov	r0, r3
 800253a:	f000 febf 	bl	80032bc <TIM_CCxChannelCmd>
      break;
 800253e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d122      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d11b      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0202 	mvn.w	r2, #2
 8002586:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fad7 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 80025a2:	e005      	b.n	80025b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fac9 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fada 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d122      	bne.n	800260a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d11b      	bne.n	800260a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0204 	mvn.w	r2, #4
 80025da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 faad 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 80025f6:	e005      	b.n	8002604 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa9f 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fab0 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d122      	bne.n	800265e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11b      	bne.n	800265e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0208 	mvn.w	r2, #8
 800262e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fa83 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 800264a:	e005      	b.n	8002658 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa75 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa86 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b10      	cmp	r3, #16
 800266a:	d122      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b10      	cmp	r3, #16
 8002678:	d11b      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0210 	mvn.w	r2, #16
 8002682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2208      	movs	r2, #8
 8002688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa59 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 800269e:	e005      	b.n	80026ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fa4b 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa5c 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10e      	bne.n	80026de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f06f 0201 	mvn.w	r2, #1
 80026d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 f801 	bl	80046e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d10e      	bne.n	800270a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d107      	bne.n	800270a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fe65 	bl	80033d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fe58 	bl	80033e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa0a 	bl	8002b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0220 	mvn.w	r2, #32
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fe18 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e105      	b.n	80029be <HAL_TIM_PWM_ConfigChannel+0x226>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b14      	cmp	r3, #20
 80027c6:	f200 80f0 	bhi.w	80029aa <HAL_TIM_PWM_ConfigChannel+0x212>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	08002825 	.word	0x08002825
 80027d4:	080029ab 	.word	0x080029ab
 80027d8:	080029ab 	.word	0x080029ab
 80027dc:	080029ab 	.word	0x080029ab
 80027e0:	08002865 	.word	0x08002865
 80027e4:	080029ab 	.word	0x080029ab
 80027e8:	080029ab 	.word	0x080029ab
 80027ec:	080029ab 	.word	0x080029ab
 80027f0:	080028a7 	.word	0x080028a7
 80027f4:	080029ab 	.word	0x080029ab
 80027f8:	080029ab 	.word	0x080029ab
 80027fc:	080029ab 	.word	0x080029ab
 8002800:	080028e7 	.word	0x080028e7
 8002804:	080029ab 	.word	0x080029ab
 8002808:	080029ab 	.word	0x080029ab
 800280c:	080029ab 	.word	0x080029ab
 8002810:	08002929 	.word	0x08002929
 8002814:	080029ab 	.word	0x080029ab
 8002818:	080029ab 	.word	0x080029ab
 800281c:	080029ab 	.word	0x080029ab
 8002820:	08002969 	.word	0x08002969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fa4e 	bl	8002ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0208 	orr.w	r2, r2, #8
 800283e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6999      	ldr	r1, [r3, #24]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	619a      	str	r2, [r3, #24]
      break;
 8002862:	e0a3      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 faa0 	bl	8002db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6999      	ldr	r1, [r3, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	021a      	lsls	r2, r3, #8
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	619a      	str	r2, [r3, #24]
      break;
 80028a4:	e082      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 faf7 	bl	8002ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0208 	orr.w	r2, r2, #8
 80028c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0204 	bic.w	r2, r2, #4
 80028d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69d9      	ldr	r1, [r3, #28]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	61da      	str	r2, [r3, #28]
      break;
 80028e4:	e062      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fb4d 	bl	8002f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	021a      	lsls	r2, r3, #8
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	61da      	str	r2, [r3, #28]
      break;
 8002926:	e041      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fb84 	bl	800303c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002966:	e021      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fbb6 	bl	80030e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80029aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop

080029c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_TIM_ConfigClockSource+0x18>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0a6      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x166>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4b4f      	ldr	r3, [pc, #316]	; (8002b38 <HAL_TIM_ConfigClockSource+0x170>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d067      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x120>
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d80b      	bhi.n	8002a34 <HAL_TIM_ConfigClockSource+0x6c>
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d073      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x140>
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d802      	bhi.n	8002a2a <HAL_TIM_ConfigClockSource+0x62>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d06f      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a28:	e078      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d06c      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x140>
 8002a2e:	2b30      	cmp	r3, #48	; 0x30
 8002a30:	d06a      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a32:	e073      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d00d      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x8c>
 8002a38:	2b70      	cmp	r3, #112	; 0x70
 8002a3a:	d804      	bhi.n	8002a46 <HAL_TIM_ConfigClockSource+0x7e>
 8002a3c:	2b50      	cmp	r3, #80	; 0x50
 8002a3e:	d033      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0xe0>
 8002a40:	2b60      	cmp	r3, #96	; 0x60
 8002a42:	d041      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a44:	e06a      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d066      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x152>
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d017      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a52:	e063      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f000 fc0a 	bl	800327c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]
      break;
 8002a80:	e04c      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f000 fbf3 	bl	800327c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa4:	609a      	str	r2, [r3, #8]
      break;
 8002aa6:	e039      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f000 fb67 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2150      	movs	r1, #80	; 0x50
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fbc0 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002ac6:	e029      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 fb86 	bl	80031e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2160      	movs	r1, #96	; 0x60
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fbb0 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e019      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 fb47 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fba0 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002b06:	e009      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fb97 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002b18:	e000      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	fffeff88 	.word	0xfffeff88

08002b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <TIM_Base_SetConfig+0x114>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3d      	ldr	r2, [pc, #244]	; (8002ca4 <TIM_Base_SetConfig+0x118>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3c      	ldr	r2, [pc, #240]	; (8002ca8 <TIM_Base_SetConfig+0x11c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <TIM_Base_SetConfig+0x120>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a3a      	ldr	r2, [pc, #232]	; (8002cb0 <TIM_Base_SetConfig+0x124>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <TIM_Base_SetConfig+0x114>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d027      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <TIM_Base_SetConfig+0x118>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d023      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <TIM_Base_SetConfig+0x11c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <TIM_Base_SetConfig+0x120>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01b      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <TIM_Base_SetConfig+0x124>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d017      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <TIM_Base_SetConfig+0x128>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <TIM_Base_SetConfig+0x12c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00f      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <TIM_Base_SetConfig+0x130>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <TIM_Base_SetConfig+0x134>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <TIM_Base_SetConfig+0x138>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <TIM_Base_SetConfig+0x13c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d108      	bne.n	8002c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <TIM_Base_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0xf8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <TIM_Base_SetConfig+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d103      	bne.n	8002c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	615a      	str	r2, [r3, #20]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	40001800 	.word	0x40001800
 8002cc4:	40001c00 	.word	0x40001c00
 8002cc8:	40002000 	.word	0x40002000

08002ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <TIM_OC1_SetConfig+0xd8>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 0302 	bic.w	r3, r3, #2
 8002d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <TIM_OC1_SetConfig+0xdc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_OC1_SetConfig+0x64>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a20      	ldr	r2, [pc, #128]	; (8002dac <TIM_OC1_SetConfig+0xe0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10c      	bne.n	8002d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0308 	bic.w	r3, r3, #8
 8002d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <TIM_OC1_SetConfig+0xdc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_OC1_SetConfig+0x8e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a15      	ldr	r2, [pc, #84]	; (8002dac <TIM_OC1_SetConfig+0xe0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d111      	bne.n	8002d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	621a      	str	r2, [r3, #32]
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	fffeff8f 	.word	0xfffeff8f
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40010400 	.word	0x40010400

08002db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <TIM_OC2_SetConfig+0xe4>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0320 	bic.w	r3, r3, #32
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <TIM_OC2_SetConfig+0xe8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC2_SetConfig+0x68>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <TIM_OC2_SetConfig+0xec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10d      	bne.n	8002e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <TIM_OC2_SetConfig+0xe8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_OC2_SetConfig+0x94>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <TIM_OC2_SetConfig+0xec>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d113      	bne.n	8002e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	feff8fff 	.word	0xfeff8fff
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <TIM_OC3_SetConfig+0xe0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <TIM_OC3_SetConfig+0xe4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_OC3_SetConfig+0x66>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <TIM_OC3_SetConfig+0xe8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <TIM_OC3_SetConfig+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_OC3_SetConfig+0x92>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <TIM_OC3_SetConfig+0xe8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d113      	bne.n	8002f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	621a      	str	r2, [r3, #32]
}
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	fffeff8f 	.word	0xfffeff8f
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40010400 	.word	0x40010400

08002f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <TIM_OC4_SetConfig+0xa4>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	031b      	lsls	r3, r3, #12
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <TIM_OC4_SetConfig+0xa8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_OC4_SetConfig+0x68>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <TIM_OC4_SetConfig+0xac>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d109      	bne.n	8003008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	feff8fff 	.word	0xfeff8fff
 8003034:	40010000 	.word	0x40010000
 8003038:	40010400 	.word	0x40010400

0800303c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <TIM_OC5_SetConfig+0x98>)
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800307c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <TIM_OC5_SetConfig+0x9c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC5_SetConfig+0x5e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <TIM_OC5_SetConfig+0xa0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d109      	bne.n	80030ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	fffeff8f 	.word	0xfffeff8f
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40010400 	.word	0x40010400

080030e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <TIM_OC6_SetConfig+0x9c>)
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	051b      	lsls	r3, r3, #20
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <TIM_OC6_SetConfig+0xa0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC6_SetConfig+0x60>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <TIM_OC6_SetConfig+0xa4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d109      	bne.n	8003154 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	feff8fff 	.word	0xfeff8fff
 8003180:	40010000 	.word	0x40010000
 8003184:	40010400 	.word	0x40010400

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0210 	bic.w	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e045      	b.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d108      	bne.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800335a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e040      	b.n	8003490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f001 fad0 	bl	80049c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f95c 	bl	80036f8 <UART_SetConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fbf4 	bl	8003c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003476:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fc7b 	bl	8003d84 <UART_CheckIdleState>
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80eb 	beq.w	80036ba <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
      }
      return;
 80034ec:	e0e5      	b.n	80036ba <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80c0 	beq.w	8003676 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80b5 	beq.w	8003676 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <HAL_UART_IRQHandler+0x9c>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <HAL_UART_IRQHandler+0xc4>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2202      	movs	r2, #2
 800354e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <HAL_UART_IRQHandler+0xec>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	f043 0202 	orr.w	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d013      	beq.n	80035b6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2208      	movs	r2, #8
 80035a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d07f      	beq.n	80036be <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d004      	beq.n	8003600 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d031      	beq.n	8003664 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fc36 	bl	8003e72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d123      	bne.n	800365c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_UART_IRQHandler+0x234>)
 8003632:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd f9bd 	bl	80009b8 <HAL_DMA_Abort_IT>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800364e:	4610      	mov	r0, r2
 8003650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	e00e      	b.n	8003672 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f845 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365a:	e00a      	b.n	8003672 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f841 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003662:	e006      	b.n	8003672 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f83d 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003670:	e025      	b.n	80036be <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003672:	bf00      	nop
    return;
 8003674:	e023      	b.n	80036be <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
    }
    return;
 800369a:	e012      	b.n	80036c2 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <HAL_UART_IRQHandler+0x22c>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fc14 	bl	8003ede <UART_EndTransmit_IT>
    return;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <HAL_UART_IRQHandler+0x22c>
      return;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <HAL_UART_IRQHandler+0x22c>
    return;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HAL_UART_IRQHandler+0x22c>
    return;
 80036c2:	bf00      	nop
  }

}
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	08003eb3 	.word	0x08003eb3

080036d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4bb1      	ldr	r3, [pc, #708]	; (80039ec <UART_SetConfig+0x2f4>)
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6939      	ldr	r1, [r7, #16]
 8003730:	430b      	orrs	r3, r1
 8003732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a9f      	ldr	r2, [pc, #636]	; (80039f0 <UART_SetConfig+0x2f8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d121      	bne.n	80037bc <UART_SetConfig+0xc4>
 8003778:	4b9e      	ldr	r3, [pc, #632]	; (80039f4 <UART_SetConfig+0x2fc>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b03      	cmp	r3, #3
 8003784:	d816      	bhi.n	80037b4 <UART_SetConfig+0xbc>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x94>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037a9 	.word	0x080037a9
 8003794:	080037a3 	.word	0x080037a3
 8003798:	080037af 	.word	0x080037af
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e151      	b.n	8003a46 <UART_SetConfig+0x34e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e14e      	b.n	8003a46 <UART_SetConfig+0x34e>
 80037a8:	2304      	movs	r3, #4
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e14b      	b.n	8003a46 <UART_SetConfig+0x34e>
 80037ae:	2308      	movs	r3, #8
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e148      	b.n	8003a46 <UART_SetConfig+0x34e>
 80037b4:	2310      	movs	r3, #16
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	bf00      	nop
 80037ba:	e144      	b.n	8003a46 <UART_SetConfig+0x34e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a8d      	ldr	r2, [pc, #564]	; (80039f8 <UART_SetConfig+0x300>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d134      	bne.n	8003830 <UART_SetConfig+0x138>
 80037c6:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <UART_SetConfig+0x2fc>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d829      	bhi.n	8003828 <UART_SetConfig+0x130>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0xe4>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003829 	.word	0x08003829
 80037e4:	08003829 	.word	0x08003829
 80037e8:	08003829 	.word	0x08003829
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	08003829 	.word	0x08003829
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003817 	.word	0x08003817
 8003800:	08003829 	.word	0x08003829
 8003804:	08003829 	.word	0x08003829
 8003808:	08003829 	.word	0x08003829
 800380c:	08003823 	.word	0x08003823
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e117      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e114      	b.n	8003a46 <UART_SetConfig+0x34e>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e111      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e10e      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	bf00      	nop
 800382e:	e10a      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a71      	ldr	r2, [pc, #452]	; (80039fc <UART_SetConfig+0x304>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d120      	bne.n	800387c <UART_SetConfig+0x184>
 800383a:	4b6e      	ldr	r3, [pc, #440]	; (80039f4 <UART_SetConfig+0x2fc>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003844:	2b10      	cmp	r3, #16
 8003846:	d00f      	beq.n	8003868 <UART_SetConfig+0x170>
 8003848:	2b10      	cmp	r3, #16
 800384a:	d802      	bhi.n	8003852 <UART_SetConfig+0x15a>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <UART_SetConfig+0x164>
 8003850:	e010      	b.n	8003874 <UART_SetConfig+0x17c>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d005      	beq.n	8003862 <UART_SetConfig+0x16a>
 8003856:	2b30      	cmp	r3, #48	; 0x30
 8003858:	d009      	beq.n	800386e <UART_SetConfig+0x176>
 800385a:	e00b      	b.n	8003874 <UART_SetConfig+0x17c>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0f1      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e0ee      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0eb      	b.n	8003a46 <UART_SetConfig+0x34e>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e0e8      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	bf00      	nop
 800387a:	e0e4      	b.n	8003a46 <UART_SetConfig+0x34e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <UART_SetConfig+0x308>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d120      	bne.n	80038c8 <UART_SetConfig+0x1d0>
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <UART_SetConfig+0x2fc>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d00f      	beq.n	80038b4 <UART_SetConfig+0x1bc>
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d802      	bhi.n	800389e <UART_SetConfig+0x1a6>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <UART_SetConfig+0x1b0>
 800389c:	e010      	b.n	80038c0 <UART_SetConfig+0x1c8>
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d005      	beq.n	80038ae <UART_SetConfig+0x1b6>
 80038a2:	2bc0      	cmp	r3, #192	; 0xc0
 80038a4:	d009      	beq.n	80038ba <UART_SetConfig+0x1c2>
 80038a6:	e00b      	b.n	80038c0 <UART_SetConfig+0x1c8>
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e0cb      	b.n	8003a46 <UART_SetConfig+0x34e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e0c8      	b.n	8003a46 <UART_SetConfig+0x34e>
 80038b4:	2304      	movs	r3, #4
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e0c5      	b.n	8003a46 <UART_SetConfig+0x34e>
 80038ba:	2308      	movs	r3, #8
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e0c2      	b.n	8003a46 <UART_SetConfig+0x34e>
 80038c0:	2310      	movs	r3, #16
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	bf00      	nop
 80038c6:	e0be      	b.n	8003a46 <UART_SetConfig+0x34e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <UART_SetConfig+0x30c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d124      	bne.n	800391c <UART_SetConfig+0x224>
 80038d2:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <UART_SetConfig+0x2fc>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e0:	d012      	beq.n	8003908 <UART_SetConfig+0x210>
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d802      	bhi.n	80038ee <UART_SetConfig+0x1f6>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <UART_SetConfig+0x204>
 80038ec:	e012      	b.n	8003914 <UART_SetConfig+0x21c>
 80038ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f2:	d006      	beq.n	8003902 <UART_SetConfig+0x20a>
 80038f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f8:	d009      	beq.n	800390e <UART_SetConfig+0x216>
 80038fa:	e00b      	b.n	8003914 <UART_SetConfig+0x21c>
 80038fc:	2300      	movs	r3, #0
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e0a1      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003902:	2302      	movs	r3, #2
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e09e      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003908:	2304      	movs	r3, #4
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e09b      	b.n	8003a46 <UART_SetConfig+0x34e>
 800390e:	2308      	movs	r3, #8
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e098      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	bf00      	nop
 800391a:	e094      	b.n	8003a46 <UART_SetConfig+0x34e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <UART_SetConfig+0x310>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d124      	bne.n	8003970 <UART_SetConfig+0x278>
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <UART_SetConfig+0x2fc>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003934:	d012      	beq.n	800395c <UART_SetConfig+0x264>
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d802      	bhi.n	8003942 <UART_SetConfig+0x24a>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <UART_SetConfig+0x258>
 8003940:	e012      	b.n	8003968 <UART_SetConfig+0x270>
 8003942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003946:	d006      	beq.n	8003956 <UART_SetConfig+0x25e>
 8003948:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800394c:	d009      	beq.n	8003962 <UART_SetConfig+0x26a>
 800394e:	e00b      	b.n	8003968 <UART_SetConfig+0x270>
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e077      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003956:	2302      	movs	r3, #2
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e074      	b.n	8003a46 <UART_SetConfig+0x34e>
 800395c:	2304      	movs	r3, #4
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e071      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003962:	2308      	movs	r3, #8
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e06e      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003968:	2310      	movs	r3, #16
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	bf00      	nop
 800396e:	e06a      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <UART_SetConfig+0x314>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d124      	bne.n	80039c4 <UART_SetConfig+0x2cc>
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <UART_SetConfig+0x2fc>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d012      	beq.n	80039b0 <UART_SetConfig+0x2b8>
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398e:	d802      	bhi.n	8003996 <UART_SetConfig+0x29e>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <UART_SetConfig+0x2ac>
 8003994:	e012      	b.n	80039bc <UART_SetConfig+0x2c4>
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d006      	beq.n	80039aa <UART_SetConfig+0x2b2>
 800399c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039a0:	d009      	beq.n	80039b6 <UART_SetConfig+0x2be>
 80039a2:	e00b      	b.n	80039bc <UART_SetConfig+0x2c4>
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e04d      	b.n	8003a46 <UART_SetConfig+0x34e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e04a      	b.n	8003a46 <UART_SetConfig+0x34e>
 80039b0:	2304      	movs	r3, #4
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e047      	b.n	8003a46 <UART_SetConfig+0x34e>
 80039b6:	2308      	movs	r3, #8
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e044      	b.n	8003a46 <UART_SetConfig+0x34e>
 80039bc:	2310      	movs	r3, #16
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	bf00      	nop
 80039c2:	e040      	b.n	8003a46 <UART_SetConfig+0x34e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <UART_SetConfig+0x318>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d139      	bne.n	8003a42 <UART_SetConfig+0x34a>
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <UART_SetConfig+0x2fc>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039dc:	d027      	beq.n	8003a2e <UART_SetConfig+0x336>
 80039de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e2:	d817      	bhi.n	8003a14 <UART_SetConfig+0x31c>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <UART_SetConfig+0x32a>
 80039e8:	e027      	b.n	8003a3a <UART_SetConfig+0x342>
 80039ea:	bf00      	nop
 80039ec:	efff69f3 	.word	0xefff69f3
 80039f0:	40011000 	.word	0x40011000
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40004400 	.word	0x40004400
 80039fc:	40004800 	.word	0x40004800
 8003a00:	40004c00 	.word	0x40004c00
 8003a04:	40005000 	.word	0x40005000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	40007800 	.word	0x40007800
 8003a10:	40007c00 	.word	0x40007c00
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a18:	d006      	beq.n	8003a28 <UART_SetConfig+0x330>
 8003a1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a1e:	d009      	beq.n	8003a34 <UART_SetConfig+0x33c>
 8003a20:	e00b      	b.n	8003a3a <UART_SetConfig+0x342>
 8003a22:	2300      	movs	r3, #0
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e00e      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e00b      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e008      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003a34:	2308      	movs	r3, #8
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	bf00      	nop
 8003a40:	e001      	b.n	8003a46 <UART_SetConfig+0x34e>
 8003a42:	2310      	movs	r3, #16
 8003a44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4e:	d17c      	bne.n	8003b4a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003a50:	7ffb      	ldrb	r3, [r7, #31]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d859      	bhi.n	8003b0a <UART_SetConfig+0x412>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x364>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003a9f 	.word	0x08003a9f
 8003a64:	08003abd 	.word	0x08003abd
 8003a68:	08003b0b 	.word	0x08003b0b
 8003a6c:	08003ad5 	.word	0x08003ad5
 8003a70:	08003b0b 	.word	0x08003b0b
 8003a74:	08003b0b 	.word	0x08003b0b
 8003a78:	08003b0b 	.word	0x08003b0b
 8003a7c:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a80:	f7fd ffd2 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8003a84:	4603      	mov	r3, r0
 8003a86:	005a      	lsls	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	61bb      	str	r3, [r7, #24]
        break;
 8003a9c:	e038      	b.n	8003b10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a9e:	f7fd ffd7 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	005a      	lsls	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	441a      	add	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	61bb      	str	r3, [r7, #24]
        break;
 8003aba:	e029      	b.n	8003b10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	085a      	lsrs	r2, r3, #1
 8003ac2:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <UART_SetConfig+0x540>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6852      	ldr	r2, [r2, #4]
 8003aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	61bb      	str	r3, [r7, #24]
        break;
 8003ad2:	e01d      	b.n	8003b10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ad4:	f7fd feea 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	005a      	lsls	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	441a      	add	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	61bb      	str	r3, [r7, #24]
        break;
 8003af0:	e00e      	b.n	8003b10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e002      	b.n	8003b10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d916      	bls.n	8003b44 <UART_SetConfig+0x44c>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d212      	bcs.n	8003b44 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	89fb      	ldrh	r3, [r7, #14]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	89fa      	ldrh	r2, [r7, #14]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e06e      	b.n	8003c22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
 8003b48:	e06b      	b.n	8003c22 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d857      	bhi.n	8003c00 <UART_SetConfig+0x508>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0x460>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b99 	.word	0x08003b99
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003c01 	.word	0x08003c01
 8003b68:	08003bcd 	.word	0x08003bcd
 8003b6c:	08003c01 	.word	0x08003c01
 8003b70:	08003c01 	.word	0x08003c01
 8003b74:	08003c01 	.word	0x08003c01
 8003b78:	08003be9 	.word	0x08003be9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b7c:	f7fd ff54 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	61bb      	str	r3, [r7, #24]
        break;
 8003b96:	e036      	b.n	8003c06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b98:	f7fd ff5a 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
        break;
 8003bb2:	e028      	b.n	8003c06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085a      	lsrs	r2, r3, #1
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <UART_SetConfig+0x544>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6852      	ldr	r2, [r2, #4]
 8003bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	61bb      	str	r3, [r7, #24]
        break;
 8003bca:	e01c      	b.n	8003c06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bcc:	f7fd fe6e 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	61bb      	str	r3, [r7, #24]
        break;
 8003be6:	e00e      	b.n	8003c06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	61bb      	str	r3, [r7, #24]
        break;
 8003bfe:	e002      	b.n	8003c06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
        break;
 8003c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b0f      	cmp	r3, #15
 8003c0a:	d908      	bls.n	8003c1e <UART_SetConfig+0x526>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d204      	bcs.n	8003c1e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	60da      	str	r2, [r3, #12]
 8003c1c:	e001      	b.n	8003c22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	01e84800 	.word	0x01e84800
 8003c3c:	00f42400 	.word	0x00f42400

08003c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	d10a      	bne.n	8003d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d92:	f7fc fc23 	bl	80005dc <HAL_GetTick>
 8003d96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d10e      	bne.n	8003dc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f814 	bl	8003de2 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e00a      	b.n	8003dda <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	e02a      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfa:	d026      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fc fbee 	bl	80005dc <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11b      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d0c5      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e88:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fc07 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fbe4 	bl	80036d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN7Encoder8GetCountEv>:

  Encoder(TIM_HandleTypeDef* timer);

  void Setup();

  int GetCount() {
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    int count = ((int)__HAL_TIM_GET_COUNTER(timer_) - 2147483648);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f24:	60fb      	str	r3, [r7, #12]
    return count;
 8003f26:	68fb      	ldr	r3, [r7, #12]
  }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, 2147483648);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
  }
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include "encoder.h"

Encoder::Encoder(TIM_HandleTypeDef* timer) {
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x30>)
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x34>)
 8003f68:	615a      	str	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x38>)
 8003f6e:	619a      	str	r2, [r3, #24]
  timer_ = timer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	00024220 	.word	0x00024220
 8003f88:	40490fd0 	.word	0x40490fd0
 8003f8c:	3f40ff97 	.word	0x3f40ff97

08003f90 <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	213c      	movs	r1, #60	; 0x3c
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe faa4 	bl	80024ec <HAL_TIM_Encoder_Start>
  this->ResetCount();
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ffc5 	bl	8003f34 <_ZN7Encoder10ResetCountEv>
  this->previous_millis = 0;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
  this->current_millis = HAL_GetTick();
 8003fb0:	f7fc fb14 	bl	80005dc <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <_ZN7Encoder9GetMetersEv>:
  this->current_millis = HAL_GetTick();
  this->ticks = this->GetCount() - 2147483648;
  this->ResetCount();
}

float Encoder::GetMeters() {
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t ticks = this->GetCount();
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffa0 	bl	8003f10 <_ZN7Encoder8GetCountEv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60fb      	str	r3, [r7, #12]
  float meters = ((float) ticks * kWheelCircumference) / kTicksPerRevolution;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fe4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff8:	edc7 7a02 	vstr	s15, [r7, #8]
  this->ResetCount();
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff99 	bl	8003f34 <_ZN7Encoder10ResetCountEv>
  return meters;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	ee07 3a90 	vmov	s15, r3
}
 8004008:	eeb0 0a67 	vmov.f32	s0, s15
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800401a:	f7fc fa8d 	bl	8000538 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800401e:	f000 f82b 	bl	8004078 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004022:	f000 fa9f 	bl	8004564 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004026:	f000 fa77 	bl	8004518 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 800402a:	f000 f8af 	bl	800418c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800402e:	f000 f90b 	bl	8004248 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8004032:	f000 f967 	bl	8004304 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8004036:	f000 f9dd 	bl	80043f4 <_ZL12MX_TIM5_Initv>
  MX_USART3_UART_Init();
 800403a:	f000 fa39 	bl	80044b0 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 800403e:	480c      	ldr	r0, [pc, #48]	; (8004070 <main+0x5c>)
 8004040:	f7fe f96c 	bl	800231c <HAL_TIM_Base_Start_IT>
  left_encoder.Setup();
 8004044:	480b      	ldr	r0, [pc, #44]	; (8004074 <main+0x60>)
 8004046:	f7ff ffa3 	bl	8003f90 <_ZN7Encoder5SetupEv>
  float meters = 0;
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    meters += left_encoder.GetMeters();
 8004050:	4808      	ldr	r0, [pc, #32]	; (8004074 <main+0x60>)
 8004052:	f7ff ffb6 	bl	8003fc2 <_ZN7Encoder9GetMetersEv>
 8004056:	eeb0 7a40 	vmov.f32	s14, s0
 800405a:	edd7 7a01 	vldr	s15, [r7, #4]
 800405e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004062:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_Delay(100);
 8004066:	2064      	movs	r0, #100	; 0x64
 8004068:	f7fc fac4 	bl	80005f4 <HAL_Delay>
    meters += left_encoder.GetMeters();
 800406c:	e7f0      	b.n	8004050 <main+0x3c>
 800406e:	bf00      	nop
 8004070:	20000068 	.word	0x20000068
 8004074:	20000268 	.word	0x20000268

08004078 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b0b8      	sub	sp, #224	; 0xe0
 800407c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800407e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004082:	2234      	movs	r2, #52	; 0x34
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fe2a 	bl	8004ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800408c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	2290      	movs	r2, #144	; 0x90
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fe1b 	bl	8004ce0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b36      	ldr	r3, [pc, #216]	; (8004184 <_Z18SystemClock_Configv+0x10c>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a35      	ldr	r2, [pc, #212]	; (8004184 <_Z18SystemClock_Configv+0x10c>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <_Z18SystemClock_Configv+0x10c>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80040c2:	4b31      	ldr	r3, [pc, #196]	; (8004188 <_Z18SystemClock_Configv+0x110>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040ca:	4a2f      	ldr	r2, [pc, #188]	; (8004188 <_Z18SystemClock_Configv+0x110>)
 80040cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <_Z18SystemClock_Configv+0x110>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040de:	2302      	movs	r3, #2
 80040e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040ea:	2310      	movs	r3, #16
 80040ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd f87c 	bl	80011f8 <HAL_RCC_OscConfig>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8004110:	f000 fafc 	bl	800470c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004114:	230f      	movs	r3, #15
 8004116:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004126:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004134:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd face 	bl	80016dc <HAL_RCC_ClockConfig>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8004150:	f000 fadc 	bl	800470c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004158:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800415a:	2300      	movs	r3, #0
 800415c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd fc88 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004178:	f000 fac8 	bl	800470c <Error_Handler>
  }
}
 800417c:	bf00      	nop
 800417e:	37e0      	adds	r7, #224	; 0xe0
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000

0800418c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	; 0x30
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004192:	f107 030c 	add.w	r3, r7, #12
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fda0 	bl	8004ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a0:	463b      	mov	r3, r7
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041ea:	2301      	movs	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	4619      	mov	r1, r3
 80041fc:	4811      	ldr	r0, [pc, #68]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 80041fe:	f7fe f8e3 	bl	80023c8 <HAL_TIM_Encoder_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8004212:	f000 fa7b 	bl	800470c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800421e:	463b      	mov	r3, r7
 8004220:	4619      	mov	r1, r3
 8004222:	4808      	ldr	r0, [pc, #32]	; (8004244 <_ZL12MX_TIM2_Initv+0xb8>)
 8004224:	f7ff f870 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8004238:	f000 fa68 	bl	800470c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800423c:	bf00      	nop
 800423e:	3730      	adds	r7, #48	; 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000028 	.word	0x20000028

08004248 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004266:	4b25      	ldr	r3, [pc, #148]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <_ZL12MX_TIM3_Initv+0xb8>)
 800426a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 800426e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004272:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004274:	4b21      	ldr	r3, [pc, #132]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 800427c:	2209      	movs	r2, #9
 800427e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004280:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800428c:	481b      	ldr	r0, [pc, #108]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 800428e:	f7fe f819 	bl	80022c4 <HAL_TIM_Base_Init>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80042a2:	f000 fa33 	bl	800470c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	4619      	mov	r1, r3
 80042b2:	4812      	ldr	r0, [pc, #72]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 80042b4:	f7fe fb88 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80042c8:	f000 fa20 	bl	800470c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <_ZL12MX_TIM3_Initv+0xb4>)
 80042da:	f7ff f815 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80042ee:	f000 fa0d 	bl	800470c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000068 	.word	0x20000068
 8004300:	40000400 	.word	0x40000400

08004304 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800430a:	f107 031c 	add.w	r3, r7, #28
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004316:	463b      	mov	r3, r7
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
 8004324:	615a      	str	r2, [r3, #20]
 8004326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004328:	4b30      	ldr	r3, [pc, #192]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 800432a:	4a31      	ldr	r2, [pc, #196]	; (80043f0 <_ZL12MX_TIM4_Initv+0xec>)
 800432c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 8004330:	2200      	movs	r2, #0
 8004332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800433a:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 800433c:	2200      	movs	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800434c:	4827      	ldr	r0, [pc, #156]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 800434e:	f7fe f80f 	bl	8002370 <HAL_TIM_PWM_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004362:	f000 f9d3 	bl	800470c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4619      	mov	r1, r3
 8004374:	481d      	ldr	r0, [pc, #116]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 8004376:	f7fe ffc7 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800438a:	f000 f9bf 	bl	800470c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800438e:	2360      	movs	r3, #96	; 0x60
 8004390:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800439e:	463b      	mov	r3, r7
 80043a0:	2208      	movs	r2, #8
 80043a2:	4619      	mov	r1, r3
 80043a4:	4811      	ldr	r0, [pc, #68]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 80043a6:	f7fe f9f7 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80043ba:	f000 f9a7 	bl	800470c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043be:	463b      	mov	r3, r7
 80043c0:	220c      	movs	r2, #12
 80043c2:	4619      	mov	r1, r3
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 80043c6:	f7fe f9e7 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80043da:	f000 f997 	bl	800470c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80043de:	4803      	ldr	r0, [pc, #12]	; (80043ec <_ZL12MX_TIM4_Initv+0xe8>)
 80043e0:	f000 fab8 	bl	8004954 <HAL_TIM_MspPostInit>

}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200000a8 	.word	0x200000a8
 80043f0:	40000800 	.word	0x40000800

080043f4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fc6c 	bl	8004ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004408:	463b      	mov	r3, r7
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004412:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <_ZL12MX_TIM5_Initv+0xb8>)
 8004416:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004426:	2200      	movs	r2, #0
 8004428:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004436:	2301      	movs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800444e:	2301      	movs	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4619      	mov	r1, r3
 8004460:	4811      	ldr	r0, [pc, #68]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004462:	f7fd ffb1 	bl	80023c8 <HAL_TIM_Encoder_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8004476:	f000 f949 	bl	800470c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004482:	463b      	mov	r3, r7
 8004484:	4619      	mov	r1, r3
 8004486:	4808      	ldr	r0, [pc, #32]	; (80044a8 <_ZL12MX_TIM5_Initv+0xb4>)
 8004488:	f7fe ff3e 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 800449c:	f000 f936 	bl	800470c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80044a0:	bf00      	nop
 80044a2:	3730      	adds	r7, #48	; 0x30
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	200000e8 	.word	0x200000e8
 80044ac:	40000c00 	.word	0x40000c00

080044b0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <_ZL19MX_USART3_UART_Initv+0x64>)
 80044b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x60>)
 80044f4:	f7fe ff82 	bl	80033fc <HAL_UART_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8004508:	f000 f900 	bl	800470c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000128 	.word	0x20000128
 8004514:	40004800 	.word	0x40004800

08004518 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <_ZL11MX_DMA_Initv+0x48>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <_ZL11MX_DMA_Initv+0x48>)
 8004524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004528:	6313      	str	r3, [r2, #48]	; 0x30
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <_ZL11MX_DMA_Initv+0x48>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	200c      	movs	r0, #12
 800453c:	f7fc f957 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004540:	200c      	movs	r0, #12
 8004542:	f7fc f970 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	200e      	movs	r0, #14
 800454c:	f7fc f94f 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004550:	200e      	movs	r0, #14
 8004552:	f7fc f968 	bl	8000826 <HAL_NVIC_EnableIRQ>

}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800

08004564 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08c      	sub	sp, #48	; 0x30
 8004568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6313      	str	r3, [r2, #48]	; 0x30
 8004586:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6313      	str	r3, [r2, #48]	; 0x30
 800459e:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045b0:	f043 0320 	orr.w	r3, r3, #32
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045c2:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4a40      	ldr	r2, [pc, #256]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045c8:	f043 0310 	orr.w	r3, r3, #16
 80045cc:	6313      	str	r3, [r2, #48]	; 0x30
 80045ce:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a3a      	ldr	r2, [pc, #232]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <_ZL12MX_GPIO_Initv+0x164>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|dir_1_Pin|sleep_2_Pin|sleep_1_Pin, GPIO_PIN_RESET);
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004610:	482e      	ldr	r0, [pc, #184]	; (80046cc <_ZL12MX_GPIO_Initv+0x168>)
 8004612:	f7fc fdd7 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800461c:	482c      	ldr	r0, [pc, #176]	; (80046d0 <_ZL12MX_GPIO_Initv+0x16c>)
 800461e:	f7fc fdd1 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004622:	2301      	movs	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004626:	2303      	movs	r3, #3
 8004628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462e:	f107 031c 	add.w	r3, r7, #28
 8004632:	4619      	mov	r1, r3
 8004634:	4827      	ldr	r0, [pc, #156]	; (80046d4 <_ZL12MX_GPIO_Initv+0x170>)
 8004636:	f7fc fc1b 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : current_1_Pin */
  GPIO_InitStruct.Pin = current_1_Pin;
 800463a:	2308      	movs	r3, #8
 800463c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463e:	2303      	movs	r3, #3
 8004640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current_1_GPIO_Port, &GPIO_InitStruct);
 8004646:	f107 031c 	add.w	r3, r7, #28
 800464a:	4619      	mov	r1, r3
 800464c:	4822      	ldr	r0, [pc, #136]	; (80046d8 <_ZL12MX_GPIO_Initv+0x174>)
 800464e:	f7fc fc0f 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault_2_Pin */
  GPIO_InitStruct.Pin = fault_2_Pin;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault_2_GPIO_Port, &GPIO_InitStruct);
 800465e:	f107 031c 	add.w	r3, r7, #28
 8004662:	4619      	mov	r1, r3
 8004664:	481c      	ldr	r0, [pc, #112]	; (80046d8 <_ZL12MX_GPIO_Initv+0x174>)
 8004666:	f7fc fc03 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 dir_1_Pin sleep_2_Pin sleep_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|dir_1_Pin|sleep_2_Pin|sleep_1_Pin;
 800466a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800466e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004670:	2301      	movs	r3, #1
 8004672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004678:	2300      	movs	r3, #0
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800467c:	f107 031c 	add.w	r3, r7, #28
 8004680:	4619      	mov	r1, r3
 8004682:	4812      	ldr	r0, [pc, #72]	; (80046cc <_ZL12MX_GPIO_Initv+0x168>)
 8004684:	f7fc fbf4 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : fault_1_Pin */
  GPIO_InitStruct.Pin = fault_1_Pin;
 8004688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800468c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800468e:	2300      	movs	r3, #0
 8004690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault_1_GPIO_Port, &GPIO_InitStruct);
 8004696:	f107 031c 	add.w	r3, r7, #28
 800469a:	4619      	mov	r1, r3
 800469c:	480f      	ldr	r0, [pc, #60]	; (80046dc <_ZL12MX_GPIO_Initv+0x178>)
 800469e:	f7fc fbe7 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a8:	2301      	movs	r3, #1
 80046aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b4:	f107 031c 	add.w	r3, r7, #28
 80046b8:	4619      	mov	r1, r3
 80046ba:	4805      	ldr	r0, [pc, #20]	; (80046d0 <_ZL12MX_GPIO_Initv+0x16c>)
 80046bc:	f7fc fbd8 	bl	8000e70 <HAL_GPIO_Init>

}
 80046c0:	bf00      	nop
 80046c2:	3730      	adds	r7, #48	; 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40021400 	.word	0x40021400
 80046d0:	40020400 	.word	0x40020400
 80046d4:	40020800 	.word	0x40020800
 80046d8:	40020000 	.word	0x40020000
 80046dc:	40021000 	.word	0x40021000

080046e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3){
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d104      	bne.n	80046fc <HAL_TIM_PeriodElapsedCallback+0x1c>
    float left_meters = left_encoder.GetMeters();
 80046f2:	4805      	ldr	r0, [pc, #20]	; (8004708 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80046f4:	f7ff fc65 	bl	8003fc2 <_ZN7Encoder9GetMetersEv>
 80046f8:	ed87 0a03 	vstr	s0, [r7, #12]
  }

}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40000400 	.word	0x40000400
 8004708:	20000268 	.word	0x20000268

0800470c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <_Z41__static_initialization_and_destruction_0ii>:
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004732:	4293      	cmp	r3, r2
 8004734:	d103      	bne.n	800473e <_Z41__static_initialization_and_destruction_0ii+0x22>
Encoder left_encoder = Encoder(&htim2);
 8004736:	4904      	ldr	r1, [pc, #16]	; (8004748 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8004738:	4804      	ldr	r0, [pc, #16]	; (800474c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800473a:	f7ff fc0b 	bl	8003f54 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000028 	.word	0x20000028
 800474c:	20000268 	.word	0x20000268

08004750 <_GLOBAL__sub_I_htim2>:
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
 8004754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004758:	2001      	movs	r0, #1
 800475a:	f7ff ffdf 	bl	800471c <_Z41__static_initialization_and_destruction_0ii>
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_MspInit+0x44>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <HAL_MspInit+0x44>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	; 0x40
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <HAL_MspInit+0x44>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_MspInit+0x44>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_MspInit+0x44>)
 8004784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004788:	6453      	str	r3, [r2, #68]	; 0x44
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_MspInit+0x44>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 031c 	add.w	r3, r7, #28
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d144      	bne.n	8004854 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
 80047d6:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e2:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a34      	ldr	r2, [pc, #208]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004812:	2320      	movs	r3, #32
 8004814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481e:	2300      	movs	r3, #0
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004826:	f107 031c 	add.w	r3, r7, #28
 800482a:	4619      	mov	r1, r3
 800482c:	4823      	ldr	r0, [pc, #140]	; (80048bc <HAL_TIM_Encoder_MspInit+0x114>)
 800482e:	f7fc fb1f 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004832:	2308      	movs	r3, #8
 8004834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004842:	2301      	movs	r3, #1
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004846:	f107 031c 	add.w	r3, r7, #28
 800484a:	4619      	mov	r1, r3
 800484c:	481c      	ldr	r0, [pc, #112]	; (80048c0 <HAL_TIM_Encoder_MspInit+0x118>)
 800484e:	f7fc fb0f 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004852:	e02c      	b.n	80048ae <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d127      	bne.n	80048ae <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800488e:	2303      	movs	r3, #3
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800489e:	2302      	movs	r3, #2
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4804      	ldr	r0, [pc, #16]	; (80048bc <HAL_TIM_Encoder_MspInit+0x114>)
 80048aa:	f7fc fae1 	bl	8000e70 <HAL_GPIO_Init>
}
 80048ae:	bf00      	nop
 80048b0:	3730      	adds	r7, #48	; 0x30
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	40000c00 	.word	0x40000c00

080048c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a0d      	ldr	r2, [pc, #52]	; (800490c <HAL_TIM_Base_MspInit+0x44>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d113      	bne.n	8004902 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <HAL_TIM_Base_MspInit+0x48>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <HAL_TIM_Base_MspInit+0x48>)
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <HAL_TIM_Base_MspInit+0x48>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	201d      	movs	r0, #29
 80048f8:	f7fb ff79 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048fc:	201d      	movs	r0, #29
 80048fe:	f7fb ff92 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40000400 	.word	0x40000400
 8004910:	40023800 	.word	0x40023800

08004914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_TIM_PWM_MspInit+0x38>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10b      	bne.n	800493e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_TIM_PWM_MspInit+0x3c>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_TIM_PWM_MspInit+0x3c>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6413      	str	r3, [r2, #64]	; 0x40
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_TIM_PWM_MspInit+0x3c>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40000800 	.word	0x40000800
 8004950:	40023800 	.word	0x40023800

08004954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_TIM_MspPostInit+0x64>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d11c      	bne.n	80049b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <HAL_TIM_MspPostInit+0x68>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <HAL_TIM_MspPostInit+0x68>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <HAL_TIM_MspPostInit+0x68>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm_2_Pin|pwm_1_Pin;
 800498e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004992:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004994:	2302      	movs	r3, #2
 8004996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049a0:	2302      	movs	r3, #2
 80049a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	4619      	mov	r1, r3
 80049aa:	4805      	ldr	r0, [pc, #20]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 80049ac:	f7fc fa60 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80049b0:	bf00      	nop
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40020c00 	.word	0x40020c00

080049c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a4b      	ldr	r2, [pc, #300]	; (8004b10 <HAL_UART_MspInit+0x14c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f040 808f 	bne.w	8004b06 <HAL_UART_MspInit+0x142>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049e8:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_UART_MspInit+0x150>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	4a49      	ldr	r2, [pc, #292]	; (8004b14 <HAL_UART_MspInit+0x150>)
 80049ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f2:	6413      	str	r3, [r2, #64]	; 0x40
 80049f4:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_UART_MspInit+0x150>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a00:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_UART_MspInit+0x150>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	4a43      	ldr	r2, [pc, #268]	; (8004b14 <HAL_UART_MspInit+0x150>)
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0c:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_UART_MspInit+0x150>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a26:	2303      	movs	r3, #3
 8004a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	4619      	mov	r1, r3
 8004a34:	4838      	ldr	r0, [pc, #224]	; (8004b18 <HAL_UART_MspInit+0x154>)
 8004a36:	f7fc fa1b 	bl	8000e70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004a3a:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a3c:	4a38      	ldr	r2, [pc, #224]	; (8004b20 <HAL_UART_MspInit+0x15c>)
 8004a3e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004a40:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a46:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a48:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5c:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a62:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a74:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a76:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004a7c:	4827      	ldr	r0, [pc, #156]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a7e:	f7fb feed 	bl	800085c <HAL_DMA_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8004a88:	f7ff fe40 	bl	800470c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a90:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <HAL_UART_MspInit+0x158>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004a98:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a9a:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_UART_MspInit+0x164>)
 8004a9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004a9e:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004aa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aa4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004aa8:	2240      	movs	r2, #64	; 0x40
 8004aaa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac0:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ada:	4812      	ldr	r0, [pc, #72]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004adc:	f7fb febe 	bl	800085c <HAL_DMA_Init>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8004ae6:	f7ff fe11 	bl	800470c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004aee:	669a      	str	r2, [r3, #104]	; 0x68
 8004af0:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	2027      	movs	r0, #39	; 0x27
 8004afc:	f7fb fe77 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b00:	2027      	movs	r0, #39	; 0x27
 8004b02:	f7fb fe90 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b06:	bf00      	nop
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40004800 	.word	0x40004800
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020c00 	.word	0x40020c00
 8004b1c:	200001a8 	.word	0x200001a8
 8004b20:	40026028 	.word	0x40026028
 8004b24:	20000208 	.word	0x20000208
 8004b28:	40026058 	.word	0x40026058

08004b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b3e:	e7fe      	b.n	8004b3e <HardFault_Handler+0x4>

08004b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b44:	e7fe      	b.n	8004b44 <MemManage_Handler+0x4>

08004b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b4a:	e7fe      	b.n	8004b4a <BusFault_Handler+0x4>

08004b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b50:	e7fe      	b.n	8004b50 <UsageFault_Handler+0x4>

08004b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b80:	f7fb fd18 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <DMA1_Stream1_IRQHandler+0x10>)
 8004b8e:	f7fb ff35 	bl	80009fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200001a8 	.word	0x200001a8

08004b9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <DMA1_Stream3_IRQHandler+0x10>)
 8004ba2:	f7fb ff2b 	bl	80009fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000208 	.word	0x20000208

08004bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bb4:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <TIM3_IRQHandler+0x10>)
 8004bb6:	f7fd fcd0 	bl	800255a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000068 	.word	0x20000068

08004bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004bc8:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <USART3_IRQHandler+0x10>)
 8004bca:	f7fe fc65 	bl	8003498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000128 	.word	0x20000128

08004bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bdc:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <SystemInit+0x5c>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <SystemInit+0x5c>)
 8004be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <SystemInit+0x60>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <SystemInit+0x60>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <SystemInit+0x60>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <SystemInit+0x60>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	490d      	ldr	r1, [pc, #52]	; (8004c38 <SystemInit+0x60>)
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <SystemInit+0x64>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <SystemInit+0x60>)
 8004c0c:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <SystemInit+0x68>)
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <SystemInit+0x60>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <SystemInit+0x60>)
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SystemInit+0x60>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <SystemInit+0x5c>)
 8004c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c28:	609a      	str	r2, [r3, #8]
#endif
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	fef6ffff 	.word	0xfef6ffff
 8004c40:	24003010 	.word	0x24003010

08004c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c4a:	e003      	b.n	8004c54 <LoopCopyDataInit>

08004c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c52:	3104      	adds	r1, #4

08004c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c54:	480b      	ldr	r0, [pc, #44]	; (8004c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c5c:	d3f6      	bcc.n	8004c4c <CopyDataInit>
  ldr  r2, =_sbss
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c60:	e002      	b.n	8004c68 <LoopFillZerobss>

08004c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c64:	f842 3b04 	str.w	r3, [r2], #4

08004c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c6c:	d3f9      	bcc.n	8004c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c6e:	f7ff ffb3 	bl	8004bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c72:	f000 f811 	bl	8004c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c76:	f7ff f9cd 	bl	8004014 <main>
  bx  lr    
 8004c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c7c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004c80:	08004d3c 	.word	0x08004d3c
  ldr  r0, =_sdata
 8004c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c88:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004c8c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004c90:	20000288 	.word	0x20000288

08004c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c94:	e7fe      	b.n	8004c94 <ADC_IRQHandler>
	...

08004c98 <__libc_init_array>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4e0d      	ldr	r6, [pc, #52]	; (8004cd0 <__libc_init_array+0x38>)
 8004c9c:	4c0d      	ldr	r4, [pc, #52]	; (8004cd4 <__libc_init_array+0x3c>)
 8004c9e:	1ba4      	subs	r4, r4, r6
 8004ca0:	10a4      	asrs	r4, r4, #2
 8004ca2:	2500      	movs	r5, #0
 8004ca4:	42a5      	cmp	r5, r4
 8004ca6:	d109      	bne.n	8004cbc <__libc_init_array+0x24>
 8004ca8:	4e0b      	ldr	r6, [pc, #44]	; (8004cd8 <__libc_init_array+0x40>)
 8004caa:	4c0c      	ldr	r4, [pc, #48]	; (8004cdc <__libc_init_array+0x44>)
 8004cac:	f000 f820 	bl	8004cf0 <_init>
 8004cb0:	1ba4      	subs	r4, r4, r6
 8004cb2:	10a4      	asrs	r4, r4, #2
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	42a5      	cmp	r5, r4
 8004cb8:	d105      	bne.n	8004cc6 <__libc_init_array+0x2e>
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cc0:	4798      	blx	r3
 8004cc2:	3501      	adds	r5, #1
 8004cc4:	e7ee      	b.n	8004ca4 <__libc_init_array+0xc>
 8004cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cca:	4798      	blx	r3
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7f2      	b.n	8004cb6 <__libc_init_array+0x1e>
 8004cd0:	08004d30 	.word	0x08004d30
 8004cd4:	08004d30 	.word	0x08004d30
 8004cd8:	08004d30 	.word	0x08004d30
 8004cdc:	08004d38 	.word	0x08004d38

08004ce0 <memset>:
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d100      	bne.n	8004cea <memset+0xa>
 8004ce8:	4770      	bx	lr
 8004cea:	f803 1b01 	strb.w	r1, [r3], #1
 8004cee:	e7f9      	b.n	8004ce4 <memset+0x4>

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
