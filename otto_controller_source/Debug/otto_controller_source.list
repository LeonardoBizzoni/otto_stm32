
otto_controller_source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bdc  08004bdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be4  08004be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08004bf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004bf8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d083  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c57  00000000  00000000  0002d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc8  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274ae  00000000  00000000  000305c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096ae  00000000  00000000  00057a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1595  00000000  00000000  0006111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001526b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  0015272c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004ba4 	.word	0x08004ba4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004ba4 	.word	0x08004ba4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f929 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f004 f864 	bl	8004614 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f943 	bl	80007fe <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000268 	.word	0x20000268

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000268 	.word	0x20000268

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff feda 	bl	80005dc <HAL_GetTick>
 8000828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e099      	b.n	8000968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2202      	movs	r2, #2
 8000840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0201 	bic.w	r2, r2, #1
 8000852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000854:	e00f      	b.n	8000876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000856:	f7ff fec1 	bl	80005dc <HAL_GetTick>
 800085a:	4602      	mov	r2, r0
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b05      	cmp	r3, #5
 8000862:	d908      	bls.n	8000876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2220      	movs	r2, #32
 8000868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2203      	movs	r2, #3
 800086e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e078      	b.n	8000968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1e8      	bne.n	8000856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_DMA_Init+0x158>)
 8000890:	4013      	ands	r3, r2
 8000892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a1b      	ldr	r3, [r3, #32]
 80008c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d107      	bne.n	80008e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4313      	orrs	r3, r2
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	4313      	orrs	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	f023 0307 	bic.w	r3, r3, #7
 80008f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4313      	orrs	r3, r2
 8000900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	2b04      	cmp	r3, #4
 8000908:	d117      	bne.n	800093a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	4313      	orrs	r3, r2
 8000912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00e      	beq.n	800093a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 fa0b 	bl	8000d38 <DMA_CheckFifoParam>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2240      	movs	r2, #64	; 0x40
 800092c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000936:	2301      	movs	r3, #1
 8000938:	e016      	b.n	8000968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f9c2 	bl	8000ccc <DMA_CalcBaseAndBitshift>
 8000948:	4603      	mov	r3, r0
 800094a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000950:	223f      	movs	r2, #63	; 0x3f
 8000952:	409a      	lsls	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e010803f 	.word	0xe010803f

08000974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b02      	cmp	r3, #2
 8000986:	d004      	beq.n	8000992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00c      	b.n	80009ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2205      	movs	r2, #5
 8000996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80009c4:	4b92      	ldr	r3, [pc, #584]	; (8000c10 <HAL_DMA_IRQHandler+0x258>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_DMA_IRQHandler+0x25c>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0a9b      	lsrs	r3, r3, #10
 80009d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e2:	2208      	movs	r2, #8
 80009e4:	409a      	lsls	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4013      	ands	r3, r2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d01a      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 0204 	bic.w	r2, r2, #4
 8000a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a10:	2208      	movs	r2, #8
 8000a12:	409a      	lsls	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1c:	f043 0201 	orr.w	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a28:	2201      	movs	r2, #1
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d012      	beq.n	8000a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a46:	2201      	movs	r2, #1
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a52:	f043 0202 	orr.w	r2, r3, #2
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5e:	2204      	movs	r2, #4
 8000a60:	409a      	lsls	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d012      	beq.n	8000a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a88:	f043 0204 	orr.w	r2, r3, #4
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a94:	2210      	movs	r2, #16
 8000a96:	409a      	lsls	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d043      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d03c      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d018      	beq.n	8000afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d108      	bne.n	8000ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d024      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4798      	blx	r3
 8000ae6:	e01f      	b.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01b      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	4798      	blx	r3
 8000af8:	e016      	b.n	8000b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0208 	bic.w	r2, r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4013      	ands	r3, r2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f000 808e 	beq.w	8000c56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8086 	beq.w	8000c56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4e:	2220      	movs	r2, #32
 8000b50:	409a      	lsls	r2, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b05      	cmp	r3, #5
 8000b60:	d136      	bne.n	8000bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0216 	bic.w	r2, r2, #22
 8000b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_DMA_IRQHandler+0x1da>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba6:	223f      	movs	r2, #63	; 0x3f
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d07d      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	4798      	blx	r3
        }
        return;
 8000bce:	e078      	b.n	8000cc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01c      	beq.n	8000c18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d108      	bne.n	8000bfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d030      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
 8000bfc:	e02b      	b.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d027      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
 8000c0e:	e022      	b.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
 8000c10:	20000008 	.word	0x20000008
 8000c14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10f      	bne.n	8000c46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0210 	bic.w	r2, r2, #16
 8000c34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d032      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d022      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d307      	bcc.n	8000c9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f2      	bne.n	8000c82 <HAL_DMA_IRQHandler+0x2ca>
 8000c9c:	e000      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000c9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	4798      	blx	r3
 8000cc0:	e000      	b.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cc2:	bf00      	nop
    }
  }
}
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop

08000ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3b10      	subs	r3, #16
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <DMA_CalcBaseAndBitshift+0x60>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <DMA_CalcBaseAndBitshift+0x64>)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d908      	bls.n	8000d0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <DMA_CalcBaseAndBitshift+0x68>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	1d1a      	adds	r2, r3, #4
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	659a      	str	r2, [r3, #88]	; 0x58
 8000d0a:	e006      	b.n	8000d1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <DMA_CalcBaseAndBitshift+0x68>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	aaaaaaab 	.word	0xaaaaaaab
 8000d30:	08004bbc 	.word	0x08004bbc
 8000d34:	fffffc00 	.word	0xfffffc00

08000d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11f      	bne.n	8000d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d855      	bhi.n	8000e04 <DMA_CheckFifoParam+0xcc>
 8000d58:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <DMA_CheckFifoParam+0x28>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000d83 	.word	0x08000d83
 8000d68:	08000d71 	.word	0x08000d71
 8000d6c:	08000e05 	.word	0x08000e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d045      	beq.n	8000e08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d80:	e042      	b.n	8000e08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d8a:	d13f      	bne.n	8000e0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d90:	e03c      	b.n	8000e0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9a:	d121      	bne.n	8000de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d836      	bhi.n	8000e10 <DMA_CheckFifoParam+0xd8>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <DMA_CheckFifoParam+0x70>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dbf 	.word	0x08000dbf
 8000db0:	08000db9 	.word	0x08000db9
 8000db4:	08000dd1 	.word	0x08000dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
      break;
 8000dbc:	e02f      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d024      	beq.n	8000e14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dce:	e021      	b.n	8000e14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dd8:	d11e      	bne.n	8000e18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000dde:	e01b      	b.n	8000e18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d902      	bls.n	8000dec <DMA_CheckFifoParam+0xb4>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d003      	beq.n	8000df2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000dea:	e018      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
      break;
 8000df0:	e015      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00e      	beq.n	8000e1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
      break;
 8000e02:	e00b      	b.n	8000e1c <DMA_CheckFifoParam+0xe4>
      break;
 8000e04:	bf00      	nop
 8000e06:	e00a      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;
 8000e08:	bf00      	nop
 8000e0a:	e008      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;
 8000e0c:	bf00      	nop
 8000e0e:	e006      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;
 8000e10:	bf00      	nop
 8000e12:	e004      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;
 8000e14:	bf00      	nop
 8000e16:	e002      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;   
 8000e18:	bf00      	nop
 8000e1a:	e000      	b.n	8000e1e <DMA_CheckFifoParam+0xe6>
      break;
 8000e1c:	bf00      	nop
    }
  } 
  
  return status; 
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e175      	b.n	8001138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8164 	bne.w	8001132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x4e>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d123      	bne.n	8000ec2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0203 	and.w	r2, r3, #3
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d00b      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0a:	2b11      	cmp	r3, #17
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80be 	beq.w	8001132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a64      	ldr	r2, [pc, #400]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fce:	4a60      	ldr	r2, [pc, #384]	; (8001150 <HAL_GPIO_Init+0x324>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a57      	ldr	r2, [pc, #348]	; (8001154 <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <HAL_GPIO_Init+0x23e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a56      	ldr	r2, [pc, #344]	; (8001158 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d031      	beq.n	8001066 <HAL_GPIO_Init+0x23a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a55      	ldr	r2, [pc, #340]	; (800115c <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x236>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a54      	ldr	r2, [pc, #336]	; (8001160 <HAL_GPIO_Init+0x334>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x232>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a53      	ldr	r2, [pc, #332]	; (8001164 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x22e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x22a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a51      	ldr	r2, [pc, #324]	; (800116c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x226>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a50      	ldr	r2, [pc, #320]	; (8001170 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x222>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x21e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x21a>
 8001042:	2309      	movs	r3, #9
 8001044:	e012      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001046:	230a      	movs	r3, #10
 8001048:	e010      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104a:	2308      	movs	r3, #8
 800104c:	e00e      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104e:	2307      	movs	r3, #7
 8001050:	e00c      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001052:	2306      	movs	r3, #6
 8001054:	e00a      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001056:	2305      	movs	r3, #5
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105a:	2304      	movs	r3, #4
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x240>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800107c:	4934      	ldr	r1, [pc, #208]	; (8001150 <HAL_GPIO_Init+0x324>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_GPIO_Init+0x350>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <HAL_GPIO_Init+0x350>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <HAL_GPIO_Init+0x350>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d8:	4a28      	ldr	r2, [pc, #160]	; (800117c <HAL_GPIO_Init+0x350>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_GPIO_Init+0x350>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_GPIO_Init+0x350>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_GPIO_Init+0x350>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_GPIO_Init+0x350>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f ae86 	bls.w	8000e4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	; 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40021c00 	.word	0x40021c00
 8001174:	40022000 	.word	0x40022000
 8001178:	40022400 	.word	0x40022400
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	401a      	ands	r2, r3
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d104      	bne.n	80011d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e25e      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001218:	4b93      	ldr	r3, [pc, #588]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x62>
 8001224:	4b90      	ldr	r3, [pc, #576]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b8d      	ldr	r3, [pc, #564]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06c      	beq.n	8001318 <HAL_RCC_OscConfig+0x130>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d168      	bne.n	8001318 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e238      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x7a>
 8001254:	4b84      	ldr	r3, [pc, #528]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a83      	ldr	r2, [pc, #524]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02e      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x9c>
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7b      	ldr	r2, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0xc0>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6b      	ldr	r2, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f988 	bl	80005dc <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff f984 	bl	80005dc <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1ec      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe8>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff f974 	bl	80005dc <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff f970 	bl	80005dc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1d8      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x110>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d069      	beq.n	80013fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001326:	4b50      	ldr	r3, [pc, #320]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x190>
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x17a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1ac      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	493d      	ldr	r1, [pc, #244]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e040      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a38      	ldr	r2, [pc, #224]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff f926 	bl	80005dc <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff f922 	bl	80005dc <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e18a      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4929      	ldr	r1, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff f902 	bl	80005dc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff f8fe 	bl	80005dc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e166      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d038      	beq.n	8001478 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff f8df 	bl	80005dc <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff f8db 	bl	80005dc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e143      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x23a>
 8001440:	e01a      	b.n	8001478 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff f8c5 	bl	80005dc <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff f8c1 	bl	80005dc <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d903      	bls.n	800146c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e129      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
 8001468:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a4 	beq.w	80015ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b8f      	ldr	r3, [pc, #572]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b8c      	ldr	r3, [pc, #560]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a8b      	ldr	r2, [pc, #556]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b89      	ldr	r3, [pc, #548]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ae:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <HAL_RCC_OscConfig+0x4e0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ba:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x4e0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a82      	ldr	r2, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x4e0>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff f889 	bl	80005dc <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff f885 	bl	80005dc <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0ed      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e0:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <HAL_RCC_OscConfig+0x4e0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x31a>
 80014f4:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a72      	ldr	r2, [pc, #456]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	e02d      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x33c>
 800150a:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a6d      	ldr	r2, [pc, #436]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x35e>
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a64      	ldr	r2, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a61      	ldr	r2, [pc, #388]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff f839 	bl	80005dc <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff f835 	bl	80005dc <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e09b      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x386>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff f823 	bl	80005dc <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff f81f 	bl	80005dc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e085      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d071      	beq.n	80016ba <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d069      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d14b      	bne.n	8001682 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a35      	ldr	r2, [pc, #212]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80015f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7fe fff1 	bl	80005dc <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7fe ffed 	bl	80005dc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e055      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	019b      	lsls	r3, r3, #6
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	061b      	lsls	r3, r3, #24
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	071b      	lsls	r3, r3, #28
 8001648:	491e      	ldr	r1, [pc, #120]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7fe ffbf 	bl	80005dc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7fe ffbb 	bl	80005dc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e023      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x47a>
 8001680:	e01b      	b.n	80016ba <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 8001688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7fe ffa5 	bl	80005dc <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7fe ffa1 	bl	80005dc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e009      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x4ae>
 80016b4:	e001      	b.n	80016ba <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0ce      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b69      	ldr	r3, [pc, #420]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d910      	bls.n	8001714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 020f 	bic.w	r2, r3, #15
 80016fa:	4964      	ldr	r1, [pc, #400]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b62      	ldr	r3, [pc, #392]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b6      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b52      	ldr	r3, [pc, #328]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a51      	ldr	r2, [pc, #324]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800174e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494c      	ldr	r1, [pc, #304]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d040      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07d      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b40      	ldr	r3, [pc, #256]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e071      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e069      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4935      	ldr	r1, [pc, #212]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c0:	f7fe ff0c 	bl	80005dc <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe ff08 	bl	80005dc <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e051      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 020f 	bic.w	r2, r3, #15
 8001806:	4921      	ldr	r1, [pc, #132]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e030      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4915      	ldr	r1, [pc, #84]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490d      	ldr	r1, [pc, #52]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f81d 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001862:	4601      	mov	r1, r0
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	fa21 f303 	lsr.w	r3, r1, r3
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_RCC_ClockConfig+0x1cc>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f7fe fe6a 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	40023800 	.word	0x40023800
 8001894:	08004bc4 	.word	0x08004bc4
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b2:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d007      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x32>
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d008      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x38>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 808d 	bne.w	80019e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018ca:	60bb      	str	r3, [r7, #8]
       break;
 80018cc:	e08c      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018d0:	60bb      	str	r3, [r7, #8]
      break;
 80018d2:	e089      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	f04f 0400 	mov.w	r4, #0
 80018f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	ea03 0501 	and.w	r5, r3, r1
 8001900:	ea04 0602 	and.w	r6, r4, r2
 8001904:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001906:	fb02 f106 	mul.w	r1, r2, r6
 800190a:	2200      	movs	r2, #0
 800190c:	fb02 f205 	mul.w	r2, r2, r5
 8001910:	440a      	add	r2, r1
 8001912:	493a      	ldr	r1, [pc, #232]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001914:	fba5 0101 	umull	r0, r1, r5, r1
 8001918:	1853      	adds	r3, r2, r1
 800191a:	4619      	mov	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	f7fe fc87 	bl	8000238 <__aeabi_uldivmod>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e049      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	f04f 0400 	mov.w	r4, #0
 800193c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	ea03 0501 	and.w	r5, r3, r1
 8001948:	ea04 0602 	and.w	r6, r4, r2
 800194c:	4629      	mov	r1, r5
 800194e:	4632      	mov	r2, r6
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f04f 0400 	mov.w	r4, #0
 8001958:	0154      	lsls	r4, r2, #5
 800195a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800195e:	014b      	lsls	r3, r1, #5
 8001960:	4619      	mov	r1, r3
 8001962:	4622      	mov	r2, r4
 8001964:	1b49      	subs	r1, r1, r5
 8001966:	eb62 0206 	sbc.w	r2, r2, r6
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f04f 0400 	mov.w	r4, #0
 8001972:	0194      	lsls	r4, r2, #6
 8001974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001978:	018b      	lsls	r3, r1, #6
 800197a:	1a5b      	subs	r3, r3, r1
 800197c:	eb64 0402 	sbc.w	r4, r4, r2
 8001980:	f04f 0100 	mov.w	r1, #0
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	00e2      	lsls	r2, r4, #3
 800198a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800198e:	00d9      	lsls	r1, r3, #3
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	195b      	adds	r3, r3, r5
 8001996:	eb44 0406 	adc.w	r4, r4, r6
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	02a2      	lsls	r2, r4, #10
 80019a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019a8:	0299      	lsls	r1, r3, #10
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	4621      	mov	r1, r4
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	f7fe fc3c 	bl	8000238 <__aeabi_uldivmod>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	3301      	adds	r3, #1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	60bb      	str	r3, [r7, #8]
      break;
 80019e0:	e002      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019e4:	60bb      	str	r3, [r7, #8]
      break;
 80019e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e8:	68bb      	ldr	r3, [r7, #8]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	017d7840 	.word	0x017d7840

08001a00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a20:	4601      	mov	r1, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08004bd4 	.word	0x08004bd4

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffdc 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0b5b      	lsrs	r3, r3, #13
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08004bd4 	.word	0x08004bd4

08001a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d012      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a90:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a68      	ldr	r2, [pc, #416]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a9a:	6093      	str	r3, [r2, #8]
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	4964      	ldr	r1, [pc, #400]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d017      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	4959      	ldr	r1, [pc, #356]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d017      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	494a      	ldr	r1, [pc, #296]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 808b 	beq.w	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b70:	f7fe fd34 	bl	80005dc <HAL_GetTick>
 8001b74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7fe fd30 	bl	80005dc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e38d      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d035      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d02e      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb4:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d114      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7fe fcf8 	bl	80005dc <HAL_GetTick>
 8001bec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fcf4 	bl	80005dc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e34f      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0ee      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c2e:	400b      	ands	r3, r1
 8001c30:	4901      	ldr	r1, [pc, #4]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	0ffffcff 	.word	0x0ffffcff
 8001c44:	4bb3      	ldr	r3, [pc, #716]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4ab2      	ldr	r2, [pc, #712]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c4e:	6093      	str	r3, [r2, #8]
 8001c50:	4bb0      	ldr	r3, [pc, #704]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	49ad      	ldr	r1, [pc, #692]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d010      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c6e:	4ba9      	ldr	r3, [pc, #676]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	4aa7      	ldr	r2, [pc, #668]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c7e:	4ba5      	ldr	r3, [pc, #660]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	49a2      	ldr	r1, [pc, #648]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c9c:	4b9d      	ldr	r3, [pc, #628]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001caa:	499a      	ldr	r1, [pc, #616]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cbe:	4b95      	ldr	r3, [pc, #596]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ccc:	4991      	ldr	r1, [pc, #580]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cee:	4989      	ldr	r1, [pc, #548]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d02:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4980      	ldr	r1, [pc, #512]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d24:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4978      	ldr	r1, [pc, #480]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	f023 020c 	bic.w	r2, r3, #12
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	496f      	ldr	r1, [pc, #444]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4967      	ldr	r1, [pc, #412]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d98:	495e      	ldr	r1, [pc, #376]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	4956      	ldr	r1, [pc, #344]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001df0:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	4945      	ldr	r1, [pc, #276]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	493c      	ldr	r1, [pc, #240]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d011      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e64:	492b      	ldr	r1, [pc, #172]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	491b      	ldr	r1, [pc, #108]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec8:	4912      	ldr	r1, [pc, #72]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eec:	4909      	ldr	r1, [pc, #36]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00f      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	e002      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	4985      	ldr	r1, [pc, #532]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00b      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f2c:	4b80      	ldr	r3, [pc, #512]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3c:	497c      	ldr	r1, [pc, #496]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f52:	f040 80d6 	bne.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f56:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a75      	ldr	r2, [pc, #468]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f62:	f7fe fb3b 	bl	80005dc <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f6a:	f7fe fb37 	bl	80005dc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e194      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f7c:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d021      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11d      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f9c:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001faa:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb0:	0e1b      	lsrs	r3, r3, #24
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	019a      	lsls	r2, r3, #6
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	071b      	lsls	r3, r3, #28
 8001fd0:	4957      	ldr	r1, [pc, #348]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02e      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002002:	d129      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002018:	0f1b      	lsrs	r3, r3, #28
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	019a      	lsls	r2, r3, #6
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	431a      	orrs	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	071b      	lsls	r3, r3, #28
 8002038:	493d      	ldr	r1, [pc, #244]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002046:	f023 021f 	bic.w	r2, r3, #31
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01d      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206a:	0e1b      	lsrs	r3, r3, #24
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	0f1b      	lsrs	r3, r3, #28
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	019a      	lsls	r2, r3, #6
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	431a      	orrs	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	071b      	lsls	r3, r3, #28
 8002098:	4925      	ldr	r1, [pc, #148]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	019a      	lsls	r2, r3, #6
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	071b      	lsls	r3, r3, #28
 80020c8:	4919      	ldr	r1, [pc, #100]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe fa7e 	bl	80005dc <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e4:	f7fe fa7a 	bl	80005dc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0d7      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 80cd 	bne.w	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002116:	f7fe fa61 	bl	80005dc <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800211e:	f7fe fa5d 	bl	80005dc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d903      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0ba      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002130:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002140:	d0ed      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800215e:	2b00      	cmp	r3, #0
 8002160:	d02e      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12a      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	0f1b      	lsrs	r3, r3, #28
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	019a      	lsls	r2, r3, #6
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	061b      	lsls	r3, r3, #24
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	4944      	ldr	r1, [pc, #272]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021a6:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	493d      	ldr	r1, [pc, #244]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d4:	d11d      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	0e1b      	lsrs	r3, r3, #24
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	0f1b      	lsrs	r3, r3, #28
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	019a      	lsls	r2, r3, #6
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	431a      	orrs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	071b      	lsls	r3, r3, #28
 800220a:	4929      	ldr	r1, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	0e1b      	lsrs	r3, r3, #24
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	019a      	lsls	r2, r3, #6
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	431a      	orrs	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	4917      	ldr	r1, [pc, #92]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800225c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4911      	ldr	r1, [pc, #68]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227c:	f7fe f9ae 	bl	80005dc <HAL_GetTick>
 8002280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002284:	f7fe f9aa 	bl	80005dc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e007      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800229e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a2:	d1ef      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01d      	b.n	8002302 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f002 fa4e 	bl	800477c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 fc42 	bl	8002b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_TIM_Base_Start_IT+0x50>)
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b06      	cmp	r3, #6
 8002334:	d00b      	beq.n	800234e <HAL_TIM_Base_Start_IT+0x42>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d007      	beq.n	800234e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	00010007 	.word	0x00010007

08002360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e01d      	b.n	80023ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f002 fa1e 	bl	80047c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f000 fbec 	bl	8002b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e07b      	b.n	80024c4 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f002 f93b 	bl	800465c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_TIM_Encoder_Init+0x114>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 fbb7 	bl	8002b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_TIM_Encoder_Init+0x118>)
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	4313      	orrs	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_TIM_Encoder_Init+0x11c>)
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_TIM_Encoder_Init+0x120>)
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4313      	orrs	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	031b      	lsls	r3, r3, #12
 8002478:	4313      	orrs	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800248e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4313      	orrs	r3, r2
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	fffebff8 	.word	0xfffebff8
 80024d0:	fffffcfc 	.word	0xfffffcfc
 80024d4:	fffff3f3 	.word	0xfffff3f3
 80024d8:	ffff0f0f 	.word	0xffff0f0f

080024dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_TIM_Encoder_Start+0x16>
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d008      	beq.n	8002502 <HAL_TIM_Encoder_Start+0x26>
 80024f0:	e00f      	b.n	8002512 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fed6 	bl	80032ac <TIM_CCxChannelCmd>
      break;
 8002500:	e016      	b.n	8002530 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	2104      	movs	r1, #4
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fece 	bl	80032ac <TIM_CCxChannelCmd>
      break;
 8002510:	e00e      	b.n	8002530 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fec6 	bl	80032ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	2104      	movs	r1, #4
 8002528:	4618      	mov	r0, r3
 800252a:	f000 febf 	bl	80032ac <TIM_CCxChannelCmd>
      break;
 800252e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d122      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d11b      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f06f 0202 	mvn.w	r2, #2
 8002576:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fad7 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 8002592:	e005      	b.n	80025a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fac9 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fada 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d122      	bne.n	80025fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d11b      	bne.n	80025fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0204 	mvn.w	r2, #4
 80025ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 faad 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 80025e6:	e005      	b.n	80025f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa9f 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fab0 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b08      	cmp	r3, #8
 8002606:	d122      	bne.n	800264e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d11b      	bne.n	800264e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f06f 0208 	mvn.w	r2, #8
 800261e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa83 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800263a:	e005      	b.n	8002648 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fa75 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa86 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d122      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b10      	cmp	r3, #16
 8002668:	d11b      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0210 	mvn.w	r2, #16
 8002672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2208      	movs	r2, #8
 8002678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa59 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800268e:	e005      	b.n	800269c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fa4b 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa5c 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10e      	bne.n	80026ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0201 	mvn.w	r2, #1
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f001 ff85 	bl	80045d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d10e      	bne.n	80026fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d107      	bne.n	80026fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fe65 	bl	80033c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fe58 	bl	80033d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa0a 	bl	8002b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b20      	cmp	r3, #32
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0220 	mvn.w	r2, #32
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fe18 	bl	80033b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800279e:	2302      	movs	r3, #2
 80027a0:	e105      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b14      	cmp	r3, #20
 80027b6:	f200 80f0 	bhi.w	800299a <HAL_TIM_PWM_ConfigChannel+0x212>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	08002815 	.word	0x08002815
 80027c4:	0800299b 	.word	0x0800299b
 80027c8:	0800299b 	.word	0x0800299b
 80027cc:	0800299b 	.word	0x0800299b
 80027d0:	08002855 	.word	0x08002855
 80027d4:	0800299b 	.word	0x0800299b
 80027d8:	0800299b 	.word	0x0800299b
 80027dc:	0800299b 	.word	0x0800299b
 80027e0:	08002897 	.word	0x08002897
 80027e4:	0800299b 	.word	0x0800299b
 80027e8:	0800299b 	.word	0x0800299b
 80027ec:	0800299b 	.word	0x0800299b
 80027f0:	080028d7 	.word	0x080028d7
 80027f4:	0800299b 	.word	0x0800299b
 80027f8:	0800299b 	.word	0x0800299b
 80027fc:	0800299b 	.word	0x0800299b
 8002800:	08002919 	.word	0x08002919
 8002804:	0800299b 	.word	0x0800299b
 8002808:	0800299b 	.word	0x0800299b
 800280c:	0800299b 	.word	0x0800299b
 8002810:	08002959 	.word	0x08002959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fa4e 	bl	8002cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	619a      	str	r2, [r3, #24]
      break;
 8002852:	e0a3      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 faa0 	bl	8002da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	021a      	lsls	r2, r3, #8
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	619a      	str	r2, [r3, #24]
      break;
 8002894:	e082      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 faf7 	bl	8002e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0208 	orr.w	r2, r2, #8
 80028b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0204 	bic.w	r2, r2, #4
 80028c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69d9      	ldr	r1, [r3, #28]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
      break;
 80028d4:	e062      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fb4d 	bl	8002f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	61da      	str	r2, [r3, #28]
      break;
 8002916:	e041      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fb84 	bl	800302c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0208 	orr.w	r2, r2, #8
 8002932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002956:	e021      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fbb6 	bl	80030d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002998:	e000      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800299a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop

080029b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_ConfigClockSource+0x18>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0a6      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x166>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <HAL_TIM_ConfigClockSource+0x170>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d067      	beq.n	8002ad8 <HAL_TIM_ConfigClockSource+0x120>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d80b      	bhi.n	8002a24 <HAL_TIM_ConfigClockSource+0x6c>
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d073      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0x140>
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d802      	bhi.n	8002a1a <HAL_TIM_ConfigClockSource+0x62>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d06f      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a18:	e078      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d06c      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0x140>
 8002a1e:	2b30      	cmp	r3, #48	; 0x30
 8002a20:	d06a      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a22:	e073      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a24:	2b70      	cmp	r3, #112	; 0x70
 8002a26:	d00d      	beq.n	8002a44 <HAL_TIM_ConfigClockSource+0x8c>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d804      	bhi.n	8002a36 <HAL_TIM_ConfigClockSource+0x7e>
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d033      	beq.n	8002a98 <HAL_TIM_ConfigClockSource+0xe0>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d041      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a34:	e06a      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3a:	d066      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x152>
 8002a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a40:	d017      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a42:	e063      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f000 fc0a 	bl	800326c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]
      break;
 8002a70:	e04c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f000 fbf3 	bl	800326c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a94:	609a      	str	r2, [r3, #8]
      break;
 8002a96:	e039      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f000 fb67 	bl	8003178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2150      	movs	r1, #80	; 0x50
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fbc0 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8002ab6:	e029      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f000 fb86 	bl	80031d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2160      	movs	r1, #96	; 0x60
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fbb0 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8002ad6:	e019      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f000 fb47 	bl	8003178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fba0 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8002af6:	e009      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 fb97 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e000      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	fffeff88 	.word	0xfffeff88

08002b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d00f      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3d      	ldr	r2, [pc, #244]	; (8002c94 <TIM_Base_SetConfig+0x118>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <TIM_Base_SetConfig+0x11c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <TIM_Base_SetConfig+0x120>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d108      	bne.n	8002bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d027      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <TIM_Base_SetConfig+0x118>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d023      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <TIM_Base_SetConfig+0x11c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <TIM_Base_SetConfig+0x120>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d017      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <TIM_Base_SetConfig+0x128>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <TIM_Base_SetConfig+0x12c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00f      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <TIM_Base_SetConfig+0x130>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <TIM_Base_SetConfig+0x134>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <TIM_Base_SetConfig+0x138>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <TIM_Base_SetConfig+0x13c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0xf8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	615a      	str	r2, [r3, #20]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40010400 	.word	0x40010400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40014400 	.word	0x40014400
 8002cac:	40014800 	.word	0x40014800
 8002cb0:	40001800 	.word	0x40001800
 8002cb4:	40001c00 	.word	0x40001c00
 8002cb8:	40002000 	.word	0x40002000

08002cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f023 0201 	bic.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <TIM_OC1_SetConfig+0xd8>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 0302 	bic.w	r3, r3, #2
 8002d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <TIM_OC1_SetConfig+0xdc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_OC1_SetConfig+0x64>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <TIM_OC1_SetConfig+0xe0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10c      	bne.n	8002d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0308 	bic.w	r3, r3, #8
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <TIM_OC1_SetConfig+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_OC1_SetConfig+0x8e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <TIM_OC1_SetConfig+0xe0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d111      	bne.n	8002d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	fffeff8f 	.word	0xfffeff8f
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40010400 	.word	0x40010400

08002da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f023 0210 	bic.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <TIM_OC2_SetConfig+0xe4>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0320 	bic.w	r3, r3, #32
 8002dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <TIM_OC2_SetConfig+0xe8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_OC2_SetConfig+0x68>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <TIM_OC2_SetConfig+0xec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10d      	bne.n	8002e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_OC2_SetConfig+0xe8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_OC2_SetConfig+0x94>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_OC2_SetConfig+0xec>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d113      	bne.n	8002e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	feff8fff 	.word	0xfeff8fff
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010400 	.word	0x40010400

08002e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <TIM_OC3_SetConfig+0xe0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <TIM_OC3_SetConfig+0xe4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_OC3_SetConfig+0x66>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <TIM_OC3_SetConfig+0xe8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10d      	bne.n	8002f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <TIM_OC3_SetConfig+0xe4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_OC3_SetConfig+0x92>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <TIM_OC3_SetConfig+0xe8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d113      	bne.n	8002f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	fffeff8f 	.word	0xfffeff8f
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010400 	.word	0x40010400

08002f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <TIM_OC4_SetConfig+0xa4>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a13      	ldr	r2, [pc, #76]	; (8003024 <TIM_OC4_SetConfig+0xa8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x68>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <TIM_OC4_SetConfig+0xac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d109      	bne.n	8002ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	feff8fff 	.word	0xfeff8fff
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400

0800302c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <TIM_OC5_SetConfig+0x98>)
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800306c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <TIM_OC5_SetConfig+0x9c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_OC5_SetConfig+0x5e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a11      	ldr	r2, [pc, #68]	; (80030cc <TIM_OC5_SetConfig+0xa0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d109      	bne.n	800309e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	621a      	str	r2, [r3, #32]
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	fffeff8f 	.word	0xfffeff8f
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40010400 	.word	0x40010400

080030d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <TIM_OC6_SetConfig+0x9c>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	051b      	lsls	r3, r3, #20
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <TIM_OC6_SetConfig+0xa0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC6_SetConfig+0x60>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <TIM_OC6_SetConfig+0xa4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d109      	bne.n	8003144 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	029b      	lsls	r3, r3, #10
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	feff8fff 	.word	0xfeff8fff
 8003170:	40010000 	.word	0x40010000
 8003174:	40010400 	.word	0x40010400

08003178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 030a 	bic.w	r3, r3, #10
 80031b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b087      	sub	sp, #28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0210 	bic.w	r2, r3, #16
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	031b      	lsls	r3, r3, #12
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	f043 0307 	orr.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	431a      	orrs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2201      	movs	r2, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800330c:	2302      	movs	r3, #2
 800330e:	e045      	b.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800334a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e040      	b.n	8003480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 fa32 	bl	8004878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f95c 	bl	80036e8 <UART_SetConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e022      	b.n	8003480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fbf4 	bl	8003c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003466:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fc7b 	bl	8003d74 <UART_CheckIdleState>
 800347e:	4603      	mov	r3, r0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d113      	bne.n	80034de <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80eb 	beq.w	80036aa <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      }
      return;
 80034dc:	e0e5      	b.n	80036aa <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80c0 	beq.w	8003666 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80b5 	beq.w	8003666 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <HAL_UART_IRQHandler+0x9c>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00e      	beq.n	800354c <HAL_UART_IRQHandler+0xc4>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2202      	movs	r2, #2
 800353e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_UART_IRQHandler+0xec>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2204      	movs	r2, #4
 8003566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2208      	movs	r2, #8
 8003598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359e:	f043 0208 	orr.w	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d07f      	beq.n	80036ae <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00c      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d004      	beq.n	80035f0 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d031      	beq.n	8003654 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fc36 	bl	8003e62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d123      	bne.n	800364c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003612:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_UART_IRQHandler+0x234>)
 8003622:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd f9a3 	bl	8000974 <HAL_DMA_Abort_IT>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d016      	beq.n	8003662 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800363e:	4610      	mov	r0, r2
 8003640:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	e00e      	b.n	8003662 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f845 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364a:	e00a      	b.n	8003662 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f841 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	e006      	b.n	8003662 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f83d 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003660:	e025      	b.n	80036ae <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003662:	bf00      	nop
    return;
 8003664:	e023      	b.n	80036ae <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
    }
    return;
 800368a:	e012      	b.n	80036b2 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <HAL_UART_IRQHandler+0x22c>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fc14 	bl	8003ece <UART_EndTransmit_IT>
    return;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <HAL_UART_IRQHandler+0x22c>
      return;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_UART_IRQHandler+0x22c>
    return;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_UART_IRQHandler+0x22c>
    return;
 80036b2:	bf00      	nop
  }

}
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	08003ea3 	.word	0x08003ea3

080036c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4bb1      	ldr	r3, [pc, #708]	; (80039dc <UART_SetConfig+0x2f4>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6939      	ldr	r1, [r7, #16]
 8003720:	430b      	orrs	r3, r1
 8003722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a9f      	ldr	r2, [pc, #636]	; (80039e0 <UART_SetConfig+0x2f8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d121      	bne.n	80037ac <UART_SetConfig+0xc4>
 8003768:	4b9e      	ldr	r3, [pc, #632]	; (80039e4 <UART_SetConfig+0x2fc>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b03      	cmp	r3, #3
 8003774:	d816      	bhi.n	80037a4 <UART_SetConfig+0xbc>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0x94>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003799 	.word	0x08003799
 8003784:	08003793 	.word	0x08003793
 8003788:	0800379f 	.word	0x0800379f
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e151      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003792:	2302      	movs	r3, #2
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e14e      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003798:	2304      	movs	r3, #4
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e14b      	b.n	8003a36 <UART_SetConfig+0x34e>
 800379e:	2308      	movs	r3, #8
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e148      	b.n	8003a36 <UART_SetConfig+0x34e>
 80037a4:	2310      	movs	r3, #16
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	bf00      	nop
 80037aa:	e144      	b.n	8003a36 <UART_SetConfig+0x34e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a8d      	ldr	r2, [pc, #564]	; (80039e8 <UART_SetConfig+0x300>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d134      	bne.n	8003820 <UART_SetConfig+0x138>
 80037b6:	4b8b      	ldr	r3, [pc, #556]	; (80039e4 <UART_SetConfig+0x2fc>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d829      	bhi.n	8003818 <UART_SetConfig+0x130>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0xe4>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	08003801 	.word	0x08003801
 80037d0:	08003819 	.word	0x08003819
 80037d4:	08003819 	.word	0x08003819
 80037d8:	08003819 	.word	0x08003819
 80037dc:	0800380d 	.word	0x0800380d
 80037e0:	08003819 	.word	0x08003819
 80037e4:	08003819 	.word	0x08003819
 80037e8:	08003819 	.word	0x08003819
 80037ec:	08003807 	.word	0x08003807
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003819 	.word	0x08003819
 80037f8:	08003819 	.word	0x08003819
 80037fc:	08003813 	.word	0x08003813
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e117      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e114      	b.n	8003a36 <UART_SetConfig+0x34e>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e111      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e10e      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	bf00      	nop
 800381e:	e10a      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a71      	ldr	r2, [pc, #452]	; (80039ec <UART_SetConfig+0x304>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d120      	bne.n	800386c <UART_SetConfig+0x184>
 800382a:	4b6e      	ldr	r3, [pc, #440]	; (80039e4 <UART_SetConfig+0x2fc>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003834:	2b10      	cmp	r3, #16
 8003836:	d00f      	beq.n	8003858 <UART_SetConfig+0x170>
 8003838:	2b10      	cmp	r3, #16
 800383a:	d802      	bhi.n	8003842 <UART_SetConfig+0x15a>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <UART_SetConfig+0x164>
 8003840:	e010      	b.n	8003864 <UART_SetConfig+0x17c>
 8003842:	2b20      	cmp	r3, #32
 8003844:	d005      	beq.n	8003852 <UART_SetConfig+0x16a>
 8003846:	2b30      	cmp	r3, #48	; 0x30
 8003848:	d009      	beq.n	800385e <UART_SetConfig+0x176>
 800384a:	e00b      	b.n	8003864 <UART_SetConfig+0x17c>
 800384c:	2300      	movs	r3, #0
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e0f1      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e0ee      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003858:	2304      	movs	r3, #4
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e0eb      	b.n	8003a36 <UART_SetConfig+0x34e>
 800385e:	2308      	movs	r3, #8
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e0e8      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003864:	2310      	movs	r3, #16
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	bf00      	nop
 800386a:	e0e4      	b.n	8003a36 <UART_SetConfig+0x34e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5f      	ldr	r2, [pc, #380]	; (80039f0 <UART_SetConfig+0x308>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d120      	bne.n	80038b8 <UART_SetConfig+0x1d0>
 8003876:	4b5b      	ldr	r3, [pc, #364]	; (80039e4 <UART_SetConfig+0x2fc>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d00f      	beq.n	80038a4 <UART_SetConfig+0x1bc>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d802      	bhi.n	800388e <UART_SetConfig+0x1a6>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <UART_SetConfig+0x1b0>
 800388c:	e010      	b.n	80038b0 <UART_SetConfig+0x1c8>
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d005      	beq.n	800389e <UART_SetConfig+0x1b6>
 8003892:	2bc0      	cmp	r3, #192	; 0xc0
 8003894:	d009      	beq.n	80038aa <UART_SetConfig+0x1c2>
 8003896:	e00b      	b.n	80038b0 <UART_SetConfig+0x1c8>
 8003898:	2300      	movs	r3, #0
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0cb      	b.n	8003a36 <UART_SetConfig+0x34e>
 800389e:	2302      	movs	r3, #2
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e0c8      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038a4:	2304      	movs	r3, #4
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e0c5      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038aa:	2308      	movs	r3, #8
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e0c2      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038b0:	2310      	movs	r3, #16
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	bf00      	nop
 80038b6:	e0be      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a4d      	ldr	r2, [pc, #308]	; (80039f4 <UART_SetConfig+0x30c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d124      	bne.n	800390c <UART_SetConfig+0x224>
 80038c2:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <UART_SetConfig+0x2fc>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d012      	beq.n	80038f8 <UART_SetConfig+0x210>
 80038d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d6:	d802      	bhi.n	80038de <UART_SetConfig+0x1f6>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <UART_SetConfig+0x204>
 80038dc:	e012      	b.n	8003904 <UART_SetConfig+0x21c>
 80038de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e2:	d006      	beq.n	80038f2 <UART_SetConfig+0x20a>
 80038e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e8:	d009      	beq.n	80038fe <UART_SetConfig+0x216>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x21c>
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0a1      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e09e      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e09b      	b.n	8003a36 <UART_SetConfig+0x34e>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e098      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	bf00      	nop
 800390a:	e094      	b.n	8003a36 <UART_SetConfig+0x34e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a39      	ldr	r2, [pc, #228]	; (80039f8 <UART_SetConfig+0x310>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d124      	bne.n	8003960 <UART_SetConfig+0x278>
 8003916:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <UART_SetConfig+0x2fc>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003924:	d012      	beq.n	800394c <UART_SetConfig+0x264>
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d802      	bhi.n	8003932 <UART_SetConfig+0x24a>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <UART_SetConfig+0x258>
 8003930:	e012      	b.n	8003958 <UART_SetConfig+0x270>
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d006      	beq.n	8003946 <UART_SetConfig+0x25e>
 8003938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800393c:	d009      	beq.n	8003952 <UART_SetConfig+0x26a>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x270>
 8003940:	2301      	movs	r3, #1
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e077      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e074      	b.n	8003a36 <UART_SetConfig+0x34e>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e071      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e06e      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	bf00      	nop
 800395e:	e06a      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <UART_SetConfig+0x314>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d124      	bne.n	80039b4 <UART_SetConfig+0x2cc>
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <UART_SetConfig+0x2fc>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d012      	beq.n	80039a0 <UART_SetConfig+0x2b8>
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	d802      	bhi.n	8003986 <UART_SetConfig+0x29e>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <UART_SetConfig+0x2ac>
 8003984:	e012      	b.n	80039ac <UART_SetConfig+0x2c4>
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	d006      	beq.n	800399a <UART_SetConfig+0x2b2>
 800398c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003990:	d009      	beq.n	80039a6 <UART_SetConfig+0x2be>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x2c4>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e04d      	b.n	8003a36 <UART_SetConfig+0x34e>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e04a      	b.n	8003a36 <UART_SetConfig+0x34e>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e047      	b.n	8003a36 <UART_SetConfig+0x34e>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e044      	b.n	8003a36 <UART_SetConfig+0x34e>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	bf00      	nop
 80039b2:	e040      	b.n	8003a36 <UART_SetConfig+0x34e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <UART_SetConfig+0x318>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d139      	bne.n	8003a32 <UART_SetConfig+0x34a>
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <UART_SetConfig+0x2fc>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039cc:	d027      	beq.n	8003a1e <UART_SetConfig+0x336>
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d2:	d817      	bhi.n	8003a04 <UART_SetConfig+0x31c>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01c      	beq.n	8003a12 <UART_SetConfig+0x32a>
 80039d8:	e027      	b.n	8003a2a <UART_SetConfig+0x342>
 80039da:	bf00      	nop
 80039dc:	efff69f3 	.word	0xefff69f3
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40004c00 	.word	0x40004c00
 80039f4:	40005000 	.word	0x40005000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	40007800 	.word	0x40007800
 8003a00:	40007c00 	.word	0x40007c00
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a08:	d006      	beq.n	8003a18 <UART_SetConfig+0x330>
 8003a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a0e:	d009      	beq.n	8003a24 <UART_SetConfig+0x33c>
 8003a10:	e00b      	b.n	8003a2a <UART_SetConfig+0x342>
 8003a12:	2300      	movs	r3, #0
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e00e      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e00b      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e008      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003a24:	2308      	movs	r3, #8
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e005      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	bf00      	nop
 8003a30:	e001      	b.n	8003a36 <UART_SetConfig+0x34e>
 8003a32:	2310      	movs	r3, #16
 8003a34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d17c      	bne.n	8003b3a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d859      	bhi.n	8003afa <UART_SetConfig+0x412>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0x364>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003afb 	.word	0x08003afb
 8003a5c:	08003ac5 	.word	0x08003ac5
 8003a60:	08003afb 	.word	0x08003afb
 8003a64:	08003afb 	.word	0x08003afb
 8003a68:	08003afb 	.word	0x08003afb
 8003a6c:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a70:	f7fd ffd2 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8003a74:	4603      	mov	r3, r0
 8003a76:	005a      	lsls	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
        break;
 8003a8c:	e038      	b.n	8003b00 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a8e:	f7fd ffd7 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8003a92:	4603      	mov	r3, r0
 8003a94:	005a      	lsls	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	61bb      	str	r3, [r7, #24]
        break;
 8003aaa:	e029      	b.n	8003b00 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085a      	lsrs	r2, r3, #1
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <UART_SetConfig+0x540>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6852      	ldr	r2, [r2, #4]
 8003aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	61bb      	str	r3, [r7, #24]
        break;
 8003ac2:	e01d      	b.n	8003b00 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ac4:	f7fd feea 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	005a      	lsls	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e00e      	b.n	8003b00 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	61bb      	str	r3, [r7, #24]
        break;
 8003af8:	e002      	b.n	8003b00 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
        break;
 8003afe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d916      	bls.n	8003b34 <UART_SetConfig+0x44c>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d212      	bcs.n	8003b34 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f023 030f 	bic.w	r3, r3, #15
 8003b16:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	89fa      	ldrh	r2, [r7, #14]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	e06e      	b.n	8003c12 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	e06b      	b.n	8003c12 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d857      	bhi.n	8003bf0 <UART_SetConfig+0x508>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x460>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b89 	.word	0x08003b89
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003bf1 	.word	0x08003bf1
 8003b58:	08003bbd 	.word	0x08003bbd
 8003b5c:	08003bf1 	.word	0x08003bf1
 8003b60:	08003bf1 	.word	0x08003bf1
 8003b64:	08003bf1 	.word	0x08003bf1
 8003b68:	08003bd9 	.word	0x08003bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b6c:	f7fd ff54 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	61bb      	str	r3, [r7, #24]
        break;
 8003b86:	e036      	b.n	8003bf6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b88:	f7fd ff5a 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	61bb      	str	r3, [r7, #24]
        break;
 8003ba2:	e028      	b.n	8003bf6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	085a      	lsrs	r2, r3, #1
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <UART_SetConfig+0x544>)
 8003bac:	4413      	add	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6852      	ldr	r2, [r2, #4]
 8003bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
        break;
 8003bba:	e01c      	b.n	8003bf6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bbc:	f7fd fe6e 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	61bb      	str	r3, [r7, #24]
        break;
 8003bd6:	e00e      	b.n	8003bf6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	61bb      	str	r3, [r7, #24]
        break;
 8003bee:	e002      	b.n	8003bf6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	75fb      	strb	r3, [r7, #23]
        break;
 8003bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d908      	bls.n	8003c0e <UART_SetConfig+0x526>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d204      	bcs.n	8003c0e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e001      	b.n	8003c12 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	01e84800 	.word	0x01e84800
 8003c2c:	00f42400 	.word	0x00f42400

08003c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2e:	d10a      	bne.n	8003d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d82:	f7fc fc2b 	bl	80005dc <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10e      	bne.n	8003db4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f814 	bl	8003dd2 <UART_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e00a      	b.n	8003dca <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	e02a      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dea:	d026      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dec:	f7fc fbf6 	bl	80005dc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d302      	bcc.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11b      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d0c5      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e78:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fc07 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fbe4 	bl	80036c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include "encoder.h"

Encoder::Encoder(TIM_HandleTypeDef* timer) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  timer_ = timer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	213c      	movs	r1, #60	; 0x3c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fae0 	bl	80024dc <HAL_TIM_Encoder_Start>
}
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f2e:	f7fc fb03 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f32:	f000 f81d 	bl	8003f70 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f36:	f000 fa91 	bl	800445c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003f3a:	f000 fa69 	bl	8004410 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8003f3e:	f000 f8a1 	bl	8004084 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8003f42:	f000 f8fd 	bl	8004140 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8003f46:	f000 f959 	bl	80041fc <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8003f4a:	f000 f9cf 	bl	80042ec <_ZL12MX_TIM5_Initv>
  MX_USART3_UART_Init();
 8003f4e:	f000 fa2b 	bl	80043a8 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <main+0x40>)
 8003f54:	f7fe f9da 	bl	800230c <HAL_TIM_Base_Start_IT>

  Encoder encoder_left = Encoder(&htim2);
 8003f58:	463b      	mov	r3, r7
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <main+0x44>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ffcf 	bl	8003f00 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
  uint32_t count_left = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8003f66:	e7fe      	b.n	8003f66 <main+0x3e>
 8003f68:	20000068 	.word	0x20000068
 8003f6c:	20000028 	.word	0x20000028

08003f70 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b0b8      	sub	sp, #224	; 0xe0
 8003f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f7a:	2234      	movs	r2, #52	; 0x34
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fe08 	bl	8004b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	2290      	movs	r2, #144	; 0x90
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fdf9 	bl	8004b94 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <_Z18SystemClock_Configv+0x10c>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a35      	ldr	r2, [pc, #212]	; (800407c <_Z18SystemClock_Configv+0x10c>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <_Z18SystemClock_Configv+0x10c>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <_Z18SystemClock_Configv+0x110>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <_Z18SystemClock_Configv+0x110>)
 8003fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <_Z18SystemClock_Configv+0x110>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd f8f8 	bl	80011e8 <HAL_RCC_OscConfig>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8004008:	f000 fafc 	bl	8004604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800400c:	230f      	movs	r3, #15
 800400e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800401e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800402c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fb4a 	bl	80016cc <HAL_RCC_ClockConfig>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8004048:	f000 fadc 	bl	8004604 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800404c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004050:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004052:	2300      	movs	r3, #0
 8004054:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd fd04 	bl	8001a68 <HAL_RCCEx_PeriphCLKConfig>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004070:	f000 fac8 	bl	8004604 <Error_Handler>
  }
}
 8004074:	bf00      	nop
 8004076:	37e0      	adds	r7, #224	; 0xe0
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000

08004084 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fd7e 	bl	8004b94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004098:	463b      	mov	r3, r7
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040be:	4b1f      	ldr	r3, [pc, #124]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040e2:	2301      	movs	r3, #1
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	4619      	mov	r1, r3
 80040f4:	4811      	ldr	r0, [pc, #68]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 80040f6:	f7fe f95f 	bl	80023b8 <HAL_TIM_Encoder_Init>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 800410a:	f000 fa7b 	bl	8004604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004116:	463b      	mov	r3, r7
 8004118:	4619      	mov	r1, r3
 800411a:	4808      	ldr	r0, [pc, #32]	; (800413c <_ZL12MX_TIM2_Initv+0xb8>)
 800411c:	f7ff f8ec 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8004130:	f000 fa68 	bl	8004604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000028 	.word	0x20000028

08004140 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004146:	f107 0310 	add.w	r3, r7, #16
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8004160:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <_ZL12MX_TIM3_Initv+0xb8>)
 8004162:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8004166:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800416a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8004174:	2209      	movs	r2, #9
 8004176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004184:	481b      	ldr	r0, [pc, #108]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8004186:	f7fe f895 	bl	80022b4 <HAL_TIM_Base_Init>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800419a:	f000 fa33 	bl	8004604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	4619      	mov	r1, r3
 80041aa:	4812      	ldr	r0, [pc, #72]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 80041ac:	f7fe fc04 	bl	80029b8 <HAL_TIM_ConfigClockSource>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80041c0:	f000 fa20 	bl	8004604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4808      	ldr	r0, [pc, #32]	; (80041f4 <_ZL12MX_TIM3_Initv+0xb4>)
 80041d2:	f7ff f891 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80041e6:	f000 fa0d 	bl	8004604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041ea:	bf00      	nop
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000068 	.word	0x20000068
 80041f8:	40000400 	.word	0x40000400

080041fc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	; 0x28
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004202:	f107 031c 	add.w	r3, r7, #28
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800420e:	463b      	mov	r3, r7
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
 800421c:	615a      	str	r2, [r3, #20]
 800421e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004220:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 8004222:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <_ZL12MX_TIM4_Initv+0xec>)
 8004224:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 8004228:	2200      	movs	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422c:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 8004234:	2200      	movs	r2, #0
 8004236:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004244:	4827      	ldr	r0, [pc, #156]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 8004246:	f7fe f88b 	bl	8002360 <HAL_TIM_PWM_Init>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800425a:	f000 f9d3 	bl	8004604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004266:	f107 031c 	add.w	r3, r7, #28
 800426a:	4619      	mov	r1, r3
 800426c:	481d      	ldr	r0, [pc, #116]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 800426e:	f7ff f843 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8004282:	f000 f9bf 	bl	8004604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004286:	2360      	movs	r3, #96	; 0x60
 8004288:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004296:	463b      	mov	r3, r7
 8004298:	2208      	movs	r2, #8
 800429a:	4619      	mov	r1, r3
 800429c:	4811      	ldr	r0, [pc, #68]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 800429e:	f7fe fa73 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80042b2:	f000 f9a7 	bl	8004604 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042b6:	463b      	mov	r3, r7
 80042b8:	220c      	movs	r2, #12
 80042ba:	4619      	mov	r1, r3
 80042bc:	4809      	ldr	r0, [pc, #36]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 80042be:	f7fe fa63 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80042d2:	f000 f997 	bl	8004604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042d6:	4803      	ldr	r0, [pc, #12]	; (80042e4 <_ZL12MX_TIM4_Initv+0xe8>)
 80042d8:	f000 fa96 	bl	8004808 <HAL_TIM_MspPostInit>

}
 80042dc:	bf00      	nop
 80042de:	3728      	adds	r7, #40	; 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200000a8 	.word	0x200000a8
 80042e8:	40000800 	.word	0x40000800

080042ec <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042f2:	f107 030c 	add.w	r3, r7, #12
 80042f6:	2224      	movs	r2, #36	; 0x24
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fc4a 	bl	8004b94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004300:	463b      	mov	r3, r7
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800430a:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <_ZL12MX_TIM5_Initv+0xb8>)
 800430e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800431e:	2200      	movs	r2, #0
 8004320:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004322:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8004324:	2200      	movs	r2, #0
 8004326:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800432a:	2200      	movs	r2, #0
 800432c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800432e:	2301      	movs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004336:	2301      	movs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004346:	2301      	movs	r3, #1
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	4619      	mov	r1, r3
 8004358:	4811      	ldr	r0, [pc, #68]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800435a:	f7fe f82d 	bl	80023b8 <HAL_TIM_Encoder_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800436e:	f000 f949 	bl	8004604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800437a:	463b      	mov	r3, r7
 800437c:	4619      	mov	r1, r3
 800437e:	4808      	ldr	r0, [pc, #32]	; (80043a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8004380:	f7fe ffba 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8004394:	f000 f936 	bl	8004604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	3730      	adds	r7, #48	; 0x30
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	200000e8 	.word	0x200000e8
 80043a4:	40000c00 	.word	0x40000c00

080043a8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80043ac:	4b16      	ldr	r3, [pc, #88]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <_ZL19MX_USART3_UART_Initv+0x64>)
 80043b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043ce:	220c      	movs	r2, #12
 80043d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043da:	2200      	movs	r2, #0
 80043dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043ea:	4807      	ldr	r0, [pc, #28]	; (8004408 <_ZL19MX_USART3_UART_Initv+0x60>)
 80043ec:	f7fe fffe 	bl	80033ec <HAL_UART_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8004400:	f000 f900 	bl	8004604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000128 	.word	0x20000128
 800440c:	40004800 	.word	0x40004800

08004410 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <_ZL11MX_DMA_Initv+0x48>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <_ZL11MX_DMA_Initv+0x48>)
 800441c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004420:	6313      	str	r3, [r2, #48]	; 0x30
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <_ZL11MX_DMA_Initv+0x48>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	200c      	movs	r0, #12
 8004434:	f7fc f9b9 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004438:	200c      	movs	r0, #12
 800443a:	f7fc f9d2 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	200e      	movs	r0, #14
 8004444:	f7fc f9b1 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004448:	200e      	movs	r0, #14
 800444a:	f7fc f9ca 	bl	80007e2 <HAL_NVIC_EnableIRQ>

}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800

0800445c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004462:	f107 031c 	add.w	r3, r7, #28
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004472:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	4a52      	ldr	r2, [pc, #328]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
 800447e:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800448a:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044a2:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a46      	ldr	r2, [pc, #280]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044a8:	f043 0320 	orr.w	r3, r3, #32
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	6313      	str	r3, [r2, #48]	; 0x30
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d2:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044d8:	f043 0308 	orr.w	r3, r3, #8
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ea:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <_ZL12MX_GPIO_Initv+0x164>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|dir_1_Pin|sleep_2_Pin|sleep_1_Pin, GPIO_PIN_RESET);
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004508:	482e      	ldr	r0, [pc, #184]	; (80045c4 <_ZL12MX_GPIO_Initv+0x168>)
 800450a:	f7fc fe39 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004514:	482c      	ldr	r0, [pc, #176]	; (80045c8 <_ZL12MX_GPIO_Initv+0x16c>)
 8004516:	f7fc fe33 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800451a:	2301      	movs	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800451e:	2303      	movs	r3, #3
 8004520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	4827      	ldr	r0, [pc, #156]	; (80045cc <_ZL12MX_GPIO_Initv+0x170>)
 800452e:	f7fc fc7d 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : current_1_Pin */
  GPIO_InitStruct.Pin = current_1_Pin;
 8004532:	2308      	movs	r3, #8
 8004534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004536:	2303      	movs	r3, #3
 8004538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(current_1_GPIO_Port, &GPIO_InitStruct);
 800453e:	f107 031c 	add.w	r3, r7, #28
 8004542:	4619      	mov	r1, r3
 8004544:	4822      	ldr	r0, [pc, #136]	; (80045d0 <_ZL12MX_GPIO_Initv+0x174>)
 8004546:	f7fc fc71 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : fault_2_Pin */
  GPIO_InitStruct.Pin = fault_2_Pin;
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault_2_GPIO_Port, &GPIO_InitStruct);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	4619      	mov	r1, r3
 800455c:	481c      	ldr	r0, [pc, #112]	; (80045d0 <_ZL12MX_GPIO_Initv+0x174>)
 800455e:	f7fc fc65 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 dir_1_Pin sleep_2_Pin sleep_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|dir_1_Pin|sleep_2_Pin|sleep_1_Pin;
 8004562:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004568:	2301      	movs	r3, #1
 800456a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004570:	2300      	movs	r3, #0
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004574:	f107 031c 	add.w	r3, r7, #28
 8004578:	4619      	mov	r1, r3
 800457a:	4812      	ldr	r0, [pc, #72]	; (80045c4 <_ZL12MX_GPIO_Initv+0x168>)
 800457c:	f7fc fc56 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : fault_1_Pin */
  GPIO_InitStruct.Pin = fault_1_Pin;
 8004580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fault_1_GPIO_Port, &GPIO_InitStruct);
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	4619      	mov	r1, r3
 8004594:	480f      	ldr	r0, [pc, #60]	; (80045d4 <_ZL12MX_GPIO_Initv+0x178>)
 8004596:	f7fc fc49 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800459a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a0:	2301      	movs	r3, #1
 80045a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ac:	f107 031c 	add.w	r3, r7, #28
 80045b0:	4619      	mov	r1, r3
 80045b2:	4805      	ldr	r0, [pc, #20]	; (80045c8 <_ZL12MX_GPIO_Initv+0x16c>)
 80045b4:	f7fc fc3a 	bl	8000e2c <HAL_GPIO_Init>

}
 80045b8:	bf00      	nop
 80045ba:	3730      	adds	r7, #48	; 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40020400 	.word	0x40020400
 80045cc:	40020800 	.word	0x40020800
 80045d0:	40020000 	.word	0x40020000
 80045d4:	40021000 	.word	0x40021000

080045d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a05      	ldr	r2, [pc, #20]	; (80045fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d104      	bne.n	80045f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80045ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ee:	4804      	ldr	r0, [pc, #16]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80045f0:	f7fc fddf 	bl	80011b2 <HAL_GPIO_TogglePin>

}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40000400 	.word	0x40000400
 8004600:	40020400 	.word	0x40020400

08004604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <HAL_MspInit+0x44>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <HAL_MspInit+0x44>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	; 0x40
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_MspInit+0x44>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_MspInit+0x44>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_MspInit+0x44>)
 8004638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800463c:	6453      	str	r3, [r2, #68]	; 0x44
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_MspInit+0x44>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800

0800465c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004664:	f107 031c 	add.w	r3, r7, #28
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d144      	bne.n	8004708 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	4b35      	ldr	r3, [pc, #212]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a34      	ldr	r2, [pc, #208]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b32      	ldr	r3, [pc, #200]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a2e      	ldr	r2, [pc, #184]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046c6:	2320      	movs	r3, #32
 80046c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d2:	2300      	movs	r3, #0
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046d6:	2301      	movs	r3, #1
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046da:	f107 031c 	add.w	r3, r7, #28
 80046de:	4619      	mov	r1, r3
 80046e0:	4823      	ldr	r0, [pc, #140]	; (8004770 <HAL_TIM_Encoder_MspInit+0x114>)
 80046e2:	f7fc fba3 	bl	8000e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046e6:	2308      	movs	r3, #8
 80046e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046f6:	2301      	movs	r3, #1
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fa:	f107 031c 	add.w	r3, r7, #28
 80046fe:	4619      	mov	r1, r3
 8004700:	481c      	ldr	r0, [pc, #112]	; (8004774 <HAL_TIM_Encoder_MspInit+0x118>)
 8004702:	f7fc fb93 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004706:	e02c      	b.n	8004762 <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_TIM_Encoder_MspInit+0x11c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d127      	bne.n	8004762 <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a15      	ldr	r2, [pc, #84]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	4a0f      	ldr	r2, [pc, #60]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6313      	str	r3, [r2, #48]	; 0x30
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_TIM_Encoder_MspInit+0x110>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004742:	2303      	movs	r3, #3
 8004744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004746:	2302      	movs	r3, #2
 8004748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474e:	2300      	movs	r3, #0
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004752:	2302      	movs	r3, #2
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004756:	f107 031c 	add.w	r3, r7, #28
 800475a:	4619      	mov	r1, r3
 800475c:	4804      	ldr	r0, [pc, #16]	; (8004770 <HAL_TIM_Encoder_MspInit+0x114>)
 800475e:	f7fc fb65 	bl	8000e2c <HAL_GPIO_Init>
}
 8004762:	bf00      	nop
 8004764:	3730      	adds	r7, #48	; 0x30
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
 8004770:	40020000 	.word	0x40020000
 8004774:	40020400 	.word	0x40020400
 8004778:	40000c00 	.word	0x40000c00

0800477c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <HAL_TIM_Base_MspInit+0x44>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_TIM_Base_MspInit+0x48>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <HAL_TIM_Base_MspInit+0x48>)
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_TIM_Base_MspInit+0x48>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	201d      	movs	r0, #29
 80047ac:	f7fb fffd 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047b0:	201d      	movs	r0, #29
 80047b2:	f7fc f816 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40023800 	.word	0x40023800

080047c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_TIM_PWM_MspInit+0x38>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10b      	bne.n	80047f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <HAL_TIM_PWM_MspInit+0x3c>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <HAL_TIM_PWM_MspInit+0x3c>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_TIM_PWM_MspInit+0x3c>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40000800 	.word	0x40000800
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <HAL_TIM_MspPostInit+0x64>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d11c      	bne.n	8004864 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_TIM_MspPostInit+0x68>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIM_MspPostInit+0x68>)
 8004830:	f043 0308 	orr.w	r3, r3, #8
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_TIM_MspPostInit+0x68>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm_2_Pin|pwm_1_Pin;
 8004842:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004854:	2302      	movs	r3, #2
 8004856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	4619      	mov	r1, r3
 800485e:	4805      	ldr	r0, [pc, #20]	; (8004874 <HAL_TIM_MspPostInit+0x6c>)
 8004860:	f7fc fae4 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40000800 	.word	0x40000800
 8004870:	40023800 	.word	0x40023800
 8004874:	40020c00 	.word	0x40020c00

08004878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a4b      	ldr	r2, [pc, #300]	; (80049c4 <HAL_UART_MspInit+0x14c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f040 808f 	bne.w	80049ba <HAL_UART_MspInit+0x142>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800489c:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_UART_MspInit+0x150>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <HAL_UART_MspInit+0x150>)
 80048a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
 80048a8:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_UART_MspInit+0x150>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048b4:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <HAL_UART_MspInit+0x150>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4a43      	ldr	r2, [pc, #268]	; (80049c8 <HAL_UART_MspInit+0x150>)
 80048ba:	f043 0308 	orr.w	r3, r3, #8
 80048be:	6313      	str	r3, [r2, #48]	; 0x30
 80048c0:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_UART_MspInit+0x150>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	2302      	movs	r3, #2
 80048d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048da:	2303      	movs	r3, #3
 80048dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048de:	2307      	movs	r3, #7
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048e2:	f107 0314 	add.w	r3, r7, #20
 80048e6:	4619      	mov	r1, r3
 80048e8:	4838      	ldr	r0, [pc, #224]	; (80049cc <HAL_UART_MspInit+0x154>)
 80048ea:	f7fc fa9f 	bl	8000e2c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_UART_MspInit+0x158>)
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_UART_MspInit+0x15c>)
 80048f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80048f4:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_UART_MspInit+0x158>)
 80048f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048fc:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_UART_MspInit+0x158>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004904:	2200      	movs	r2, #0
 8004906:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_UART_MspInit+0x158>)
 800490a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800490e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004912:	2200      	movs	r2, #0
 8004914:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004916:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800491c:	4b2c      	ldr	r3, [pc, #176]	; (80049d0 <HAL_UART_MspInit+0x158>)
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004922:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004928:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_UART_MspInit+0x158>)
 800492c:	2200      	movs	r2, #0
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004930:	4827      	ldr	r0, [pc, #156]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004932:	f7fb ff71 	bl	8000818 <HAL_DMA_Init>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800493c:	f7ff fe62 	bl	8004604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004944:	66da      	str	r2, [r3, #108]	; 0x6c
 8004946:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_UART_MspInit+0x158>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_UART_MspInit+0x160>)
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_UART_MspInit+0x164>)
 8004950:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004954:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004958:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_UART_MspInit+0x160>)
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004976:	2200      	movs	r2, #0
 8004978:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_UART_MspInit+0x160>)
 800497c:	2200      	movs	r2, #0
 800497e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004986:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_UART_MspInit+0x160>)
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800498e:	4812      	ldr	r0, [pc, #72]	; (80049d8 <HAL_UART_MspInit+0x160>)
 8004990:	f7fb ff42 	bl	8000818 <HAL_DMA_Init>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 800499a:	f7ff fe33 	bl	8004604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <HAL_UART_MspInit+0x160>)
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68
 80049a4:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <HAL_UART_MspInit+0x160>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	2027      	movs	r0, #39	; 0x27
 80049b0:	f7fb fefb 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049b4:	2027      	movs	r0, #39	; 0x27
 80049b6:	f7fb ff14 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049ba:	bf00      	nop
 80049bc:	3728      	adds	r7, #40	; 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40004800 	.word	0x40004800
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	200001a8 	.word	0x200001a8
 80049d4:	40026028 	.word	0x40026028
 80049d8:	20000208 	.word	0x20000208
 80049dc:	40026058 	.word	0x40026058

080049e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f2:	e7fe      	b.n	80049f2 <HardFault_Handler+0x4>

080049f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f8:	e7fe      	b.n	80049f8 <MemManage_Handler+0x4>

080049fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049fe:	e7fe      	b.n	80049fe <BusFault_Handler+0x4>

08004a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a04:	e7fe      	b.n	8004a04 <UsageFault_Handler+0x4>

08004a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a34:	f7fb fdbe 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <DMA1_Stream1_IRQHandler+0x10>)
 8004a42:	f7fb ffb9 	bl	80009b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200001a8 	.word	0x200001a8

08004a50 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <DMA1_Stream3_IRQHandler+0x10>)
 8004a56:	f7fb ffaf 	bl	80009b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000208 	.word	0x20000208

08004a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <TIM3_IRQHandler+0x10>)
 8004a6a:	f7fd fd6e 	bl	800254a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000068 	.word	0x20000068

08004a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <USART3_IRQHandler+0x10>)
 8004a7e:	f7fe fd03 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000128 	.word	0x20000128

08004a8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <SystemInit+0x5c>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <SystemInit+0x5c>)
 8004a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <SystemInit+0x60>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a11      	ldr	r2, [pc, #68]	; (8004aec <SystemInit+0x60>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <SystemInit+0x60>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <SystemInit+0x60>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	490d      	ldr	r1, [pc, #52]	; (8004aec <SystemInit+0x60>)
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <SystemInit+0x64>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <SystemInit+0x60>)
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <SystemInit+0x68>)
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <SystemInit+0x60>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a08      	ldr	r2, [pc, #32]	; (8004aec <SystemInit+0x60>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <SystemInit+0x60>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <SystemInit+0x5c>)
 8004ad8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004adc:	609a      	str	r2, [r3, #8]
#endif
}
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00
 8004aec:	40023800 	.word	0x40023800
 8004af0:	fef6ffff 	.word	0xfef6ffff
 8004af4:	24003010 	.word	0x24003010

08004af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004afe:	e003      	b.n	8004b08 <LoopCopyDataInit>

08004b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b06:	3104      	adds	r1, #4

08004b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b10:	d3f6      	bcc.n	8004b00 <CopyDataInit>
  ldr  r2, =_sbss
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b14:	e002      	b.n	8004b1c <LoopFillZerobss>

08004b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b18:	f842 3b04 	str.w	r3, [r2], #4

08004b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b20:	d3f9      	bcc.n	8004b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b22:	f7ff ffb3 	bl	8004a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b26:	f000 f811 	bl	8004b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b2a:	f7ff f9fd 	bl	8003f28 <main>
  bx  lr    
 8004b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b30:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004b34:	08004bec 	.word	0x08004bec
  ldr  r0, =_sdata
 8004b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b3c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004b40:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004b44:	2000026c 	.word	0x2000026c

08004b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b48:	e7fe      	b.n	8004b48 <ADC_IRQHandler>
	...

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4e0d      	ldr	r6, [pc, #52]	; (8004b84 <__libc_init_array+0x38>)
 8004b50:	4c0d      	ldr	r4, [pc, #52]	; (8004b88 <__libc_init_array+0x3c>)
 8004b52:	1ba4      	subs	r4, r4, r6
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	2500      	movs	r5, #0
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	4e0b      	ldr	r6, [pc, #44]	; (8004b8c <__libc_init_array+0x40>)
 8004b5e:	4c0c      	ldr	r4, [pc, #48]	; (8004b90 <__libc_init_array+0x44>)
 8004b60:	f000 f820 	bl	8004ba4 <_init>
 8004b64:	1ba4      	subs	r4, r4, r6
 8004b66:	10a4      	asrs	r4, r4, #2
 8004b68:	2500      	movs	r5, #0
 8004b6a:	42a5      	cmp	r5, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b74:	4798      	blx	r3
 8004b76:	3501      	adds	r5, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7e:	4798      	blx	r3
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	08004be4 	.word	0x08004be4
 8004b88:	08004be4 	.word	0x08004be4
 8004b8c:	08004be4 	.word	0x08004be4
 8004b90:	08004be8 	.word	0x08004be8

08004b94 <memset>:
 8004b94:	4402      	add	r2, r0
 8004b96:	4603      	mov	r3, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
