
otto_controller_source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f30  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  0800a128  0800a128  0001a128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf8  0800abf8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ac04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e40  20000084  0800ac88  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ec4  0800ac88  00020ec4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019581  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003056  00000000  00000000  00039633  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002981b  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d02f  00000000  00000000  000681eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc083  00000000  00000000  0007521a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017129d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  00171318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	0800a110 	.word	0x0800a110

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000088 	.word	0x20000088
 8000234:	0800a110 	.word	0x0800a110

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <_ZN7Encoder8GetCountEv>:

  Encoder(TIM_HandleTypeDef* timer);

  void Setup();

  int GetCount() {
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
    int count = ((int)__HAL_TIM_GET_COUNTER(this->timer_) -
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    		((this->timer_->Init.Period)/2));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	085b      	lsrs	r3, r3, #1
    int count = ((int)__HAL_TIM_GET_COUNTER(this->timer_) -
 8000560:	1ad3      	subs	r3, r2, r3
    		((this->timer_->Init.Period)/2));
 8000562:	60fb      	str	r3, [r7, #12]
    return count;
 8000564:	68fb      	ldr	r3, [r7, #12]
  }
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_ZN7Encoder10ResetCountEv>:

  void ResetCount() {
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    //set counter to half its maximum value
    __HAL_TIM_SET_COUNTER(timer_, (timer_->Init.Period)/2);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	0852      	lsrs	r2, r2, #1
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include "encoder.h"

Encoder::Encoder(TIM_HandleTypeDef* timer) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x30>)
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x34>)
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <_ZN7EncoderC1EP17TIM_HandleTypeDef+0x38>)
 80005b2:	619a      	str	r2, [r3, #24]
  timer_ = timer;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	00012110 	.word	0x00012110
 80005cc:	40490fd0 	.word	0x40490fd0
 80005d0:	3f40ff97 	.word	0x3f40ff97

080005d4 <_ZN7Encoder5SetupEv>:

void Encoder::Setup() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(timer_, TIM_CHANNEL_ALL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	213c      	movs	r1, #60	; 0x3c
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 f96e 	bl	80068c4 <HAL_TIM_Encoder_Start>
  this->ResetCount();
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffc2 	bl	8000572 <_ZN7Encoder10ResetCountEv>
  this->previous_millis_ = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 80005f4:	f004 f994 	bl	8004920 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZN7Encoder12UpdateValuesEv>:

void Encoder::UpdateValues() {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  this->previous_millis_ = this->current_millis_;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
  this->current_millis_ = HAL_GetTick();
 8000616:	f004 f983 	bl	8004920 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
  this->ticks_ = this->GetCount();
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ff91 	bl	8000548 <_ZN7Encoder8GetCountEv>
 8000626:	4602      	mov	r2, r0
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	60da      	str	r2, [r3, #12]
  this->ResetCount();
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffa0 	bl	8000572 <_ZN7Encoder10ResetCountEv>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <_ZN7Encoder17GetLinearVelocityEv>:
  float meters = ((float) this->ticks_ * kWheelCircumference)
      / kTicksPerRevolution;
  return meters;
}

float Encoder::GetLinearVelocity() {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  this->UpdateValues();
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff ffde 	bl	8000606 <_ZN7Encoder12UpdateValuesEv>
  float meters = ((float) this->ticks_ * kWheelCircumference)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	edd3 7a06 	vldr	s15, [r3, #24]
 800065c:	ee67 6a27 	vmul.f32	s13, s14, s15
      / kTicksPerRevolution;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  float meters = ((float) this->ticks_ * kWheelCircumference)
 800066c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000670:	edc7 7a05 	vstr	s15, [r7, #20]
  float deltaTime = this->current_millis_ - this->previous_millis_;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000686:	edc7 7a04 	vstr	s15, [r7, #16]
  float linear_velocity = (meters / (deltaTime / 1000));
 800068a:	edd7 7a04 	vldr	s15, [r7, #16]
 800068e:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006b4 <_ZN7Encoder17GetLinearVelocityEv+0x78>
 8000692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000696:	edd7 6a05 	vldr	s13, [r7, #20]
 800069a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069e:	edc7 7a03 	vstr	s15, [r7, #12]
  return linear_velocity;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	ee07 3a90 	vmov	s15, r3
}
 80006a8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	447a0000 	.word	0x447a0000

080006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 80006c4:	463b      	mov	r3, r7
 80006c6:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	15db      	asrs	r3, r3, #23
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80006de:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	0159      	lsls	r1, r3, #5
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	b2ca      	uxtb	r2, r1
 8000710:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	10d9      	asrs	r1, r3, #3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	b2ca      	uxtb	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	12d9      	asrs	r1, r3, #11
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	b2ca      	uxtb	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	b25a      	sxtb	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	14db      	asrs	r3, r3, #19
 8000738:	b25b      	sxtb	r3, r3
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	b25b      	sxtb	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b259      	sxtb	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	b2ca      	uxtb	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	111b      	asrs	r3, r3, #4
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1c59      	adds	r1, r3, #1
 8000758:	6079      	str	r1, [r7, #4]
 800075a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8000762:	edd7 7a00 	vldr	s15, [r7]
 8000766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076e:	d508      	bpl.n	8000782 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3b01      	subs	r3, #1
 800077a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8000782:	2308      	movs	r3, #8
  }
 8000784:	4618      	mov	r0, r3
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3303      	adds	r3, #3
 80007a2:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	095b      	lsrs	r3, r3, #5
 80007ae:	f003 0207 	and.w	r2, r3, #7
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	00da      	lsls	r2, r3, #3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	431a      	orrs	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	02da      	lsls	r2, r3, #11
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	431a      	orrs	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80007ec:	431a      	orrs	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	091b      	lsrs	r3, r3, #4
 80007fc:	f003 030f 	and.w	r3, r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
 8000810:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d008      	beq.n	800082a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	431a      	orrs	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	061b      	lsls	r3, r3, #24
 8000834:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]

    return 8;
 8000842:	2308      	movs	r3, #8
  }
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZN3ros3MsgC1Ev>:
class Msg
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <_ZN3ros3MsgC1Ev+0x1c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	0800a618 	.word	0x0800a618

08000870 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
      data("")
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffe8 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_ZN8std_msgs6StringC1Ev+0x28>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <_ZN8std_msgs6StringC1Ev+0x2c>)
 800088a:	605a      	str	r2, [r3, #4]
    {
    }
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	0800a600 	.word	0x0800a600
 800089c:	0800a128 	.word	0x0800a128

080008a0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fcc0 	bl	8000238 <strlen>
 80008b8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fcef 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3304      	adds	r3, #4
 80008cc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	18d0      	adds	r0, r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	4619      	mov	r1, r3
 80008dc:	f009 fad0 	bl	8009e80 <memcpy>
      offset += length_data;
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
      return offset;
 80008e8:	68fb      	ldr	r3, [r7, #12]
    }
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	441a      	add	r2, r3
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fce8 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3304      	adds	r3, #4
 8000916:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	429a      	cmp	r2, r3
 8000926:	d20c      	bcs.n	8000942 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	441a      	add	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3b01      	subs	r3, #1
 8000932:	6839      	ldr	r1, [r7, #0]
 8000934:	440b      	add	r3, r1
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e7ec      	b.n	800091c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	3b01      	subs	r3, #1
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3b01      	subs	r3, #1
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	441a      	add	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
     return offset;
 8000966:	693b      	ldr	r3, [r7, #16]
    }
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <_ZN8std_msgs6String7getTypeEv+0x18>)
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	0800a12c 	.word	0x0800a12c

0800098c <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	0800a13c 	.word	0x0800a13c

080009a8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
      data()
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff3a 	bl	8000850 <_ZN3ros3MsgC1Ev>
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3304      	adds	r3, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffde 	bl	80009a8 <_ZN3ros4TimeC1Ev>
    {
    }
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0800a5e8 	.word	0x0800a5e8

080009fc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6859      	ldr	r1, [r3, #4]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	b2ca      	uxtb	r2, r1
 8000a16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	0a19      	lsrs	r1, r3, #8
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	0c19      	lsrs	r1, r3, #16
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3302      	adds	r3, #2
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	0e19      	lsrs	r1, r3, #24
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3303      	adds	r3, #3
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6899      	ldr	r1, [r3, #8]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	0a19      	lsrs	r1, r3, #8
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2ca      	uxtb	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	0c19      	lsrs	r1, r3, #16
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	0e19      	lsrs	r1, r3, #24
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3303      	adds	r3, #3
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2ca      	uxtb	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    }
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	440b      	add	r3, r1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	6839      	ldr	r1, [r7, #0]
 8000ae8:	440b      	add	r3, r1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	041b      	lsls	r3, r3, #16
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3303      	adds	r3, #3
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	440b      	add	r3, r1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	061b      	lsls	r3, r3, #24
 8000b04:	431a      	orrs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	440b      	add	r3, r1
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3303      	adds	r3, #3
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	440b      	add	r3, r1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	061b      	lsls	r3, r3, #24
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3304      	adds	r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
     return offset;
 8000b66:	68fb      	ldr	r3, [r7, #12]
    }
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	0800a160 	.word	0x0800a160

08000b90 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	0800a170 	.word	0x0800a170

08000bac <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe4a 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	809a      	strh	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
    {
    }
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800a5d0 	.word	0x0800a5d0
 8000bf0:	0800a128 	.word	0x0800a128

08000bf4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	8899      	ldrh	r1, [r3, #4]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b2ca      	uxtb	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b299      	uxth	r1, r3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3302      	adds	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fb02 	bl	8000238 <strlen>
 8000c34:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	69b9      	ldr	r1, [r7, #24]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fb31 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3304      	adds	r3, #4
 8000c48:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	18d0      	adds	r0, r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f009 f912 	bl	8009e80 <memcpy>
      offset += length_topic_name;
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4413      	add	r3, r2
 8000c62:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fae5 	bl	8000238 <strlen>
 8000c6e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	6979      	ldr	r1, [r7, #20]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fb14 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	18d0      	adds	r0, r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f009 f8f5 	bl	8009e80 <memcpy>
      offset += length_message_type;
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fac8 	bl	8000238 <strlen>
 8000ca8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 faf7 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	18d0      	adds	r0, r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f009 f8d8 	bl	8009e80 <memcpy>
      offset += length_md5sum;
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	0a19      	lsrs	r1, r3, #8
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	0c19      	lsrs	r1, r3, #16
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3302      	adds	r3, #2
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	0e19      	lsrs	r1, r3, #24
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3303      	adds	r3, #3
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	b2ca      	uxtb	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000d20:	69fb      	ldr	r3, [r7, #28]
    }
 8000d22:	4618      	mov	r0, r3
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b08a      	sub	sp, #40	; 0x28
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	889b      	ldrh	r3, [r3, #4]
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	440b      	add	r3, r1
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	3302      	adds	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	441a      	add	r2, r3
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fab3 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d20c      	bcs.n	8000dac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	441a      	add	r2, r3
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6839      	ldr	r1, [r7, #0]
 8000d9e:	440b      	add	r3, r1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	3301      	adds	r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
 8000daa:	e7ec      	b.n	8000d86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4413      	add	r3, r2
 8000db2:	3b01      	subs	r3, #1
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	4413      	add	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	441a      	add	r2, r3
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fa80 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	3304      	adds	r3, #4
 8000de6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4413      	add	r3, r2
 8000df2:	6a3a      	ldr	r2, [r7, #32]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d20c      	bcs.n	8000e12 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	e7ec      	b.n	8000dec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	441a      	add	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4413      	add	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fa4d 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d20c      	bcs.n	8000e78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	441a      	add	r2, r3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	3301      	adds	r3, #1
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e7ec      	b.n	8000e52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	441a      	add	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	440a      	add	r2, r1
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	6839      	ldr	r1, [r7, #0]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	440b      	add	r3, r1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	3303      	adds	r3, #3
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	440b      	add	r3, r1
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	061b      	lsls	r3, r3, #24
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	3304      	adds	r3, #4
 8000eee:	61bb      	str	r3, [r7, #24]
     return offset;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
    }
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	0800a194 	.word	0x0800a194

08000f18 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	0800a1b0 	.word	0x0800a1b0

08000f34 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc86 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	711a      	strb	r2, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000f54:	609a      	str	r2, [r3, #8]
    {
    }
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	0800a5b8 	.word	0x0800a5b8
 8000f64:	0800a128 	.word	0x0800a128

08000f68 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	7912      	ldrb	r2, [r2, #4]
 8000f80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f953 	bl	8000238 <strlen>
 8000f92:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f982 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	18d0      	adds	r0, r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f008 ff63 	bl	8009e80 <memcpy>
      offset += length_msg;
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    }
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	441a      	add	r2, r3
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f972 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	3304      	adds	r3, #4
 8001002:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	d20c      	bcs.n	800102e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	441a      	add	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3b01      	subs	r3, #1
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	440b      	add	r3, r1
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e7ec      	b.n	8001008 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	3b01      	subs	r3, #1
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3b01      	subs	r3, #1
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	441a      	add	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
     return offset;
 8001052:	693b      	ldr	r3, [r7, #16]
    }
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	0800a1d4 	.word	0x0800a1d4

08001078 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	0800a1e8 	.word	0x0800a1e8

08001094 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fbd6 	bl	8000850 <_ZN3ros3MsgC1Ev>
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0800a5a0 	.word	0x0800a5a0

080010dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6859      	ldr	r1, [r3, #4]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2ca      	uxtb	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	0a19      	lsrs	r1, r3, #8
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	3301      	adds	r3, #1
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	0c19      	lsrs	r1, r3, #16
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	3302      	adds	r3, #2
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	0e19      	lsrs	r1, r3, #24
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	3303      	adds	r3, #3
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3304      	adds	r3, #4
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	6a3a      	ldr	r2, [r7, #32]
 800113e:	429a      	cmp	r2, r3
 8001140:	d22b      	bcs.n	800119a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b2ca      	uxtb	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	0a19      	lsrs	r1, r3, #8
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	3301      	adds	r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	0c19      	lsrs	r1, r3, #16
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	3302      	adds	r3, #2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	b2ca      	uxtb	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	0e19      	lsrs	r1, r3, #24
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3303      	adds	r3, #3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	3304      	adds	r3, #4
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	3301      	adds	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	e7ce      	b.n	8001138 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6919      	ldr	r1, [r3, #16]
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	0a19      	lsrs	r1, r3, #8
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	3301      	adds	r3, #1
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	0c19      	lsrs	r1, r3, #16
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3302      	adds	r3, #2
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	0e19      	lsrs	r1, r3, #24
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3303      	adds	r3, #3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3304      	adds	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d22b      	bcs.n	800124a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2ca      	uxtb	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	0a19      	lsrs	r1, r3, #8
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	3301      	adds	r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	b2ca      	uxtb	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	0c19      	lsrs	r1, r3, #16
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	3302      	adds	r3, #2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	b2ca      	uxtb	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	0e19      	lsrs	r1, r3, #24
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	3303      	adds	r3, #3
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4413      	add	r3, r2
 8001238:	b2ca      	uxtb	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	3304      	adds	r3, #4
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e7ce      	b.n	80011e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69d9      	ldr	r1, [r3, #28]
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	0a19      	lsrs	r1, r3, #8
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	3301      	adds	r3, #1
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	0c19      	lsrs	r1, r3, #16
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3302      	adds	r3, #2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	0e19      	lsrs	r1, r3, #24
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3303      	adds	r3, #3
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3304      	adds	r3, #4
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d228      	bcs.n	80012f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ffc2 	bl	8000238 <strlen>
 80012b4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	6979      	ldr	r1, [r7, #20]
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fff1 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	3304      	adds	r3, #4
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	18d0      	adds	r0, r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	4619      	mov	r1, r3
 80012e0:	f008 fdce 	bl	8009e80 <memcpy>
      offset += length_stringsi;
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	4413      	add	r3, r2
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3301      	adds	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e7d1      	b.n	8001298 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80012f6:	4618      	mov	r0, r3
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80012fe:	b580      	push	{r7, lr}
 8001300:	b08e      	sub	sp, #56	; 0x38
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	3301      	adds	r3, #1
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	6a3a      	ldr	r2, [r7, #32]
 8001324:	4313      	orrs	r3, r2
 8001326:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	3302      	adds	r3, #2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	6a3a      	ldr	r2, [r7, #32]
 8001336:	4313      	orrs	r3, r2
 8001338:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133c:	3303      	adds	r3, #3
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	4313      	orrs	r3, r2
 800134a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	3304      	adds	r3, #4
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d90a      	bls.n	8001372 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f008 fd9e 	bl	8009ea8 <realloc>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a3a      	ldr	r2, [r7, #32]
 8001376:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001382:	429a      	cmp	r2, r3
 8001384:	d236      	bcs.n	80013f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	440a      	add	r2, r1
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	3301      	adds	r3, #1
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	440b      	add	r3, r1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	3302      	adds	r3, #2
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	440b      	add	r3, r1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	3303      	adds	r3, #3
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	440b      	add	r3, r1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80013d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d6:	3304      	adds	r3, #4
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80013ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ee:	3301      	adds	r3, #1
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
 80013f2:	e7c3      	b.n	800137c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001400:	3301      	adds	r3, #1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4313      	orrs	r3, r2
 800140e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	3302      	adds	r3, #2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	4313      	orrs	r3, r2
 8001420:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001424:	3303      	adds	r3, #3
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	4313      	orrs	r3, r2
 8001432:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001436:	3304      	adds	r3, #4
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	d90a      	bls.n	800145a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f008 fd2a 	bl	8009ea8 <realloc>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146a:	429a      	cmp	r2, r3
 800146c:	d236      	bcs.n	80014dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	440a      	add	r2, r1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001484:	3301      	adds	r3, #1
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	440b      	add	r3, r1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	3302      	adds	r3, #2
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	440b      	add	r3, r1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a8:	3303      	adds	r3, #3
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	3304      	adds	r3, #4
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	3214      	adds	r2, #20
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	3301      	adds	r3, #1
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014da:	e7c3      	b.n	8001464 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80014e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e8:	3301      	adds	r3, #1
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	3302      	adds	r3, #2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	3303      	adds	r3, #3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	3304      	adds	r3, #4
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	429a      	cmp	r2, r3
 800152a:	d90a      	bls.n	8001542 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f008 fcb6 	bl	8009ea8 <realloc>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001552:	429a      	cmp	r2, r3
 8001554:	d23f      	bcs.n	80015d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	441a      	add	r2, r3
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f001 febd 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156a:	3304      	adds	r3, #4
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157a:	429a      	cmp	r2, r3
 800157c:	d20c      	bcs.n	8001598 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	441a      	add	r2, r3
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3b01      	subs	r3, #1
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	440b      	add	r3, r1
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e7ec      	b.n	8001572 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	3b01      	subs	r3, #1
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80015a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015aa:	3b01      	subs	r3, #1
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	441a      	add	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80015b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3220      	adds	r2, #32
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	3301      	adds	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e7ba      	b.n	800154c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80015d8:	4618      	mov	r0, r3
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	0800a47c 	.word	0x0800a47c

080015fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	0800a20c 	.word	0x0800a20c

08001618 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68d8      	ldr	r0, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6891      	ldr	r1, [r2, #8]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
  };
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
  }
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 128;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	425b      	negs	r3, r3
 800169a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 256;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
      huart(&huart6), rind(0), twind(0), tfind(0){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <_ZN13STM32HardwareC1Ev+0x34>)
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    }
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000224 	.word	0x20000224

080016e4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f804 	bl	80016fa <_ZN13STM32Hardware10reset_rbufEv>
    }
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	4619      	mov	r1, r3
 800170e:	f006 f92b 	bl	8007968 <HAL_UART_Receive_DMA>
    }
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZN13STM32Hardware4readEv>:

    int read(){
 800171a:	b590      	push	{r4, r7, lr}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa9 	bl	8001686 <_ZN13STM32Hardware10getRdmaIndEv>
 8001734:	4603      	mov	r3, r0
 8001736:	429c      	cmp	r4, r3
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d012      	beq.n	800176a <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	791b      	ldrb	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
      return c;
 800176a:	68fb      	ldr	r3, [r7, #12]
    }
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}

08001774 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <_ZN13STM32Hardware5flushEv+0x24>
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <_ZN13STM32Hardware5flushEv+0xb0>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f083 0301 	eor.w	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_ZN13STM32Hardware5flushEv+0x24>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <_ZN13STM32Hardware5flushEv+0x26>
 8001798:	2300      	movs	r3, #0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d03d      	beq.n	800181a <_ZN13STM32Hardware5flushEv+0xa6>
        mutex = true;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <_ZN13STM32Hardware5flushEv+0xb0>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d02f      	beq.n	8001814 <_ZN13STM32Hardware5flushEv+0xa0>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d20a      	bcs.n	80017da <_ZN13STM32Hardware5flushEv+0x66>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	e006      	b.n	80017e8 <_ZN13STM32Hardware5flushEv+0x74>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80017f4:	3388      	adds	r3, #136	; 0x88
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	89fa      	ldrh	r2, [r7, #14]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f006 f837 	bl	8007870 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	4413      	add	r3, r2
 800180c:	b2da      	uxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        }
        mutex = false;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <_ZN13STM32Hardware5flushEv+0xb0>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
      }
    }
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000a0 	.word	0x200000a0

08001828 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]


      int n = length;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183e:	bfa8      	it	ge
 8001840:	f44f 7380 	movge.w	r3, #256	; 0x100
 8001844:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800184c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4293      	cmp	r3, r2
 8001854:	bf28      	it	cs
 8001856:	4613      	movcs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001860:	3388      	adds	r3, #136	; 0x88
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f008 fb08 	bl	8009e80 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

      if(n != n_tail){
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d00b      	beq.n	80018a2 <_ZN13STM32Hardware5writeEPhi+0x7a>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	18d1      	adds	r1, r2, r3
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	461a      	mov	r2, r3
 800189e:	f008 faef 	bl	8009e80 <memcpy>
      }

      flush();
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff ff66 	bl	8001774 <_ZN13STM32Hardware5flushEv>
    }
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick(); }
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	f003 f832 	bl	8004920 <HAL_GetTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <_ZN7EncoderC1Ev>:
  Encoder(){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <_ZN7EncoderC1Ev+0x30>)
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a08      	ldr	r2, [pc, #32]	; (80018fc <_ZN7EncoderC1Ev+0x34>)
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <_ZN7EncoderC1Ev+0x38>)
 80018e0:	619a      	str	r2, [r3, #24]
    timer_ = NULL;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
  }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	00012110 	.word	0x00012110
 80018fc:	40490fd0 	.word	0x40490fd0
 8001900:	3f40ff97 	.word	0x3f40ff97

08001904 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe ff9e 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3308      	adds	r3, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f83f 	bl	80009a8 <_ZN3ros4TimeC1Ev>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800192e:	611a      	str	r2, [r3, #16]
    {
    }
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800a574 	.word	0x0800a574
 8001940:	0800a128 	.word	0x0800a128

08001944 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	b2ca      	uxtb	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0a19      	lsrs	r1, r3, #8
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0c19      	lsrs	r1, r3, #16
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3302      	adds	r3, #2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b2ca      	uxtb	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0e19      	lsrs	r1, r3, #24
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3303      	adds	r3, #3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2ca      	uxtb	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a19      	lsrs	r1, r3, #8
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	b2ca      	uxtb	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	0c19      	lsrs	r1, r3, #16
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3302      	adds	r3, #2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0e19      	lsrs	r1, r3, #24
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3303      	adds	r3, #3
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3304      	adds	r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a19      	lsrs	r1, r3, #8
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	0c19      	lsrs	r1, r3, #16
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2ca      	uxtb	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0e19      	lsrs	r1, r3, #24
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3303      	adds	r3, #3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fbff 	bl	8000238 <strlen>
 8001a3a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fc2e 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	18d0      	adds	r0, r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f008 fa0f 	bl	8009e80 <memcpy>
      offset += length_frame_id;
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	3301      	adds	r3, #1
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	3302      	adds	r3, #2
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	440b      	add	r3, r1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	3301      	adds	r3, #1
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	440b      	add	r3, r1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3302      	adds	r3, #2
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	440b      	add	r3, r1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	3301      	adds	r3, #1
 8001b44:	6839      	ldr	r1, [r7, #0]
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	440b      	add	r3, r1
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3304      	adds	r3, #4
 8001b82:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	441a      	add	r2, r3
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fba6 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d20c      	bcs.n	8001bc6 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	440b      	add	r3, r1
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e7ec      	b.n	8001ba0 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
     return offset;
 8001bea:	693b      	ldr	r3, [r7, #16]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	0800a230 	.word	0x0800a230

08001c10 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	0800a240 	.word	0x0800a240

08001c2c <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fe0a 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    {
    }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0800a55c 	.word	0x0800a55c

08001c68 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c82:	eeb0 0a67 	vmov.f32	s0, s15
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7fe fd16 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f7fe fd07 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	441a      	add	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7fe fcf8 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	441a      	add	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f7fe fd4b 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	441a      	add	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f7fe fd3e 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	330c      	adds	r3, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f7fe fd31 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d36:	68fb      	ldr	r3, [r7, #12]
    }
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	0800a264 	.word	0x0800a264

08001d5c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	0800a278 	.word	0x0800a278

08001d78 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fd64 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
    {
    }
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800a544 	.word	0x0800a544

08001dbc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	441a      	add	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe fc6c 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001df4:	eeb0 0a67 	vmov.f32	s0, s15
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f7fe fc5d 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7fe fc4e 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e30:	eeb0 0a67 	vmov.f32	s0, s15
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7fe fc3f 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e42:	68fb      	ldr	r3, [r7, #12]
    }
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7fe fc92 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3308      	adds	r3, #8
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7fe fc85 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	441a      	add	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	330c      	adds	r3, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7fe fc78 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3310      	adds	r3, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f7fe fc6b 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
     return offset;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	0800a29c 	.word	0x0800a29c

08001ee8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0800a2b8 	.word	0x0800a2b8

08001f04 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fc9e 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8001f14:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe84 	bl	8001c2c <_ZN13geometry_msgs5PointC1Ev>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3314      	adds	r3, #20
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff25 	bl	8001d78 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	0800a52c 	.word	0x0800a52c

08001f3c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	1d18      	adds	r0, r3, #4
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7ff fe87 	bl	8001c68 <_ZNK13geometry_msgs5Point9serializeEPh>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f103 0014 	add.w	r0, r3, #20
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7ff ff24 	bl	8001dbc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    }
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1d18      	adds	r0, r3, #4
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7ff fe9b 	bl	8001cda <_ZN13geometry_msgs5Point11deserializeEPh>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 0014 	add.w	r0, r3, #20
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7ff ff47 	bl	8001e4c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	0800a2dc 	.word	0x0800a2dc

08001fec <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	0800a2f0 	.word	0x0800a2f0

08002008 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fc1c 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff6e 	bl	8001f04 <_ZN13geometry_msgs4PoseC1Ev>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800202e:	2323      	movs	r3, #35	; 0x23
 8002030:	2b00      	cmp	r3, #0
 8002032:	db05      	blt.n	8002040 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	6011      	str	r1, [r2, #0]
 800203a:	3204      	adds	r2, #4
 800203c:	3b01      	subs	r3, #1
 800203e:	e7f7      	b.n	8002030 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	0800a514 	.word	0x0800a514

08002050 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1d18      	adds	r0, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7ff ff67 	bl	8001f3c <_ZNK13geometry_msgs4Pose9serializeEPh>
 800206e:	4602      	mov	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b23      	cmp	r3, #35	; 0x23
 800207e:	d817      	bhi.n	80020b0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	18d1      	adds	r1, r2, r3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	330a      	adds	r3, #10
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eeb0 0a67 	vmov.f32	s0, s15
 800209a:	4608      	mov	r0, r1
 800209c:	f7fe fb0c 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	e7e4      	b.n	800207a <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 80020b0:	68fb      	ldr	r3, [r7, #12]
    }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1d18      	adds	r0, r3, #4
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7ff ff57 	bl	8001f86 <_ZN13geometry_msgs4Pose11deserializeEPh>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b23      	cmp	r3, #35	; 0x23
 80020e8:	d813      	bhi.n	8002112 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	18d0      	adds	r0, r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	330a      	adds	r3, #10
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fb47 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	e7e8      	b.n	80020e4 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8002112:	68fb      	ldr	r3, [r7, #12]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	0800a314 	.word	0x0800a314

08002138 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	0800a338 	.word	0x0800a338

08002154 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fb76 	bl	8000850 <_ZN3ros3MsgC1Ev>
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    {
    }
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	0800a4fc 	.word	0x0800a4fc

08002190 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	441a      	add	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021aa:	eeb0 0a67 	vmov.f32	s0, s15
 80021ae:	4610      	mov	r0, r2
 80021b0:	f7fe fa82 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	4610      	mov	r0, r2
 80021ce:	f7fe fa73 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	441a      	add	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7fe fa64 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80021f8:	68fb      	ldr	r3, [r7, #12]
    }
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f7fe fab7 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	441a      	add	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3308      	adds	r3, #8
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe faaa 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	441a      	add	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	330c      	adds	r3, #12
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe fa9d 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
     return offset;
 800225e:	68fb      	ldr	r3, [r7, #12]
    }
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	0800a35c 	.word	0x0800a35c

08002284 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	0800a278 	.word	0x0800a278

080022a0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fad0 	bl	8000850 <_ZN3ros3MsgC1Ev>
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff4a 	bl	8002154 <_ZN13geometry_msgs7Vector3C1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3314      	adds	r3, #20
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff45 	bl	8002154 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	0800a4e4 	.word	0x0800a4e4

080022d8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1d18      	adds	r0, r3, #4
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7ff ff4d 	bl	8002190 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f103 0014 	add.w	r0, r3, #20
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7ff ff40 	bl	8002190 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
      return offset;
 8002318:	68fb      	ldr	r3, [r7, #12]
    }
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4413      	add	r3, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7ff ff61 	bl	8002202 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0014 	add.w	r0, r3, #20
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff ff54 	bl	8002202 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
     return offset;
 8002362:	68fb      	ldr	r3, [r7, #12]
    }
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	0800a374 	.word	0x0800a374

08002388 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	0800a388 	.word	0x0800a388

080023a4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fa4e 	bl	8000850 <_ZN3ros3MsgC1Ev>
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff6e 	bl	80022a0 <_ZN13geometry_msgs5TwistC1Ev>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80023ca:	2323      	movs	r3, #35	; 0x23
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db05      	blt.n	80023dc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 80023d0:	f04f 0100 	mov.w	r1, #0
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	3204      	adds	r2, #4
 80023d8:	3b01      	subs	r3, #1
 80023da:	e7f7      	b.n	80023cc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800a4cc 	.word	0x0800a4cc

080023ec <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	1d18      	adds	r0, r3, #4
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7ff ff67 	bl	80022d8 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b23      	cmp	r3, #35	; 0x23
 800241a:	d816      	bhi.n	800244a <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	18d1      	adds	r1, r2, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	330a      	adds	r3, #10
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	4608      	mov	r0, r1
 8002436:	f7fe f93f 	bl	80006b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	e7e5      	b.n	8002416 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 800244a:	68fb      	ldr	r3, [r7, #12]
    }
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1d18      	adds	r0, r3, #4
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7ff ff58 	bl	8002322 <_ZN13geometry_msgs5Twist11deserializeEPh>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b23      	cmp	r3, #35	; 0x23
 8002482:	d812      	bhi.n	80024aa <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	18d0      	adds	r0, r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	330a      	adds	r3, #10
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	4619      	mov	r1, r3
 8002496:	f7fe f97b 	bl	8000790 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	e7e9      	b.n	800247e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 80024aa:	68fb      	ldr	r3, [r7, #12]
    }
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	0800a3ac 	.word	0x0800a3ac

080024d0 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	0800a3d0 	.word	0x0800a3d0

080024ec <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f9aa 	bl	8000850 <_ZN3ros3MsgC1Ev>
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f9fc 	bl	8001904 <_ZN8std_msgs6HeaderC1Ev>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	331c      	adds	r3, #28
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fd76 	bl	8002008 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	33d8      	adds	r3, #216	; 0xd8
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff3f 	bl	80023a4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0800a4b4 	.word	0x0800a4b4
 8002534:	0800a128 	.word	0x0800a128

08002538 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1d18      	adds	r0, r3, #4
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7ff f9f7 	bl	8001944 <_ZNK8std_msgs6Header9serializeEPh>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd fe68 	bl	8000238 <strlen>
 8002568:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fe97 	bl	80032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3304      	adds	r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	18d0      	adds	r0, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	4619      	mov	r1, r3
 800258c:	f007 fc78 	bl	8009e80 <memcpy>
      offset += length_child_frame_id;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 001c 	add.w	r0, r3, #28
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7ff fd53 	bl	8002050 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4413      	add	r3, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff ff14 	bl	80023ec <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
      return offset;
 80025cc:	68fb      	ldr	r3, [r7, #12]
    }
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1d18      	adds	r0, r3, #4
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7ff fa40 	bl	8001a74 <_ZN8std_msgs6Header11deserializeEPh>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	441a      	add	r2, r3
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fe6a 	bl	80032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3304      	adds	r3, #4
 8002612:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d20c      	bcs.n	800263e <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	441a      	add	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3b01      	subs	r3, #1
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	440b      	add	r3, r1
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e7ec      	b.n	8002618 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	3b01      	subs	r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3b01      	subs	r3, #1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f103 001c 	add.w	r0, r3, #28
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f7ff fd23 	bl	80020ba <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff fee3 	bl	8002454 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
     return offset;
 8002696:	693b      	ldr	r3, [r7, #16]
    }
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	0800a3f4 	.word	0x0800a3f4

080026bc <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	0800a408 	.word	0x0800a408

080026d8 <_ZN12OdometryCalcC1E7EncoderS0_>:
    odometry_.twist.twist.linear.x = 0;

    kBaseline = 0.35; //in meters
  }

  OdometryCalc(Encoder left, Encoder right){
 80026d8:	b084      	sub	sp, #16
 80026da:	b5b0      	push	{r4, r5, r7, lr}
 80026dc:	b090      	sub	sp, #64	; 0x40
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80026e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f8eb 	bl	80018c8 <_ZN7EncoderC1Ev>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	331c      	adds	r3, #28
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f8e6 	bl	80018c8 <_ZN7EncoderC1Ev>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	333c      	adds	r3, #60	; 0x3c
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fef3 	bl	80024ec <_ZN8nav_msgs8OdometryC1Ev>
    Encoder left_encoder_ = left;
 8002706:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800270a:	f107 0554 	add.w	r5, r7, #84	; 0x54
 800270e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    Encoder right_encoder_ = right;
 800271a:	f107 0408 	add.w	r4, r7, #8
 800271e:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8002722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800272a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	3740      	adds	r7, #64	; 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800273a:	b004      	add	sp, #16
 800273c:	4770      	bx	lr

0800273e <_ZN3ros3MsgaSERKS0_>:
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_ZN8std_msgs6HeaderaSERKS0_>:
  class Header : public ros::Msg
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ffe9 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	3308      	adds	r3, #8
 800277a:	3208      	adds	r2, #8
 800277c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002780:	e883 0003 	stmia.w	r3, {r0, r1}
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZN13geometry_msgs5PointaSERKS0_>:
  class Point : public ros::Msg
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffc9 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_ZN13geometry_msgs10QuaternionaSERKS0_>:
  class Quaternion : public ros::Msg
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ffad 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZN13geometry_msgs4PoseaSERKS0_>:
  class Pose : public ros::Msg
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff8d 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	1d1a      	adds	r2, r3, #4
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7ff ffb1 	bl	8002796 <_ZN13geometry_msgs5PointaSERKS0_>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0214 	add.w	r2, r3, #20
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	3314      	adds	r3, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7ff ffc4 	bl	80027ce <_ZN13geometry_msgs10QuaternionaSERKS0_>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN13geometry_msgs18PoseWithCovarianceaSERKS0_>:
  class PoseWithCovariance : public ros::Msg
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff6c 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1d1a      	adds	r2, r3, #4
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3304      	adds	r3, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff ffcc 	bl	800280e <_ZN13geometry_msgs4PoseaSERKS0_>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800287c:	2223      	movs	r2, #35	; 0x23
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	332c      	adds	r3, #44	; 0x2c
 8002882:	2a00      	cmp	r2, #0
 8002884:	db05      	blt.n	8002892 <_ZN13geometry_msgs18PoseWithCovarianceaSERKS0_+0x42>
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	6008      	str	r0, [r1, #0]
 800288a:	3104      	adds	r1, #4
 800288c:	3304      	adds	r3, #4
 800288e:	3a01      	subs	r2, #1
 8002890:	e7f7      	b.n	8002882 <_ZN13geometry_msgs18PoseWithCovarianceaSERKS0_+0x32>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_ZN13geometry_msgs7Vector3aSERKS0_>:
  class Vector3 : public ros::Msg
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff46 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZN13geometry_msgs5TwistaSERKS0_>:
  class Twist : public ros::Msg
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff2a 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1d1a      	adds	r2, r3, #4
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3304      	adds	r3, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7ff ffd1 	bl	800289c <_ZN13geometry_msgs7Vector3aSERKS0_>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f103 0214 	add.w	r2, r3, #20
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f7ff ffc8 	bl	800289c <_ZN13geometry_msgs7Vector3aSERKS0_>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN13geometry_msgs19TwistWithCovarianceaSERKS0_>:
  class TwistWithCovariance : public ros::Msg
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff09 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7ff ffcc 	bl	80028d4 <_ZN13geometry_msgs5TwistaSERKS0_>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002942:	2223      	movs	r2, #35	; 0x23
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	3328      	adds	r3, #40	; 0x28
 8002948:	2a00      	cmp	r2, #0
 800294a:	db05      	blt.n	8002958 <_ZN13geometry_msgs19TwistWithCovarianceaSERKS0_+0x42>
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	6008      	str	r0, [r1, #0]
 8002950:	3104      	adds	r1, #4
 8002952:	3304      	adds	r3, #4
 8002954:	3a01      	subs	r2, #1
 8002956:	e7f7      	b.n	8002948 <_ZN13geometry_msgs19TwistWithCovarianceaSERKS0_+0x32>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_ZN8nav_msgs8OdometryaSERKS0_>:
  class Odometry : public ros::Msg
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fee3 	bl	800273e <_ZN3ros3MsgaSERKS0_>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f7ff fee7 	bl	8002756 <_ZN8std_msgs6HeaderaSERKS0_>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 021c 	add.w	r2, r3, #28
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	331c      	adds	r3, #28
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7ff ff57 	bl	8002850 <_ZN13geometry_msgs18PoseWithCovarianceaSERKS0_>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	33d8      	adds	r3, #216	; 0xd8
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f7ff ffb1 	bl	8002916 <_ZN13geometry_msgs19TwistWithCovarianceaSERKS0_>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80029c4:	f001 ff5b 	bl	800487e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80029c8:	f000 f85e 	bl	8002a88 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80029cc:	f000 fb4e 	bl	800306c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 80029d0:	f000 fb0a 	bl	8002fe8 <_ZL11MX_DMA_Initv>
	MX_TIM2_Init();
 80029d4:	f000 f8e4 	bl	8002ba0 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80029d8:	f000 f940 	bl	8002c5c <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 80029dc:	f000 f99c 	bl	8002d18 <_ZL12MX_TIM4_Initv>
	MX_TIM5_Init();
 80029e0:	f000 fa3a 	bl	8002e58 <_ZL12MX_TIM5_Initv>
	MX_USART3_UART_Init();
 80029e4:	f000 fa98 	bl	8002f18 <_ZL19MX_USART3_UART_Initv>
	MX_USART6_UART_Init();
 80029e8:	f000 faca 	bl	8002f80 <_ZL19MX_USART6_UART_Initv>
	/* USER CODE BEGIN 2 */

	nh.initNode();
 80029ec:	481c      	ldr	r0, [pc, #112]	; (8002a60 <main+0xa0>)
 80029ee:	f000 fd2d 	bl	800344c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 80029f2:	491c      	ldr	r1, [pc, #112]	; (8002a64 <main+0xa4>)
 80029f4:	481a      	ldr	r0, [pc, #104]	; (8002a60 <main+0xa0>)
 80029f6:	f000 fd46 	bl	8003486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(odom_pub);
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <main+0xa8>)
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <main+0xa0>)
 80029fe:	f000 fd42 	bl	8003486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	str_msg.data = hello;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <main+0xac>)
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <main+0xb0>)
 8002a06:	605a      	str	r2, [r3, #4]

	left_encoder.Setup();
 8002a08:	481a      	ldr	r0, [pc, #104]	; (8002a74 <main+0xb4>)
 8002a0a:	f7fd fde3 	bl	80005d4 <_ZN7Encoder5SetupEv>
	right_encoder.Setup();
 8002a0e:	481a      	ldr	r0, [pc, #104]	; (8002a78 <main+0xb8>)
 8002a10:	f7fd fde0 	bl	80005d4 <_ZN7Encoder5SetupEv>


	odom.right_encoder_ = right_encoder;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <main+0xbc>)
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <main+0xb8>)
 8002a18:	f103 041c 	add.w	r4, r3, #28
 8002a1c:	4615      	mov	r5, r2
 8002a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	odom.left_encoder_ = left_encoder;
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <main+0xbc>)
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <main+0xb4>)
 8002a2e:	4614      	mov	r4, r2
 8002a30:	461d      	mov	r5, r3
 8002a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_TIM_GET_COUNTER(left_encoder.timer_);
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <main+0xb4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		odom.OdometryUpdateMessage();
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <main+0xbc>)
 8002a48:	f001 fa43 	bl	8003ed2 <_ZN12OdometryCalc21OdometryUpdateMessageEv>
		odometry = odom.odometry_;
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <main+0xc0>)
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <main+0xc4>)
 8002a50:	f7ff ff87 	bl	8002962 <_ZN8nav_msgs8OdometryaSERKS0_>
		odom_pub.publish(&odometry);
 8002a54:	490b      	ldr	r1, [pc, #44]	; (8002a84 <main+0xc4>)
 8002a56:	4804      	ldr	r0, [pc, #16]	; (8002a68 <main+0xa8>)
 8002a58:	f7fe fdf5 	bl	8001646 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		__HAL_TIM_GET_COUNTER(left_encoder.timer_);
 8002a5c:	e7ef      	b.n	8002a3e <main+0x7e>
 8002a5e:	bf00      	nop
 8002a60:	20000634 	.word	0x20000634
 8002a64:	20000cf8 	.word	0x20000cf8
 8002a68:	20000e9c 	.word	0x20000e9c
 8002a6c:	20000cf0 	.word	0x20000cf0
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000424 	.word	0x20000424
 8002a78:	20000440 	.word	0x20000440
 8002a7c:	2000045c 	.word	0x2000045c
 8002a80:	20000498 	.word	0x20000498
 8002a84:	20000d0c 	.word	0x20000d0c

08002a88 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0b8      	sub	sp, #224	; 0xe0
 8002a8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a92:	2234      	movs	r2, #52	; 0x34
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f007 f9fd 	bl	8009e96 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2290      	movs	r2, #144	; 0x90
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f007 f9ee 	bl	8009e96 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <_Z18SystemClock_Configv+0x110>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <_Z18SystemClock_Configv+0x110>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <_Z18SystemClock_Configv+0x110>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ad2:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <_Z18SystemClock_Configv+0x114>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <_Z18SystemClock_Configv+0x114>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <_Z18SystemClock_Configv+0x114>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aee:	2302      	movs	r3, #2
 8002af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002afa:	2310      	movs	r3, #16
 8002afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 fd82 	bl	8005614 <HAL_RCC_OscConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <_Z18SystemClock_Configv+0x9c>
		Error_Handler();
 8002b20:	f000 fbba 	bl	8003298 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b24:	230f      	movs	r3, #15
 8002b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002b42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 ffd5 	bl	8005af8 <HAL_RCC_ClockConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 8002b5e:	f000 fb9b 	bl	8003298 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8002b62:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002b66:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART6;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f98d 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <_Z18SystemClock_Configv+0x106>
		Error_Handler();
 8002b8a:	f000 fb85 	bl	8003298 <Error_Handler>
	}
}
 8002b8e:	bf00      	nop
 8002b90:	37e0      	adds	r7, #224	; 0xe0
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000

08002ba0 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f971 	bl	8009e96 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002be6:	2303      	movs	r3, #3
 8002be8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4811      	ldr	r0, [pc, #68]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c12:	f003 fdc5 	bl	80067a0 <HAL_TIM_Encoder_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <_ZL12MX_TIM2_Initv+0x8a>
		Error_Handler();
 8002c26:	f000 fb37 	bl	8003298 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002c32:	463b      	mov	r3, r7
 8002c34:	4619      	mov	r1, r3
 8002c36:	4808      	ldr	r0, [pc, #32]	; (8002c58 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c38:	f004 fd52 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 8002c4c:	f000 fb24 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200000a4 	.word	0x200000a4

08002c5c <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <_ZL12MX_TIM3_Initv+0xb8>)
 8002c7e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 39999;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c82:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002c86:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c90:	2209      	movs	r2, #9
 8002c92:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002ca0:	481b      	ldr	r0, [pc, #108]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002ca2:	f003 fd1d 	bl	80066e0 <HAL_TIM_Base_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <_ZL12MX_TIM3_Initv+0x5e>
		Error_Handler();
 8002cb6:	f000 faef 	bl	8003298 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002cc8:	f004 f86a 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <_ZL12MX_TIM3_Initv+0x84>
		Error_Handler();
 8002cdc:	f000 fadc 	bl	8003298 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4808      	ldr	r0, [pc, #32]	; (8002d10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002cee:	f004 fcf7 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <_ZL12MX_TIM3_Initv+0xaa>
		Error_Handler();
 8002d02:	f000 fac9 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200000e4 	.word	0x200000e4
 8002d14:	40000400 	.word	0x40000400

08002d18 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]
 8002d46:	615a      	str	r2, [r3, #20]
 8002d48:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <_ZL12MX_TIM4_Initv+0x13c>)
 8002d4e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002d6e:	4838      	ldr	r0, [pc, #224]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d70:	f003 fcb6 	bl	80066e0 <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <_ZL12MX_TIM4_Initv+0x70>
		Error_Handler();
 8002d84:	f000 fa88 	bl	8003298 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d92:	4619      	mov	r1, r3
 8002d94:	482e      	ldr	r0, [pc, #184]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002d96:	f004 f803 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <_ZL12MX_TIM4_Initv+0x96>
		Error_Handler();
 8002daa:	f000 fa75 	bl	8003298 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002dae:	4828      	ldr	r0, [pc, #160]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002db0:	f003 fcc1 	bl	8006736 <HAL_TIM_PWM_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <_ZL12MX_TIM4_Initv+0xb0>
		Error_Handler();
 8002dc4:	f000 fa68 	bl	8003298 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002dd0:	f107 031c 	add.w	r3, r7, #28
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	481e      	ldr	r0, [pc, #120]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002dd8:	f004 fc82 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <_ZL12MX_TIM4_Initv+0xd8>
		Error_Handler();
 8002dec:	f000 fa54 	bl	8003298 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df0:	2360      	movs	r3, #96	; 0x60
 8002df2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002e00:	463b      	mov	r3, r7
 8002e02:	2208      	movs	r2, #8
 8002e04:	4619      	mov	r1, r3
 8002e06:	4812      	ldr	r0, [pc, #72]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002e08:	f003 feb2 	bl	8006b70 <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <_ZL12MX_TIM4_Initv+0x108>
		Error_Handler();
 8002e1c:	f000 fa3c 	bl	8003298 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002e20:	463b      	mov	r3, r7
 8002e22:	220c      	movs	r2, #12
 8002e24:	4619      	mov	r1, r3
 8002e26:	480a      	ldr	r0, [pc, #40]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002e28:	f003 fea2 	bl	8006b70 <HAL_TIM_PWM_ConfigChannel>
 8002e2c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <_ZL12MX_TIM4_Initv+0x128>
		Error_Handler();
 8002e3c:	f000 fa2c 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002e40:	4803      	ldr	r0, [pc, #12]	; (8002e50 <_ZL12MX_TIM4_Initv+0x138>)
 8002e42:	f001 fa47 	bl	80042d4 <HAL_TIM_MspPostInit>

}
 8002e46:	bf00      	nop
 8002e48:	3738      	adds	r7, #56	; 0x38
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000124 	.word	0x20000124
 8002e54:	40000800 	.word	0x40000800

08002e58 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f007 f815 	bl	8009e96 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <_ZL12MX_TIM5_Initv+0xbc>)
 8002e7a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e8e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4812      	ldr	r0, [pc, #72]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002ec8:	f003 fc6a 	bl	80067a0 <HAL_TIM_Encoder_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <_ZL12MX_TIM5_Initv+0x88>
		Error_Handler();
 8002edc:	f000 f9dc 	bl	8003298 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <_ZL12MX_TIM5_Initv+0xb8>)
 8002eee:	f004 fbf7 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <_ZL12MX_TIM5_Initv+0xae>
		Error_Handler();
 8002f02:	f000 f9c9 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	3730      	adds	r7, #48	; 0x30
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000164 	.word	0x20000164
 8002f14:	40000c00 	.word	0x40000c00

08002f18 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <_ZL19MX_USART3_UART_Initv+0x64>)
 8002f20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f5c:	f004 fc3a 	bl	80077d4 <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <_ZL19MX_USART3_UART_Initv+0x5c>
		Error_Handler();
 8002f70:	f000 f992 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200001a4 	.word	0x200001a4
 8002f7c:	40004800 	.word	0x40004800

08002f80 <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <_ZL19MX_USART6_UART_Initv+0x64>)
 8002f88:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f90:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002fc2:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002fc4:	f004 fc06 	bl	80077d4 <HAL_UART_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <_ZL19MX_USART6_UART_Initv+0x5c>
		Error_Handler();
 8002fd8:	f000 f95e 	bl	8003298 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000224 	.word	0x20000224
 8002fe4:	40011400 	.word	0x40011400

08002fe8 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 8002ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 800300c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <_ZL11MX_DMA_Initv+0x80>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2100      	movs	r1, #0
 8003022:	200c      	movs	r0, #12
 8003024:	f001 fd63 	bl	8004aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003028:	200c      	movs	r0, #12
 800302a:	f001 fd7c 	bl	8004b26 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	200e      	movs	r0, #14
 8003034:	f001 fd5b 	bl	8004aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003038:	200e      	movs	r0, #14
 800303a:	f001 fd74 	bl	8004b26 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	2039      	movs	r0, #57	; 0x39
 8003044:	f001 fd53 	bl	8004aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003048:	2039      	movs	r0, #57	; 0x39
 800304a:	f001 fd6c 	bl	8004b26 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2045      	movs	r0, #69	; 0x45
 8003054:	f001 fd4b 	bl	8004aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003058:	2045      	movs	r0, #69	; 0x45
 800305a:	f001 fd64 	bl	8004b26 <HAL_NVIC_EnableIRQ>

}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800

0800306c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003082:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a4c      	ldr	r2, [pc, #304]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030b8:	f043 0320 	orr.w	r3, r3, #32
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030d0:	f043 0310 	orr.w	r3, r3, #16
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <_ZL12MX_GPIO_Initv+0x164>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, dir1_Pin | sleep2_Pin | sleep1_Pin,
 8003112:	2200      	movs	r2, #0
 8003114:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003118:	482e      	ldr	r0, [pc, #184]	; (80031d4 <_ZL12MX_GPIO_Initv+0x168>)
 800311a:	f002 fa61 	bl	80055e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003124:	482c      	ldr	r0, [pc, #176]	; (80031d8 <_ZL12MX_GPIO_Initv+0x16c>)
 8003126:	f002 fa5b 	bl	80055e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800312a:	2301      	movs	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312e:	2303      	movs	r3, #3
 8003130:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	4827      	ldr	r0, [pc, #156]	; (80031dc <_ZL12MX_GPIO_Initv+0x170>)
 800313e:	f002 f8a5 	bl	800528c <HAL_GPIO_Init>

	/*Configure GPIO pin : current1_Pin */
	GPIO_InitStruct.Pin = current1_Pin;
 8003142:	2308      	movs	r3, #8
 8003144:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(current1_GPIO_Port, &GPIO_InitStruct);
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4619      	mov	r1, r3
 8003154:	4822      	ldr	r0, [pc, #136]	; (80031e0 <_ZL12MX_GPIO_Initv+0x174>)
 8003156:	f002 f899 	bl	800528c <HAL_GPIO_Init>

	/*Configure GPIO pin : fault2_Pin */
	GPIO_InitStruct.Pin = fault2_Pin;
 800315a:	2340      	movs	r3, #64	; 0x40
 800315c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(fault2_GPIO_Port, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	481c      	ldr	r0, [pc, #112]	; (80031e0 <_ZL12MX_GPIO_Initv+0x174>)
 800316e:	f002 f88d 	bl	800528c <HAL_GPIO_Init>

	/*Configure GPIO pins : dir1_Pin sleep2_Pin sleep1_Pin */
	GPIO_InitStruct.Pin = dir1_Pin | sleep2_Pin | sleep1_Pin;
 8003172:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003176:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	2301      	movs	r3, #1
 800317a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	4619      	mov	r1, r3
 800318a:	4812      	ldr	r0, [pc, #72]	; (80031d4 <_ZL12MX_GPIO_Initv+0x168>)
 800318c:	f002 f87e 	bl	800528c <HAL_GPIO_Init>

	/*Configure GPIO pin : fault1_Pin */
	GPIO_InitStruct.Pin = fault1_Pin;
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003194:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(fault1_GPIO_Port, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	480f      	ldr	r0, [pc, #60]	; (80031e4 <_ZL12MX_GPIO_Initv+0x178>)
 80031a6:	f002 f871 	bl	800528c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	4619      	mov	r1, r3
 80031c2:	4805      	ldr	r0, [pc, #20]	; (80031d8 <_ZL12MX_GPIO_Initv+0x16c>)
 80031c4:	f002 f862 	bl	800528c <HAL_GPIO_Init>

}
 80031c8:	bf00      	nop
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40021400 	.word	0x40021400
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40021000 	.word	0x40021000

080031e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d116      	bne.n	8003228 <HAL_TIM_PeriodElapsedCallback+0x40>
		velocity_l = left_encoder.GetLinearVelocity();
 80031fa:	480e      	ldr	r0, [pc, #56]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80031fc:	f7fd fa1e 	bl	800063c <_ZN7Encoder17GetLinearVelocityEv>
 8003200:	eef0 7a40 	vmov.f32	s15, s0
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003206:	edc3 7a00 	vstr	s15, [r3]
		velocity_r = right_encoder.GetLinearVelocity();
 800320a:	480c      	ldr	r0, [pc, #48]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800320c:	f7fd fa16 	bl	800063c <_ZN7Encoder17GetLinearVelocityEv>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003216:	edc3 7a00 	vstr	s15, [r3]

//    odom.OdometryUpdateMessage();
//    odometry = odom.odometry_;
//    odom_pub.publish(&odometry);

		chatter.publish(&str_msg);
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800321c:	480a      	ldr	r0, [pc, #40]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800321e:	f7fe fa12 	bl	8001646 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003222:	480a      	ldr	r0, [pc, #40]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003224:	f000 f95f 	bl	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	}
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40000400 	.word	0x40000400
 8003234:	20000424 	.word	0x20000424
 8003238:	2000062c 	.word	0x2000062c
 800323c:	20000440 	.word	0x20000440
 8003240:	20000630 	.word	0x20000630
 8003244:	20000cf0 	.word	0x20000cf0
 8003248:	20000cf8 	.word	0x20000cf8
 800324c:	20000634 	.word	0x20000634

08003250 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <HAL_UART_TxCpltCallback+0x20>)
 800325a:	f000 fb20 	bl	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fa87 	bl	8001774 <_ZN13STM32Hardware5flushEv>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000634 	.word	0x20000634

08003274 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 800327c:	4805      	ldr	r0, [pc, #20]	; (8003294 <HAL_UART_RxCpltCallback+0x20>)
 800327e:	f000 fb0e 	bl	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003282:	4603      	mov	r3, r0
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fa38 	bl	80016fa <_ZN13STM32Hardware10reset_rbufEv>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000634 	.word	0x20000634

08003298 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d80d      	bhi.n	80032d6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	fa22 f103 	lsr.w	r1, r2, r3
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	b2ca      	uxtb	r2, r1
 80032cc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e7ee      	b.n	80032b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d811      	bhi.n	8003320 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	440a      	add	r2, r1
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	4611      	mov	r1, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	00d2      	lsls	r2, r2, #3
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e7ea      	b.n	80032f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	0800a58c 	.word	0x0800a58c

0800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ffe8 	bl	800332c <_ZN3ros15NodeHandleBase_C1Ev>
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f9a0 	bl	80016ac <_ZN13STM32HardwareC1Ev>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fe8a 	bl	8001094 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b18      	cmp	r3, #24
 8003388:	d80b      	bhi.n	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e7f0      	b.n	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b18      	cmp	r3, #24
 80033aa:	d80a      	bhi.n	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 80033b4:	2100      	movs	r1, #0
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	3301      	adds	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e7f1      	b.n	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d20a      	bcs.n	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e7f0      	b.n	80033c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ee:	d20a      	bcs.n	8003406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	e7f0      	b.n	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c3 2698 	str.w	r2, [r3, #1688]	; 0x698
    req_param_resp.ints = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
    req_param_resp.floats_length = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    req_param_resp.floats = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
    req_param_resp.ints_length = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c3 2698 	str.w	r2, [r3, #1688]	; 0x698
    req_param_resp.ints = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

    spin_timeout_ = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  }
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0800a4a0 	.word	0x0800a4a0

0800344c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe f943 	bl	80016e4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
    bytes_ = 0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
    index_ = 0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
    topic_ = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
  };
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b18      	cmp	r3, #24
 8003498:	dc1e      	bgt.n	80034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d111      	bne.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	60da      	str	r2, [r3, #12]
        return true;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e004      	b.n	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e7dd      	b.n	8003494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80034d8:	2300      	movs	r3, #0
  }
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f9dc 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 80034f8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003508:	4293      	cmp	r3, r2
 800350a:	d903      	bls.n	8003514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
    if (mode_ != MODE_FIRST_FF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 368c 	ldr.w	r3, [r3, #1676]	; 0x68c
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	429a      	cmp	r2, r3
 8003528:	d903      	bls.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
      if (spin_timeout_ > 0)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d014      	beq.n	8003566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe f9b5 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003552:	429a      	cmp	r2, r3
 8003554:	bf8c      	ite	hi
 8003556:	2301      	movhi	r3, #1
 8003558:	2300      	movls	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003560:	f06f 0301 	mvn.w	r3, #1
 8003564:	e197      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe f8d5 	bl	800171a <_ZN13STM32Hardware4readEv>
 8003570:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f2c0 8177 	blt.w	8003868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 267c 	ldr.w	r2, [r3, #1660]	; 0x67c
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003590:	2b07      	cmp	r3, #7
 8003592:	d11e      	bne.n	80035d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f8c2 1678 	str.w	r1, [r2, #1656]	; 0x678
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	b2d1      	uxtb	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	460a      	mov	r2, r1
 80035ac:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
        bytes_--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1b4      	bne.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2208      	movs	r2, #8
 80035cc:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 80035d0:	e7af      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d128      	bne.n	800362e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2bff      	cmp	r3, #255	; 0xff
 80035e0:	d10d      	bne.n	80035fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f103 0214 	add.w	r2, r3, #20
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 80035fc:	e799      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe f954 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	bf8c      	ite	hi
 8003616:	2301      	movhi	r3, #1
 8003618:	2300      	movls	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d088      	beq.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
          return SPIN_TIMEOUT;
 8003628:	f06f 0301 	mvn.w	r3, #1
 800362c:	e133      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d11b      	bne.n	8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2bfe      	cmp	r3, #254	; 0xfe
 800363c:	d107      	bne.n	800364e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 800364c:	e771      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
          if (configured_ == false)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f43f af65 	beq.w	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f924 	bl	80038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800366e:	e760      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003676:	2b02      	cmp	r3, #2
 8003678:	d113      	bne.n	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        index_ = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        checksum_ = data;               /* first byte for calculating size checksum */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 80036a0:	e747      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d110      	bne.n	80036ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 2670 	ldr.w	r2, [r3, #1648]	; 0x670
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        mode_++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 80036cc:	e731      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d116      	bne.n	8003706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 80036de:	425a      	negs	r2, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	bf58      	it	pl
 80036e6:	4253      	negpl	r3, r2
 80036e8:	2bff      	cmp	r3, #255	; 0xff
 80036ea:	d107      	bne.n	80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 80036fa:	e71a      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8003704:	e715      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10f      	bne.n	8003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        checksum_ = data;               /* first byte included in checksum */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 800372e:	e700      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003736:	2b06      	cmp	r3, #6
 8003738:	d117      	bne.n	800376a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 2674 	ldr.w	r2, [r3, #1652]	; 0x674
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_ = MODE_MESSAGE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2207      	movs	r2, #7
 8003750:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        if (bytes_ == 0)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f aee9 	bne.w	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2208      	movs	r2, #8
 8003764:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8003768:	e6e3      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8003770:	2b08      	cmp	r3, #8
 8003772:	f47f aede 	bne.w	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        if ((checksum_ % 256) == 255)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 8003784:	425a      	negs	r2, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	bf58      	it	pl
 800378c:	4253      	negpl	r3, r2
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	f47f aecf 	bne.w	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800379a:	2b00      	cmp	r3, #0
 800379c:	d110      	bne.n	80037c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f889 	bl	80038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8a4 	bl	80038f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
            last_sync_receive_time = c_time;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            return SPIN_ERR;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037be:	e06a      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80037c6:	2b0a      	cmp	r3, #10
 80037c8:	d107      	bne.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f96c 	bl	8003ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037d8:	e6ab      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d10e      	bne.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fd fd83 	bl	80012fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8003800:	e697      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8003808:	2b0b      	cmp	r3, #11
 800380a:	d104      	bne.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8003814:	e68d      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800381c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f43f ae81 	beq.w	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8003836:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003840:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800384a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	f502 72d2 	add.w	r2, r2, #420	; 0x1a4
 8003862:	4611      	mov	r1, r2
 8003864:	4798      	blx	r3
    while (true)
 8003866:	e664      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003868:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003882:	4293      	cmp	r3, r2
 8003884:	d906      	bls.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f815 	bl	80038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
    return SPIN_OK;
 8003894:	2300      	movs	r3, #0
  }
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
  }
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd f882 	bl	80009cc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f107 020c 	add.w	r2, r7, #12
 80038d2:	210a      	movs	r1, #10
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
    rt_time = hardware_.time();
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd ffe7 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  }
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80038f2:	b590      	push	{r4, r7, lr}
 80038f4:	b08b      	sub	sp, #44	; 0x2c
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd f954 	bl	8000bac <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b18      	cmp	r3, #24
 800390c:	dc63      	bgt.n	80039d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d056      	beq.n	80039ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	b29b      	uxth	r3, r3
 8003932:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4608      	mov	r0, r1
 800396e:	4798      	blx	r3
 8003970:	4603      	mov	r3, r0
 8003972:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	4798      	blx	r3
 800399e:	4603      	mov	r3, r0
 80039a0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681c      	ldr	r4, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fe56 	bl	800166e <_ZN3ros9Publisher15getEndpointTypeEv>
 80039c2:	4601      	mov	r1, r0
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	461a      	mov	r2, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	3301      	adds	r3, #1
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
 80039d4:	e798      	b.n	8003908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	2b18      	cmp	r3, #24
 80039de:	dc5f      	bgt.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 80039e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d053      	beq.n	8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 80039f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4798      	blx	r3
 8003a34:	4603      	mov	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	4798      	blx	r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a62:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681c      	ldr	r4, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8003a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4798      	blx	r3
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	461a      	mov	r2, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e79c      	b.n	80039da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
  }
 8003aa8:	bf00      	nop
 8003aaa:	372c      	adds	r7, #44	; 0x2c
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}

08003ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc ff84 	bl	80009cc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fef1 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc ffe3 	bl	8000aac <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	4915      	ldr	r1, [pc, #84]	; (8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003aec:	fba1 1303 	umull	r1, r3, r1, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003afc:	fba3 0302 	umull	r0, r3, r3, r2
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b06:	fb00 f303 	mul.w	r3, r0, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	440b      	add	r3, r1
 8003b14:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b16:	f107 0308 	add.w	r3, r7, #8
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8a4 	bl	8003c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd fec1 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
  }
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	10624dd3 	.word	0x10624dd3
 8003b44:	000f4240 	.word	0x000f4240

08003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b63      	cmp	r3, #99	; 0x63
 8003b58:	dd09      	ble.n	8003b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e077      	b.n	8003c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	f502 7269 	add.w	r2, r2, #932	; 0x3a4
 8003b7a:	3207      	adds	r2, #7
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
 8003b82:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
    message_out[1] = PROTOCOL_VER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22fe      	movs	r2, #254	; 0xfe
 8003b90:	f883 23a5 	strb.w	r2, [r3, #933]	; 0x3a5
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	121b      	asrs	r3, r3, #8
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 23a6 	ldrb.w	r2, [r3, #934]	; 0x3a6
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 8003bb8:	4413      	add	r3, r2
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	121b      	asrs	r3, r3, #8
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa

    /* calculate checksum */
    int chk = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003be2:	2305      	movs	r3, #5
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3307      	adds	r3, #7
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	da0d      	bge.n	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e7ec      	b.n	8003be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3307      	adds	r3, #7
 8003c10:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	425a      	negs	r2, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	bf58      	it	pl
 8003c1c:	4253      	negpl	r3, r2
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1c59      	adds	r1, r3, #1
 8003c24:	6179      	str	r1, [r7, #20]
 8003c26:	43d2      	mvns	r2, r2
 8003c28:	b2d1      	uxtb	r1, r2
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	460a      	mov	r2, r1
 8003c30:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

    if (l <= OUTPUT_SIZE)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3a:	dc0a      	bgt.n	8003c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1d18      	adds	r0, r3, #4
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fd fded 	bl	8001828 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e005      	b.n	8003c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c52:	4905      	ldr	r1, [pc, #20]	; (8003c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f849 	bl	8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0800a42c 	.word	0x0800a42c

08003c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd fe18 	bl	80018b0 <_ZN13STM32Hardware4timeEv>
 8003c80:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	1e5a      	subs	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cac:	fb00 f303 	mul.w	r3, r0, r3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	1aca      	subs	r2, r1, r3
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003cbc:	4413      	add	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 fd7e 	bl	80047d4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	10624dd3 	.word	0x10624dd3
 8003ce4:	000f4240 	.word	0x000f4240
 8003ce8:	3b9aca00 	.word	0x3b9aca00

08003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f804 	bl	8003d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	460b      	mov	r3, r1
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd f90a 	bl	8000f34 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f107 0214 	add.w	r2, r7, #20
 8003d32:	2107      	movs	r1, #7
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	4798      	blx	r3
  }
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_Z41__static_initialization_and_destruction_0ii>:
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	b08f      	sub	sp, #60	; 0x3c
 8003d44:	af0c      	add	r7, sp, #48	; 0x30
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d136      	bne.n	8003dbe <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d131      	bne.n	8003dbe <_Z41__static_initialization_and_destruction_0ii+0x7e>
Encoder left_encoder = Encoder(&htim2);
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d5c:	481b      	ldr	r0, [pc, #108]	; (8003dcc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003d5e:	f7fc fc1b 	bl	8000598 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
Encoder right_encoder = Encoder(&htim5);
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003d64:	481b      	ldr	r0, [pc, #108]	; (8003dd4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003d66:	f7fc fc17 	bl	8000598 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
OdometryCalc odom = OdometryCalc(left_encoder, right_encoder);
 8003d6a:	4e18      	ldr	r6, [pc, #96]	; (8003dcc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003d6e:	ac04      	add	r4, sp, #16
 8003d70:	461d      	mov	r5, r3
 8003d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d7e:	466c      	mov	r4, sp
 8003d80:	f106 030c 	add.w	r3, r6, #12
 8003d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003d8a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003d8e:	4812      	ldr	r0, [pc, #72]	; (8003dd8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003d90:	f7fe fca2 	bl	80026d8 <_ZN12OdometryCalcC1E7EncoderS0_>
ros::NodeHandle nh;
 8003d94:	4811      	ldr	r0, [pc, #68]	; (8003ddc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003d96:	f7ff fad9 	bl	800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8003d9a:	4811      	ldr	r0, [pc, #68]	; (8003de0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003d9c:	f7fc fd68 	bl	8000870 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8003da0:	2300      	movs	r3, #0
 8003da2:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003da4:	490f      	ldr	r1, [pc, #60]	; (8003de4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003da6:	4810      	ldr	r0, [pc, #64]	; (8003de8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003da8:	f7fd fc36 	bl	8001618 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odometry;
 8003dac:	480f      	ldr	r0, [pc, #60]	; (8003dec <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003dae:	f7fe fb9d 	bl	80024ec <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher odom_pub("odom_pub", &odometry);
 8003db2:	2300      	movs	r3, #0
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003db6:	490e      	ldr	r1, [pc, #56]	; (8003df0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003db8:	480e      	ldr	r0, [pc, #56]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003dba:	f7fd fc2d 	bl	8001618 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200000a4 	.word	0x200000a4
 8003dcc:	20000424 	.word	0x20000424
 8003dd0:	20000164 	.word	0x20000164
 8003dd4:	20000440 	.word	0x20000440
 8003dd8:	2000045c 	.word	0x2000045c
 8003ddc:	20000634 	.word	0x20000634
 8003de0:	20000cf0 	.word	0x20000cf0
 8003de4:	0800a468 	.word	0x0800a468
 8003de8:	20000cf8 	.word	0x20000cf8
 8003dec:	20000d0c 	.word	0x20000d0c
 8003df0:	0800a470 	.word	0x0800a470
 8003df4:	20000e9c 	.word	0x20000e9c

08003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
  };
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_GLOBAL__sub_I_htim2>:
 8003e12:	b580      	push	{r7, lr}
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7ff ff90 	bl	8003d40 <_Z41__static_initialization_and_destruction_0ii>
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e30:	f004 fcba 	bl	80087a8 <cosf>
 8003e34:	eef0 7a40 	vmov.f32	s15, s0
 8003e38:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e50:	f004 fcea 	bl	8008828 <sinf>
 8003e54:	eef0 7a40 	vmov.f32	s15, s0
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	ed87 0b00 	vstr	d0, [r7]
  geometry_msgs::Quaternion q;
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7fd ff82 	bl	8001d78 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	605a      	str	r2, [r3, #4]
  q.y = 0;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  q.z = sin(yaw * 0.5);
 8003e84:	ed97 7b00 	vldr	d7, [r7]
 8003e88:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e90:	eeb0 0b47 	vmov.f64	d0, d7
 8003e94:	f004 fc4c 	bl	8008730 <sin>
 8003e98:	eeb0 7b40 	vmov.f64	d7, d0
 8003e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	edc3 7a03 	vstr	s15, [r3, #12]
  q.w = cos(yaw * 0.5);
 8003ea6:	ed97 7b00 	vldr	d7, [r7]
 8003eaa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003eae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003eb2:	eeb0 0b47 	vmov.f64	d0, d7
 8003eb6:	f004 fbff 	bl	80086b8 <cos>
 8003eba:	eeb0 7b40 	vmov.f64	d7, d0
 8003ebe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	edc3 7a04 	vstr	s15, [r3, #16]
  return q;
 8003ec8:	bf00      	nop
}
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZN12OdometryCalc21OdometryUpdateMessageEv>:
#include "odometry_calc.h"

void OdometryCalc::OdometryUpdateMessage(){
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	ed2d 8b02 	vpush	{d8}
 8003ed8:	b094      	sub	sp, #80	; 0x50
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  float left_velocity = left_encoder_.GetLinearVelocity();
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fbab 	bl	800063c <_ZN7Encoder17GetLinearVelocityEv>
 8003ee6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
  float right_velocity = right_encoder_.GetLinearVelocity();
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	331c      	adds	r3, #28
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fba4 	bl	800063c <_ZN7Encoder17GetLinearVelocityEv>
 8003ef4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

  float x = odometry_.pose.pose.position.x;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efc:	643b      	str	r3, [r7, #64]	; 0x40
  float y = odometry_.pose.pose.position.y;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c

  //verificato che delta_r == delta_l
  float delta_time = left_encoder_.current_millis_ -
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
      left_encoder_.previous_millis_;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
  float delta_time = left_encoder_.current_millis_ -
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

  // calcoli vari
  float linear_velocity = (left_velocity + right_velocity) / 2;
 8003f1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003f1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f26:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float angular_velocity;
  if (right_velocity - left_velocity == 0)
 8003f32:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	d103      	bne.n	8003f50 <_ZN12OdometryCalc21OdometryUpdateMessageEv+0x7e>
    angular_velocity = 0;
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4e:	e00c      	b.n	8003f6a <_ZN12OdometryCalc21OdometryUpdateMessageEv+0x98>
  else
    angular_velocity = (right_velocity - left_velocity) / kBaseline;
 8003f50:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8003f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f66:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  float diff = angular_velocity / delta_time;
 8003f6a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003f6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float r = (kBaseline / 2) * ((right_velocity + left_velocity) /
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8003f80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f88:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003f8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f90:	ee36 6aa7 	vadd.f32	s12, s13, s15
      (right_velocity - left_velocity));
 8003f94:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003f98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
  float r = (kBaseline / 2) * ((right_velocity + left_velocity) /
 8003fa0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float icc_x = x - r * std::sin(theta_);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb6:	f7ff ff44 	bl	8003e42 <_ZSt3sinf>
 8003fba:	eeb0 7a40 	vmov.f32	s14, s0
 8003fbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float icc_y = y + r * std::cos(theta_);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	f7ff ff21 	bl	8003e22 <_ZSt3cosf>
 8003fe0:	eeb0 7a40 	vmov.f32	s14, s0
 8003fe4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float new_x = std::cos(diff) * (x - icc_x) -
 8003ff8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003ffc:	f7ff ff11 	bl	8003e22 <_ZSt3cosf>
 8004000:	eef0 6a40 	vmov.f32	s13, s0
 8004004:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004008:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800400c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004010:	ee26 8aa7 	vmul.f32	s16, s13, s15
      std::sin(diff) * (y - icc_y) + icc_x;
 8004014:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8004018:	f7ff ff13 	bl	8003e42 <_ZSt3sinf>
 800401c:	eef0 6a40 	vmov.f32	s13, s0
 8004020:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004024:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float new_x = std::cos(diff) * (x - icc_x) -
 8004030:	ee78 7a67 	vsub.f32	s15, s16, s15
      std::sin(diff) * (y - icc_y) + icc_x;
 8004034:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800403c:	edc7 7a08 	vstr	s15, [r7, #32]
  float new_y = std::sin(diff) * (y - icc_y) +
 8004040:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8004044:	f7ff fefd 	bl	8003e42 <_ZSt3sinf>
 8004048:	eef0 6a40 	vmov.f32	s13, s0
 800404c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004050:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004058:	ee26 8aa7 	vmul.f32	s16, s13, s15
      std::cos(diff) * (y - icc_y) + icc_y;
 800405c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8004060:	f7ff fedf 	bl	8003e22 <_ZSt3cosf>
 8004064:	eef0 6a40 	vmov.f32	s13, s0
 8004068:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800406c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float new_y = std::sin(diff) * (y - icc_y) +
 8004078:	ee78 7a27 	vadd.f32	s15, s16, s15
      std::cos(diff) * (y - icc_y) + icc_y;
 800407c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004084:	edc7 7a07 	vstr	s15, [r7, #28]
  theta_ = theta_ + diff;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800408e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  geometry_msgs::Quaternion q = tf::createQuaternionFromYaw(theta_);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80040a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	eeb0 0b47 	vmov.f64	d0, d7
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fed7 	bl	8003e62 <_ZN2tfL23createQuaternionFromYawEd>

  //update msg
  odometry_.pose.pose.position.x = new_x;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	665a      	str	r2, [r3, #100]	; 0x64
  odometry_.pose.pose.position.y = new_y;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	669a      	str	r2, [r3, #104]	; 0x68
  odometry_.pose.pose.orientation.x = q.x;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	675a      	str	r2, [r3, #116]	; 0x74
  odometry_.pose.pose.orientation.y = q.y;
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	679a      	str	r2, [r3, #120]	; 0x78
  odometry_.pose.pose.orientation.z = q.z;
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c
  odometry_.pose.pose.orientation.w = q.w;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  odometry_.twist.twist.linear.x = linear_velocity;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040de:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  odometry_.twist.twist.angular.z = angular_velocity;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

  return;
 80040ea:	bf00      	nop
}
 80040ec:	3750      	adds	r7, #80	; 0x50
 80040ee:	46bd      	mov	sp, r7
 80040f0:	ecbd 8b02 	vpop	{d8}
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <HAL_MspInit+0x44>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a0e      	ldr	r2, [pc, #56]	; (800413c <HAL_MspInit+0x44>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <HAL_MspInit+0x44>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_MspInit+0x44>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <HAL_MspInit+0x44>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6453      	str	r3, [r2, #68]	; 0x44
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_MspInit+0x44>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	; 0x30
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d144      	bne.n	80041ec <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004162:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417a:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4a34      	ldr	r2, [pc, #208]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
 8004186:	4b32      	ldr	r3, [pc, #200]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a2e      	ldr	r2, [pc, #184]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041aa:	2320      	movs	r3, #32
 80041ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041ba:	2301      	movs	r3, #1
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041be:	f107 031c 	add.w	r3, r7, #28
 80041c2:	4619      	mov	r1, r3
 80041c4:	4823      	ldr	r0, [pc, #140]	; (8004254 <HAL_TIM_Encoder_MspInit+0x114>)
 80041c6:	f001 f861 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041ca:	2308      	movs	r3, #8
 80041cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ce:	2302      	movs	r3, #2
 80041d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d6:	2300      	movs	r3, #0
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041da:	2301      	movs	r3, #1
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	4619      	mov	r1, r3
 80041e4:	481c      	ldr	r0, [pc, #112]	; (8004258 <HAL_TIM_Encoder_MspInit+0x118>)
 80041e6:	f001 f851 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80041ea:	e02c      	b.n	8004246 <HAL_TIM_Encoder_MspInit+0x106>
  else if(htim_encoder->Instance==TIM5)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1a      	ldr	r2, [pc, #104]	; (800425c <HAL_TIM_Encoder_MspInit+0x11c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d127      	bne.n	8004246 <HAL_TIM_Encoder_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <HAL_TIM_Encoder_MspInit+0x110>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004226:	2303      	movs	r3, #3
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004236:	2302      	movs	r3, #2
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	4804      	ldr	r0, [pc, #16]	; (8004254 <HAL_TIM_Encoder_MspInit+0x114>)
 8004242:	f001 f823 	bl	800528c <HAL_GPIO_Init>
}
 8004246:	bf00      	nop
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	40020000 	.word	0x40020000
 8004258:	40020400 	.word	0x40020400
 800425c:	40000c00 	.word	0x40000c00

08004260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_TIM_Base_MspInit+0x68>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d114      	bne.n	800429c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800428a:	2200      	movs	r2, #0
 800428c:	2100      	movs	r1, #0
 800428e:	201d      	movs	r0, #29
 8004290:	f000 fc2d 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004294:	201d      	movs	r0, #29
 8004296:	f000 fc46 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800429a:	e010      	b.n	80042be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <HAL_TIM_Base_MspInit+0x70>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10b      	bne.n	80042be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_TIM_Base_MspInit+0x6c>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40000800 	.word	0x40000800

080042d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a11      	ldr	r2, [pc, #68]	; (8004338 <HAL_TIM_MspPostInit+0x64>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d11c      	bne.n	8004330 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_TIM_MspPostInit+0x68>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_TIM_MspPostInit+0x68>)
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_TIM_MspPostInit+0x68>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = pwm2_Pin|pwm1_Pin;
 800430e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004320:	2302      	movs	r3, #2
 8004322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	4619      	mov	r1, r3
 800432a:	4805      	ldr	r0, [pc, #20]	; (8004340 <HAL_TIM_MspPostInit+0x6c>)
 800432c:	f000 ffae 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004330:	bf00      	nop
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40000800 	.word	0x40000800
 800433c:	40023800 	.word	0x40023800
 8004340:	40020c00 	.word	0x40020c00

08004344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434c:	f107 031c 	add.w	r3, r7, #28
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a93      	ldr	r2, [pc, #588]	; (80045b0 <HAL_UART_MspInit+0x26c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f040 808e 	bne.w	8004484 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004368:	4b92      	ldr	r3, [pc, #584]	; (80045b4 <HAL_UART_MspInit+0x270>)
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	4a91      	ldr	r2, [pc, #580]	; (80045b4 <HAL_UART_MspInit+0x270>)
 800436e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004372:	6413      	str	r3, [r2, #64]	; 0x40
 8004374:	4b8f      	ldr	r3, [pc, #572]	; (80045b4 <HAL_UART_MspInit+0x270>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004380:	4b8c      	ldr	r3, [pc, #560]	; (80045b4 <HAL_UART_MspInit+0x270>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	4a8b      	ldr	r2, [pc, #556]	; (80045b4 <HAL_UART_MspInit+0x270>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	6313      	str	r3, [r2, #48]	; 0x30
 800438c:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <HAL_UART_MspInit+0x270>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800439c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a6:	2303      	movs	r3, #3
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043aa:	2307      	movs	r3, #7
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	4619      	mov	r1, r3
 80043b4:	4880      	ldr	r0, [pc, #512]	; (80045b8 <HAL_UART_MspInit+0x274>)
 80043b6:	f000 ff69 	bl	800528c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80043ba:	4b80      	ldr	r3, [pc, #512]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043bc:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_UART_MspInit+0x27c>)
 80043be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80043c0:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c8:	4b7c      	ldr	r3, [pc, #496]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ce:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d4:	4b79      	ldr	r3, [pc, #484]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043dc:	4b77      	ldr	r3, [pc, #476]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e2:	4b76      	ldr	r3, [pc, #472]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80043e8:	4b74      	ldr	r3, [pc, #464]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ee:	4b73      	ldr	r3, [pc, #460]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f4:	4b71      	ldr	r3, [pc, #452]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043fa:	4870      	ldr	r0, [pc, #448]	; (80045bc <HAL_UART_MspInit+0x278>)
 80043fc:	f000 fbae 	bl	8004b5c <HAL_DMA_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004406:	f7fe ff47 	bl	8003298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a6b      	ldr	r2, [pc, #428]	; (80045bc <HAL_UART_MspInit+0x278>)
 800440e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004410:	4a6a      	ldr	r2, [pc, #424]	; (80045bc <HAL_UART_MspInit+0x278>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004416:	4b6b      	ldr	r3, [pc, #428]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004418:	4a6b      	ldr	r2, [pc, #428]	; (80045c8 <HAL_UART_MspInit+0x284>)
 800441a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800441c:	4b69      	ldr	r3, [pc, #420]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800441e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004422:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004424:	4b67      	ldr	r3, [pc, #412]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004426:	2240      	movs	r2, #64	; 0x40
 8004428:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800442a:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004436:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004438:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800443a:	2200      	movs	r2, #0
 800443c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800443e:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004444:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800444a:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800444c:	2200      	movs	r2, #0
 800444e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004450:	4b5c      	ldr	r3, [pc, #368]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004456:	485b      	ldr	r0, [pc, #364]	; (80045c4 <HAL_UART_MspInit+0x280>)
 8004458:	f000 fb80 	bl	8004b5c <HAL_DMA_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8004462:	f7fe ff19 	bl	8003298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a56      	ldr	r2, [pc, #344]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800446a:	669a      	str	r2, [r3, #104]	; 0x68
 800446c:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <HAL_UART_MspInit+0x280>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	2027      	movs	r0, #39	; 0x27
 8004478:	f000 fb39 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800447c:	2027      	movs	r0, #39	; 0x27
 800447e:	f000 fb52 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004482:	e091      	b.n	80045a8 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART6)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_UART_MspInit+0x288>)
 800448a:	4293      	cmp	r3, r2
 800448c:	f040 808c 	bne.w	80045a8 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004490:	4b48      	ldr	r3, [pc, #288]	; (80045b4 <HAL_UART_MspInit+0x270>)
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	4a47      	ldr	r2, [pc, #284]	; (80045b4 <HAL_UART_MspInit+0x270>)
 8004496:	f043 0320 	orr.w	r3, r3, #32
 800449a:	6453      	str	r3, [r2, #68]	; 0x44
 800449c:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <HAL_UART_MspInit+0x270>)
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <HAL_UART_MspInit+0x270>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_UART_MspInit+0x270>)
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6313      	str	r3, [r2, #48]	; 0x30
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_UART_MspInit+0x270>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044c0:	23c0      	movs	r3, #192	; 0xc0
 80044c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044d0:	2308      	movs	r3, #8
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	4619      	mov	r1, r3
 80044da:	483d      	ldr	r0, [pc, #244]	; (80045d0 <HAL_UART_MspInit+0x28c>)
 80044dc:	f000 fed6 	bl	800528c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80044e0:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <HAL_UART_MspInit+0x290>)
 80044e2:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <HAL_UART_MspInit+0x294>)
 80044e4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80044e6:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_UART_MspInit+0x290>)
 80044e8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80044ec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_UART_MspInit+0x290>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <HAL_UART_MspInit+0x290>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <HAL_UART_MspInit+0x290>)
 80044fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004500:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004508:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <HAL_UART_MspInit+0x290>)
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004510:	2200      	movs	r2, #0
 8004512:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004514:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004516:	2200      	movs	r2, #0
 8004518:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_UART_MspInit+0x290>)
 800451c:	2200      	movs	r2, #0
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004520:	482c      	ldr	r0, [pc, #176]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004522:	f000 fb1b 	bl	8004b5c <HAL_DMA_Init>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 800452c:	f7fe feb4 	bl	8003298 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004534:	66da      	str	r2, [r3, #108]	; 0x6c
 8004536:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_UART_MspInit+0x290>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_UART_MspInit+0x298>)
 800453e:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <HAL_UART_MspInit+0x29c>)
 8004540:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004544:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004548:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_UART_MspInit+0x298>)
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004550:	4b22      	ldr	r3, [pc, #136]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004566:	2200      	movs	r2, #0
 8004568:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_UART_MspInit+0x298>)
 800456c:	2200      	movs	r2, #0
 800456e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004572:	2200      	movs	r2, #0
 8004574:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004578:	2200      	movs	r2, #0
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800457c:	4817      	ldr	r0, [pc, #92]	; (80045dc <HAL_UART_MspInit+0x298>)
 800457e:	f000 faed 	bl	8004b5c <HAL_DMA_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_MspInit+0x248>
      Error_Handler();
 8004588:	f7fe fe86 	bl	8003298 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004590:	669a      	str	r2, [r3, #104]	; 0x68
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <HAL_UART_MspInit+0x298>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004598:	2200      	movs	r2, #0
 800459a:	2100      	movs	r1, #0
 800459c:	2047      	movs	r0, #71	; 0x47
 800459e:	f000 faa6 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80045a2:	2047      	movs	r0, #71	; 0x47
 80045a4:	f000 fabf 	bl	8004b26 <HAL_NVIC_EnableIRQ>
}
 80045a8:	bf00      	nop
 80045aa:	3730      	adds	r7, #48	; 0x30
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40004800 	.word	0x40004800
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40020c00 	.word	0x40020c00
 80045bc:	200002a4 	.word	0x200002a4
 80045c0:	40026028 	.word	0x40026028
 80045c4:	20000304 	.word	0x20000304
 80045c8:	40026058 	.word	0x40026058
 80045cc:	40011400 	.word	0x40011400
 80045d0:	40020800 	.word	0x40020800
 80045d4:	20000364 	.word	0x20000364
 80045d8:	40026428 	.word	0x40026428
 80045dc:	200003c4 	.word	0x200003c4
 80045e0:	400264a0 	.word	0x400264a0

080045e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f2:	b480      	push	{r7}
 80045f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f6:	e7fe      	b.n	80045f6 <HardFault_Handler+0x4>

080045f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045fc:	e7fe      	b.n	80045fc <MemManage_Handler+0x4>

080045fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004602:	e7fe      	b.n	8004602 <BusFault_Handler+0x4>

08004604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <UsageFault_Handler+0x4>

0800460a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004638:	f000 f95e 	bl	80048f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}

08004640 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <DMA1_Stream1_IRQHandler+0x10>)
 8004646:	f000 fbb9 	bl	8004dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200002a4 	.word	0x200002a4

08004654 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004658:	4802      	ldr	r0, [pc, #8]	; (8004664 <DMA1_Stream3_IRQHandler+0x10>)
 800465a:	f000 fbaf 	bl	8004dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000304 	.word	0x20000304

08004668 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800466c:	4802      	ldr	r0, [pc, #8]	; (8004678 <TIM3_IRQHandler+0x10>)
 800466e:	f002 f960 	bl	8006932 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200000e4 	.word	0x200000e4

0800467c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <USART3_IRQHandler+0x10>)
 8004682:	f003 f9f5 	bl	8007a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200001a4 	.word	0x200001a4

08004690 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <DMA2_Stream1_IRQHandler+0x10>)
 8004696:	f000 fb91 	bl	8004dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000364 	.word	0x20000364

080046a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <DMA2_Stream6_IRQHandler+0x10>)
 80046aa:	f000 fb87 	bl	8004dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200003c4 	.word	0x200003c4

080046b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <USART6_IRQHandler+0x10>)
 80046be:	f003 f9d7 	bl	8007a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000224 	.word	0x20000224

080046cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
	return 1;
 80046d0:	2301      	movs	r3, #1
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_kill>:

int _kill(int pid, int sig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046e6:	f005 fba1 	bl	8009e2c <__errno>
 80046ea:	4602      	mov	r2, r0
 80046ec:	2316      	movs	r3, #22
 80046ee:	6013      	str	r3, [r2, #0]
	return -1;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_exit>:

void _exit (int status)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffe7 	bl	80046dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800470e:	e7fe      	b.n	800470e <_exit+0x12>

08004710 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <_sbrk+0x50>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <_sbrk+0x16>
		heap_end = &end;
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <_sbrk+0x50>)
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <_sbrk+0x54>)
 8004724:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <_sbrk+0x50>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <_sbrk+0x50>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	466a      	mov	r2, sp
 8004736:	4293      	cmp	r3, r2
 8004738:	d907      	bls.n	800474a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800473a:	f005 fb77 	bl	8009e2c <__errno>
 800473e:	4602      	mov	r2, r0
 8004740:	230c      	movs	r3, #12
 8004742:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004748:	e006      	b.n	8004758 <_sbrk+0x48>
	}

	heap_end += incr;
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <_sbrk+0x50>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	4a03      	ldr	r2, [pc, #12]	; (8004760 <_sbrk+0x50>)
 8004754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000eb0 	.word	0x20000eb0
 8004764:	20000ec8 	.word	0x20000ec8

08004768 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <SystemInit+0x5c>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <SystemInit+0x5c>)
 8004774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800477c:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <SystemInit+0x60>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <SystemInit+0x60>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <SystemInit+0x60>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800478e:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <SystemInit+0x60>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <SystemInit+0x60>)
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <SystemInit+0x64>)
 8004796:	4013      	ands	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <SystemInit+0x60>)
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <SystemInit+0x68>)
 800479e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <SystemInit+0x60>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <SystemInit+0x60>)
 80047a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <SystemInit+0x60>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <SystemInit+0x5c>)
 80047b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047b8:	609a      	str	r2, [r3, #8]
#endif
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	fef6ffff 	.word	0xfef6ffff
 80047d0:	24003010 	.word	0x24003010

080047d4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0a5a      	lsrs	r2, r3, #9
 80047e4:	490f      	ldr	r1, [pc, #60]	; (8004824 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80047e6:	fba1 1202 	umull	r1, r2, r1, r2
 80047ea:	09d2      	lsrs	r2, r2, #7
 80047ec:	490e      	ldr	r1, [pc, #56]	; (8004828 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80047ee:	fb01 f202 	mul.w	r2, r1, r2
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	0a5b      	lsrs	r3, r3, #9
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	09db      	lsrs	r3, r3, #7
 8004804:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	00044b83 	.word	0x00044b83
 8004828:	3b9aca00 	.word	0x3b9aca00

0800482c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800482c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004832:	e003      	b.n	800483c <LoopCopyDataInit>

08004834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800483a:	3104      	adds	r1, #4

0800483c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800483c:	480b      	ldr	r0, [pc, #44]	; (800486c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004844:	d3f6      	bcc.n	8004834 <CopyDataInit>
  ldr  r2, =_sbss
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004848:	e002      	b.n	8004850 <LoopFillZerobss>

0800484a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800484a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800484c:	f842 3b04 	str.w	r3, [r2], #4

08004850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004854:	d3f9      	bcc.n	800484a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004856:	f7ff ff87 	bl	8004768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800485a:	f005 faed 	bl	8009e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800485e:	f7fe f8af 	bl	80029c0 <main>
  bx  lr    
 8004862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004864:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004868:	0800ac04 	.word	0x0800ac04
  ldr  r0, =_sdata
 800486c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004870:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004874:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8004878:	20000ec4 	.word	0x20000ec4

0800487c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800487c:	e7fe      	b.n	800487c <ADC_IRQHandler>

0800487e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004882:	2003      	movs	r0, #3
 8004884:	f000 f928 	bl	8004ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004888:	2000      	movs	r0, #0
 800488a:	f000 f805 	bl	8004898 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800488e:	f7ff fc33 	bl	80040f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_InitTick+0x54>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_InitTick+0x58>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f943 	bl	8004b42 <HAL_SYSTICK_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e00e      	b.n	80048e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d80a      	bhi.n	80048e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048cc:	2200      	movs	r2, #0
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d4:	f000 f90b 	bl	8004aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048d8:	4a06      	ldr	r2, [pc, #24]	; (80048f4 <HAL_InitTick+0x5c>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000010 	.word	0x20000010
 80048f0:	20000018 	.word	0x20000018
 80048f4:	20000014 	.word	0x20000014

080048f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_IncTick+0x20>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_IncTick+0x24>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4413      	add	r3, r2
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_IncTick+0x24>)
 800490a:	6013      	str	r3, [r2, #0]
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000018 	.word	0x20000018
 800491c:	20000ebc 	.word	0x20000ebc

08004920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return uwTick;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_GetTick+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000ebc 	.word	0x20000ebc

08004938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <__NVIC_SetPriorityGrouping+0x44>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00
 800497c:	05fa0000 	.word	0x05fa0000

08004980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <__NVIC_GetPriorityGrouping+0x18>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	f003 0307 	and.w	r3, r3, #7
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db0b      	blt.n	80049c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	4907      	ldr	r1, [pc, #28]	; (80049d4 <__NVIC_EnableIRQ+0x38>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2001      	movs	r0, #1
 80049be:	fa00 f202 	lsl.w	r2, r0, r2
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db0a      	blt.n	8004a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	490c      	ldr	r1, [pc, #48]	; (8004a24 <__NVIC_SetPriority+0x4c>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	440b      	add	r3, r1
 80049fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a00:	e00a      	b.n	8004a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	4908      	ldr	r1, [pc, #32]	; (8004a28 <__NVIC_SetPriority+0x50>)
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	3b04      	subs	r3, #4
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	440b      	add	r3, r1
 8004a16:	761a      	strb	r2, [r3, #24]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000e100 	.word	0xe000e100
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f1c3 0307 	rsb	r3, r3, #7
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	bf28      	it	cs
 8004a4a:	2304      	movcs	r3, #4
 8004a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2b06      	cmp	r3, #6
 8004a54:	d902      	bls.n	8004a5c <NVIC_EncodePriority+0x30>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3b03      	subs	r3, #3
 8004a5a:	e000      	b.n	8004a5e <NVIC_EncodePriority+0x32>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	401a      	ands	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	43d9      	mvns	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	4313      	orrs	r3, r2
         );
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3724      	adds	r7, #36	; 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aa4:	d301      	bcc.n	8004aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00f      	b.n	8004aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <SysTick_Config+0x40>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ab2:	210f      	movs	r1, #15
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	f7ff ff8e 	bl	80049d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <SysTick_Config+0x40>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ac2:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <SysTick_Config+0x40>)
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000e010 	.word	0xe000e010

08004ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff29 	bl	8004938 <__NVIC_SetPriorityGrouping>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	4603      	mov	r3, r0
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b00:	f7ff ff3e 	bl	8004980 <__NVIC_GetPriorityGrouping>
 8004b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7ff ff8e 	bl	8004a2c <NVIC_EncodePriority>
 8004b10:	4602      	mov	r2, r0
 8004b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ff5d 	bl	80049d8 <__NVIC_SetPriority>
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff31 	bl	800499c <__NVIC_EnableIRQ>
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ffa2 	bl	8004a94 <SysTick_Config>
 8004b50:	4603      	mov	r3, r0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b68:	f7ff feda 	bl	8004920 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e099      	b.n	8004cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b98:	e00f      	b.n	8004bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b9a:	f7ff fec1 	bl	8004920 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d908      	bls.n	8004bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e078      	b.n	8004cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e8      	bne.n	8004b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <HAL_DMA_Init+0x158>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d107      	bne.n	8004c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d117      	bne.n	8004c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00e      	beq.n	8004c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa99 	bl	8005198 <DMA_CheckFifoParam>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2240      	movs	r2, #64	; 0x40
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e016      	b.n	8004cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa50 	bl	800512c <DMA_CalcBaseAndBitshift>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	223f      	movs	r2, #63	; 0x3f
 8004c96:	409a      	lsls	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	e010803f 	.word	0xe010803f

08004cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_DMA_Start_IT+0x26>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e048      	b.n	8004d70 <HAL_DMA_Start_IT+0xb8>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d137      	bne.n	8004d62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f9e2 	bl	80050d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	223f      	movs	r2, #63	; 0x3f
 8004d12:	409a      	lsls	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0216 	orr.w	r2, r2, #22
 8004d26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e005      	b.n	8004d6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2280      	movs	r2, #128	; 0x80
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e00c      	b.n	8004db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2205      	movs	r2, #5
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004dc8:	4b92      	ldr	r3, [pc, #584]	; (8005014 <HAL_DMA_IRQHandler+0x258>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a92      	ldr	r2, [pc, #584]	; (8005018 <HAL_DMA_IRQHandler+0x25c>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de6:	2208      	movs	r2, #8
 8004de8:	409a      	lsls	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01a      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	2208      	movs	r2, #8
 8004e16:	409a      	lsls	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e62:	2204      	movs	r2, #4
 8004e64:	409a      	lsls	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d012      	beq.n	8004e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	2204      	movs	r2, #4
 8004e82:	409a      	lsls	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	f043 0204 	orr.w	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e98:	2210      	movs	r2, #16
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d043      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03c      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d024      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
 8004eea:	e01f      	b.n	8004f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
 8004efc:	e016      	b.n	8004f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d107      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0208 	bic.w	r2, r2, #8
 8004f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	2220      	movs	r2, #32
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 808e 	beq.w	800505a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8086 	beq.w	800505a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	2220      	movs	r2, #32
 8004f54:	409a      	lsls	r2, r3
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d136      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0216 	bic.w	r2, r2, #22
 8004f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_DMA_IRQHandler+0x1da>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0208 	bic.w	r2, r2, #8
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	223f      	movs	r2, #63	; 0x3f
 8004fac:	409a      	lsls	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d07d      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
        }
        return;
 8004fd2:	e078      	b.n	80050c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01c      	beq.n	800501c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d030      	beq.n	800505a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
 8005000:	e02b      	b.n	800505a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d027      	beq.n	800505a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	e022      	b.n	800505a <HAL_DMA_IRQHandler+0x29e>
 8005014:	20000010 	.word	0x20000010
 8005018:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0210 	bic.w	r2, r2, #16
 8005038:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	2b00      	cmp	r3, #0
 8005060:	d032      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d022      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2205      	movs	r2, #5
 8005072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3301      	adds	r3, #1
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	429a      	cmp	r2, r3
 8005090:	d307      	bcc.n	80050a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f2      	bne.n	8005086 <HAL_DMA_IRQHandler+0x2ca>
 80050a0:	e000      	b.n	80050a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050c6:	bf00      	nop
    }
  }
}
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop

080050d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d108      	bne.n	8005110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800510e:	e007      	b.n	8005120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	3b10      	subs	r3, #16
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <DMA_CalcBaseAndBitshift+0x60>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <DMA_CalcBaseAndBitshift+0x64>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d908      	bls.n	800516c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <DMA_CalcBaseAndBitshift+0x68>)
 8005162:	4013      	ands	r3, r2
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	659a      	str	r2, [r3, #88]	; 0x58
 800516a:	e006      	b.n	800517a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <DMA_CalcBaseAndBitshift+0x68>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	aaaaaaab 	.word	0xaaaaaaab
 8005190:	0800a640 	.word	0x0800a640
 8005194:	fffffc00 	.word	0xfffffc00

08005198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11f      	bne.n	80051f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d855      	bhi.n	8005264 <DMA_CheckFifoParam+0xcc>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <DMA_CheckFifoParam+0x28>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	080051e3 	.word	0x080051e3
 80051c8:	080051d1 	.word	0x080051d1
 80051cc:	08005265 	.word	0x08005265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d045      	beq.n	8005268 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e0:	e042      	b.n	8005268 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051ea:	d13f      	bne.n	800526c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f0:	e03c      	b.n	800526c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fa:	d121      	bne.n	8005240 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d836      	bhi.n	8005270 <DMA_CheckFifoParam+0xd8>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <DMA_CheckFifoParam+0x70>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005219 	.word	0x08005219
 800520c:	0800521f 	.word	0x0800521f
 8005210:	08005219 	.word	0x08005219
 8005214:	08005231 	.word	0x08005231
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e02f      	b.n	800527e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d024      	beq.n	8005274 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522e:	e021      	b.n	8005274 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005238:	d11e      	bne.n	8005278 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800523e:	e01b      	b.n	8005278 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d902      	bls.n	800524c <DMA_CheckFifoParam+0xb4>
 8005246:	2b03      	cmp	r3, #3
 8005248:	d003      	beq.n	8005252 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800524a:	e018      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e015      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
      break;
 8005262:	e00b      	b.n	800527c <DMA_CheckFifoParam+0xe4>
      break;
 8005264:	bf00      	nop
 8005266:	e00a      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;
 8005268:	bf00      	nop
 800526a:	e008      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;
 800526c:	bf00      	nop
 800526e:	e006      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;
 8005270:	bf00      	nop
 8005272:	e004      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;   
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <DMA_CheckFifoParam+0xe6>
      break;
 800527c:	bf00      	nop
    }
  } 
  
  return status; 
 800527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	e175      	b.n	8005598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052ac:	2201      	movs	r2, #1
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4013      	ands	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	f040 8164 	bne.w	8005592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x4e>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b12      	cmp	r3, #18
 80052d8:	d123      	bne.n	8005322 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	08da      	lsrs	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3208      	adds	r2, #8
 80052e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	220f      	movs	r2, #15
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	08da      	lsrs	r2, r3, #3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3208      	adds	r2, #8
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	2203      	movs	r2, #3
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0203 	and.w	r2, r3, #3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00b      	beq.n	8005376 <HAL_GPIO_Init+0xea>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d007      	beq.n	8005376 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800536a:	2b11      	cmp	r3, #17
 800536c:	d003      	beq.n	8005376 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b12      	cmp	r3, #18
 8005374:	d130      	bne.n	80053d8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	2203      	movs	r2, #3
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053ac:	2201      	movs	r2, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 0201 	and.w	r2, r3, #1
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80be 	beq.w	8005592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005416:	4b65      	ldr	r3, [pc, #404]	; (80055ac <HAL_GPIO_Init+0x320>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	4a64      	ldr	r2, [pc, #400]	; (80055ac <HAL_GPIO_Init+0x320>)
 800541c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005420:	6453      	str	r3, [r2, #68]	; 0x44
 8005422:	4b62      	ldr	r3, [pc, #392]	; (80055ac <HAL_GPIO_Init+0x320>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800542e:	4a60      	ldr	r2, [pc, #384]	; (80055b0 <HAL_GPIO_Init+0x324>)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3302      	adds	r3, #2
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <HAL_GPIO_Init+0x328>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d037      	beq.n	80054ca <HAL_GPIO_Init+0x23e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_GPIO_Init+0x32c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_GPIO_Init+0x23a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a55      	ldr	r2, [pc, #340]	; (80055bc <HAL_GPIO_Init+0x330>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x236>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a54      	ldr	r2, [pc, #336]	; (80055c0 <HAL_GPIO_Init+0x334>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x232>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a53      	ldr	r2, [pc, #332]	; (80055c4 <HAL_GPIO_Init+0x338>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x22e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a52      	ldr	r2, [pc, #328]	; (80055c8 <HAL_GPIO_Init+0x33c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x22a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a51      	ldr	r2, [pc, #324]	; (80055cc <HAL_GPIO_Init+0x340>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x226>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a50      	ldr	r2, [pc, #320]	; (80055d0 <HAL_GPIO_Init+0x344>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x222>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4f      	ldr	r2, [pc, #316]	; (80055d4 <HAL_GPIO_Init+0x348>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x21e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4e      	ldr	r2, [pc, #312]	; (80055d8 <HAL_GPIO_Init+0x34c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x21a>
 80054a2:	2309      	movs	r3, #9
 80054a4:	e012      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054a6:	230a      	movs	r3, #10
 80054a8:	e010      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054aa:	2308      	movs	r3, #8
 80054ac:	e00e      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ae:	2307      	movs	r3, #7
 80054b0:	e00c      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e00a      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e008      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ba:	2304      	movs	r3, #4
 80054bc:	e006      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054be:	2303      	movs	r3, #3
 80054c0:	e004      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e002      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ca:	2300      	movs	r3, #0
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f002 0203 	and.w	r2, r2, #3
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	4093      	lsls	r3, r2
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054dc:	4934      	ldr	r1, [pc, #208]	; (80055b0 <HAL_GPIO_Init+0x324>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ea:	4b3c      	ldr	r3, [pc, #240]	; (80055dc <HAL_GPIO_Init+0x350>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <HAL_GPIO_Init+0x350>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005514:	4b31      	ldr	r3, [pc, #196]	; (80055dc <HAL_GPIO_Init+0x350>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005538:	4a28      	ldr	r2, [pc, #160]	; (80055dc <HAL_GPIO_Init+0x350>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_GPIO_Init+0x350>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_GPIO_Init+0x350>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <HAL_GPIO_Init+0x350>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <HAL_GPIO_Init+0x350>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	f67f ae86 	bls.w	80052ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	3724      	adds	r7, #36	; 0x24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40020800 	.word	0x40020800
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40021400 	.word	0x40021400
 80055cc:	40021800 	.word	0x40021800
 80055d0:	40021c00 	.word	0x40021c00
 80055d4:	40022000 	.word	0x40022000
 80055d8:	40022400 	.word	0x40022400
 80055dc:	40013c00 	.word	0x40013c00

080055e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
 80055ec:	4613      	mov	r3, r2
 80055ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f0:	787b      	ldrb	r3, [r7, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80055fc:	e003      	b.n	8005606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	619a      	str	r2, [r3, #24]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800561c:	2300      	movs	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e25e      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8087 	beq.w	8005746 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005638:	4b96      	ldr	r3, [pc, #600]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b04      	cmp	r3, #4
 8005642:	d00c      	beq.n	800565e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005644:	4b93      	ldr	r3, [pc, #588]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b08      	cmp	r3, #8
 800564e:	d112      	bne.n	8005676 <HAL_RCC_OscConfig+0x62>
 8005650:	4b90      	ldr	r3, [pc, #576]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565c:	d10b      	bne.n	8005676 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d06c      	beq.n	8005744 <HAL_RCC_OscConfig+0x130>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d168      	bne.n	8005744 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e238      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x7a>
 8005680:	4b84      	ldr	r3, [pc, #528]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a83      	ldr	r2, [pc, #524]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e02e      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x9c>
 8005696:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7e      	ldr	r2, [pc, #504]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b7c      	ldr	r3, [pc, #496]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7b      	ldr	r2, [pc, #492]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0xc0>
 80056ba:	4b76      	ldr	r3, [pc, #472]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a75      	ldr	r2, [pc, #468]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a72      	ldr	r2, [pc, #456]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 80056d4:	4b6f      	ldr	r3, [pc, #444]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b6c      	ldr	r3, [pc, #432]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6b      	ldr	r2, [pc, #428]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7ff f914 	bl	8004920 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fc:	f7ff f910 	bl	8004920 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1ec      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b61      	ldr	r3, [pc, #388]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xe8>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7ff f900 	bl	8004920 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005724:	f7ff f8fc 	bl	8004920 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1d8      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b57      	ldr	r3, [pc, #348]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x110>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d069      	beq.n	8005826 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005752:	4b50      	ldr	r3, [pc, #320]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b4d      	ldr	r3, [pc, #308]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x190>
 800576a:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b47      	ldr	r3, [pc, #284]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x17a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1ac      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b41      	ldr	r3, [pc, #260]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	493d      	ldr	r1, [pc, #244]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e040      	b.n	8005826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d023      	beq.n	80057f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a38      	ldr	r2, [pc, #224]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7ff f8b2 	bl	8004920 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057c0:	f7ff f8ae 	bl	8004920 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e18a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4929      	ldr	r1, [pc, #164]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]
 80057f2:	e018      	b.n	8005826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f4:	4b27      	ldr	r3, [pc, #156]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a26      	ldr	r2, [pc, #152]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005800:	f7ff f88e 	bl	8004920 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005808:	f7ff f88a 	bl	8004920 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e166      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d038      	beq.n	80058a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800583a:	4b16      	ldr	r3, [pc, #88]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7ff f86b 	bl	8004920 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584e:	f7ff f867 	bl	8004920 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e143      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x23a>
 800586c:	e01a      	b.n	80058a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <HAL_RCC_OscConfig+0x280>)
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587a:	f7ff f851 	bl	8004920 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005882:	f7ff f84d 	bl	8004920 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d903      	bls.n	8005898 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e129      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
 8005894:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005898:	4b95      	ldr	r3, [pc, #596]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 800589a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ee      	bne.n	8005882 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a4 	beq.w	80059fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b2:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058be:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a8b      	ldr	r2, [pc, #556]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058da:	4b86      	ldr	r3, [pc, #536]	; (8005af4 <HAL_RCC_OscConfig+0x4e0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058e6:	4b83      	ldr	r3, [pc, #524]	; (8005af4 <HAL_RCC_OscConfig+0x4e0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a82      	ldr	r2, [pc, #520]	; (8005af4 <HAL_RCC_OscConfig+0x4e0>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f2:	f7ff f815 	bl	8004920 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058fa:	f7ff f811 	bl	8004920 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b64      	cmp	r3, #100	; 0x64
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0ed      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590c:	4b79      	ldr	r3, [pc, #484]	; (8005af4 <HAL_RCC_OscConfig+0x4e0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x31a>
 8005920:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a72      	ldr	r2, [pc, #456]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
 800592c:	e02d      	b.n	800598a <HAL_RCC_OscConfig+0x376>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x33c>
 8005936:	4b6e      	ldr	r3, [pc, #440]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	4a6d      	ldr	r2, [pc, #436]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	6713      	str	r3, [r2, #112]	; 0x70
 8005942:	4b6b      	ldr	r3, [pc, #428]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a6a      	ldr	r2, [pc, #424]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	e01c      	b.n	800598a <HAL_RCC_OscConfig+0x376>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d10c      	bne.n	8005972 <HAL_RCC_OscConfig+0x35e>
 8005958:	4b65      	ldr	r3, [pc, #404]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	4a64      	ldr	r2, [pc, #400]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 800595e:	f043 0304 	orr.w	r3, r3, #4
 8005962:	6713      	str	r3, [r2, #112]	; 0x70
 8005964:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	e00b      	b.n	800598a <HAL_RCC_OscConfig+0x376>
 8005972:	4b5f      	ldr	r3, [pc, #380]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	4b5c      	ldr	r3, [pc, #368]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a5b      	ldr	r2, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d015      	beq.n	80059be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fe ffc5 	bl	8004920 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005998:	e00a      	b.n	80059b0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fe ffc1 	bl	8004920 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e09b      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ee      	beq.n	800599a <HAL_RCC_OscConfig+0x386>
 80059bc:	e014      	b.n	80059e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fe ffaf 	bl	8004920 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c6:	f7fe ffab 	bl	8004920 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e085      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059dc:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ee      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ee:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4a3f      	ldr	r2, [pc, #252]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 80059f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d071      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d069      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d14b      	bne.n	8005aae <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a35      	ldr	r2, [pc, #212]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fe ff7d 	bl	8004920 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2a:	f7fe ff79 	bl	8004920 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e055      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3c:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f0      	bne.n	8005a2a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	019b      	lsls	r3, r3, #6
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	061b      	lsls	r3, r3, #24
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	071b      	lsls	r3, r3, #28
 8005a74:	491e      	ldr	r1, [pc, #120]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a86:	f7fe ff4b 	bl	8004920 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8e:	f7fe ff47 	bl	8004920 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e023      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x47a>
 8005aac:	e01b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fe ff31 	bl	8004920 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fe ff2d 	bl	8004920 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e009      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_RCC_OscConfig+0x4dc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x4ae>
 8005ae0:	e001      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40007000 	.word	0x40007000

08005af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0ce      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b10:	4b69      	ldr	r3, [pc, #420]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d910      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	4b66      	ldr	r3, [pc, #408]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	4964      	ldr	r1, [pc, #400]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b62      	ldr	r3, [pc, #392]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0b6      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b58:	4b58      	ldr	r3, [pc, #352]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a57      	ldr	r2, [pc, #348]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b70:	4b52      	ldr	r3, [pc, #328]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a51      	ldr	r2, [pc, #324]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7c:	4b4f      	ldr	r3, [pc, #316]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	494c      	ldr	r1, [pc, #304]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d040      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba2:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d115      	bne.n	8005bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e07d      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bba:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e071      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e069      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bda:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 0203 	bic.w	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4935      	ldr	r1, [pc, #212]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bec:	f7fe fe98 	bl	8004920 <HAL_GetTick>
 8005bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf4:	f7fe fe94 	bl	8004920 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e051      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0a:	4b2c      	ldr	r3, [pc, #176]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 020c 	and.w	r2, r3, #12
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d1eb      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c1c:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d210      	bcs.n	8005c4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 020f 	bic.w	r2, r3, #15
 8005c32:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3a:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e030      	b.n	8005cae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4915      	ldr	r1, [pc, #84]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	490d      	ldr	r1, [pc, #52]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c8a:	f000 f81d 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 8005c8e:	4601      	mov	r1, r0
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7fe fdf6 	bl	8004898 <HAL_InitTick>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023c00 	.word	0x40023c00
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800a628 	.word	0x0800a628
 8005cc4:	20000010 	.word	0x20000010

08005cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cde:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d007      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x32>
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d008      	beq.n	8005d00 <HAL_RCC_GetSysClockFreq+0x38>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 808d 	bne.w	8005e0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf4:	4b4b      	ldr	r3, [pc, #300]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005cf6:	60bb      	str	r3, [r7, #8]
       break;
 8005cf8:	e08c      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cfa:	4b4b      	ldr	r3, [pc, #300]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cfc:	60bb      	str	r3, [r7, #8]
      break;
 8005cfe:	e089      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d00:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d0a:	4b45      	ldr	r3, [pc, #276]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d16:	4b42      	ldr	r3, [pc, #264]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	099b      	lsrs	r3, r3, #6
 8005d1c:	f04f 0400 	mov.w	r4, #0
 8005d20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	ea03 0501 	and.w	r5, r3, r1
 8005d2c:	ea04 0602 	and.w	r6, r4, r2
 8005d30:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d32:	fb02 f106 	mul.w	r1, r2, r6
 8005d36:	2200      	movs	r2, #0
 8005d38:	fb02 f205 	mul.w	r2, r2, r5
 8005d3c:	440a      	add	r2, r1
 8005d3e:	493a      	ldr	r1, [pc, #232]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d40:	fba5 0101 	umull	r0, r1, r5, r1
 8005d44:	1853      	adds	r3, r2, r1
 8005d46:	4619      	mov	r1, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4623      	mov	r3, r4
 8005d52:	f7fa fa79 	bl	8000248 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e049      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5e:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	099b      	lsrs	r3, r3, #6
 8005d64:	f04f 0400 	mov.w	r4, #0
 8005d68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	ea03 0501 	and.w	r5, r3, r1
 8005d74:	ea04 0602 	and.w	r6, r4, r2
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4632      	mov	r2, r6
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	f04f 0400 	mov.w	r4, #0
 8005d84:	0154      	lsls	r4, r2, #5
 8005d86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d8a:	014b      	lsls	r3, r1, #5
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4622      	mov	r2, r4
 8005d90:	1b49      	subs	r1, r1, r5
 8005d92:	eb62 0206 	sbc.w	r2, r2, r6
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	f04f 0400 	mov.w	r4, #0
 8005d9e:	0194      	lsls	r4, r2, #6
 8005da0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005da4:	018b      	lsls	r3, r1, #6
 8005da6:	1a5b      	subs	r3, r3, r1
 8005da8:	eb64 0402 	sbc.w	r4, r4, r2
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	00e2      	lsls	r2, r4, #3
 8005db6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005dba:	00d9      	lsls	r1, r3, #3
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	195b      	adds	r3, r3, r5
 8005dc2:	eb44 0406 	adc.w	r4, r4, r6
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	02a2      	lsls	r2, r4, #10
 8005dd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005dd4:	0299      	lsls	r1, r3, #10
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4614      	mov	r4, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	4621      	mov	r1, r4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f04f 0400 	mov.w	r4, #0
 8005de4:	461a      	mov	r2, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	f7fa fa2e 	bl	8000248 <__aeabi_uldivmod>
 8005dec:	4603      	mov	r3, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	0c1b      	lsrs	r3, r3, #16
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	60bb      	str	r3, [r7, #8]
      break;
 8005e0c:	e002      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005e10:	60bb      	str	r3, [r7, #8]
      break;
 8005e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e14:	68bb      	ldr	r3, [r7, #8]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800
 8005e24:	00f42400 	.word	0x00f42400
 8005e28:	017d7840 	.word	0x017d7840

08005e2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000010 	.word	0x20000010

08005e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e48:	f7ff fff0 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0a9b      	lsrs	r3, r3, #10
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4a03      	ldr	r2, [pc, #12]	; (8005e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5a:	5cd3      	ldrb	r3, [r2, r3]
 8005e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	0800a638 	.word	0x0800a638

08005e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e70:	f7ff ffdc 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e74:	4601      	mov	r1, r0
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	0b5b      	lsrs	r3, r3, #13
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4a03      	ldr	r2, [pc, #12]	; (8005e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e82:	5cd3      	ldrb	r3, [r2, r3]
 8005e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	0800a638 	.word	0x0800a638

08005e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d012      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ebc:	4b69      	ldr	r3, [pc, #420]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ec6:	6093      	str	r3, [r2, #8]
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	4964      	ldr	r1, [pc, #400]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d017      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eee:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	4959      	ldr	r1, [pc, #356]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f2a:	4b4e      	ldr	r3, [pc, #312]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	494a      	ldr	r1, [pc, #296]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f48:	d101      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 808b 	beq.w	800608e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f78:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	4a39      	ldr	r2, [pc, #228]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	6413      	str	r3, [r2, #64]	; 0x40
 8005f84:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f90:	4b35      	ldr	r3, [pc, #212]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a34      	ldr	r2, [pc, #208]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9c:	f7fe fcc0 	bl	8004920 <HAL_GetTick>
 8005fa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa4:	f7fe fcbc 	bl	8004920 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e38d      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fb6:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fc2:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d035      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d02e      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe0:	4b20      	ldr	r3, [pc, #128]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fea:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006000:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006002:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d114      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fe fc84 	bl	8004920 <HAL_GetTick>
 8006018:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601a:	e00a      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601c:	f7fe fc80 	bl	8004920 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e34f      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ee      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604a:	d111      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800605a:	400b      	ands	r3, r1
 800605c:	4901      	ldr	r1, [pc, #4]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605e:	4313      	orrs	r3, r2
 8006060:	608b      	str	r3, [r1, #8]
 8006062:	e00b      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006064:	40023800 	.word	0x40023800
 8006068:	40007000 	.word	0x40007000
 800606c:	0ffffcff 	.word	0x0ffffcff
 8006070:	4bb3      	ldr	r3, [pc, #716]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4ab2      	ldr	r2, [pc, #712]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006076:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800607a:	6093      	str	r3, [r2, #8]
 800607c:	4bb0      	ldr	r3, [pc, #704]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800607e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006088:	49ad      	ldr	r1, [pc, #692]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800608a:	4313      	orrs	r3, r2
 800608c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800609a:	4ba9      	ldr	r3, [pc, #676]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a0:	4aa7      	ldr	r2, [pc, #668]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060aa:	4ba5      	ldr	r3, [pc, #660]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	49a2      	ldr	r1, [pc, #648]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060c8:	4b9d      	ldr	r3, [pc, #628]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d6:	499a      	ldr	r1, [pc, #616]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ea:	4b95      	ldr	r3, [pc, #596]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f8:	4991      	ldr	r1, [pc, #580]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800610c:	4b8c      	ldr	r3, [pc, #560]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611a:	4989      	ldr	r1, [pc, #548]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800612e:	4b84      	ldr	r3, [pc, #528]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4980      	ldr	r1, [pc, #512]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006150:	4b7b      	ldr	r3, [pc, #492]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f023 0203 	bic.w	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	4978      	ldr	r1, [pc, #480]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006172:	4b73      	ldr	r3, [pc, #460]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f023 020c 	bic.w	r2, r3, #12
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006180:	496f      	ldr	r1, [pc, #444]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006194:	4b6a      	ldr	r3, [pc, #424]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a2:	4967      	ldr	r1, [pc, #412]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061b6:	4b62      	ldr	r3, [pc, #392]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	495e      	ldr	r1, [pc, #376]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061d8:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	4956      	ldr	r1, [pc, #344]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061fa:	4b51      	ldr	r3, [pc, #324]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006208:	494d      	ldr	r1, [pc, #308]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800621c:	4b48      	ldr	r3, [pc, #288]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622a:	4945      	ldr	r1, [pc, #276]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800623e:	4b40      	ldr	r3, [pc, #256]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624c:	493c      	ldr	r1, [pc, #240]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006260:	4b37      	ldr	r3, [pc, #220]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626e:	4934      	ldr	r1, [pc, #208]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d011      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006290:	492b      	ldr	r1, [pc, #172]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a0:	d101      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d0:	491b      	ldr	r1, [pc, #108]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f4:	4912      	ldr	r1, [pc, #72]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00f      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800632e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006332:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800
 8006344:	4985      	ldr	r1, [pc, #532]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006358:	4b80      	ldr	r3, [pc, #512]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800635a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800635e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006368:	497c      	ldr	r1, [pc, #496]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d005      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800637e:	f040 80d6 	bne.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006382:	4b76      	ldr	r3, [pc, #472]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a75      	ldr	r2, [pc, #468]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800638c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638e:	f7fe fac7 	bl	8004920 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006396:	f7fe fac3 	bl	8004920 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d901      	bls.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e194      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063a8:	4b6c      	ldr	r3, [pc, #432]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d021      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11d      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063d6:	4b61      	ldr	r3, [pc, #388]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063dc:	0e1b      	lsrs	r3, r3, #24
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	019a      	lsls	r2, r3, #6
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	071b      	lsls	r3, r3, #28
 80063fc:	4957      	ldr	r1, [pc, #348]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d02e      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800642e:	d129      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006430:	4b4a      	ldr	r3, [pc, #296]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800643e:	4b47      	ldr	r3, [pc, #284]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006444:	0f1b      	lsrs	r3, r3, #28
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	019a      	lsls	r2, r3, #6
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	041b      	lsls	r3, r3, #16
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	431a      	orrs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	071b      	lsls	r3, r3, #28
 8006464:	493d      	ldr	r1, [pc, #244]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800646c:	4b3b      	ldr	r3, [pc, #236]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800646e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006472:	f023 021f 	bic.w	r2, r3, #31
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	3b01      	subs	r3, #1
 800647c:	4937      	ldr	r1, [pc, #220]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01d      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006490:	4b32      	ldr	r3, [pc, #200]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006496:	0e1b      	lsrs	r3, r3, #24
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a4:	0f1b      	lsrs	r3, r3, #28
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	019a      	lsls	r2, r3, #6
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	431a      	orrs	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	431a      	orrs	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	071b      	lsls	r3, r3, #28
 80064c4:	4925      	ldr	r1, [pc, #148]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	019a      	lsls	r2, r3, #6
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	071b      	lsls	r3, r3, #28
 80064f4:	4919      	ldr	r1, [pc, #100]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a16      	ldr	r2, [pc, #88]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006508:	f7fe fa0a 	bl	8004920 <HAL_GetTick>
 800650c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006510:	f7fe fa06 	bl	8004920 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b64      	cmp	r3, #100	; 0x64
 800651c:	d901      	bls.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e0d7      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006522:	4b0e      	ldr	r3, [pc, #56]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b01      	cmp	r3, #1
 8006532:	f040 80cd 	bne.w	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a08      	ldr	r2, [pc, #32]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006542:	f7fe f9ed 	bl	8004920 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006548:	e00a      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800654a:	f7fe f9e9 	bl	8004920 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b64      	cmp	r3, #100	; 0x64
 8006556:	d903      	bls.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e0ba      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800655c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006560:	4b5e      	ldr	r3, [pc, #376]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d0ed      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02e      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12a      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006596:	4b51      	ldr	r3, [pc, #324]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065a4:	4b4d      	ldr	r3, [pc, #308]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	0f1b      	lsrs	r3, r3, #28
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	019a      	lsls	r2, r3, #6
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	061b      	lsls	r3, r3, #24
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	4944      	ldr	r1, [pc, #272]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065d2:	4b42      	ldr	r3, [pc, #264]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	3b01      	subs	r3, #1
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	493d      	ldr	r1, [pc, #244]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d022      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006600:	d11d      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006602:	4b36      	ldr	r3, [pc, #216]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	0f1b      	lsrs	r3, r3, #28
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	019a      	lsls	r2, r3, #6
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	431a      	orrs	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	071b      	lsls	r3, r3, #28
 8006636:	4929      	ldr	r1, [pc, #164]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d028      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	0e1b      	lsrs	r3, r3, #24
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006658:	4b20      	ldr	r3, [pc, #128]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	019a      	lsls	r2, r3, #6
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	061b      	lsls	r3, r3, #24
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	071b      	lsls	r3, r3, #28
 800667e:	4917      	ldr	r1, [pc, #92]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800668c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4911      	ldr	r1, [pc, #68]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0e      	ldr	r2, [pc, #56]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a8:	f7fe f93a 	bl	8004920 <HAL_GetTick>
 80066ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066b0:	f7fe f936 	bl	8004920 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b64      	cmp	r3, #100	; 0x64
 80066bc:	d901      	bls.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e007      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d1ef      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800

080066e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e01d      	b.n	800672e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fd fdaa 	bl	8004260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f000 fc20 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e01d      	b.n	8006784 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f815 	bl	800678c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f000 fbf5 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e07b      	b.n	80068ac <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fd fcb9 	bl	8004140 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6899      	ldr	r1, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <HAL_TIM_Encoder_Init+0x114>)
 80067e2:	400b      	ands	r3, r1
 80067e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fbb7 	bl	8006f64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_TIM_Encoder_Init+0x118>)
 800681c:	4013      	ands	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	4313      	orrs	r3, r2
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <HAL_TIM_Encoder_Init+0x11c>)
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_TIM_Encoder_Init+0x120>)
 800683e:	4013      	ands	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	4313      	orrs	r3, r2
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	011a      	lsls	r2, r3, #4
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	031b      	lsls	r3, r3, #12
 8006860:	4313      	orrs	r3, r2
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	4313      	orrs	r3, r2
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	fffebff8 	.word	0xfffebff8
 80068b8:	fffffcfc 	.word	0xfffffcfc
 80068bc:	fffff3f3 	.word	0xfffff3f3
 80068c0:	ffff0f0f 	.word	0xffff0f0f

080068c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_TIM_Encoder_Start+0x16>
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d008      	beq.n	80068ea <HAL_TIM_Encoder_Start+0x26>
 80068d8:	e00f      	b.n	80068fa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fed6 	bl	8007694 <TIM_CCxChannelCmd>
      break;
 80068e8:	e016      	b.n	8006918 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	2104      	movs	r1, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fece 	bl	8007694 <TIM_CCxChannelCmd>
      break;
 80068f8:	e00e      	b.n	8006918 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fec6 	bl	8007694 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	2104      	movs	r1, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f000 febf 	bl	8007694 <TIM_CCxChannelCmd>
      break;
 8006916:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d122      	bne.n	800698e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d11b      	bne.n	800698e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f06f 0202 	mvn.w	r2, #2
 800695e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fad7 	bl	8006f28 <HAL_TIM_IC_CaptureCallback>
 800697a:	e005      	b.n	8006988 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fac9 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fada 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b04      	cmp	r3, #4
 800699a:	d122      	bne.n	80069e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d11b      	bne.n	80069e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0204 	mvn.w	r2, #4
 80069b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 faad 	bl	8006f28 <HAL_TIM_IC_CaptureCallback>
 80069ce:	e005      	b.n	80069dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa9f 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fab0 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d122      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d11b      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0208 	mvn.w	r2, #8
 8006a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa83 	bl	8006f28 <HAL_TIM_IC_CaptureCallback>
 8006a22:	e005      	b.n	8006a30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa75 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa86 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d122      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d11b      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0210 	mvn.w	r2, #16
 8006a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2208      	movs	r2, #8
 8006a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa59 	bl	8006f28 <HAL_TIM_IC_CaptureCallback>
 8006a76:	e005      	b.n	8006a84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa4b 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa5c 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10e      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d107      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f06f 0201 	mvn.w	r2, #1
 8006aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fc fb99 	bl	80031e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d10e      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b80      	cmp	r3, #128	; 0x80
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fe65 	bl	80077ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fe58 	bl	80077c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa0a 	bl	8006f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0220 	mvn.w	r2, #32
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fe18 	bl	8007798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e105      	b.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b14      	cmp	r3, #20
 8006b9e:	f200 80f0 	bhi.w	8006d82 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006bfd 	.word	0x08006bfd
 8006bac:	08006d83 	.word	0x08006d83
 8006bb0:	08006d83 	.word	0x08006d83
 8006bb4:	08006d83 	.word	0x08006d83
 8006bb8:	08006c3d 	.word	0x08006c3d
 8006bbc:	08006d83 	.word	0x08006d83
 8006bc0:	08006d83 	.word	0x08006d83
 8006bc4:	08006d83 	.word	0x08006d83
 8006bc8:	08006c7f 	.word	0x08006c7f
 8006bcc:	08006d83 	.word	0x08006d83
 8006bd0:	08006d83 	.word	0x08006d83
 8006bd4:	08006d83 	.word	0x08006d83
 8006bd8:	08006cbf 	.word	0x08006cbf
 8006bdc:	08006d83 	.word	0x08006d83
 8006be0:	08006d83 	.word	0x08006d83
 8006be4:	08006d83 	.word	0x08006d83
 8006be8:	08006d01 	.word	0x08006d01
 8006bec:	08006d83 	.word	0x08006d83
 8006bf0:	08006d83 	.word	0x08006d83
 8006bf4:	08006d83 	.word	0x08006d83
 8006bf8:	08006d41 	.word	0x08006d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fa4e 	bl	80070a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0204 	bic.w	r2, r2, #4
 8006c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6999      	ldr	r1, [r3, #24]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	619a      	str	r2, [r3, #24]
      break;
 8006c3a:	e0a3      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 faa0 	bl	8007188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	021a      	lsls	r2, r3, #8
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	619a      	str	r2, [r3, #24]
      break;
 8006c7c:	e082      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 faf7 	bl	8007278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69da      	ldr	r2, [r3, #28]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0208 	orr.w	r2, r2, #8
 8006c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0204 	bic.w	r2, r2, #4
 8006ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69d9      	ldr	r1, [r3, #28]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	61da      	str	r2, [r3, #28]
      break;
 8006cbc:	e062      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fb4d 	bl	8007364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69d9      	ldr	r1, [r3, #28]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	021a      	lsls	r2, r3, #8
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	61da      	str	r2, [r3, #28]
      break;
 8006cfe:	e041      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fb84 	bl	8007414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0208 	orr.w	r2, r2, #8
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0204 	bic.w	r2, r2, #4
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d3e:	e021      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fbb6 	bl	80074b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d80:	e000      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006d82:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIM_ConfigClockSource+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e0a6      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x166>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4b4f      	ldr	r3, [pc, #316]	; (8006f10 <HAL_TIM_ConfigClockSource+0x170>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d067      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x120>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d80b      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x6c>
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d073      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x140>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d802      	bhi.n	8006e02 <HAL_TIM_ConfigClockSource+0x62>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d06f      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e00:	e078      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d06c      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x140>
 8006e06:	2b30      	cmp	r3, #48	; 0x30
 8006e08:	d06a      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e0a:	e073      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e0c:	2b70      	cmp	r3, #112	; 0x70
 8006e0e:	d00d      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0x8c>
 8006e10:	2b70      	cmp	r3, #112	; 0x70
 8006e12:	d804      	bhi.n	8006e1e <HAL_TIM_ConfigClockSource+0x7e>
 8006e14:	2b50      	cmp	r3, #80	; 0x50
 8006e16:	d033      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0xe0>
 8006e18:	2b60      	cmp	r3, #96	; 0x60
 8006e1a:	d041      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e1c:	e06a      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	d066      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x152>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e28:	d017      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e2a:	e063      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f000 fc0a 	bl	8007654 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	609a      	str	r2, [r3, #8]
      break;
 8006e58:	e04c      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6899      	ldr	r1, [r3, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f000 fbf3 	bl	8007654 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e7c:	609a      	str	r2, [r3, #8]
      break;
 8006e7e:	e039      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6859      	ldr	r1, [r3, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f000 fb67 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2150      	movs	r1, #80	; 0x50
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fbc0 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8006e9e:	e029      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6859      	ldr	r1, [r3, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f000 fb86 	bl	80075be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2160      	movs	r1, #96	; 0x60
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fbb0 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8006ebe:	e019      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f000 fb47 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2140      	movs	r1, #64	; 0x40
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fba0 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8006ede:	e009      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 fb97 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e000      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	fffeff88 	.word	0xfffeff88

08006f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a40      	ldr	r2, [pc, #256]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d00f      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3d      	ldr	r2, [pc, #244]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d007      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a3a      	ldr	r2, [pc, #232]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d108      	bne.n	8006fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d02b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc4:	d027      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d023      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01f      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d017      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <TIM_Base_SetConfig+0x128>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a27      	ldr	r2, [pc, #156]	; (8007090 <TIM_Base_SetConfig+0x12c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a26      	ldr	r2, [pc, #152]	; (8007094 <TIM_Base_SetConfig+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <TIM_Base_SetConfig+0x134>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a24      	ldr	r2, [pc, #144]	; (800709c <TIM_Base_SetConfig+0x138>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a23      	ldr	r2, [pc, #140]	; (80070a0 <TIM_Base_SetConfig+0x13c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d108      	bne.n	8007028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	615a      	str	r2, [r3, #20]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800
 8007098:	40001800 	.word	0x40001800
 800709c:	40001c00 	.word	0x40001c00
 80070a0:	40002000 	.word	0x40002000

080070a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4b2b      	ldr	r3, [pc, #172]	; (800717c <TIM_OC1_SetConfig+0xd8>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 0302 	bic.w	r3, r3, #2
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a21      	ldr	r2, [pc, #132]	; (8007180 <TIM_OC1_SetConfig+0xdc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_OC1_SetConfig+0x64>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a20      	ldr	r2, [pc, #128]	; (8007184 <TIM_OC1_SetConfig+0xe0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10c      	bne.n	8007122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0308 	bic.w	r3, r3, #8
 800710e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f023 0304 	bic.w	r3, r3, #4
 8007120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a16      	ldr	r2, [pc, #88]	; (8007180 <TIM_OC1_SetConfig+0xdc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC1_SetConfig+0x8e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a15      	ldr	r2, [pc, #84]	; (8007184 <TIM_OC1_SetConfig+0xe0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d111      	bne.n	8007156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	fffeff8f 	.word	0xfffeff8f
 8007180:	40010000 	.word	0x40010000
 8007184:	40010400 	.word	0x40010400

08007188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0210 	bic.w	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4b2e      	ldr	r3, [pc, #184]	; (800726c <TIM_OC2_SetConfig+0xe4>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a23      	ldr	r2, [pc, #140]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC2_SetConfig+0x68>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a22      	ldr	r2, [pc, #136]	; (8007274 <TIM_OC2_SetConfig+0xec>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10d      	bne.n	800720c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC2_SetConfig+0x94>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <TIM_OC2_SetConfig+0xec>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d113      	bne.n	8007244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	feff8fff 	.word	0xfeff8fff
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <TIM_OC3_SetConfig+0xe0>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a22      	ldr	r2, [pc, #136]	; (800735c <TIM_OC3_SetConfig+0xe4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_OC3_SetConfig+0x66>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a21      	ldr	r2, [pc, #132]	; (8007360 <TIM_OC3_SetConfig+0xe8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d10d      	bne.n	80072fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a17      	ldr	r2, [pc, #92]	; (800735c <TIM_OC3_SetConfig+0xe4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC3_SetConfig+0x92>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <TIM_OC3_SetConfig+0xe8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d113      	bne.n	8007332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	fffeff8f 	.word	0xfffeff8f
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400

08007364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <TIM_OC4_SetConfig+0xa4>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a13      	ldr	r2, [pc, #76]	; (800740c <TIM_OC4_SetConfig+0xa8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC4_SetConfig+0x68>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a12      	ldr	r2, [pc, #72]	; (8007410 <TIM_OC4_SetConfig+0xac>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d109      	bne.n	80073e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	019b      	lsls	r3, r3, #6
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	feff8fff 	.word	0xfeff8fff
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <TIM_OC5_SetConfig+0x98>)
 8007440:	4013      	ands	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a12      	ldr	r2, [pc, #72]	; (80074b0 <TIM_OC5_SetConfig+0x9c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d003      	beq.n	8007472 <TIM_OC5_SetConfig+0x5e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a11      	ldr	r2, [pc, #68]	; (80074b4 <TIM_OC5_SetConfig+0xa0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d109      	bne.n	8007486 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	621a      	str	r2, [r3, #32]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	fffeff8f 	.word	0xfffeff8f
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40010400 	.word	0x40010400

080074b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <TIM_OC6_SetConfig+0x9c>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	051b      	lsls	r3, r3, #20
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a13      	ldr	r2, [pc, #76]	; (8007558 <TIM_OC6_SetConfig+0xa0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC6_SetConfig+0x60>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a12      	ldr	r2, [pc, #72]	; (800755c <TIM_OC6_SetConfig+0xa4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d109      	bne.n	800752c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800751e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	feff8fff 	.word	0xfeff8fff
 8007558:	40010000 	.word	0x40010000
 800755c:	40010400 	.word	0x40010400

08007560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800758a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 030a 	bic.w	r3, r3, #10
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	f023 0210 	bic.w	r2, r3, #16
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	031b      	lsls	r3, r3, #12
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	f043 0307 	orr.w	r3, r3, #7
 8007640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	021a      	lsls	r2, r3, #8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	431a      	orrs	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4313      	orrs	r3, r2
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	609a      	str	r2, [r3, #8]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	2201      	movs	r2, #1
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a1a      	ldr	r2, [r3, #32]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	43db      	mvns	r3, r3
 80076b6:	401a      	ands	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a1a      	ldr	r2, [r3, #32]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	fa01 f303 	lsl.w	r3, r1, r3
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e045      	b.n	8007784 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1c      	ldr	r2, [pc, #112]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007756:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4313      	orrs	r3, r2
 8007760:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400

08007798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e040      	b.n	8007868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fc fda4 	bl	8004344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	; 0x24
 8007800:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa66 	bl	8007ce4 <UART_SetConfig>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e022      	b.n	8007868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fcfe 	bl	800822c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800783e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800784e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0201 	orr.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fd85 	bl	8008370 <UART_CheckIdleState>
 8007866:	4603      	mov	r3, r0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	2b20      	cmp	r3, #32
 8007884:	d164      	bne.n	8007950 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_UART_Transmit_DMA+0x22>
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e05d      	b.n	8007952 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_UART_Transmit_DMA+0x34>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e056      	b.n	8007952 <HAL_UART_Transmit_DMA+0xe2>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	88fa      	ldrh	r2, [r7, #6]
 80078b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2221      	movs	r2, #33	; 0x21
 80078cc:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02a      	beq.n	800792c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078da:	4a20      	ldr	r2, [pc, #128]	; (800795c <HAL_UART_Transmit_DMA+0xec>)
 80078dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e2:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <HAL_UART_Transmit_DMA+0xf0>)
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ea:	4a1e      	ldr	r2, [pc, #120]	; (8007964 <HAL_UART_Transmit_DMA+0xf4>)
 80078ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f2:	2200      	movs	r2, #0
 80078f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	4619      	mov	r1, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3328      	adds	r3, #40	; 0x28
 8007906:	461a      	mov	r2, r3
 8007908:	88fb      	ldrh	r3, [r7, #6]
 800790a:	f7fd f9d5 	bl	8004cb8 <HAL_DMA_Start_IT>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2210      	movs	r2, #16
 8007918:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e012      	b.n	8007952 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2240      	movs	r2, #64	; 0x40
 8007932:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800794a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	e000      	b.n	8007952 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8007950:	2302      	movs	r3, #2
  }
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	080084c9 	.word	0x080084c9
 8007960:	08008519 	.word	0x08008519
 8007964:	080085b5 	.word	0x080085b5

08007968 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800797a:	2b20      	cmp	r3, #32
 800797c:	d16c      	bne.n	8007a58 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_UART_Receive_DMA+0x22>
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e065      	b.n	8007a5a <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_UART_Receive_DMA+0x34>
 8007998:	2302      	movs	r3, #2
 800799a:	e05e      	b.n	8007a5a <HAL_UART_Receive_DMA+0xf2>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	88fa      	ldrh	r2, [r7, #6]
 80079ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2222      	movs	r2, #34	; 0x22
 80079bc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d02a      	beq.n	8007a1c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ca:	4a26      	ldr	r2, [pc, #152]	; (8007a64 <HAL_UART_Receive_DMA+0xfc>)
 80079cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <HAL_UART_Receive_DMA+0x100>)
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079da:	4a24      	ldr	r2, [pc, #144]	; (8007a6c <HAL_UART_Receive_DMA+0x104>)
 80079dc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e2:	2200      	movs	r2, #0
 80079e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	4619      	mov	r1, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	461a      	mov	r2, r3
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	f7fd f95d 	bl	8004cb8 <HAL_DMA_Start_IT>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2210      	movs	r2, #16
 8007a08:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e01e      	b.n	8007a5a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a32:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a52:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	e000      	b.n	8007a5a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007a58:	2302      	movs	r3, #2
  }
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	08008535 	.word	0x08008535
 8007a68:	08008599 	.word	0x08008599
 8007a6c:	080085b5 	.word	0x080085b5

08007a70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d113      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 80eb 	beq.w	8007c92 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
      }
      return;
 8007ac4:	e0e5      	b.n	8007c92 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80c0 	beq.w	8007c4e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d105      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80b5 	beq.w	8007c4e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <HAL_UART_IRQHandler+0x9c>
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2201      	movs	r2, #1
 8007afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b04:	f043 0201 	orr.w	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <HAL_UART_IRQHandler+0xc4>
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2202      	movs	r2, #2
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2c:	f043 0204 	orr.w	r2, r3, #4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <HAL_UART_IRQHandler+0xec>
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d009      	beq.n	8007b5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b54:	f043 0202 	orr.w	r2, r3, #2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d013      	beq.n	8007b8e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2208      	movs	r2, #8
 8007b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d07f      	beq.n	8007c96 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bbe:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d004      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d031      	beq.n	8007c3c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fc55 	bl	8008488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d123      	bne.n	8007c34 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bfa:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d013      	beq.n	8007c2c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c08:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <HAL_UART_IRQHandler+0x234>)
 8007c0a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fd f8b1 	bl	8004d78 <HAL_DMA_Abort_IT>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d016      	beq.n	8007c4a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007c26:	4610      	mov	r0, r2
 8007c28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2a:	e00e      	b.n	8007c4a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f84f 	bl	8007cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c32:	e00a      	b.n	8007c4a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f84b 	bl	8007cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3a:	e006      	b.n	8007c4a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f847 	bl	8007cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007c48:	e025      	b.n	8007c96 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4a:	bf00      	nop
    return;
 8007c4c:	e023      	b.n	8007c96 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00d      	beq.n	8007c74 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d017      	beq.n	8007c9a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
    }
    return;
 8007c72:	e012      	b.n	8007c9a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00e      	beq.n	8007c9c <HAL_UART_IRQHandler+0x22c>
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fce5 	bl	8008658 <UART_EndTransmit_IT>
    return;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <HAL_UART_IRQHandler+0x22c>
      return;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_UART_IRQHandler+0x22c>
    return;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_UART_IRQHandler+0x22c>
    return;
 8007c9a:	bf00      	nop
  }

}
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	0800862d 	.word	0x0800862d

08007ca8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4bb1      	ldr	r3, [pc, #708]	; (8007fd8 <UART_SetConfig+0x2f4>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	6939      	ldr	r1, [r7, #16]
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a9f      	ldr	r2, [pc, #636]	; (8007fdc <UART_SetConfig+0x2f8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d121      	bne.n	8007da8 <UART_SetConfig+0xc4>
 8007d64:	4b9e      	ldr	r3, [pc, #632]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d816      	bhi.n	8007da0 <UART_SetConfig+0xbc>
 8007d72:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x94>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d8f 	.word	0x08007d8f
 8007d84:	08007d9b 	.word	0x08007d9b
 8007d88:	2301      	movs	r3, #1
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e151      	b.n	8008032 <UART_SetConfig+0x34e>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e14e      	b.n	8008032 <UART_SetConfig+0x34e>
 8007d94:	2304      	movs	r3, #4
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e14b      	b.n	8008032 <UART_SetConfig+0x34e>
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e148      	b.n	8008032 <UART_SetConfig+0x34e>
 8007da0:	2310      	movs	r3, #16
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	bf00      	nop
 8007da6:	e144      	b.n	8008032 <UART_SetConfig+0x34e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a8d      	ldr	r2, [pc, #564]	; (8007fe4 <UART_SetConfig+0x300>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d134      	bne.n	8007e1c <UART_SetConfig+0x138>
 8007db2:	4b8b      	ldr	r3, [pc, #556]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db8:	f003 030c 	and.w	r3, r3, #12
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	d829      	bhi.n	8007e14 <UART_SetConfig+0x130>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <UART_SetConfig+0xe4>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e15 	.word	0x08007e15
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007e09 	.word	0x08007e09
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007e15 	.word	0x08007e15
 8007de8:	08007e03 	.word	0x08007e03
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e15 	.word	0x08007e15
 8007df8:	08007e0f 	.word	0x08007e0f
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e117      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e02:	2302      	movs	r3, #2
 8007e04:	77fb      	strb	r3, [r7, #31]
 8007e06:	e114      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	77fb      	strb	r3, [r7, #31]
 8007e0c:	e111      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e0e:	2308      	movs	r3, #8
 8007e10:	77fb      	strb	r3, [r7, #31]
 8007e12:	e10e      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e14:	2310      	movs	r3, #16
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	bf00      	nop
 8007e1a:	e10a      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a71      	ldr	r2, [pc, #452]	; (8007fe8 <UART_SetConfig+0x304>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d120      	bne.n	8007e68 <UART_SetConfig+0x184>
 8007e26:	4b6e      	ldr	r3, [pc, #440]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d00f      	beq.n	8007e54 <UART_SetConfig+0x170>
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d802      	bhi.n	8007e3e <UART_SetConfig+0x15a>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <UART_SetConfig+0x164>
 8007e3c:	e010      	b.n	8007e60 <UART_SetConfig+0x17c>
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d005      	beq.n	8007e4e <UART_SetConfig+0x16a>
 8007e42:	2b30      	cmp	r3, #48	; 0x30
 8007e44:	d009      	beq.n	8007e5a <UART_SetConfig+0x176>
 8007e46:	e00b      	b.n	8007e60 <UART_SetConfig+0x17c>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e0f1      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e0ee      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e54:	2304      	movs	r3, #4
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e0eb      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e0e8      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e60:	2310      	movs	r3, #16
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	bf00      	nop
 8007e66:	e0e4      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a5f      	ldr	r2, [pc, #380]	; (8007fec <UART_SetConfig+0x308>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d120      	bne.n	8007eb4 <UART_SetConfig+0x1d0>
 8007e72:	4b5b      	ldr	r3, [pc, #364]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d00f      	beq.n	8007ea0 <UART_SetConfig+0x1bc>
 8007e80:	2b40      	cmp	r3, #64	; 0x40
 8007e82:	d802      	bhi.n	8007e8a <UART_SetConfig+0x1a6>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <UART_SetConfig+0x1b0>
 8007e88:	e010      	b.n	8007eac <UART_SetConfig+0x1c8>
 8007e8a:	2b80      	cmp	r3, #128	; 0x80
 8007e8c:	d005      	beq.n	8007e9a <UART_SetConfig+0x1b6>
 8007e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e90:	d009      	beq.n	8007ea6 <UART_SetConfig+0x1c2>
 8007e92:	e00b      	b.n	8007eac <UART_SetConfig+0x1c8>
 8007e94:	2300      	movs	r3, #0
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e0cb      	b.n	8008032 <UART_SetConfig+0x34e>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e0c8      	b.n	8008032 <UART_SetConfig+0x34e>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e0c5      	b.n	8008032 <UART_SetConfig+0x34e>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e0c2      	b.n	8008032 <UART_SetConfig+0x34e>
 8007eac:	2310      	movs	r3, #16
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	bf00      	nop
 8007eb2:	e0be      	b.n	8008032 <UART_SetConfig+0x34e>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a4d      	ldr	r2, [pc, #308]	; (8007ff0 <UART_SetConfig+0x30c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d124      	bne.n	8007f08 <UART_SetConfig+0x224>
 8007ebe:	4b48      	ldr	r3, [pc, #288]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ecc:	d012      	beq.n	8007ef4 <UART_SetConfig+0x210>
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d802      	bhi.n	8007eda <UART_SetConfig+0x1f6>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d007      	beq.n	8007ee8 <UART_SetConfig+0x204>
 8007ed8:	e012      	b.n	8007f00 <UART_SetConfig+0x21c>
 8007eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ede:	d006      	beq.n	8007eee <UART_SetConfig+0x20a>
 8007ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee4:	d009      	beq.n	8007efa <UART_SetConfig+0x216>
 8007ee6:	e00b      	b.n	8007f00 <UART_SetConfig+0x21c>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	77fb      	strb	r3, [r7, #31]
 8007eec:	e0a1      	b.n	8008032 <UART_SetConfig+0x34e>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	77fb      	strb	r3, [r7, #31]
 8007ef2:	e09e      	b.n	8008032 <UART_SetConfig+0x34e>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	77fb      	strb	r3, [r7, #31]
 8007ef8:	e09b      	b.n	8008032 <UART_SetConfig+0x34e>
 8007efa:	2308      	movs	r3, #8
 8007efc:	77fb      	strb	r3, [r7, #31]
 8007efe:	e098      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f00:	2310      	movs	r3, #16
 8007f02:	77fb      	strb	r3, [r7, #31]
 8007f04:	bf00      	nop
 8007f06:	e094      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a39      	ldr	r2, [pc, #228]	; (8007ff4 <UART_SetConfig+0x310>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d124      	bne.n	8007f5c <UART_SetConfig+0x278>
 8007f12:	4b33      	ldr	r3, [pc, #204]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f20:	d012      	beq.n	8007f48 <UART_SetConfig+0x264>
 8007f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f26:	d802      	bhi.n	8007f2e <UART_SetConfig+0x24a>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <UART_SetConfig+0x258>
 8007f2c:	e012      	b.n	8007f54 <UART_SetConfig+0x270>
 8007f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f32:	d006      	beq.n	8007f42 <UART_SetConfig+0x25e>
 8007f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f38:	d009      	beq.n	8007f4e <UART_SetConfig+0x26a>
 8007f3a:	e00b      	b.n	8007f54 <UART_SetConfig+0x270>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e077      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f42:	2302      	movs	r3, #2
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e074      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f48:	2304      	movs	r3, #4
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e071      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	77fb      	strb	r3, [r7, #31]
 8007f52:	e06e      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f54:	2310      	movs	r3, #16
 8007f56:	77fb      	strb	r3, [r7, #31]
 8007f58:	bf00      	nop
 8007f5a:	e06a      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a25      	ldr	r2, [pc, #148]	; (8007ff8 <UART_SetConfig+0x314>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d124      	bne.n	8007fb0 <UART_SetConfig+0x2cc>
 8007f66:	4b1e      	ldr	r3, [pc, #120]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f74:	d012      	beq.n	8007f9c <UART_SetConfig+0x2b8>
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d802      	bhi.n	8007f82 <UART_SetConfig+0x29e>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <UART_SetConfig+0x2ac>
 8007f80:	e012      	b.n	8007fa8 <UART_SetConfig+0x2c4>
 8007f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f86:	d006      	beq.n	8007f96 <UART_SetConfig+0x2b2>
 8007f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f8c:	d009      	beq.n	8007fa2 <UART_SetConfig+0x2be>
 8007f8e:	e00b      	b.n	8007fa8 <UART_SetConfig+0x2c4>
 8007f90:	2300      	movs	r3, #0
 8007f92:	77fb      	strb	r3, [r7, #31]
 8007f94:	e04d      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	77fb      	strb	r3, [r7, #31]
 8007f9a:	e04a      	b.n	8008032 <UART_SetConfig+0x34e>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	77fb      	strb	r3, [r7, #31]
 8007fa0:	e047      	b.n	8008032 <UART_SetConfig+0x34e>
 8007fa2:	2308      	movs	r3, #8
 8007fa4:	77fb      	strb	r3, [r7, #31]
 8007fa6:	e044      	b.n	8008032 <UART_SetConfig+0x34e>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	bf00      	nop
 8007fae:	e040      	b.n	8008032 <UART_SetConfig+0x34e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a11      	ldr	r2, [pc, #68]	; (8007ffc <UART_SetConfig+0x318>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d139      	bne.n	800802e <UART_SetConfig+0x34a>
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <UART_SetConfig+0x2fc>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc8:	d027      	beq.n	800801a <UART_SetConfig+0x336>
 8007fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fce:	d817      	bhi.n	8008000 <UART_SetConfig+0x31c>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01c      	beq.n	800800e <UART_SetConfig+0x32a>
 8007fd4:	e027      	b.n	8008026 <UART_SetConfig+0x342>
 8007fd6:	bf00      	nop
 8007fd8:	efff69f3 	.word	0xefff69f3
 8007fdc:	40011000 	.word	0x40011000
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	40004400 	.word	0x40004400
 8007fe8:	40004800 	.word	0x40004800
 8007fec:	40004c00 	.word	0x40004c00
 8007ff0:	40005000 	.word	0x40005000
 8007ff4:	40011400 	.word	0x40011400
 8007ff8:	40007800 	.word	0x40007800
 8007ffc:	40007c00 	.word	0x40007c00
 8008000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008004:	d006      	beq.n	8008014 <UART_SetConfig+0x330>
 8008006:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800800a:	d009      	beq.n	8008020 <UART_SetConfig+0x33c>
 800800c:	e00b      	b.n	8008026 <UART_SetConfig+0x342>
 800800e:	2300      	movs	r3, #0
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e00e      	b.n	8008032 <UART_SetConfig+0x34e>
 8008014:	2302      	movs	r3, #2
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e00b      	b.n	8008032 <UART_SetConfig+0x34e>
 800801a:	2304      	movs	r3, #4
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e008      	b.n	8008032 <UART_SetConfig+0x34e>
 8008020:	2308      	movs	r3, #8
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	e005      	b.n	8008032 <UART_SetConfig+0x34e>
 8008026:	2310      	movs	r3, #16
 8008028:	77fb      	strb	r3, [r7, #31]
 800802a:	bf00      	nop
 800802c:	e001      	b.n	8008032 <UART_SetConfig+0x34e>
 800802e:	2310      	movs	r3, #16
 8008030:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803a:	d17c      	bne.n	8008136 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800803c:	7ffb      	ldrb	r3, [r7, #31]
 800803e:	2b08      	cmp	r3, #8
 8008040:	d859      	bhi.n	80080f6 <UART_SetConfig+0x412>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x364>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	0800806d 	.word	0x0800806d
 800804c:	0800808b 	.word	0x0800808b
 8008050:	080080a9 	.word	0x080080a9
 8008054:	080080f7 	.word	0x080080f7
 8008058:	080080c1 	.word	0x080080c1
 800805c:	080080f7 	.word	0x080080f7
 8008060:	080080f7 	.word	0x080080f7
 8008064:	080080f7 	.word	0x080080f7
 8008068:	080080df 	.word	0x080080df
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800806c:	f7fd feea 	bl	8005e44 <HAL_RCC_GetPCLK1Freq>
 8008070:	4603      	mov	r3, r0
 8008072:	005a      	lsls	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	b29b      	uxth	r3, r3
 8008086:	61bb      	str	r3, [r7, #24]
        break;
 8008088:	e038      	b.n	80080fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800808a:	f7fd feef 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 800808e:	4603      	mov	r3, r0
 8008090:	005a      	lsls	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	441a      	add	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	61bb      	str	r3, [r7, #24]
        break;
 80080a6:	e029      	b.n	80080fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	085a      	lsrs	r2, r3, #1
 80080ae:	4b5d      	ldr	r3, [pc, #372]	; (8008224 <UART_SetConfig+0x540>)
 80080b0:	4413      	add	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6852      	ldr	r2, [r2, #4]
 80080b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	61bb      	str	r3, [r7, #24]
        break;
 80080be:	e01d      	b.n	80080fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80080c0:	f7fd fe02 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 80080c4:	4603      	mov	r3, r0
 80080c6:	005a      	lsls	r2, r3, #1
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	441a      	add	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	b29b      	uxth	r3, r3
 80080da:	61bb      	str	r3, [r7, #24]
        break;
 80080dc:	e00e      	b.n	80080fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	085b      	lsrs	r3, r3, #1
 80080e4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	61bb      	str	r3, [r7, #24]
        break;
 80080f4:	e002      	b.n	80080fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	75fb      	strb	r3, [r7, #23]
        break;
 80080fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b0f      	cmp	r3, #15
 8008100:	d916      	bls.n	8008130 <UART_SetConfig+0x44c>
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008108:	d212      	bcs.n	8008130 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f023 030f 	bic.w	r3, r3, #15
 8008112:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	b29a      	uxth	r2, r3
 8008120:	89fb      	ldrh	r3, [r7, #14]
 8008122:	4313      	orrs	r3, r2
 8008124:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	89fa      	ldrh	r2, [r7, #14]
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	e06e      	b.n	800820e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	e06b      	b.n	800820e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008136:	7ffb      	ldrb	r3, [r7, #31]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d857      	bhi.n	80081ec <UART_SetConfig+0x508>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0x460>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008169 	.word	0x08008169
 8008148:	08008185 	.word	0x08008185
 800814c:	080081a1 	.word	0x080081a1
 8008150:	080081ed 	.word	0x080081ed
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081ed 	.word	0x080081ed
 800815c:	080081ed 	.word	0x080081ed
 8008160:	080081ed 	.word	0x080081ed
 8008164:	080081d5 	.word	0x080081d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008168:	f7fd fe6c 	bl	8005e44 <HAL_RCC_GetPCLK1Freq>
 800816c:	4602      	mov	r2, r0
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	fbb2 f3f3 	udiv	r3, r2, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	61bb      	str	r3, [r7, #24]
        break;
 8008182:	e036      	b.n	80081f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008184:	f7fd fe72 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 8008188:	4602      	mov	r2, r0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	085b      	lsrs	r3, r3, #1
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	fbb2 f3f3 	udiv	r3, r2, r3
 800819a:	b29b      	uxth	r3, r3
 800819c:	61bb      	str	r3, [r7, #24]
        break;
 800819e:	e028      	b.n	80081f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	085a      	lsrs	r2, r3, #1
 80081a6:	4b20      	ldr	r3, [pc, #128]	; (8008228 <UART_SetConfig+0x544>)
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	61bb      	str	r3, [r7, #24]
        break;
 80081b6:	e01c      	b.n	80081f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80081b8:	f7fd fd86 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 80081bc:	4602      	mov	r2, r0
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	441a      	add	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	61bb      	str	r3, [r7, #24]
        break;
 80081d2:	e00e      	b.n	80081f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	085b      	lsrs	r3, r3, #1
 80081da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	61bb      	str	r3, [r7, #24]
        break;
 80081ea:	e002      	b.n	80081f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
        break;
 80081f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b0f      	cmp	r3, #15
 80081f6:	d908      	bls.n	800820a <UART_SetConfig+0x526>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d204      	bcs.n	800820a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	60da      	str	r2, [r3, #12]
 8008208:	e001      	b.n	800820e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	01e84800 	.word	0x01e84800
 8008228:	00f42400 	.word	0x00f42400

0800822c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01a      	beq.n	8008342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800832a:	d10a      	bne.n	8008342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800837e:	f7fc facf 	bl	8004920 <HAL_GetTick>
 8008382:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b08      	cmp	r3, #8
 8008390:	d10e      	bne.n	80083b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008392:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f814 	bl	80083ce <UART_WaitOnFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e00a      	b.n	80083c6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	603b      	str	r3, [r7, #0]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083de:	e02a      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e6:	d026      	beq.n	8008436 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e8:	f7fc fa9a 	bl	8004920 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <UART_WaitOnFlagUntilTimeout+0x30>
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d11b      	bne.n	8008436 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800840c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0201 	bic.w	r2, r2, #1
 800841c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e00f      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69da      	ldr	r2, [r3, #28]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4013      	ands	r3, r2
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	429a      	cmp	r2, r3
 8008452:	d0c5      	beq.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008474:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800849e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	661a      	str	r2, [r3, #96]	; 0x60
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084de:	d014      	beq.n	800850a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008506:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008508:	e002      	b.n	8008510 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7fa fea0 	bl	8003250 <HAL_UART_TxCpltCallback>
}
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fbbe 	bl	8007ca8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d01e      	beq.n	800858a <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008562:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008582:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7fa fe72 	bl	8003274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff fb88 	bl	8007cbc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d109      	bne.n	80085f0 <UART_DMAError+0x3c>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b21      	cmp	r3, #33	; 0x21
 80085e0:	d106      	bne.n	80085f0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7ff ff37 	bl	800845e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	d109      	bne.n	8008612 <UART_DMAError+0x5e>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b22      	cmp	r3, #34	; 0x22
 8008602:	d106      	bne.n	8008612 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2200      	movs	r2, #0
 8008608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800860c:	6978      	ldr	r0, [r7, #20]
 800860e:	f7ff ff3b 	bl	8008488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008616:	f043 0210 	orr.w	r2, r3, #16
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f7ff fb56 	bl	8007cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fb40 	bl	8007cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7fa fde7 	bl	8003250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <__cxa_pure_virtual>:
 800868a:	b508      	push	{r3, lr}
 800868c:	f000 f80c 	bl	80086a8 <_ZSt9terminatev>

08008690 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008690:	b508      	push	{r3, lr}
 8008692:	4780      	blx	r0
 8008694:	f001 fbc3 	bl	8009e1e <abort>

08008698 <_ZSt13get_terminatev>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <_ZSt13get_terminatev+0xc>)
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	f3bf 8f5b 	dmb	ish
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000001c 	.word	0x2000001c

080086a8 <_ZSt9terminatev>:
 80086a8:	b508      	push	{r3, lr}
 80086aa:	f7ff fff5 	bl	8008698 <_ZSt13get_terminatev>
 80086ae:	f7ff ffef 	bl	8008690 <_ZN10__cxxabiv111__terminateEPFvvE>
 80086b2:	0000      	movs	r0, r0
 80086b4:	0000      	movs	r0, r0
	...

080086b8 <cos>:
 80086b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ba:	eeb0 7b40 	vmov.f64	d7, d0
 80086be:	ee17 3a90 	vmov	r3, s15
 80086c2:	4a19      	ldr	r2, [pc, #100]	; (8008728 <cos+0x70>)
 80086c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086c8:	4293      	cmp	r3, r2
 80086ca:	dc04      	bgt.n	80086d6 <cos+0x1e>
 80086cc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8008720 <cos+0x68>
 80086d0:	f000 fb56 	bl	8008d80 <__kernel_cos>
 80086d4:	e004      	b.n	80086e0 <cos+0x28>
 80086d6:	4a15      	ldr	r2, [pc, #84]	; (800872c <cos+0x74>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	dd04      	ble.n	80086e6 <cos+0x2e>
 80086dc:	ee30 0b40 	vsub.f64	d0, d0, d0
 80086e0:	b005      	add	sp, #20
 80086e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80086e6:	4668      	mov	r0, sp
 80086e8:	f000 f8e2 	bl	80088b0 <__ieee754_rem_pio2>
 80086ec:	f000 0003 	and.w	r0, r0, #3
 80086f0:	2801      	cmp	r0, #1
 80086f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086f6:	ed9d 0b00 	vldr	d0, [sp]
 80086fa:	d007      	beq.n	800870c <cos+0x54>
 80086fc:	2802      	cmp	r0, #2
 80086fe:	d00a      	beq.n	8008716 <cos+0x5e>
 8008700:	2800      	cmp	r0, #0
 8008702:	d0e5      	beq.n	80086d0 <cos+0x18>
 8008704:	2001      	movs	r0, #1
 8008706:	f000 fe43 	bl	8009390 <__kernel_sin>
 800870a:	e7e9      	b.n	80086e0 <cos+0x28>
 800870c:	f000 fe40 	bl	8009390 <__kernel_sin>
 8008710:	eeb1 0b40 	vneg.f64	d0, d0
 8008714:	e7e4      	b.n	80086e0 <cos+0x28>
 8008716:	f000 fb33 	bl	8008d80 <__kernel_cos>
 800871a:	e7f9      	b.n	8008710 <cos+0x58>
 800871c:	f3af 8000 	nop.w
	...
 8008728:	3fe921fb 	.word	0x3fe921fb
 800872c:	7fefffff 	.word	0x7fefffff

08008730 <sin>:
 8008730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008732:	eeb0 7b40 	vmov.f64	d7, d0
 8008736:	ee17 3a90 	vmov	r3, s15
 800873a:	4a19      	ldr	r2, [pc, #100]	; (80087a0 <sin+0x70>)
 800873c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008740:	4293      	cmp	r3, r2
 8008742:	dc05      	bgt.n	8008750 <sin+0x20>
 8008744:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8008798 <sin+0x68>
 8008748:	2000      	movs	r0, #0
 800874a:	f000 fe21 	bl	8009390 <__kernel_sin>
 800874e:	e004      	b.n	800875a <sin+0x2a>
 8008750:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <sin+0x74>)
 8008752:	4293      	cmp	r3, r2
 8008754:	dd04      	ble.n	8008760 <sin+0x30>
 8008756:	ee30 0b40 	vsub.f64	d0, d0, d0
 800875a:	b005      	add	sp, #20
 800875c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008760:	4668      	mov	r0, sp
 8008762:	f000 f8a5 	bl	80088b0 <__ieee754_rem_pio2>
 8008766:	f000 0003 	and.w	r0, r0, #3
 800876a:	2801      	cmp	r0, #1
 800876c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008770:	ed9d 0b00 	vldr	d0, [sp]
 8008774:	d004      	beq.n	8008780 <sin+0x50>
 8008776:	2802      	cmp	r0, #2
 8008778:	d005      	beq.n	8008786 <sin+0x56>
 800877a:	b950      	cbnz	r0, 8008792 <sin+0x62>
 800877c:	2001      	movs	r0, #1
 800877e:	e7e4      	b.n	800874a <sin+0x1a>
 8008780:	f000 fafe 	bl	8008d80 <__kernel_cos>
 8008784:	e7e9      	b.n	800875a <sin+0x2a>
 8008786:	2001      	movs	r0, #1
 8008788:	f000 fe02 	bl	8009390 <__kernel_sin>
 800878c:	eeb1 0b40 	vneg.f64	d0, d0
 8008790:	e7e3      	b.n	800875a <sin+0x2a>
 8008792:	f000 faf5 	bl	8008d80 <__kernel_cos>
 8008796:	e7f9      	b.n	800878c <sin+0x5c>
	...
 80087a0:	3fe921fb 	.word	0x3fe921fb
 80087a4:	7fefffff 	.word	0x7fefffff

080087a8 <cosf>:
 80087a8:	ee10 3a10 	vmov	r3, s0
 80087ac:	b507      	push	{r0, r1, r2, lr}
 80087ae:	4a1c      	ldr	r2, [pc, #112]	; (8008820 <cosf+0x78>)
 80087b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	4293      	cmp	r3, r2
 80087b6:	dc04      	bgt.n	80087c2 <cosf+0x1a>
 80087b8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008824 <cosf+0x7c>
 80087bc:	f000 fe40 	bl	8009440 <__kernel_cosf>
 80087c0:	e004      	b.n	80087cc <cosf+0x24>
 80087c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80087c6:	db04      	blt.n	80087d2 <cosf+0x2a>
 80087c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80087cc:	b003      	add	sp, #12
 80087ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80087d2:	4668      	mov	r0, sp
 80087d4:	f000 f9a8 	bl	8008b28 <__ieee754_rem_pio2f>
 80087d8:	f000 0003 	and.w	r0, r0, #3
 80087dc:	2801      	cmp	r0, #1
 80087de:	d007      	beq.n	80087f0 <cosf+0x48>
 80087e0:	2802      	cmp	r0, #2
 80087e2:	d00e      	beq.n	8008802 <cosf+0x5a>
 80087e4:	b9a0      	cbnz	r0, 8008810 <cosf+0x68>
 80087e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80087ea:	ed9d 0a00 	vldr	s0, [sp]
 80087ee:	e7e5      	b.n	80087bc <cosf+0x14>
 80087f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80087f4:	ed9d 0a00 	vldr	s0, [sp]
 80087f8:	f001 f902 	bl	8009a00 <__kernel_sinf>
 80087fc:	eeb1 0a40 	vneg.f32	s0, s0
 8008800:	e7e4      	b.n	80087cc <cosf+0x24>
 8008802:	eddd 0a01 	vldr	s1, [sp, #4]
 8008806:	ed9d 0a00 	vldr	s0, [sp]
 800880a:	f000 fe19 	bl	8009440 <__kernel_cosf>
 800880e:	e7f5      	b.n	80087fc <cosf+0x54>
 8008810:	2001      	movs	r0, #1
 8008812:	eddd 0a01 	vldr	s1, [sp, #4]
 8008816:	ed9d 0a00 	vldr	s0, [sp]
 800881a:	f001 f8f1 	bl	8009a00 <__kernel_sinf>
 800881e:	e7d5      	b.n	80087cc <cosf+0x24>
 8008820:	3f490fd8 	.word	0x3f490fd8
 8008824:	00000000 	.word	0x00000000

08008828 <sinf>:
 8008828:	ee10 3a10 	vmov	r3, s0
 800882c:	b507      	push	{r0, r1, r2, lr}
 800882e:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <sinf+0x7c>)
 8008830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008834:	4293      	cmp	r3, r2
 8008836:	dc05      	bgt.n	8008844 <sinf+0x1c>
 8008838:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80088a8 <sinf+0x80>
 800883c:	2000      	movs	r0, #0
 800883e:	f001 f8df 	bl	8009a00 <__kernel_sinf>
 8008842:	e004      	b.n	800884e <sinf+0x26>
 8008844:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008848:	db04      	blt.n	8008854 <sinf+0x2c>
 800884a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800884e:	b003      	add	sp, #12
 8008850:	f85d fb04 	ldr.w	pc, [sp], #4
 8008854:	4668      	mov	r0, sp
 8008856:	f000 f967 	bl	8008b28 <__ieee754_rem_pio2f>
 800885a:	f000 0003 	and.w	r0, r0, #3
 800885e:	2801      	cmp	r0, #1
 8008860:	d008      	beq.n	8008874 <sinf+0x4c>
 8008862:	2802      	cmp	r0, #2
 8008864:	d00d      	beq.n	8008882 <sinf+0x5a>
 8008866:	b9b0      	cbnz	r0, 8008896 <sinf+0x6e>
 8008868:	2001      	movs	r0, #1
 800886a:	eddd 0a01 	vldr	s1, [sp, #4]
 800886e:	ed9d 0a00 	vldr	s0, [sp]
 8008872:	e7e4      	b.n	800883e <sinf+0x16>
 8008874:	eddd 0a01 	vldr	s1, [sp, #4]
 8008878:	ed9d 0a00 	vldr	s0, [sp]
 800887c:	f000 fde0 	bl	8009440 <__kernel_cosf>
 8008880:	e7e5      	b.n	800884e <sinf+0x26>
 8008882:	2001      	movs	r0, #1
 8008884:	eddd 0a01 	vldr	s1, [sp, #4]
 8008888:	ed9d 0a00 	vldr	s0, [sp]
 800888c:	f001 f8b8 	bl	8009a00 <__kernel_sinf>
 8008890:	eeb1 0a40 	vneg.f32	s0, s0
 8008894:	e7db      	b.n	800884e <sinf+0x26>
 8008896:	eddd 0a01 	vldr	s1, [sp, #4]
 800889a:	ed9d 0a00 	vldr	s0, [sp]
 800889e:	f000 fdcf 	bl	8009440 <__kernel_cosf>
 80088a2:	e7f5      	b.n	8008890 <sinf+0x68>
 80088a4:	3f490fd8 	.word	0x3f490fd8
	...

080088b0 <__ieee754_rem_pio2>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	eeb0 7b40 	vmov.f64	d7, d0
 80088b6:	ee17 5a90 	vmov	r5, s15
 80088ba:	4b95      	ldr	r3, [pc, #596]	; (8008b10 <__ieee754_rem_pio2+0x260>)
 80088bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80088c0:	429e      	cmp	r6, r3
 80088c2:	b088      	sub	sp, #32
 80088c4:	4604      	mov	r4, r0
 80088c6:	dc07      	bgt.n	80088d8 <__ieee754_rem_pio2+0x28>
 80088c8:	2200      	movs	r2, #0
 80088ca:	2300      	movs	r3, #0
 80088cc:	ed84 0b00 	vstr	d0, [r4]
 80088d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088d4:	2000      	movs	r0, #0
 80088d6:	e01b      	b.n	8008910 <__ieee754_rem_pio2+0x60>
 80088d8:	4b8e      	ldr	r3, [pc, #568]	; (8008b14 <__ieee754_rem_pio2+0x264>)
 80088da:	429e      	cmp	r6, r3
 80088dc:	dc3b      	bgt.n	8008956 <__ieee754_rem_pio2+0xa6>
 80088de:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008ad0 <__ieee754_rem_pio2+0x220>
 80088e8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80088ec:	dd19      	ble.n	8008922 <__ieee754_rem_pio2+0x72>
 80088ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 80088f2:	429e      	cmp	r6, r3
 80088f4:	d00e      	beq.n	8008914 <__ieee754_rem_pio2+0x64>
 80088f6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008ad8 <__ieee754_rem_pio2+0x228>
 80088fa:	ee37 5b46 	vsub.f64	d5, d7, d6
 80088fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008902:	ed84 5b00 	vstr	d5, [r4]
 8008906:	ee37 7b46 	vsub.f64	d7, d7, d6
 800890a:	ed84 7b02 	vstr	d7, [r4, #8]
 800890e:	2001      	movs	r0, #1
 8008910:	b008      	add	sp, #32
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8008ae0 <__ieee754_rem_pio2+0x230>
 8008918:	ee37 7b46 	vsub.f64	d7, d7, d6
 800891c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8008ae8 <__ieee754_rem_pio2+0x238>
 8008920:	e7eb      	b.n	80088fa <__ieee754_rem_pio2+0x4a>
 8008922:	429e      	cmp	r6, r3
 8008924:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008928:	d00e      	beq.n	8008948 <__ieee754_rem_pio2+0x98>
 800892a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8008ad8 <__ieee754_rem_pio2+0x228>
 800892e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008932:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008936:	ed84 5b00 	vstr	d5, [r4]
 800893a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800893e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008942:	ed84 7b02 	vstr	d7, [r4, #8]
 8008946:	e7e3      	b.n	8008910 <__ieee754_rem_pio2+0x60>
 8008948:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8008ae0 <__ieee754_rem_pio2+0x230>
 800894c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008950:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8008ae8 <__ieee754_rem_pio2+0x238>
 8008954:	e7eb      	b.n	800892e <__ieee754_rem_pio2+0x7e>
 8008956:	4b70      	ldr	r3, [pc, #448]	; (8008b18 <__ieee754_rem_pio2+0x268>)
 8008958:	429e      	cmp	r6, r3
 800895a:	dc6c      	bgt.n	8008a36 <__ieee754_rem_pio2+0x186>
 800895c:	f001 f898 	bl	8009a90 <fabs>
 8008960:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008964:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8008af0 <__ieee754_rem_pio2+0x240>
 8008968:	eea0 7b06 	vfma.f64	d7, d0, d6
 800896c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008970:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008974:	ee17 0a90 	vmov	r0, s15
 8008978:	eeb1 5b44 	vneg.f64	d5, d4
 800897c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8008ad0 <__ieee754_rem_pio2+0x220>
 8008980:	eea5 0b07 	vfma.f64	d0, d5, d7
 8008984:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8008ad8 <__ieee754_rem_pio2+0x228>
 8008988:	281f      	cmp	r0, #31
 800898a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800898e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008992:	dc08      	bgt.n	80089a6 <__ieee754_rem_pio2+0xf6>
 8008994:	1e42      	subs	r2, r0, #1
 8008996:	4b61      	ldr	r3, [pc, #388]	; (8008b1c <__ieee754_rem_pio2+0x26c>)
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	42b3      	cmp	r3, r6
 800899e:	d002      	beq.n	80089a6 <__ieee754_rem_pio2+0xf6>
 80089a0:	ed84 6b00 	vstr	d6, [r4]
 80089a4:	e022      	b.n	80089ec <__ieee754_rem_pio2+0x13c>
 80089a6:	ee16 3a90 	vmov	r3, s13
 80089aa:	1536      	asrs	r6, r6, #20
 80089ac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80089b0:	1af3      	subs	r3, r6, r3
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	ddf4      	ble.n	80089a0 <__ieee754_rem_pio2+0xf0>
 80089b6:	eeb0 6b40 	vmov.f64	d6, d0
 80089ba:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8008ae0 <__ieee754_rem_pio2+0x230>
 80089be:	eea5 6b03 	vfma.f64	d6, d5, d3
 80089c2:	ee30 7b46 	vsub.f64	d7, d0, d6
 80089c6:	eea5 7b03 	vfma.f64	d7, d5, d3
 80089ca:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8008ae8 <__ieee754_rem_pio2+0x238>
 80089ce:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80089d2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80089d6:	ee13 3a90 	vmov	r3, s7
 80089da:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80089de:	1af6      	subs	r6, r6, r3
 80089e0:	2e31      	cmp	r6, #49	; 0x31
 80089e2:	dc17      	bgt.n	8008a14 <__ieee754_rem_pio2+0x164>
 80089e4:	eeb0 0b46 	vmov.f64	d0, d6
 80089e8:	ed84 3b00 	vstr	d3, [r4]
 80089ec:	ed94 6b00 	vldr	d6, [r4]
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80089f6:	ee30 7b47 	vsub.f64	d7, d0, d7
 80089fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80089fe:	da87      	bge.n	8008910 <__ieee754_rem_pio2+0x60>
 8008a00:	eeb1 6b46 	vneg.f64	d6, d6
 8008a04:	ed84 6b00 	vstr	d6, [r4]
 8008a08:	eeb1 7b47 	vneg.f64	d7, d7
 8008a0c:	4240      	negs	r0, r0
 8008a0e:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a12:	e77d      	b.n	8008910 <__ieee754_rem_pio2+0x60>
 8008a14:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8008af8 <__ieee754_rem_pio2+0x248>
 8008a18:	eeb0 0b46 	vmov.f64	d0, d6
 8008a1c:	eea5 0b03 	vfma.f64	d0, d5, d3
 8008a20:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008a24:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8008b00 <__ieee754_rem_pio2+0x250>
 8008a28:	eea5 7b03 	vfma.f64	d7, d5, d3
 8008a2c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8008a30:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008a34:	e7b4      	b.n	80089a0 <__ieee754_rem_pio2+0xf0>
 8008a36:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <__ieee754_rem_pio2+0x270>)
 8008a38:	429e      	cmp	r6, r3
 8008a3a:	dd06      	ble.n	8008a4a <__ieee754_rem_pio2+0x19a>
 8008a3c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008a40:	ed80 7b02 	vstr	d7, [r0, #8]
 8008a44:	ed80 7b00 	vstr	d7, [r0]
 8008a48:	e744      	b.n	80088d4 <__ieee754_rem_pio2+0x24>
 8008a4a:	1532      	asrs	r2, r6, #20
 8008a4c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008a50:	ee10 0a10 	vmov	r0, s0
 8008a54:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008a58:	ec41 0b17 	vmov	d7, r0, r1
 8008a5c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008a60:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8008b08 <__ieee754_rem_pio2+0x258>
 8008a64:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008a70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a74:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008a78:	a908      	add	r1, sp, #32
 8008a7a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008a7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a82:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008a86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a8e:	2303      	movs	r3, #3
 8008a90:	ed31 7b02 	vldmdb	r1!, {d7}
 8008a94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8008aa0:	d013      	beq.n	8008aca <__ieee754_rem_pio2+0x21a>
 8008aa2:	4920      	ldr	r1, [pc, #128]	; (8008b24 <__ieee754_rem_pio2+0x274>)
 8008aa4:	9101      	str	r1, [sp, #4]
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	9100      	str	r1, [sp, #0]
 8008aaa:	a802      	add	r0, sp, #8
 8008aac:	4621      	mov	r1, r4
 8008aae:	f000 f9d3 	bl	8008e58 <__kernel_rem_pio2>
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	f6bf af2c 	bge.w	8008910 <__ieee754_rem_pio2+0x60>
 8008ab8:	ed94 7b00 	vldr	d7, [r4]
 8008abc:	eeb1 7b47 	vneg.f64	d7, d7
 8008ac0:	ed84 7b00 	vstr	d7, [r4]
 8008ac4:	ed94 7b02 	vldr	d7, [r4, #8]
 8008ac8:	e79e      	b.n	8008a08 <__ieee754_rem_pio2+0x158>
 8008aca:	4603      	mov	r3, r0
 8008acc:	e7e0      	b.n	8008a90 <__ieee754_rem_pio2+0x1e0>
 8008ace:	bf00      	nop
 8008ad0:	54400000 	.word	0x54400000
 8008ad4:	3ff921fb 	.word	0x3ff921fb
 8008ad8:	1a626331 	.word	0x1a626331
 8008adc:	3dd0b461 	.word	0x3dd0b461
 8008ae0:	1a600000 	.word	0x1a600000
 8008ae4:	3dd0b461 	.word	0x3dd0b461
 8008ae8:	2e037073 	.word	0x2e037073
 8008aec:	3ba3198a 	.word	0x3ba3198a
 8008af0:	6dc9c883 	.word	0x6dc9c883
 8008af4:	3fe45f30 	.word	0x3fe45f30
 8008af8:	2e000000 	.word	0x2e000000
 8008afc:	3ba3198a 	.word	0x3ba3198a
 8008b00:	252049c1 	.word	0x252049c1
 8008b04:	397b839a 	.word	0x397b839a
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	41700000 	.word	0x41700000
 8008b10:	3fe921fb 	.word	0x3fe921fb
 8008b14:	4002d97b 	.word	0x4002d97b
 8008b18:	413921fb 	.word	0x413921fb
 8008b1c:	0800a648 	.word	0x0800a648
 8008b20:	7fefffff 	.word	0x7fefffff
 8008b24:	0800a6c8 	.word	0x0800a6c8

08008b28 <__ieee754_rem_pio2f>:
 8008b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2a:	ee10 6a10 	vmov	r6, s0
 8008b2e:	4b86      	ldr	r3, [pc, #536]	; (8008d48 <__ieee754_rem_pio2f+0x220>)
 8008b30:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008b34:	429c      	cmp	r4, r3
 8008b36:	b087      	sub	sp, #28
 8008b38:	4605      	mov	r5, r0
 8008b3a:	dc05      	bgt.n	8008b48 <__ieee754_rem_pio2f+0x20>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	ed85 0a00 	vstr	s0, [r5]
 8008b42:	6043      	str	r3, [r0, #4]
 8008b44:	2000      	movs	r0, #0
 8008b46:	e020      	b.n	8008b8a <__ieee754_rem_pio2f+0x62>
 8008b48:	4b80      	ldr	r3, [pc, #512]	; (8008d4c <__ieee754_rem_pio2f+0x224>)
 8008b4a:	429c      	cmp	r4, r3
 8008b4c:	dc38      	bgt.n	8008bc0 <__ieee754_rem_pio2f+0x98>
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	f024 040f 	bic.w	r4, r4, #15
 8008b54:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008d50 <__ieee754_rem_pio2f+0x228>
 8008b58:	4b7e      	ldr	r3, [pc, #504]	; (8008d54 <__ieee754_rem_pio2f+0x22c>)
 8008b5a:	dd18      	ble.n	8008b8e <__ieee754_rem_pio2f+0x66>
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008b62:	bf09      	itett	eq
 8008b64:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008d58 <__ieee754_rem_pio2f+0x230>
 8008b68:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008d5c <__ieee754_rem_pio2f+0x234>
 8008b6c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008b70:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008d60 <__ieee754_rem_pio2f+0x238>
 8008b74:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b7c:	edc0 6a00 	vstr	s13, [r0]
 8008b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b84:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b88:	2001      	movs	r0, #1
 8008b8a:	b007      	add	sp, #28
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008b94:	bf09      	itett	eq
 8008b96:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008d58 <__ieee754_rem_pio2f+0x230>
 8008b9a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008d5c <__ieee754_rem_pio2f+0x234>
 8008b9e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008ba2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008d60 <__ieee754_rem_pio2f+0x238>
 8008ba6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008baa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bae:	edc0 6a00 	vstr	s13, [r0]
 8008bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bb6:	edc0 7a01 	vstr	s15, [r0, #4]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbe:	e7e4      	b.n	8008b8a <__ieee754_rem_pio2f+0x62>
 8008bc0:	4b68      	ldr	r3, [pc, #416]	; (8008d64 <__ieee754_rem_pio2f+0x23c>)
 8008bc2:	429c      	cmp	r4, r3
 8008bc4:	dc71      	bgt.n	8008caa <__ieee754_rem_pio2f+0x182>
 8008bc6:	f001 f865 	bl	8009c94 <fabsf>
 8008bca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008d68 <__ieee754_rem_pio2f+0x240>
 8008bce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008bd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bda:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008bde:	ee17 0a90 	vmov	r0, s15
 8008be2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008d50 <__ieee754_rem_pio2f+0x228>
 8008be6:	eeb1 7a46 	vneg.f32	s14, s12
 8008bea:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008bee:	281f      	cmp	r0, #31
 8008bf0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008d5c <__ieee754_rem_pio2f+0x234>
 8008bf4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008bf8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008bfc:	ee16 3a90 	vmov	r3, s13
 8008c00:	dc1c      	bgt.n	8008c3c <__ieee754_rem_pio2f+0x114>
 8008c02:	1e47      	subs	r7, r0, #1
 8008c04:	4959      	ldr	r1, [pc, #356]	; (8008d6c <__ieee754_rem_pio2f+0x244>)
 8008c06:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008c0a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008c0e:	428a      	cmp	r2, r1
 8008c10:	d014      	beq.n	8008c3c <__ieee754_rem_pio2f+0x114>
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	ed95 7a00 	vldr	s14, [r5]
 8008c18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c22:	ed85 0a01 	vstr	s0, [r5, #4]
 8008c26:	dab0      	bge.n	8008b8a <__ieee754_rem_pio2f+0x62>
 8008c28:	eeb1 7a47 	vneg.f32	s14, s14
 8008c2c:	eeb1 0a40 	vneg.f32	s0, s0
 8008c30:	ed85 7a00 	vstr	s14, [r5]
 8008c34:	ed85 0a01 	vstr	s0, [r5, #4]
 8008c38:	4240      	negs	r0, r0
 8008c3a:	e7a6      	b.n	8008b8a <__ieee754_rem_pio2f+0x62>
 8008c3c:	15e4      	asrs	r4, r4, #23
 8008c3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c42:	1aa2      	subs	r2, r4, r2
 8008c44:	2a08      	cmp	r2, #8
 8008c46:	dde4      	ble.n	8008c12 <__ieee754_rem_pio2f+0xea>
 8008c48:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008d58 <__ieee754_rem_pio2f+0x230>
 8008c4c:	eef0 6a40 	vmov.f32	s13, s0
 8008c50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c54:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008c58:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008c5c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008d60 <__ieee754_rem_pio2f+0x238>
 8008c60:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008c64:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008c68:	eef0 7a40 	vmov.f32	s15, s0
 8008c6c:	ee15 3a90 	vmov	r3, s11
 8008c70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c74:	1aa4      	subs	r4, r4, r2
 8008c76:	2c19      	cmp	r4, #25
 8008c78:	dc04      	bgt.n	8008c84 <__ieee754_rem_pio2f+0x15c>
 8008c7a:	edc5 5a00 	vstr	s11, [r5]
 8008c7e:	eeb0 0a66 	vmov.f32	s0, s13
 8008c82:	e7c7      	b.n	8008c14 <__ieee754_rem_pio2f+0xec>
 8008c84:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008d70 <__ieee754_rem_pio2f+0x248>
 8008c88:	eeb0 0a66 	vmov.f32	s0, s13
 8008c8c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008c90:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008c94:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008c98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008d74 <__ieee754_rem_pio2f+0x24c>
 8008c9c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008ca0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008ca4:	ed85 7a00 	vstr	s14, [r5]
 8008ca8:	e7b4      	b.n	8008c14 <__ieee754_rem_pio2f+0xec>
 8008caa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008cae:	db06      	blt.n	8008cbe <__ieee754_rem_pio2f+0x196>
 8008cb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008cb4:	edc0 7a01 	vstr	s15, [r0, #4]
 8008cb8:	edc0 7a00 	vstr	s15, [r0]
 8008cbc:	e742      	b.n	8008b44 <__ieee754_rem_pio2f+0x1c>
 8008cbe:	15e2      	asrs	r2, r4, #23
 8008cc0:	3a86      	subs	r2, #134	; 0x86
 8008cc2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008cce:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008d78 <__ieee754_rem_pio2f+0x250>
 8008cd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cda:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ce2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cee:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	edcd 7a05 	vstr	s15, [sp, #20]
 8008d02:	d11e      	bne.n	8008d42 <__ieee754_rem_pio2f+0x21a>
 8008d04:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2302      	movne	r3, #2
 8008d12:	491a      	ldr	r1, [pc, #104]	; (8008d7c <__ieee754_rem_pio2f+0x254>)
 8008d14:	9101      	str	r1, [sp, #4]
 8008d16:	2102      	movs	r1, #2
 8008d18:	9100      	str	r1, [sp, #0]
 8008d1a:	a803      	add	r0, sp, #12
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	f000 fbed 	bl	80094fc <__kernel_rem_pio2f>
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	f6bf af31 	bge.w	8008b8a <__ieee754_rem_pio2f+0x62>
 8008d28:	edd5 7a00 	vldr	s15, [r5]
 8008d2c:	eef1 7a67 	vneg.f32	s15, s15
 8008d30:	edc5 7a00 	vstr	s15, [r5]
 8008d34:	edd5 7a01 	vldr	s15, [r5, #4]
 8008d38:	eef1 7a67 	vneg.f32	s15, s15
 8008d3c:	edc5 7a01 	vstr	s15, [r5, #4]
 8008d40:	e77a      	b.n	8008c38 <__ieee754_rem_pio2f+0x110>
 8008d42:	2303      	movs	r3, #3
 8008d44:	e7e5      	b.n	8008d12 <__ieee754_rem_pio2f+0x1ea>
 8008d46:	bf00      	nop
 8008d48:	3f490fd8 	.word	0x3f490fd8
 8008d4c:	4016cbe3 	.word	0x4016cbe3
 8008d50:	3fc90f80 	.word	0x3fc90f80
 8008d54:	3fc90fd0 	.word	0x3fc90fd0
 8008d58:	37354400 	.word	0x37354400
 8008d5c:	37354443 	.word	0x37354443
 8008d60:	2e85a308 	.word	0x2e85a308
 8008d64:	43490f80 	.word	0x43490f80
 8008d68:	3f22f984 	.word	0x3f22f984
 8008d6c:	0800a7d0 	.word	0x0800a7d0
 8008d70:	2e85a300 	.word	0x2e85a300
 8008d74:	248d3132 	.word	0x248d3132
 8008d78:	43800000 	.word	0x43800000
 8008d7c:	0800a850 	.word	0x0800a850

08008d80 <__kernel_cos>:
 8008d80:	ee10 1a90 	vmov	r1, s1
 8008d84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d8c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008d90:	da05      	bge.n	8008d9e <__kernel_cos+0x1e>
 8008d92:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8008d96:	ee16 3a90 	vmov	r3, s13
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d03d      	beq.n	8008e1a <__kernel_cos+0x9a>
 8008d9e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8008da2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008da6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8008e20 <__kernel_cos+0xa0>
 8008daa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8008dae:	ee24 6b06 	vmul.f64	d6, d4, d6
 8008db2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8008e28 <__kernel_cos+0xa8>
 8008db6:	eea4 5b03 	vfma.f64	d5, d4, d3
 8008dba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8008e30 <__kernel_cos+0xb0>
 8008dbe:	eea5 3b04 	vfma.f64	d3, d5, d4
 8008dc2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8008e38 <__kernel_cos+0xb8>
 8008dc6:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008dca:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8008e40 <__kernel_cos+0xc0>
 8008dce:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <__kernel_cos+0xd0>)
 8008dd0:	eea5 3b04 	vfma.f64	d3, d5, d4
 8008dd4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8008e48 <__kernel_cos+0xc8>
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008dde:	ee25 5b04 	vmul.f64	d5, d5, d4
 8008de2:	eea4 1b05 	vfma.f64	d1, d4, d5
 8008de6:	dc04      	bgt.n	8008df2 <__kernel_cos+0x72>
 8008de8:	ee36 6b41 	vsub.f64	d6, d6, d1
 8008dec:	ee37 0b46 	vsub.f64	d0, d7, d6
 8008df0:	4770      	bx	lr
 8008df2:	4b18      	ldr	r3, [pc, #96]	; (8008e54 <__kernel_cos+0xd4>)
 8008df4:	4299      	cmp	r1, r3
 8008df6:	dc0d      	bgt.n	8008e14 <__kernel_cos+0x94>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008dfe:	ec43 2b15 	vmov	d5, r2, r3
 8008e02:	ee37 0b45 	vsub.f64	d0, d7, d5
 8008e06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e0a:	ee36 6b41 	vsub.f64	d6, d6, d1
 8008e0e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008e12:	4770      	bx	lr
 8008e14:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008e18:	e7f3      	b.n	8008e02 <__kernel_cos+0x82>
 8008e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8008e1e:	4770      	bx	lr
 8008e20:	be8838d4 	.word	0xbe8838d4
 8008e24:	bda8fae9 	.word	0xbda8fae9
 8008e28:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e2c:	3e21ee9e 	.word	0x3e21ee9e
 8008e30:	809c52ad 	.word	0x809c52ad
 8008e34:	be927e4f 	.word	0xbe927e4f
 8008e38:	19cb1590 	.word	0x19cb1590
 8008e3c:	3efa01a0 	.word	0x3efa01a0
 8008e40:	16c15177 	.word	0x16c15177
 8008e44:	bf56c16c 	.word	0xbf56c16c
 8008e48:	5555554c 	.word	0x5555554c
 8008e4c:	3fa55555 	.word	0x3fa55555
 8008e50:	3fd33332 	.word	0x3fd33332
 8008e54:	3fe90000 	.word	0x3fe90000

08008e58 <__kernel_rem_pio2>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	ed2d 8b06 	vpush	{d8-d10}
 8008e60:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008e64:	469b      	mov	fp, r3
 8008e66:	460e      	mov	r6, r1
 8008e68:	4bc7      	ldr	r3, [pc, #796]	; (8009188 <__kernel_rem_pio2+0x330>)
 8008e6a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008e72:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8008e74:	1ed1      	subs	r1, r2, #3
 8008e76:	2318      	movs	r3, #24
 8008e78:	f06f 0417 	mvn.w	r4, #23
 8008e7c:	fb91 f1f3 	sdiv	r1, r1, r3
 8008e80:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008e84:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8008e88:	fb01 4404 	mla	r4, r1, r4, r4
 8008e8c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8009170 <__kernel_rem_pio2+0x318>
 8008e90:	4414      	add	r4, r2
 8008e92:	eba1 050a 	sub.w	r5, r1, sl
 8008e96:	aa1a      	add	r2, sp, #104	; 0x68
 8008e98:	eb09 070a 	add.w	r7, r9, sl
 8008e9c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008ea0:	4696      	mov	lr, r2
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	42bb      	cmp	r3, r7
 8008ea6:	dd0f      	ble.n	8008ec8 <__kernel_rem_pio2+0x70>
 8008ea8:	af6a      	add	r7, sp, #424	; 0x1a8
 8008eaa:	2200      	movs	r2, #0
 8008eac:	454a      	cmp	r2, r9
 8008eae:	dc28      	bgt.n	8008f02 <__kernel_rem_pio2+0xaa>
 8008eb0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008eb4:	eb0b 0302 	add.w	r3, fp, r2
 8008eb8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8008ebc:	9d02      	ldr	r5, [sp, #8]
 8008ebe:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8009170 <__kernel_rem_pio2+0x318>
 8008ec2:	f04f 0c00 	mov.w	ip, #0
 8008ec6:	e016      	b.n	8008ef6 <__kernel_rem_pio2+0x9e>
 8008ec8:	42dd      	cmn	r5, r3
 8008eca:	d409      	bmi.n	8008ee0 <__kernel_rem_pio2+0x88>
 8008ecc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8008ed0:	ee07 2a90 	vmov	s15, r2
 8008ed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ed8:	ecae 7b02 	vstmia	lr!, {d7}
 8008edc:	3301      	adds	r3, #1
 8008ede:	e7e1      	b.n	8008ea4 <__kernel_rem_pio2+0x4c>
 8008ee0:	eeb0 7b46 	vmov.f64	d7, d6
 8008ee4:	e7f8      	b.n	8008ed8 <__kernel_rem_pio2+0x80>
 8008ee6:	ecb5 5b02 	vldmia	r5!, {d5}
 8008eea:	ed33 6b02 	vldmdb	r3!, {d6}
 8008eee:	f10c 0c01 	add.w	ip, ip, #1
 8008ef2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008ef6:	45d4      	cmp	ip, sl
 8008ef8:	ddf5      	ble.n	8008ee6 <__kernel_rem_pio2+0x8e>
 8008efa:	eca7 7b02 	vstmia	r7!, {d7}
 8008efe:	3201      	adds	r2, #1
 8008f00:	e7d4      	b.n	8008eac <__kernel_rem_pio2+0x54>
 8008f02:	ab06      	add	r3, sp, #24
 8008f04:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008f08:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8009178 <__kernel_rem_pio2+0x320>
 8008f0c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8009180 <__kernel_rem_pio2+0x328>
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	464d      	mov	r5, r9
 8008f1a:	ab92      	add	r3, sp, #584	; 0x248
 8008f1c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8008f20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f24:	3f01      	subs	r7, #1
 8008f26:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8008f2a:	00ff      	lsls	r7, r7, #3
 8008f2c:	ab92      	add	r3, sp, #584	; 0x248
 8008f2e:	19da      	adds	r2, r3, r7
 8008f30:	3a98      	subs	r2, #152	; 0x98
 8008f32:	2300      	movs	r3, #0
 8008f34:	1ae9      	subs	r1, r5, r3
 8008f36:	2900      	cmp	r1, #0
 8008f38:	dc4e      	bgt.n	8008fd8 <__kernel_rem_pio2+0x180>
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 fe2c 	bl	8009b98 <scalbn>
 8008f40:	eeb0 8b40 	vmov.f64	d8, d0
 8008f44:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008f48:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008f4c:	f000 fdac 	bl	8009aa8 <floor>
 8008f50:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008f54:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008f58:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008f5c:	2c00      	cmp	r4, #0
 8008f5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008f62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f66:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008f6a:	dd4a      	ble.n	8009002 <__kernel_rem_pio2+0x1aa>
 8008f6c:	1e69      	subs	r1, r5, #1
 8008f6e:	ab06      	add	r3, sp, #24
 8008f70:	f1c4 0018 	rsb	r0, r4, #24
 8008f74:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008f78:	9a01      	ldr	r2, [sp, #4]
 8008f7a:	fa4c f300 	asr.w	r3, ip, r0
 8008f7e:	441a      	add	r2, r3
 8008f80:	4083      	lsls	r3, r0
 8008f82:	9201      	str	r2, [sp, #4]
 8008f84:	ebac 0203 	sub.w	r2, ip, r3
 8008f88:	ab06      	add	r3, sp, #24
 8008f8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008f8e:	f1c4 0317 	rsb	r3, r4, #23
 8008f92:	fa42 f803 	asr.w	r8, r2, r3
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	dd43      	ble.n	8009024 <__kernel_rem_pio2+0x1cc>
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	9301      	str	r3, [sp, #4]
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8008faa:	4285      	cmp	r5, r0
 8008fac:	dc6e      	bgt.n	800908c <__kernel_rem_pio2+0x234>
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	dd04      	ble.n	8008fbc <__kernel_rem_pio2+0x164>
 8008fb2:	2c01      	cmp	r4, #1
 8008fb4:	d07f      	beq.n	80090b6 <__kernel_rem_pio2+0x25e>
 8008fb6:	2c02      	cmp	r4, #2
 8008fb8:	f000 8087 	beq.w	80090ca <__kernel_rem_pio2+0x272>
 8008fbc:	f1b8 0f02 	cmp.w	r8, #2
 8008fc0:	d130      	bne.n	8009024 <__kernel_rem_pio2+0x1cc>
 8008fc2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008fc6:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008fca:	b359      	cbz	r1, 8009024 <__kernel_rem_pio2+0x1cc>
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fde3 	bl	8009b98 <scalbn>
 8008fd2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008fd6:	e025      	b.n	8009024 <__kernel_rem_pio2+0x1cc>
 8008fd8:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008fdc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008fe0:	a806      	add	r0, sp, #24
 8008fe2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008fe6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008fea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008fee:	ee10 1a10 	vmov	r1, s0
 8008ff2:	ed32 0b02 	vldmdb	r2!, {d0}
 8008ff6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008ffa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008ffe:	3301      	adds	r3, #1
 8009000:	e798      	b.n	8008f34 <__kernel_rem_pio2+0xdc>
 8009002:	d106      	bne.n	8009012 <__kernel_rem_pio2+0x1ba>
 8009004:	1e6b      	subs	r3, r5, #1
 8009006:	aa06      	add	r2, sp, #24
 8009008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800900c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8009010:	e7c1      	b.n	8008f96 <__kernel_rem_pio2+0x13e>
 8009012:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009016:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901e:	da32      	bge.n	8009086 <__kernel_rem_pio2+0x22e>
 8009020:	f04f 0800 	mov.w	r8, #0
 8009024:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902c:	f040 80b0 	bne.w	8009190 <__kernel_rem_pio2+0x338>
 8009030:	1e6b      	subs	r3, r5, #1
 8009032:	4618      	mov	r0, r3
 8009034:	2200      	movs	r2, #0
 8009036:	4548      	cmp	r0, r9
 8009038:	da4e      	bge.n	80090d8 <__kernel_rem_pio2+0x280>
 800903a:	2a00      	cmp	r2, #0
 800903c:	f000 8088 	beq.w	8009150 <__kernel_rem_pio2+0x2f8>
 8009040:	aa06      	add	r2, sp, #24
 8009042:	3c18      	subs	r4, #24
 8009044:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009048:	2900      	cmp	r1, #0
 800904a:	f000 808e 	beq.w	800916a <__kernel_rem_pio2+0x312>
 800904e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009052:	4620      	mov	r0, r4
 8009054:	9302      	str	r3, [sp, #8]
 8009056:	f000 fd9f 	bl	8009b98 <scalbn>
 800905a:	9b02      	ldr	r3, [sp, #8]
 800905c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800905e:	00d9      	lsls	r1, r3, #3
 8009060:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8009178 <__kernel_rem_pio2+0x320>
 8009064:	1850      	adds	r0, r2, r1
 8009066:	f100 0508 	add.w	r5, r0, #8
 800906a:	461c      	mov	r4, r3
 800906c:	2c00      	cmp	r4, #0
 800906e:	f280 80bd 	bge.w	80091ec <__kernel_rem_pio2+0x394>
 8009072:	2500      	movs	r5, #0
 8009074:	1b5c      	subs	r4, r3, r5
 8009076:	2c00      	cmp	r4, #0
 8009078:	f2c0 80dd 	blt.w	8009236 <__kernel_rem_pio2+0x3de>
 800907c:	4f43      	ldr	r7, [pc, #268]	; (800918c <__kernel_rem_pio2+0x334>)
 800907e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8009170 <__kernel_rem_pio2+0x318>
 8009082:	2400      	movs	r4, #0
 8009084:	e0cb      	b.n	800921e <__kernel_rem_pio2+0x3c6>
 8009086:	f04f 0802 	mov.w	r8, #2
 800908a:	e787      	b.n	8008f9c <__kernel_rem_pio2+0x144>
 800908c:	ab06      	add	r3, sp, #24
 800908e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009092:	b949      	cbnz	r1, 80090a8 <__kernel_rem_pio2+0x250>
 8009094:	b12b      	cbz	r3, 80090a2 <__kernel_rem_pio2+0x24a>
 8009096:	aa06      	add	r2, sp, #24
 8009098:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800909c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80090a0:	2301      	movs	r3, #1
 80090a2:	3001      	adds	r0, #1
 80090a4:	4619      	mov	r1, r3
 80090a6:	e780      	b.n	8008faa <__kernel_rem_pio2+0x152>
 80090a8:	aa06      	add	r2, sp, #24
 80090aa:	ebac 0303 	sub.w	r3, ip, r3
 80090ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80090b2:	460b      	mov	r3, r1
 80090b4:	e7f5      	b.n	80090a2 <__kernel_rem_pio2+0x24a>
 80090b6:	1e68      	subs	r0, r5, #1
 80090b8:	ab06      	add	r3, sp, #24
 80090ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80090c2:	aa06      	add	r2, sp, #24
 80090c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80090c8:	e778      	b.n	8008fbc <__kernel_rem_pio2+0x164>
 80090ca:	1e68      	subs	r0, r5, #1
 80090cc:	ab06      	add	r3, sp, #24
 80090ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090d6:	e7f4      	b.n	80090c2 <__kernel_rem_pio2+0x26a>
 80090d8:	a906      	add	r1, sp, #24
 80090da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80090de:	3801      	subs	r0, #1
 80090e0:	430a      	orrs	r2, r1
 80090e2:	e7a8      	b.n	8009036 <__kernel_rem_pio2+0x1de>
 80090e4:	f10c 0c01 	add.w	ip, ip, #1
 80090e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	d0f9      	beq.n	80090e4 <__kernel_rem_pio2+0x28c>
 80090f0:	eb0b 0305 	add.w	r3, fp, r5
 80090f4:	aa1a      	add	r2, sp, #104	; 0x68
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	1898      	adds	r0, r3, r2
 80090fa:	3008      	adds	r0, #8
 80090fc:	1c69      	adds	r1, r5, #1
 80090fe:	3708      	adds	r7, #8
 8009100:	2200      	movs	r2, #0
 8009102:	4465      	add	r5, ip
 8009104:	9005      	str	r0, [sp, #20]
 8009106:	428d      	cmp	r5, r1
 8009108:	f6ff af07 	blt.w	8008f1a <__kernel_rem_pio2+0xc2>
 800910c:	a81a      	add	r0, sp, #104	; 0x68
 800910e:	eb02 0c03 	add.w	ip, r2, r3
 8009112:	4484      	add	ip, r0
 8009114:	9803      	ldr	r0, [sp, #12]
 8009116:	f8dd e008 	ldr.w	lr, [sp, #8]
 800911a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800911e:	9001      	str	r0, [sp, #4]
 8009120:	ee07 0a90 	vmov	s15, r0
 8009124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009128:	9805      	ldr	r0, [sp, #20]
 800912a:	ed8c 7b00 	vstr	d7, [ip]
 800912e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009170 <__kernel_rem_pio2+0x318>
 8009132:	eb00 0802 	add.w	r8, r0, r2
 8009136:	f04f 0c00 	mov.w	ip, #0
 800913a:	45d4      	cmp	ip, sl
 800913c:	dd0c      	ble.n	8009158 <__kernel_rem_pio2+0x300>
 800913e:	eb02 0c07 	add.w	ip, r2, r7
 8009142:	a86a      	add	r0, sp, #424	; 0x1a8
 8009144:	4484      	add	ip, r0
 8009146:	ed8c 7b02 	vstr	d7, [ip, #8]
 800914a:	3101      	adds	r1, #1
 800914c:	3208      	adds	r2, #8
 800914e:	e7da      	b.n	8009106 <__kernel_rem_pio2+0x2ae>
 8009150:	9b04      	ldr	r3, [sp, #16]
 8009152:	f04f 0c01 	mov.w	ip, #1
 8009156:	e7c7      	b.n	80090e8 <__kernel_rem_pio2+0x290>
 8009158:	ecbe 5b02 	vldmia	lr!, {d5}
 800915c:	ed38 6b02 	vldmdb	r8!, {d6}
 8009160:	f10c 0c01 	add.w	ip, ip, #1
 8009164:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009168:	e7e7      	b.n	800913a <__kernel_rem_pio2+0x2e2>
 800916a:	3b01      	subs	r3, #1
 800916c:	e768      	b.n	8009040 <__kernel_rem_pio2+0x1e8>
 800916e:	bf00      	nop
	...
 800917c:	3e700000 	.word	0x3e700000
 8009180:	00000000 	.word	0x00000000
 8009184:	41700000 	.word	0x41700000
 8009188:	0800aba8 	.word	0x0800aba8
 800918c:	0800ab68 	.word	0x0800ab68
 8009190:	4260      	negs	r0, r4
 8009192:	eeb0 0b48 	vmov.f64	d0, d8
 8009196:	f000 fcff 	bl	8009b98 <scalbn>
 800919a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009378 <__kernel_rem_pio2+0x520>
 800919e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80091a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a6:	db18      	blt.n	80091da <__kernel_rem_pio2+0x382>
 80091a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8009380 <__kernel_rem_pio2+0x528>
 80091ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80091b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80091b4:	aa06      	add	r2, sp, #24
 80091b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80091ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80091be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80091c2:	a906      	add	r1, sp, #24
 80091c4:	ee10 3a10 	vmov	r3, s0
 80091c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80091cc:	1c6b      	adds	r3, r5, #1
 80091ce:	ee17 2a10 	vmov	r2, s14
 80091d2:	3418      	adds	r4, #24
 80091d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80091d8:	e739      	b.n	800904e <__kernel_rem_pio2+0x1f6>
 80091da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80091de:	aa06      	add	r2, sp, #24
 80091e0:	ee10 3a10 	vmov	r3, s0
 80091e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80091e8:	462b      	mov	r3, r5
 80091ea:	e730      	b.n	800904e <__kernel_rem_pio2+0x1f6>
 80091ec:	aa06      	add	r2, sp, #24
 80091ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80091f2:	9202      	str	r2, [sp, #8]
 80091f4:	ee07 2a90 	vmov	s15, r2
 80091f8:	3c01      	subs	r4, #1
 80091fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80091fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009202:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009206:	ed25 7b02 	vstmdb	r5!, {d7}
 800920a:	e72f      	b.n	800906c <__kernel_rem_pio2+0x214>
 800920c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8009210:	ecb7 5b02 	vldmia	r7!, {d5}
 8009214:	ed9c 6b00 	vldr	d6, [ip]
 8009218:	3401      	adds	r4, #1
 800921a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800921e:	454c      	cmp	r4, r9
 8009220:	dc01      	bgt.n	8009226 <__kernel_rem_pio2+0x3ce>
 8009222:	42a5      	cmp	r5, r4
 8009224:	daf2      	bge.n	800920c <__kernel_rem_pio2+0x3b4>
 8009226:	aa42      	add	r2, sp, #264	; 0x108
 8009228:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800922c:	ed84 7b00 	vstr	d7, [r4]
 8009230:	3501      	adds	r5, #1
 8009232:	3808      	subs	r0, #8
 8009234:	e71e      	b.n	8009074 <__kernel_rem_pio2+0x21c>
 8009236:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009238:	2a03      	cmp	r2, #3
 800923a:	d84e      	bhi.n	80092da <__kernel_rem_pio2+0x482>
 800923c:	e8df f002 	tbb	[pc, r2]
 8009240:	021f1f3e 	.word	0x021f1f3e
 8009244:	3108      	adds	r1, #8
 8009246:	aa42      	add	r2, sp, #264	; 0x108
 8009248:	4411      	add	r1, r2
 800924a:	4608      	mov	r0, r1
 800924c:	461c      	mov	r4, r3
 800924e:	2c00      	cmp	r4, #0
 8009250:	dc61      	bgt.n	8009316 <__kernel_rem_pio2+0x4be>
 8009252:	4608      	mov	r0, r1
 8009254:	461c      	mov	r4, r3
 8009256:	2c01      	cmp	r4, #1
 8009258:	dc6d      	bgt.n	8009336 <__kernel_rem_pio2+0x4de>
 800925a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009388 <__kernel_rem_pio2+0x530>
 800925e:	2b01      	cmp	r3, #1
 8009260:	dc79      	bgt.n	8009356 <__kernel_rem_pio2+0x4fe>
 8009262:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8009266:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800926a:	f1b8 0f00 	cmp.w	r8, #0
 800926e:	d178      	bne.n	8009362 <__kernel_rem_pio2+0x50a>
 8009270:	ed86 5b00 	vstr	d5, [r6]
 8009274:	ed86 6b02 	vstr	d6, [r6, #8]
 8009278:	ed86 7b04 	vstr	d7, [r6, #16]
 800927c:	e02d      	b.n	80092da <__kernel_rem_pio2+0x482>
 800927e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8009388 <__kernel_rem_pio2+0x530>
 8009282:	3108      	adds	r1, #8
 8009284:	aa42      	add	r2, sp, #264	; 0x108
 8009286:	4411      	add	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	2800      	cmp	r0, #0
 800928c:	da34      	bge.n	80092f8 <__kernel_rem_pio2+0x4a0>
 800928e:	f1b8 0f00 	cmp.w	r8, #0
 8009292:	d037      	beq.n	8009304 <__kernel_rem_pio2+0x4ac>
 8009294:	eeb1 7b46 	vneg.f64	d7, d6
 8009298:	ed86 7b00 	vstr	d7, [r6]
 800929c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80092a0:	a844      	add	r0, sp, #272	; 0x110
 80092a2:	2101      	movs	r1, #1
 80092a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80092a8:	428b      	cmp	r3, r1
 80092aa:	da2e      	bge.n	800930a <__kernel_rem_pio2+0x4b2>
 80092ac:	f1b8 0f00 	cmp.w	r8, #0
 80092b0:	d001      	beq.n	80092b6 <__kernel_rem_pio2+0x45e>
 80092b2:	eeb1 7b47 	vneg.f64	d7, d7
 80092b6:	ed86 7b02 	vstr	d7, [r6, #8]
 80092ba:	e00e      	b.n	80092da <__kernel_rem_pio2+0x482>
 80092bc:	aa92      	add	r2, sp, #584	; 0x248
 80092be:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8009388 <__kernel_rem_pio2+0x530>
 80092c2:	4411      	add	r1, r2
 80092c4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da0f      	bge.n	80092ec <__kernel_rem_pio2+0x494>
 80092cc:	f1b8 0f00 	cmp.w	r8, #0
 80092d0:	d001      	beq.n	80092d6 <__kernel_rem_pio2+0x47e>
 80092d2:	eeb1 7b47 	vneg.f64	d7, d7
 80092d6:	ed86 7b00 	vstr	d7, [r6]
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	f003 0007 	and.w	r0, r3, #7
 80092e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80092e4:	ecbd 8b06 	vpop	{d8-d10}
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	ed31 6b02 	vldmdb	r1!, {d6}
 80092f0:	3b01      	subs	r3, #1
 80092f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80092f6:	e7e7      	b.n	80092c8 <__kernel_rem_pio2+0x470>
 80092f8:	ed31 7b02 	vldmdb	r1!, {d7}
 80092fc:	3801      	subs	r0, #1
 80092fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009302:	e7c2      	b.n	800928a <__kernel_rem_pio2+0x432>
 8009304:	eeb0 7b46 	vmov.f64	d7, d6
 8009308:	e7c6      	b.n	8009298 <__kernel_rem_pio2+0x440>
 800930a:	ecb0 6b02 	vldmia	r0!, {d6}
 800930e:	3101      	adds	r1, #1
 8009310:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009314:	e7c8      	b.n	80092a8 <__kernel_rem_pio2+0x450>
 8009316:	ed10 7b04 	vldr	d7, [r0, #-16]
 800931a:	ed30 5b02 	vldmdb	r0!, {d5}
 800931e:	3c01      	subs	r4, #1
 8009320:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009324:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009328:	ed00 6b02 	vstr	d6, [r0, #-8]
 800932c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009330:	ed80 7b00 	vstr	d7, [r0]
 8009334:	e78b      	b.n	800924e <__kernel_rem_pio2+0x3f6>
 8009336:	ed10 7b04 	vldr	d7, [r0, #-16]
 800933a:	ed30 5b02 	vldmdb	r0!, {d5}
 800933e:	3c01      	subs	r4, #1
 8009340:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009344:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009348:	ed00 6b02 	vstr	d6, [r0, #-8]
 800934c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009350:	ed80 7b00 	vstr	d7, [r0]
 8009354:	e77f      	b.n	8009256 <__kernel_rem_pio2+0x3fe>
 8009356:	ed31 6b02 	vldmdb	r1!, {d6}
 800935a:	3b01      	subs	r3, #1
 800935c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009360:	e77d      	b.n	800925e <__kernel_rem_pio2+0x406>
 8009362:	eeb1 5b45 	vneg.f64	d5, d5
 8009366:	eeb1 6b46 	vneg.f64	d6, d6
 800936a:	ed86 5b00 	vstr	d5, [r6]
 800936e:	eeb1 7b47 	vneg.f64	d7, d7
 8009372:	ed86 6b02 	vstr	d6, [r6, #8]
 8009376:	e77f      	b.n	8009278 <__kernel_rem_pio2+0x420>
 8009378:	00000000 	.word	0x00000000
 800937c:	41700000 	.word	0x41700000
 8009380:	00000000 	.word	0x00000000
 8009384:	3e700000 	.word	0x3e700000
	...

08009390 <__kernel_sin>:
 8009390:	ee10 3a90 	vmov	r3, s1
 8009394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009398:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800939c:	da04      	bge.n	80093a8 <__kernel_sin+0x18>
 800939e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80093a2:	ee17 3a90 	vmov	r3, s15
 80093a6:	b35b      	cbz	r3, 8009400 <__kernel_sin+0x70>
 80093a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80093ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80093b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009408 <__kernel_sin+0x78>
 80093b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009410 <__kernel_sin+0x80>
 80093b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80093bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009418 <__kernel_sin+0x88>
 80093c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80093c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009420 <__kernel_sin+0x90>
 80093c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80093cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009428 <__kernel_sin+0x98>
 80093d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80093d4:	b930      	cbnz	r0, 80093e4 <__kernel_sin+0x54>
 80093d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009430 <__kernel_sin+0xa0>
 80093da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80093de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80093e2:	4770      	bx	lr
 80093e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80093e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80093ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80093f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80093f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009438 <__kernel_sin+0xa8>
 80093f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80093fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	f3af 8000 	nop.w
 8009408:	5acfd57c 	.word	0x5acfd57c
 800940c:	3de5d93a 	.word	0x3de5d93a
 8009410:	8a2b9ceb 	.word	0x8a2b9ceb
 8009414:	be5ae5e6 	.word	0xbe5ae5e6
 8009418:	57b1fe7d 	.word	0x57b1fe7d
 800941c:	3ec71de3 	.word	0x3ec71de3
 8009420:	19c161d5 	.word	0x19c161d5
 8009424:	bf2a01a0 	.word	0xbf2a01a0
 8009428:	1110f8a6 	.word	0x1110f8a6
 800942c:	3f811111 	.word	0x3f811111
 8009430:	55555549 	.word	0x55555549
 8009434:	bfc55555 	.word	0xbfc55555
 8009438:	55555549 	.word	0x55555549
 800943c:	3fc55555 	.word	0x3fc55555

08009440 <__kernel_cosf>:
 8009440:	ee10 3a10 	vmov	r3, s0
 8009444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009448:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800944c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009450:	da05      	bge.n	800945e <__kernel_cosf+0x1e>
 8009452:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009456:	ee17 2a90 	vmov	r2, s15
 800945a:	2a00      	cmp	r2, #0
 800945c:	d03b      	beq.n	80094d6 <__kernel_cosf+0x96>
 800945e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009462:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009466:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094dc <__kernel_cosf+0x9c>
 800946a:	4a1d      	ldr	r2, [pc, #116]	; (80094e0 <__kernel_cosf+0xa0>)
 800946c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8009470:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80094e4 <__kernel_cosf+0xa4>
 8009474:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009478:	4293      	cmp	r3, r2
 800947a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80094e8 <__kernel_cosf+0xa8>
 800947e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8009482:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80094ec <__kernel_cosf+0xac>
 8009486:	eea5 7a86 	vfma.f32	s14, s11, s12
 800948a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80094f0 <__kernel_cosf+0xb0>
 800948e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8009492:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80094f4 <__kernel_cosf+0xb4>
 8009496:	eea5 7a86 	vfma.f32	s14, s11, s12
 800949a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800949e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80094a2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80094a6:	dc04      	bgt.n	80094b2 <__kernel_cosf+0x72>
 80094a8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80094ac:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80094b0:	4770      	bx	lr
 80094b2:	4a11      	ldr	r2, [pc, #68]	; (80094f8 <__kernel_cosf+0xb8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	bfda      	itte	le
 80094b8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80094bc:	ee07 3a10 	vmovle	s14, r3
 80094c0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80094c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094c8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80094cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80094d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80094d4:	4770      	bx	lr
 80094d6:	eeb0 0a66 	vmov.f32	s0, s13
 80094da:	4770      	bx	lr
 80094dc:	ad47d74e 	.word	0xad47d74e
 80094e0:	3e999999 	.word	0x3e999999
 80094e4:	310f74f6 	.word	0x310f74f6
 80094e8:	b493f27c 	.word	0xb493f27c
 80094ec:	37d00d01 	.word	0x37d00d01
 80094f0:	bab60b61 	.word	0xbab60b61
 80094f4:	3d2aaaab 	.word	0x3d2aaaab
 80094f8:	3f480000 	.word	0x3f480000

080094fc <__kernel_rem_pio2f>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	ed2d 8b04 	vpush	{d8-d9}
 8009504:	b0d7      	sub	sp, #348	; 0x15c
 8009506:	469b      	mov	fp, r3
 8009508:	460e      	mov	r6, r1
 800950a:	4bbe      	ldr	r3, [pc, #760]	; (8009804 <__kernel_rem_pio2f+0x308>)
 800950c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800950e:	9002      	str	r0, [sp, #8]
 8009510:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009514:	9865      	ldr	r0, [sp, #404]	; 0x194
 8009516:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8009814 <__kernel_rem_pio2f+0x318>
 800951a:	1ed1      	subs	r1, r2, #3
 800951c:	2308      	movs	r3, #8
 800951e:	fb91 f1f3 	sdiv	r1, r1, r3
 8009522:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009526:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800952a:	1c4c      	adds	r4, r1, #1
 800952c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8009530:	eba1 050a 	sub.w	r5, r1, sl
 8009534:	aa1a      	add	r2, sp, #104	; 0x68
 8009536:	eb09 070a 	add.w	r7, r9, sl
 800953a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800953e:	4696      	mov	lr, r2
 8009540:	2300      	movs	r3, #0
 8009542:	42bb      	cmp	r3, r7
 8009544:	dd0f      	ble.n	8009566 <__kernel_rem_pio2f+0x6a>
 8009546:	af42      	add	r7, sp, #264	; 0x108
 8009548:	2200      	movs	r2, #0
 800954a:	454a      	cmp	r2, r9
 800954c:	dc27      	bgt.n	800959e <__kernel_rem_pio2f+0xa2>
 800954e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009552:	eb0b 0302 	add.w	r3, fp, r2
 8009556:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800955a:	9d02      	ldr	r5, [sp, #8]
 800955c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009814 <__kernel_rem_pio2f+0x318>
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	e015      	b.n	8009592 <__kernel_rem_pio2f+0x96>
 8009566:	42dd      	cmn	r5, r3
 8009568:	bf5d      	ittte	pl
 800956a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800956e:	ee07 2a90 	vmovpl	s15, r2
 8009572:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009576:	eef0 7a47 	vmovmi.f32	s15, s14
 800957a:	ecee 7a01 	vstmia	lr!, {s15}
 800957e:	3301      	adds	r3, #1
 8009580:	e7df      	b.n	8009542 <__kernel_rem_pio2f+0x46>
 8009582:	ecf5 6a01 	vldmia	r5!, {s13}
 8009586:	ed33 7a01 	vldmdb	r3!, {s14}
 800958a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800958e:	f10c 0c01 	add.w	ip, ip, #1
 8009592:	45d4      	cmp	ip, sl
 8009594:	ddf5      	ble.n	8009582 <__kernel_rem_pio2f+0x86>
 8009596:	ece7 7a01 	vstmia	r7!, {s15}
 800959a:	3201      	adds	r2, #1
 800959c:	e7d5      	b.n	800954a <__kernel_rem_pio2f+0x4e>
 800959e:	ab06      	add	r3, sp, #24
 80095a0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8009810 <__kernel_rem_pio2f+0x314>
 80095aa:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800980c <__kernel_rem_pio2f+0x310>
 80095ae:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80095b2:	9303      	str	r3, [sp, #12]
 80095b4:	464d      	mov	r5, r9
 80095b6:	ab56      	add	r3, sp, #344	; 0x158
 80095b8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80095bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80095c0:	3f01      	subs	r7, #1
 80095c2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80095c6:	00bf      	lsls	r7, r7, #2
 80095c8:	ab56      	add	r3, sp, #344	; 0x158
 80095ca:	19da      	adds	r2, r3, r7
 80095cc:	3a4c      	subs	r2, #76	; 0x4c
 80095ce:	2300      	movs	r3, #0
 80095d0:	1ae9      	subs	r1, r5, r3
 80095d2:	2900      	cmp	r1, #0
 80095d4:	dc4c      	bgt.n	8009670 <__kernel_rem_pio2f+0x174>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fba6 	bl	8009d28 <scalbnf>
 80095dc:	eeb0 8a40 	vmov.f32	s16, s0
 80095e0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80095e4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80095e8:	f000 fb5c 	bl	8009ca4 <floorf>
 80095ec:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80095f0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80095f4:	2c00      	cmp	r4, #0
 80095f6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80095fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80095fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009602:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009606:	dd48      	ble.n	800969a <__kernel_rem_pio2f+0x19e>
 8009608:	1e69      	subs	r1, r5, #1
 800960a:	ab06      	add	r3, sp, #24
 800960c:	f1c4 0008 	rsb	r0, r4, #8
 8009610:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	fa4c f300 	asr.w	r3, ip, r0
 800961a:	441a      	add	r2, r3
 800961c:	4083      	lsls	r3, r0
 800961e:	9201      	str	r2, [sp, #4]
 8009620:	ebac 0203 	sub.w	r2, ip, r3
 8009624:	ab06      	add	r3, sp, #24
 8009626:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800962a:	f1c4 0307 	rsb	r3, r4, #7
 800962e:	fa42 f803 	asr.w	r8, r2, r3
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	dd41      	ble.n	80096bc <__kernel_rem_pio2f+0x1c0>
 8009638:	9b01      	ldr	r3, [sp, #4]
 800963a:	2000      	movs	r0, #0
 800963c:	3301      	adds	r3, #1
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	4601      	mov	r1, r0
 8009642:	4285      	cmp	r5, r0
 8009644:	dc6d      	bgt.n	8009722 <__kernel_rem_pio2f+0x226>
 8009646:	2c00      	cmp	r4, #0
 8009648:	dd04      	ble.n	8009654 <__kernel_rem_pio2f+0x158>
 800964a:	2c01      	cmp	r4, #1
 800964c:	d07e      	beq.n	800974c <__kernel_rem_pio2f+0x250>
 800964e:	2c02      	cmp	r4, #2
 8009650:	f000 8086 	beq.w	8009760 <__kernel_rem_pio2f+0x264>
 8009654:	f1b8 0f02 	cmp.w	r8, #2
 8009658:	d130      	bne.n	80096bc <__kernel_rem_pio2f+0x1c0>
 800965a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800965e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009662:	b359      	cbz	r1, 80096bc <__kernel_rem_pio2f+0x1c0>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fb5f 	bl	8009d28 <scalbnf>
 800966a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800966e:	e025      	b.n	80096bc <__kernel_rem_pio2f+0x1c0>
 8009670:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009674:	a806      	add	r0, sp, #24
 8009676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800967a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800967e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009682:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009686:	ee10 1a10 	vmov	r1, s0
 800968a:	ed32 0a01 	vldmdb	r2!, {s0}
 800968e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8009692:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009696:	3301      	adds	r3, #1
 8009698:	e79a      	b.n	80095d0 <__kernel_rem_pio2f+0xd4>
 800969a:	d106      	bne.n	80096aa <__kernel_rem_pio2f+0x1ae>
 800969c:	1e6b      	subs	r3, r5, #1
 800969e:	aa06      	add	r2, sp, #24
 80096a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096a4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80096a8:	e7c3      	b.n	8009632 <__kernel_rem_pio2f+0x136>
 80096aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80096ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80096b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b6:	da31      	bge.n	800971c <__kernel_rem_pio2f+0x220>
 80096b8:	f04f 0800 	mov.w	r8, #0
 80096bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80096c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c4:	f040 80a8 	bne.w	8009818 <__kernel_rem_pio2f+0x31c>
 80096c8:	1e6b      	subs	r3, r5, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	2200      	movs	r2, #0
 80096ce:	4548      	cmp	r0, r9
 80096d0:	da4d      	bge.n	800976e <__kernel_rem_pio2f+0x272>
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	f000 8087 	beq.w	80097e6 <__kernel_rem_pio2f+0x2ea>
 80096d8:	aa06      	add	r2, sp, #24
 80096da:	3c08      	subs	r4, #8
 80096dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096e0:	2900      	cmp	r1, #0
 80096e2:	f000 808d 	beq.w	8009800 <__kernel_rem_pio2f+0x304>
 80096e6:	4620      	mov	r0, r4
 80096e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	f000 fb1b 	bl	8009d28 <scalbnf>
 80096f2:	9b02      	ldr	r3, [sp, #8]
 80096f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009810 <__kernel_rem_pio2f+0x314>
 80096f8:	0099      	lsls	r1, r3, #2
 80096fa:	aa42      	add	r2, sp, #264	; 0x108
 80096fc:	1850      	adds	r0, r2, r1
 80096fe:	1d05      	adds	r5, r0, #4
 8009700:	461c      	mov	r4, r3
 8009702:	2c00      	cmp	r4, #0
 8009704:	f280 80b8 	bge.w	8009878 <__kernel_rem_pio2f+0x37c>
 8009708:	2500      	movs	r5, #0
 800970a:	1b5c      	subs	r4, r3, r5
 800970c:	2c00      	cmp	r4, #0
 800970e:	f2c0 80d8 	blt.w	80098c2 <__kernel_rem_pio2f+0x3c6>
 8009712:	4f3d      	ldr	r7, [pc, #244]	; (8009808 <__kernel_rem_pio2f+0x30c>)
 8009714:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8009814 <__kernel_rem_pio2f+0x318>
 8009718:	2400      	movs	r4, #0
 800971a:	e0c6      	b.n	80098aa <__kernel_rem_pio2f+0x3ae>
 800971c:	f04f 0802 	mov.w	r8, #2
 8009720:	e78a      	b.n	8009638 <__kernel_rem_pio2f+0x13c>
 8009722:	ab06      	add	r3, sp, #24
 8009724:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009728:	b949      	cbnz	r1, 800973e <__kernel_rem_pio2f+0x242>
 800972a:	b12b      	cbz	r3, 8009738 <__kernel_rem_pio2f+0x23c>
 800972c:	aa06      	add	r2, sp, #24
 800972e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009732:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009736:	2301      	movs	r3, #1
 8009738:	3001      	adds	r0, #1
 800973a:	4619      	mov	r1, r3
 800973c:	e781      	b.n	8009642 <__kernel_rem_pio2f+0x146>
 800973e:	aa06      	add	r2, sp, #24
 8009740:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009744:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009748:	460b      	mov	r3, r1
 800974a:	e7f5      	b.n	8009738 <__kernel_rem_pio2f+0x23c>
 800974c:	1e68      	subs	r0, r5, #1
 800974e:	ab06      	add	r3, sp, #24
 8009750:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009758:	aa06      	add	r2, sp, #24
 800975a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800975e:	e779      	b.n	8009654 <__kernel_rem_pio2f+0x158>
 8009760:	1e68      	subs	r0, r5, #1
 8009762:	ab06      	add	r3, sp, #24
 8009764:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800976c:	e7f4      	b.n	8009758 <__kernel_rem_pio2f+0x25c>
 800976e:	a906      	add	r1, sp, #24
 8009770:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009774:	3801      	subs	r0, #1
 8009776:	430a      	orrs	r2, r1
 8009778:	e7a9      	b.n	80096ce <__kernel_rem_pio2f+0x1d2>
 800977a:	f10c 0c01 	add.w	ip, ip, #1
 800977e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009782:	2a00      	cmp	r2, #0
 8009784:	d0f9      	beq.n	800977a <__kernel_rem_pio2f+0x27e>
 8009786:	eb0b 0305 	add.w	r3, fp, r5
 800978a:	aa1a      	add	r2, sp, #104	; 0x68
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	1898      	adds	r0, r3, r2
 8009790:	3004      	adds	r0, #4
 8009792:	1c69      	adds	r1, r5, #1
 8009794:	3704      	adds	r7, #4
 8009796:	2200      	movs	r2, #0
 8009798:	4465      	add	r5, ip
 800979a:	9005      	str	r0, [sp, #20]
 800979c:	428d      	cmp	r5, r1
 800979e:	f6ff af0a 	blt.w	80095b6 <__kernel_rem_pio2f+0xba>
 80097a2:	a81a      	add	r0, sp, #104	; 0x68
 80097a4:	eb02 0c03 	add.w	ip, r2, r3
 80097a8:	4484      	add	ip, r0
 80097aa:	9803      	ldr	r0, [sp, #12]
 80097ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80097b0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80097b4:	9001      	str	r0, [sp, #4]
 80097b6:	ee07 0a90 	vmov	s15, r0
 80097ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097be:	9805      	ldr	r0, [sp, #20]
 80097c0:	edcc 7a00 	vstr	s15, [ip]
 80097c4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009814 <__kernel_rem_pio2f+0x318>
 80097c8:	eb00 0802 	add.w	r8, r0, r2
 80097cc:	f04f 0c00 	mov.w	ip, #0
 80097d0:	45d4      	cmp	ip, sl
 80097d2:	dd0c      	ble.n	80097ee <__kernel_rem_pio2f+0x2f2>
 80097d4:	eb02 0c07 	add.w	ip, r2, r7
 80097d8:	a842      	add	r0, sp, #264	; 0x108
 80097da:	4484      	add	ip, r0
 80097dc:	edcc 7a01 	vstr	s15, [ip, #4]
 80097e0:	3101      	adds	r1, #1
 80097e2:	3204      	adds	r2, #4
 80097e4:	e7da      	b.n	800979c <__kernel_rem_pio2f+0x2a0>
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	f04f 0c01 	mov.w	ip, #1
 80097ec:	e7c7      	b.n	800977e <__kernel_rem_pio2f+0x282>
 80097ee:	ecfe 6a01 	vldmia	lr!, {s13}
 80097f2:	ed38 7a01 	vldmdb	r8!, {s14}
 80097f6:	f10c 0c01 	add.w	ip, ip, #1
 80097fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097fe:	e7e7      	b.n	80097d0 <__kernel_rem_pio2f+0x2d4>
 8009800:	3b01      	subs	r3, #1
 8009802:	e769      	b.n	80096d8 <__kernel_rem_pio2f+0x1dc>
 8009804:	0800abe4 	.word	0x0800abe4
 8009808:	0800abb8 	.word	0x0800abb8
 800980c:	43800000 	.word	0x43800000
 8009810:	3b800000 	.word	0x3b800000
 8009814:	00000000 	.word	0x00000000
 8009818:	4260      	negs	r0, r4
 800981a:	eeb0 0a48 	vmov.f32	s0, s16
 800981e:	f000 fa83 	bl	8009d28 <scalbnf>
 8009822:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800980c <__kernel_rem_pio2f+0x310>
 8009826:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982e:	db1a      	blt.n	8009866 <__kernel_rem_pio2f+0x36a>
 8009830:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009810 <__kernel_rem_pio2f+0x314>
 8009834:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009838:	aa06      	add	r2, sp, #24
 800983a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800983e:	a906      	add	r1, sp, #24
 8009840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009844:	3408      	adds	r4, #8
 8009846:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800984a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800984e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009852:	ee10 3a10 	vmov	r3, s0
 8009856:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800985a:	1c6b      	adds	r3, r5, #1
 800985c:	ee17 2a90 	vmov	r2, s15
 8009860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009864:	e73f      	b.n	80096e6 <__kernel_rem_pio2f+0x1ea>
 8009866:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800986a:	aa06      	add	r2, sp, #24
 800986c:	ee10 3a10 	vmov	r3, s0
 8009870:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009874:	462b      	mov	r3, r5
 8009876:	e736      	b.n	80096e6 <__kernel_rem_pio2f+0x1ea>
 8009878:	aa06      	add	r2, sp, #24
 800987a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800987e:	9202      	str	r2, [sp, #8]
 8009880:	ee07 2a90 	vmov	s15, r2
 8009884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009888:	3c01      	subs	r4, #1
 800988a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800988e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009892:	ed65 7a01 	vstmdb	r5!, {s15}
 8009896:	e734      	b.n	8009702 <__kernel_rem_pio2f+0x206>
 8009898:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800989c:	ecf7 6a01 	vldmia	r7!, {s13}
 80098a0:	ed9c 7a00 	vldr	s14, [ip]
 80098a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80098a8:	3401      	adds	r4, #1
 80098aa:	454c      	cmp	r4, r9
 80098ac:	dc01      	bgt.n	80098b2 <__kernel_rem_pio2f+0x3b6>
 80098ae:	42a5      	cmp	r5, r4
 80098b0:	daf2      	bge.n	8009898 <__kernel_rem_pio2f+0x39c>
 80098b2:	aa56      	add	r2, sp, #344	; 0x158
 80098b4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80098b8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80098bc:	3501      	adds	r5, #1
 80098be:	3804      	subs	r0, #4
 80098c0:	e723      	b.n	800970a <__kernel_rem_pio2f+0x20e>
 80098c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80098c4:	2a03      	cmp	r2, #3
 80098c6:	d84d      	bhi.n	8009964 <__kernel_rem_pio2f+0x468>
 80098c8:	e8df f002 	tbb	[pc, r2]
 80098cc:	021f1f3e 	.word	0x021f1f3e
 80098d0:	aa56      	add	r2, sp, #344	; 0x158
 80098d2:	4411      	add	r1, r2
 80098d4:	399c      	subs	r1, #156	; 0x9c
 80098d6:	4608      	mov	r0, r1
 80098d8:	461c      	mov	r4, r3
 80098da:	2c00      	cmp	r4, #0
 80098dc:	dc5f      	bgt.n	800999e <__kernel_rem_pio2f+0x4a2>
 80098de:	4608      	mov	r0, r1
 80098e0:	461c      	mov	r4, r3
 80098e2:	2c01      	cmp	r4, #1
 80098e4:	dc6b      	bgt.n	80099be <__kernel_rem_pio2f+0x4c2>
 80098e6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8009814 <__kernel_rem_pio2f+0x318>
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	dc77      	bgt.n	80099de <__kernel_rem_pio2f+0x4e2>
 80098ee:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80098f2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80098f6:	f1b8 0f00 	cmp.w	r8, #0
 80098fa:	d176      	bne.n	80099ea <__kernel_rem_pio2f+0x4ee>
 80098fc:	edc6 6a00 	vstr	s13, [r6]
 8009900:	ed86 7a01 	vstr	s14, [r6, #4]
 8009904:	edc6 7a02 	vstr	s15, [r6, #8]
 8009908:	e02c      	b.n	8009964 <__kernel_rem_pio2f+0x468>
 800990a:	aa56      	add	r2, sp, #344	; 0x158
 800990c:	4411      	add	r1, r2
 800990e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8009814 <__kernel_rem_pio2f+0x318>
 8009912:	399c      	subs	r1, #156	; 0x9c
 8009914:	4618      	mov	r0, r3
 8009916:	2800      	cmp	r0, #0
 8009918:	da32      	bge.n	8009980 <__kernel_rem_pio2f+0x484>
 800991a:	f1b8 0f00 	cmp.w	r8, #0
 800991e:	d035      	beq.n	800998c <__kernel_rem_pio2f+0x490>
 8009920:	eef1 7a47 	vneg.f32	s15, s14
 8009924:	edc6 7a00 	vstr	s15, [r6]
 8009928:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800992c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009930:	a82f      	add	r0, sp, #188	; 0xbc
 8009932:	2101      	movs	r1, #1
 8009934:	428b      	cmp	r3, r1
 8009936:	da2c      	bge.n	8009992 <__kernel_rem_pio2f+0x496>
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	d001      	beq.n	8009942 <__kernel_rem_pio2f+0x446>
 800993e:	eef1 7a67 	vneg.f32	s15, s15
 8009942:	edc6 7a01 	vstr	s15, [r6, #4]
 8009946:	e00d      	b.n	8009964 <__kernel_rem_pio2f+0x468>
 8009948:	aa56      	add	r2, sp, #344	; 0x158
 800994a:	4411      	add	r1, r2
 800994c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009814 <__kernel_rem_pio2f+0x318>
 8009950:	399c      	subs	r1, #156	; 0x9c
 8009952:	2b00      	cmp	r3, #0
 8009954:	da0e      	bge.n	8009974 <__kernel_rem_pio2f+0x478>
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	d001      	beq.n	8009960 <__kernel_rem_pio2f+0x464>
 800995c:	eef1 7a67 	vneg.f32	s15, s15
 8009960:	edc6 7a00 	vstr	s15, [r6]
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	f003 0007 	and.w	r0, r3, #7
 800996a:	b057      	add	sp, #348	; 0x15c
 800996c:	ecbd 8b04 	vpop	{d8-d9}
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	ed31 7a01 	vldmdb	r1!, {s14}
 8009978:	3b01      	subs	r3, #1
 800997a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800997e:	e7e8      	b.n	8009952 <__kernel_rem_pio2f+0x456>
 8009980:	ed71 7a01 	vldmdb	r1!, {s15}
 8009984:	3801      	subs	r0, #1
 8009986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800998a:	e7c4      	b.n	8009916 <__kernel_rem_pio2f+0x41a>
 800998c:	eef0 7a47 	vmov.f32	s15, s14
 8009990:	e7c8      	b.n	8009924 <__kernel_rem_pio2f+0x428>
 8009992:	ecb0 7a01 	vldmia	r0!, {s14}
 8009996:	3101      	adds	r1, #1
 8009998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800999c:	e7ca      	b.n	8009934 <__kernel_rem_pio2f+0x438>
 800999e:	ed50 7a02 	vldr	s15, [r0, #-8]
 80099a2:	ed70 6a01 	vldmdb	r0!, {s13}
 80099a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80099aa:	3c01      	subs	r4, #1
 80099ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099b0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80099b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b8:	edc0 7a00 	vstr	s15, [r0]
 80099bc:	e78d      	b.n	80098da <__kernel_rem_pio2f+0x3de>
 80099be:	ed50 7a02 	vldr	s15, [r0, #-8]
 80099c2:	ed70 6a01 	vldmdb	r0!, {s13}
 80099c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80099ca:	3c01      	subs	r4, #1
 80099cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099d0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80099d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d8:	edc0 7a00 	vstr	s15, [r0]
 80099dc:	e781      	b.n	80098e2 <__kernel_rem_pio2f+0x3e6>
 80099de:	ed31 7a01 	vldmdb	r1!, {s14}
 80099e2:	3b01      	subs	r3, #1
 80099e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099e8:	e77f      	b.n	80098ea <__kernel_rem_pio2f+0x3ee>
 80099ea:	eef1 6a66 	vneg.f32	s13, s13
 80099ee:	eeb1 7a47 	vneg.f32	s14, s14
 80099f2:	edc6 6a00 	vstr	s13, [r6]
 80099f6:	ed86 7a01 	vstr	s14, [r6, #4]
 80099fa:	eef1 7a67 	vneg.f32	s15, s15
 80099fe:	e781      	b.n	8009904 <__kernel_rem_pio2f+0x408>

08009a00 <__kernel_sinf>:
 8009a00:	ee10 3a10 	vmov	r3, s0
 8009a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a08:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009a0c:	da04      	bge.n	8009a18 <__kernel_sinf+0x18>
 8009a0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009a12:	ee17 3a90 	vmov	r3, s15
 8009a16:	b35b      	cbz	r3, 8009a70 <__kernel_sinf+0x70>
 8009a18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009a1c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009a74 <__kernel_sinf+0x74>
 8009a20:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009a78 <__kernel_sinf+0x78>
 8009a24:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a28:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009a7c <__kernel_sinf+0x7c>
 8009a2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a30:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009a80 <__kernel_sinf+0x80>
 8009a34:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009a38:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009a84 <__kernel_sinf+0x84>
 8009a3c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009a40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a44:	b930      	cbnz	r0, 8009a54 <__kernel_sinf+0x54>
 8009a46:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009a88 <__kernel_sinf+0x88>
 8009a4a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a4e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009a52:	4770      	bx	lr
 8009a54:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009a5c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009a60:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009a64:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009a8c <__kernel_sinf+0x8c>
 8009a68:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009a6c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	2f2ec9d3 	.word	0x2f2ec9d3
 8009a78:	b2d72f34 	.word	0xb2d72f34
 8009a7c:	3638ef1b 	.word	0x3638ef1b
 8009a80:	b9500d01 	.word	0xb9500d01
 8009a84:	3c088889 	.word	0x3c088889
 8009a88:	be2aaaab 	.word	0xbe2aaaab
 8009a8c:	3e2aaaab 	.word	0x3e2aaaab

08009a90 <fabs>:
 8009a90:	ec51 0b10 	vmov	r0, r1, d0
 8009a94:	ee10 2a10 	vmov	r2, s0
 8009a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a9c:	ec43 2b10 	vmov	d0, r2, r3
 8009aa0:	4770      	bx	lr
 8009aa2:	0000      	movs	r0, r0
 8009aa4:	0000      	movs	r0, r0
	...

08009aa8 <floor>:
 8009aa8:	ee10 1a90 	vmov	r1, s1
 8009aac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ab0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009ab4:	2b13      	cmp	r3, #19
 8009ab6:	b530      	push	{r4, r5, lr}
 8009ab8:	ee10 0a10 	vmov	r0, s0
 8009abc:	ee10 5a10 	vmov	r5, s0
 8009ac0:	dc33      	bgt.n	8009b2a <floor+0x82>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da17      	bge.n	8009af6 <floor+0x4e>
 8009ac6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009b88 <floor+0xe0>
 8009aca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009ace:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad6:	dd09      	ble.n	8009aec <floor+0x44>
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	da50      	bge.n	8009b7e <floor+0xd6>
 8009adc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae0:	4a2b      	ldr	r2, [pc, #172]	; (8009b90 <floor+0xe8>)
 8009ae2:	4303      	orrs	r3, r0
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4283      	cmp	r3, r0
 8009ae8:	bf18      	it	ne
 8009aea:	4611      	movne	r1, r2
 8009aec:	460b      	mov	r3, r1
 8009aee:	4602      	mov	r2, r0
 8009af0:	ec43 2b10 	vmov	d0, r2, r3
 8009af4:	e020      	b.n	8009b38 <floor+0x90>
 8009af6:	4a27      	ldr	r2, [pc, #156]	; (8009b94 <floor+0xec>)
 8009af8:	411a      	asrs	r2, r3
 8009afa:	ea01 0402 	and.w	r4, r1, r2
 8009afe:	4304      	orrs	r4, r0
 8009b00:	d01a      	beq.n	8009b38 <floor+0x90>
 8009b02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009b88 <floor+0xe0>
 8009b06:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009b0a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	ddeb      	ble.n	8009aec <floor+0x44>
 8009b14:	2900      	cmp	r1, #0
 8009b16:	bfbe      	ittt	lt
 8009b18:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009b1c:	fa40 f303 	asrlt.w	r3, r0, r3
 8009b20:	18c9      	addlt	r1, r1, r3
 8009b22:	ea21 0102 	bic.w	r1, r1, r2
 8009b26:	2000      	movs	r0, #0
 8009b28:	e7e0      	b.n	8009aec <floor+0x44>
 8009b2a:	2b33      	cmp	r3, #51	; 0x33
 8009b2c:	dd05      	ble.n	8009b3a <floor+0x92>
 8009b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b32:	d101      	bne.n	8009b38 <floor+0x90>
 8009b34:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009b38:	bd30      	pop	{r4, r5, pc}
 8009b3a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b42:	40e2      	lsrs	r2, r4
 8009b44:	4202      	tst	r2, r0
 8009b46:	d0f7      	beq.n	8009b38 <floor+0x90>
 8009b48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009b88 <floor+0xe0>
 8009b4c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009b50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b58:	ddc8      	ble.n	8009aec <floor+0x44>
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	da02      	bge.n	8009b64 <floor+0xbc>
 8009b5e:	2b14      	cmp	r3, #20
 8009b60:	d103      	bne.n	8009b6a <floor+0xc2>
 8009b62:	3101      	adds	r1, #1
 8009b64:	ea20 0002 	bic.w	r0, r0, r2
 8009b68:	e7c0      	b.n	8009aec <floor+0x44>
 8009b6a:	2401      	movs	r4, #1
 8009b6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b70:	fa04 f303 	lsl.w	r3, r4, r3
 8009b74:	4418      	add	r0, r3
 8009b76:	42a8      	cmp	r0, r5
 8009b78:	bf38      	it	cc
 8009b7a:	1909      	addcc	r1, r1, r4
 8009b7c:	e7f2      	b.n	8009b64 <floor+0xbc>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	4601      	mov	r1, r0
 8009b82:	e7b3      	b.n	8009aec <floor+0x44>
 8009b84:	f3af 8000 	nop.w
 8009b88:	8800759c 	.word	0x8800759c
 8009b8c:	7e37e43c 	.word	0x7e37e43c
 8009b90:	bff00000 	.word	0xbff00000
 8009b94:	000fffff 	.word	0x000fffff

08009b98 <scalbn>:
 8009b98:	b500      	push	{lr}
 8009b9a:	ed2d 8b02 	vpush	{d8}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	ed8d 0b00 	vstr	d0, [sp]
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009baa:	b9a2      	cbnz	r2, 8009bd6 <scalbn+0x3e>
 8009bac:	9a00      	ldr	r2, [sp, #0]
 8009bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	d03a      	beq.n	8009c2c <scalbn+0x94>
 8009bb6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009c70 <scalbn+0xd8>
 8009bba:	4b35      	ldr	r3, [pc, #212]	; (8009c90 <scalbn+0xf8>)
 8009bbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	ed8d 7b00 	vstr	d7, [sp]
 8009bc6:	da11      	bge.n	8009bec <scalbn+0x54>
 8009bc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009c78 <scalbn+0xe0>
 8009bcc:	ed9d 6b00 	vldr	d6, [sp]
 8009bd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bd4:	e007      	b.n	8009be6 <scalbn+0x4e>
 8009bd6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009bda:	428a      	cmp	r2, r1
 8009bdc:	d10a      	bne.n	8009bf4 <scalbn+0x5c>
 8009bde:	ed9d 7b00 	vldr	d7, [sp]
 8009be2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009be6:	ed8d 7b00 	vstr	d7, [sp]
 8009bea:	e01f      	b.n	8009c2c <scalbn+0x94>
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009bf2:	3a36      	subs	r2, #54	; 0x36
 8009bf4:	4402      	add	r2, r0
 8009bf6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009bfa:	428a      	cmp	r2, r1
 8009bfc:	dd0a      	ble.n	8009c14 <scalbn+0x7c>
 8009bfe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8009c80 <scalbn+0xe8>
 8009c02:	eeb0 0b48 	vmov.f64	d0, d8
 8009c06:	ed9d 1b00 	vldr	d1, [sp]
 8009c0a:	f000 f8ed 	bl	8009de8 <copysign>
 8009c0e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009c12:	e7e8      	b.n	8009be6 <scalbn+0x4e>
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	dd10      	ble.n	8009c3a <scalbn+0xa2>
 8009c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c24:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c28:	e9cd 0100 	strd	r0, r1, [sp]
 8009c2c:	ed9d 0b00 	vldr	d0, [sp]
 8009c30:	b003      	add	sp, #12
 8009c32:	ecbd 8b02 	vpop	{d8}
 8009c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c3a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c3e:	da06      	bge.n	8009c4e <scalbn+0xb6>
 8009c40:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c44:	4298      	cmp	r0, r3
 8009c46:	dcda      	bgt.n	8009bfe <scalbn+0x66>
 8009c48:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8009c78 <scalbn+0xe0>
 8009c4c:	e7d9      	b.n	8009c02 <scalbn+0x6a>
 8009c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c56:	3236      	adds	r2, #54	; 0x36
 8009c58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c5c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c60:	ec41 0b17 	vmov	d7, r0, r1
 8009c64:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8009c88 <scalbn+0xf0>
 8009c68:	e7b2      	b.n	8009bd0 <scalbn+0x38>
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
 8009c70:	00000000 	.word	0x00000000
 8009c74:	43500000 	.word	0x43500000
 8009c78:	c2f8f359 	.word	0xc2f8f359
 8009c7c:	01a56e1f 	.word	0x01a56e1f
 8009c80:	8800759c 	.word	0x8800759c
 8009c84:	7e37e43c 	.word	0x7e37e43c
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	3c900000 	.word	0x3c900000
 8009c90:	ffff3cb0 	.word	0xffff3cb0

08009c94 <fabsf>:
 8009c94:	ee10 3a10 	vmov	r3, s0
 8009c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c9c:	ee00 3a10 	vmov	s0, r3
 8009ca0:	4770      	bx	lr
	...

08009ca4 <floorf>:
 8009ca4:	ee10 3a10 	vmov	r3, s0
 8009ca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009cac:	0dca      	lsrs	r2, r1, #23
 8009cae:	3a7f      	subs	r2, #127	; 0x7f
 8009cb0:	2a16      	cmp	r2, #22
 8009cb2:	dc2a      	bgt.n	8009d0a <floorf+0x66>
 8009cb4:	2a00      	cmp	r2, #0
 8009cb6:	da11      	bge.n	8009cdc <floorf+0x38>
 8009cb8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009d1c <floorf+0x78>
 8009cbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	dd05      	ble.n	8009cd6 <floorf+0x32>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da23      	bge.n	8009d16 <floorf+0x72>
 8009cce:	4a14      	ldr	r2, [pc, #80]	; (8009d20 <floorf+0x7c>)
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	bf18      	it	ne
 8009cd4:	4613      	movne	r3, r2
 8009cd6:	ee00 3a10 	vmov	s0, r3
 8009cda:	4770      	bx	lr
 8009cdc:	4911      	ldr	r1, [pc, #68]	; (8009d24 <floorf+0x80>)
 8009cde:	4111      	asrs	r1, r2
 8009ce0:	420b      	tst	r3, r1
 8009ce2:	d0fa      	beq.n	8009cda <floorf+0x36>
 8009ce4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009d1c <floorf+0x78>
 8009ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf4:	ddef      	ble.n	8009cd6 <floorf+0x32>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfbe      	ittt	lt
 8009cfa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009cfe:	fa40 f202 	asrlt.w	r2, r0, r2
 8009d02:	189b      	addlt	r3, r3, r2
 8009d04:	ea23 0301 	bic.w	r3, r3, r1
 8009d08:	e7e5      	b.n	8009cd6 <floorf+0x32>
 8009d0a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d0e:	d3e4      	bcc.n	8009cda <floorf+0x36>
 8009d10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d14:	4770      	bx	lr
 8009d16:	2300      	movs	r3, #0
 8009d18:	e7dd      	b.n	8009cd6 <floorf+0x32>
 8009d1a:	bf00      	nop
 8009d1c:	7149f2ca 	.word	0x7149f2ca
 8009d20:	bf800000 	.word	0xbf800000
 8009d24:	007fffff 	.word	0x007fffff

08009d28 <scalbnf>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	ee10 2a10 	vmov	r2, s0
 8009d2e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009d32:	ed2d 8b02 	vpush	{d8}
 8009d36:	eef0 0a40 	vmov.f32	s1, s0
 8009d3a:	d004      	beq.n	8009d46 <scalbnf+0x1e>
 8009d3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d40:	d306      	bcc.n	8009d50 <scalbnf+0x28>
 8009d42:	ee70 0a00 	vadd.f32	s1, s0, s0
 8009d46:	ecbd 8b02 	vpop	{d8}
 8009d4a:	eeb0 0a60 	vmov.f32	s0, s1
 8009d4e:	bd08      	pop	{r3, pc}
 8009d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d54:	d21c      	bcs.n	8009d90 <scalbnf+0x68>
 8009d56:	4b1f      	ldr	r3, [pc, #124]	; (8009dd4 <scalbnf+0xac>)
 8009d58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009dd8 <scalbnf+0xb0>
 8009d5c:	4298      	cmp	r0, r3
 8009d5e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009d62:	db10      	blt.n	8009d86 <scalbnf+0x5e>
 8009d64:	ee10 2a90 	vmov	r2, s1
 8009d68:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009d6c:	3b19      	subs	r3, #25
 8009d6e:	4403      	add	r3, r0
 8009d70:	2bfe      	cmp	r3, #254	; 0xfe
 8009d72:	dd0f      	ble.n	8009d94 <scalbnf+0x6c>
 8009d74:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009ddc <scalbnf+0xb4>
 8009d78:	eeb0 0a48 	vmov.f32	s0, s16
 8009d7c:	f000 f843 	bl	8009e06 <copysignf>
 8009d80:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009d84:	e7df      	b.n	8009d46 <scalbnf+0x1e>
 8009d86:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009de0 <scalbnf+0xb8>
 8009d8a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009d8e:	e7da      	b.n	8009d46 <scalbnf+0x1e>
 8009d90:	0ddb      	lsrs	r3, r3, #23
 8009d92:	e7ec      	b.n	8009d6e <scalbnf+0x46>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd06      	ble.n	8009da6 <scalbnf+0x7e>
 8009d98:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009d9c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009da0:	ee00 3a90 	vmov	s1, r3
 8009da4:	e7cf      	b.n	8009d46 <scalbnf+0x1e>
 8009da6:	f113 0f16 	cmn.w	r3, #22
 8009daa:	da06      	bge.n	8009dba <scalbnf+0x92>
 8009dac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009db0:	4298      	cmp	r0, r3
 8009db2:	dcdf      	bgt.n	8009d74 <scalbnf+0x4c>
 8009db4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009de0 <scalbnf+0xb8>
 8009db8:	e7de      	b.n	8009d78 <scalbnf+0x50>
 8009dba:	3319      	adds	r3, #25
 8009dbc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009dc0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009dc4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009de4 <scalbnf+0xbc>
 8009dc8:	ee07 3a10 	vmov	s14, r3
 8009dcc:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009dd0:	e7b9      	b.n	8009d46 <scalbnf+0x1e>
 8009dd2:	bf00      	nop
 8009dd4:	ffff3cb0 	.word	0xffff3cb0
 8009dd8:	4c000000 	.word	0x4c000000
 8009ddc:	7149f2ca 	.word	0x7149f2ca
 8009de0:	0da24260 	.word	0x0da24260
 8009de4:	33000000 	.word	0x33000000

08009de8 <copysign>:
 8009de8:	ec51 0b10 	vmov	r0, r1, d0
 8009dec:	ee11 0a90 	vmov	r0, s3
 8009df0:	ee10 2a10 	vmov	r2, s0
 8009df4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009dfc:	ea41 0300 	orr.w	r3, r1, r0
 8009e00:	ec43 2b10 	vmov	d0, r2, r3
 8009e04:	4770      	bx	lr

08009e06 <copysignf>:
 8009e06:	ee10 3a10 	vmov	r3, s0
 8009e0a:	ee10 2a90 	vmov	r2, s1
 8009e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009e16:	4313      	orrs	r3, r2
 8009e18:	ee00 3a10 	vmov	s0, r3
 8009e1c:	4770      	bx	lr

08009e1e <abort>:
 8009e1e:	b508      	push	{r3, lr}
 8009e20:	2006      	movs	r0, #6
 8009e22:	f000 f871 	bl	8009f08 <raise>
 8009e26:	2001      	movs	r0, #1
 8009e28:	f7fa fc68 	bl	80046fc <_exit>

08009e2c <__errno>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	; (8009e34 <__errno+0x8>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20000020 	.word	0x20000020

08009e38 <__libc_init_array>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	4e0d      	ldr	r6, [pc, #52]	; (8009e70 <__libc_init_array+0x38>)
 8009e3c:	4c0d      	ldr	r4, [pc, #52]	; (8009e74 <__libc_init_array+0x3c>)
 8009e3e:	1ba4      	subs	r4, r4, r6
 8009e40:	10a4      	asrs	r4, r4, #2
 8009e42:	2500      	movs	r5, #0
 8009e44:	42a5      	cmp	r5, r4
 8009e46:	d109      	bne.n	8009e5c <__libc_init_array+0x24>
 8009e48:	4e0b      	ldr	r6, [pc, #44]	; (8009e78 <__libc_init_array+0x40>)
 8009e4a:	4c0c      	ldr	r4, [pc, #48]	; (8009e7c <__libc_init_array+0x44>)
 8009e4c:	f000 f960 	bl	800a110 <_init>
 8009e50:	1ba4      	subs	r4, r4, r6
 8009e52:	10a4      	asrs	r4, r4, #2
 8009e54:	2500      	movs	r5, #0
 8009e56:	42a5      	cmp	r5, r4
 8009e58:	d105      	bne.n	8009e66 <__libc_init_array+0x2e>
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e60:	4798      	blx	r3
 8009e62:	3501      	adds	r5, #1
 8009e64:	e7ee      	b.n	8009e44 <__libc_init_array+0xc>
 8009e66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e6a:	4798      	blx	r3
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	e7f2      	b.n	8009e56 <__libc_init_array+0x1e>
 8009e70:	0800abf8 	.word	0x0800abf8
 8009e74:	0800abf8 	.word	0x0800abf8
 8009e78:	0800abf8 	.word	0x0800abf8
 8009e7c:	0800ac00 	.word	0x0800ac00

08009e80 <memcpy>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	1e43      	subs	r3, r0, #1
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	d100      	bne.n	8009e8c <memcpy+0xc>
 8009e8a:	bd10      	pop	{r4, pc}
 8009e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e94:	e7f7      	b.n	8009e86 <memcpy+0x6>

08009e96 <memset>:
 8009e96:	4402      	add	r2, r0
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d100      	bne.n	8009ea0 <memset+0xa>
 8009e9e:	4770      	bx	lr
 8009ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea4:	e7f9      	b.n	8009e9a <memset+0x4>
	...

08009ea8 <realloc>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <realloc+0xc>)
 8009eaa:	460a      	mov	r2, r1
 8009eac:	4601      	mov	r1, r0
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	f000 b8a0 	b.w	8009ff4 <_realloc_r>
 8009eb4:	20000020 	.word	0x20000020

08009eb8 <_raise_r>:
 8009eb8:	291f      	cmp	r1, #31
 8009eba:	b538      	push	{r3, r4, r5, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	d904      	bls.n	8009ecc <_raise_r+0x14>
 8009ec2:	2316      	movs	r3, #22
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ece:	b112      	cbz	r2, 8009ed6 <_raise_r+0x1e>
 8009ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ed4:	b94b      	cbnz	r3, 8009eea <_raise_r+0x32>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f830 	bl	8009f3c <_getpid_r>
 8009edc:	462a      	mov	r2, r5
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee6:	f000 b817 	b.w	8009f18 <_kill_r>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d00a      	beq.n	8009f04 <_raise_r+0x4c>
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	d103      	bne.n	8009efa <_raise_r+0x42>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7e7      	b.n	8009eca <_raise_r+0x12>
 8009efa:	2400      	movs	r4, #0
 8009efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f00:	4628      	mov	r0, r5
 8009f02:	4798      	blx	r3
 8009f04:	2000      	movs	r0, #0
 8009f06:	e7e0      	b.n	8009eca <_raise_r+0x12>

08009f08 <raise>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <raise+0xc>)
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7ff bfd3 	b.w	8009eb8 <_raise_r>
 8009f12:	bf00      	nop
 8009f14:	20000020 	.word	0x20000020

08009f18 <_kill_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4c07      	ldr	r4, [pc, #28]	; (8009f38 <_kill_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4605      	mov	r5, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	f7fa fbd9 	bl	80046dc <_kill>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_kill_r+0x1c>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_kill_r+0x1c>
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20000ec0 	.word	0x20000ec0

08009f3c <_getpid_r>:
 8009f3c:	f7fa bbc6 	b.w	80046cc <_getpid>

08009f40 <_malloc_r>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	1ccd      	adds	r5, r1, #3
 8009f44:	f025 0503 	bic.w	r5, r5, #3
 8009f48:	3508      	adds	r5, #8
 8009f4a:	2d0c      	cmp	r5, #12
 8009f4c:	bf38      	it	cc
 8009f4e:	250c      	movcc	r5, #12
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	4606      	mov	r6, r0
 8009f54:	db01      	blt.n	8009f5a <_malloc_r+0x1a>
 8009f56:	42a9      	cmp	r1, r5
 8009f58:	d903      	bls.n	8009f62 <_malloc_r+0x22>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	6033      	str	r3, [r6, #0]
 8009f5e:	2000      	movs	r0, #0
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	f000 f87d 	bl	800a060 <__malloc_lock>
 8009f66:	4a21      	ldr	r2, [pc, #132]	; (8009fec <_malloc_r+0xac>)
 8009f68:	6814      	ldr	r4, [r2, #0]
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	b991      	cbnz	r1, 8009f94 <_malloc_r+0x54>
 8009f6e:	4c20      	ldr	r4, [pc, #128]	; (8009ff0 <_malloc_r+0xb0>)
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	b91b      	cbnz	r3, 8009f7c <_malloc_r+0x3c>
 8009f74:	4630      	mov	r0, r6
 8009f76:	f000 f863 	bl	800a040 <_sbrk_r>
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f85e 	bl	800a040 <_sbrk_r>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d124      	bne.n	8009fd2 <_malloc_r+0x92>
 8009f88:	230c      	movs	r3, #12
 8009f8a:	6033      	str	r3, [r6, #0]
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 f868 	bl	800a062 <__malloc_unlock>
 8009f92:	e7e4      	b.n	8009f5e <_malloc_r+0x1e>
 8009f94:	680b      	ldr	r3, [r1, #0]
 8009f96:	1b5b      	subs	r3, r3, r5
 8009f98:	d418      	bmi.n	8009fcc <_malloc_r+0x8c>
 8009f9a:	2b0b      	cmp	r3, #11
 8009f9c:	d90f      	bls.n	8009fbe <_malloc_r+0x7e>
 8009f9e:	600b      	str	r3, [r1, #0]
 8009fa0:	50cd      	str	r5, [r1, r3]
 8009fa2:	18cc      	adds	r4, r1, r3
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f000 f85c 	bl	800a062 <__malloc_unlock>
 8009faa:	f104 000b 	add.w	r0, r4, #11
 8009fae:	1d23      	adds	r3, r4, #4
 8009fb0:	f020 0007 	bic.w	r0, r0, #7
 8009fb4:	1ac3      	subs	r3, r0, r3
 8009fb6:	d0d3      	beq.n	8009f60 <_malloc_r+0x20>
 8009fb8:	425a      	negs	r2, r3
 8009fba:	50e2      	str	r2, [r4, r3]
 8009fbc:	e7d0      	b.n	8009f60 <_malloc_r+0x20>
 8009fbe:	428c      	cmp	r4, r1
 8009fc0:	684b      	ldr	r3, [r1, #4]
 8009fc2:	bf16      	itet	ne
 8009fc4:	6063      	strne	r3, [r4, #4]
 8009fc6:	6013      	streq	r3, [r2, #0]
 8009fc8:	460c      	movne	r4, r1
 8009fca:	e7eb      	b.n	8009fa4 <_malloc_r+0x64>
 8009fcc:	460c      	mov	r4, r1
 8009fce:	6849      	ldr	r1, [r1, #4]
 8009fd0:	e7cc      	b.n	8009f6c <_malloc_r+0x2c>
 8009fd2:	1cc4      	adds	r4, r0, #3
 8009fd4:	f024 0403 	bic.w	r4, r4, #3
 8009fd8:	42a0      	cmp	r0, r4
 8009fda:	d005      	beq.n	8009fe8 <_malloc_r+0xa8>
 8009fdc:	1a21      	subs	r1, r4, r0
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f82e 	bl	800a040 <_sbrk_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d0cf      	beq.n	8009f88 <_malloc_r+0x48>
 8009fe8:	6025      	str	r5, [r4, #0]
 8009fea:	e7db      	b.n	8009fa4 <_malloc_r+0x64>
 8009fec:	20000eb4 	.word	0x20000eb4
 8009ff0:	20000eb8 	.word	0x20000eb8

08009ff4 <_realloc_r>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	b921      	cbnz	r1, 800a008 <_realloc_r+0x14>
 8009ffe:	4611      	mov	r1, r2
 800a000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a004:	f7ff bf9c 	b.w	8009f40 <_malloc_r>
 800a008:	b922      	cbnz	r2, 800a014 <_realloc_r+0x20>
 800a00a:	f000 f82b 	bl	800a064 <_free_r>
 800a00e:	4625      	mov	r5, r4
 800a010:	4628      	mov	r0, r5
 800a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a014:	f000 f874 	bl	800a100 <_malloc_usable_size_r>
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d20f      	bcs.n	800a03c <_realloc_r+0x48>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4638      	mov	r0, r7
 800a020:	f7ff ff8e 	bl	8009f40 <_malloc_r>
 800a024:	4605      	mov	r5, r0
 800a026:	2800      	cmp	r0, #0
 800a028:	d0f2      	beq.n	800a010 <_realloc_r+0x1c>
 800a02a:	4631      	mov	r1, r6
 800a02c:	4622      	mov	r2, r4
 800a02e:	f7ff ff27 	bl	8009e80 <memcpy>
 800a032:	4631      	mov	r1, r6
 800a034:	4638      	mov	r0, r7
 800a036:	f000 f815 	bl	800a064 <_free_r>
 800a03a:	e7e9      	b.n	800a010 <_realloc_r+0x1c>
 800a03c:	4635      	mov	r5, r6
 800a03e:	e7e7      	b.n	800a010 <_realloc_r+0x1c>

0800a040 <_sbrk_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4c06      	ldr	r4, [pc, #24]	; (800a05c <_sbrk_r+0x1c>)
 800a044:	2300      	movs	r3, #0
 800a046:	4605      	mov	r5, r0
 800a048:	4608      	mov	r0, r1
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	f7fa fb60 	bl	8004710 <_sbrk>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_sbrk_r+0x1a>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	b103      	cbz	r3, 800a05a <_sbrk_r+0x1a>
 800a058:	602b      	str	r3, [r5, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20000ec0 	.word	0x20000ec0

0800a060 <__malloc_lock>:
 800a060:	4770      	bx	lr

0800a062 <__malloc_unlock>:
 800a062:	4770      	bx	lr

0800a064 <_free_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4605      	mov	r5, r0
 800a068:	2900      	cmp	r1, #0
 800a06a:	d045      	beq.n	800a0f8 <_free_r+0x94>
 800a06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a070:	1f0c      	subs	r4, r1, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfb8      	it	lt
 800a076:	18e4      	addlt	r4, r4, r3
 800a078:	f7ff fff2 	bl	800a060 <__malloc_lock>
 800a07c:	4a1f      	ldr	r2, [pc, #124]	; (800a0fc <_free_r+0x98>)
 800a07e:	6813      	ldr	r3, [r2, #0]
 800a080:	4610      	mov	r0, r2
 800a082:	b933      	cbnz	r3, 800a092 <_free_r+0x2e>
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	6014      	str	r4, [r2, #0]
 800a088:	4628      	mov	r0, r5
 800a08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a08e:	f7ff bfe8 	b.w	800a062 <__malloc_unlock>
 800a092:	42a3      	cmp	r3, r4
 800a094:	d90c      	bls.n	800a0b0 <_free_r+0x4c>
 800a096:	6821      	ldr	r1, [r4, #0]
 800a098:	1862      	adds	r2, r4, r1
 800a09a:	4293      	cmp	r3, r2
 800a09c:	bf04      	itt	eq
 800a09e:	681a      	ldreq	r2, [r3, #0]
 800a0a0:	685b      	ldreq	r3, [r3, #4]
 800a0a2:	6063      	str	r3, [r4, #4]
 800a0a4:	bf04      	itt	eq
 800a0a6:	1852      	addeq	r2, r2, r1
 800a0a8:	6022      	streq	r2, [r4, #0]
 800a0aa:	6004      	str	r4, [r0, #0]
 800a0ac:	e7ec      	b.n	800a088 <_free_r+0x24>
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	b10a      	cbz	r2, 800a0b8 <_free_r+0x54>
 800a0b4:	42a2      	cmp	r2, r4
 800a0b6:	d9fa      	bls.n	800a0ae <_free_r+0x4a>
 800a0b8:	6819      	ldr	r1, [r3, #0]
 800a0ba:	1858      	adds	r0, r3, r1
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d10b      	bne.n	800a0d8 <_free_r+0x74>
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	4401      	add	r1, r0
 800a0c4:	1858      	adds	r0, r3, r1
 800a0c6:	4282      	cmp	r2, r0
 800a0c8:	6019      	str	r1, [r3, #0]
 800a0ca:	d1dd      	bne.n	800a088 <_free_r+0x24>
 800a0cc:	6810      	ldr	r0, [r2, #0]
 800a0ce:	6852      	ldr	r2, [r2, #4]
 800a0d0:	605a      	str	r2, [r3, #4]
 800a0d2:	4401      	add	r1, r0
 800a0d4:	6019      	str	r1, [r3, #0]
 800a0d6:	e7d7      	b.n	800a088 <_free_r+0x24>
 800a0d8:	d902      	bls.n	800a0e0 <_free_r+0x7c>
 800a0da:	230c      	movs	r3, #12
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	e7d3      	b.n	800a088 <_free_r+0x24>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	1821      	adds	r1, r4, r0
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	bf04      	itt	eq
 800a0e8:	6811      	ldreq	r1, [r2, #0]
 800a0ea:	6852      	ldreq	r2, [r2, #4]
 800a0ec:	6062      	str	r2, [r4, #4]
 800a0ee:	bf04      	itt	eq
 800a0f0:	1809      	addeq	r1, r1, r0
 800a0f2:	6021      	streq	r1, [r4, #0]
 800a0f4:	605c      	str	r4, [r3, #4]
 800a0f6:	e7c7      	b.n	800a088 <_free_r+0x24>
 800a0f8:	bd38      	pop	{r3, r4, r5, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000eb4 	.word	0x20000eb4

0800a100 <_malloc_usable_size_r>:
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f18      	subs	r0, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfbc      	itt	lt
 800a10a:	580b      	ldrlt	r3, [r1, r0]
 800a10c:	18c0      	addlt	r0, r0, r3
 800a10e:	4770      	bx	lr

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
