
rosserial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008628  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d90  08008d90  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d98  08008d98  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000084  08008e28  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  08008e28  00020a94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f76  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022ec  00000000  00000000  00031028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002809a  00000000  00000000  00034948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009003  00000000  00000000  0005c9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2ba1  00000000  00000000  000659e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  00158604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	08008808 	.word	0x08008808

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000088 	.word	0x20000088
 8000234:	08008808 	.word	0x08008808

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <_ZN3ros3MsgC1Ev+0x1c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	08008d60 	.word	0x08008d60

08000568 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
      data("")
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffe8 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <_ZN8std_msgs6StringC1Ev+0x28>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8000582:	605a      	str	r2, [r3, #4]
    {
    }
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	08008d48 	.word	0x08008d48
 8000594:	08008820 	.word	0x08008820

08000598 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe44 	bl	8000238 <strlen>
 80005b0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 f96d 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3304      	adds	r3, #4
 80005c4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	18d0      	adds	r0, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f007 ffd0 	bl	8008578 <memcpy>
      offset += length_data;
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
      return offset;
 80005e0:	68fb      	ldr	r3, [r7, #12]
    }
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f966 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	3304      	adds	r3, #4
 800060e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	429a      	cmp	r2, r3
 800061e:	d20c      	bcs.n	800063a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	441a      	add	r2, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3b01      	subs	r3, #1
 800062a:	6839      	ldr	r1, [r7, #0]
 800062c:	440b      	add	r3, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e7ec      	b.n	8000614 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	3b01      	subs	r3, #1
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3b01      	subs	r3, #1
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	441a      	add	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
     return offset;
 800065e:	693b      	ldr	r3, [r7, #16]
    }
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	08008824 	.word	0x08008824

08000684 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	08008834 	.word	0x08008834

080006a0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
      data()
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff3a 	bl	8000548 <_ZN3ros3MsgC1Ev>
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3304      	adds	r3, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffde 	bl	80006a0 <_ZN3ros4TimeC1Ev>
    {
    }
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08008d30 	.word	0x08008d30

080006f4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6859      	ldr	r1, [r3, #4]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	4413      	add	r3, r2
 800070c:	b2ca      	uxtb	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	0a19      	lsrs	r1, r3, #8
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4413      	add	r3, r2
 800071e:	b2ca      	uxtb	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	0c19      	lsrs	r1, r3, #16
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3302      	adds	r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4413      	add	r3, r2
 8000730:	b2ca      	uxtb	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	0e19      	lsrs	r1, r3, #24
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3303      	adds	r3, #3
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	b2ca      	uxtb	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3304      	adds	r3, #4
 800074a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6899      	ldr	r1, [r3, #8]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	b2ca      	uxtb	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	0a19      	lsrs	r1, r3, #8
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	4413      	add	r3, r2
 8000768:	b2ca      	uxtb	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	0c19      	lsrs	r1, r3, #16
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3302      	adds	r3, #2
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	0e19      	lsrs	r1, r3, #24
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3303      	adds	r3, #3
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	b2ca      	uxtb	r2, r1
 800078e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3304      	adds	r3, #4
 8000794:	60fb      	str	r3, [r7, #12]
      return offset;
 8000796:	68fb      	ldr	r3, [r7, #12]
    }
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	6839      	ldr	r1, [r7, #0]
 80007ca:	440b      	add	r3, r1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	431a      	orrs	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3302      	adds	r3, #2
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	440b      	add	r3, r1
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	041b      	lsls	r3, r3, #16
 80007e6:	431a      	orrs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3303      	adds	r3, #3
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	440b      	add	r3, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	061b      	lsls	r3, r3, #24
 80007fc:	431a      	orrs	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3304      	adds	r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	440b      	add	r3, r1
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	431a      	orrs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3302      	adds	r3, #2
 8000834:	6839      	ldr	r1, [r7, #0]
 8000836:	440b      	add	r3, r1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	041b      	lsls	r3, r3, #16
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3303      	adds	r3, #3
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	061b      	lsls	r3, r3, #24
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3304      	adds	r3, #4
 800085c:	60fb      	str	r3, [r7, #12]
     return offset;
 800085e:	68fb      	ldr	r3, [r7, #12]
    }
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	08008858 	.word	0x08008858

08000888 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	08008868 	.word	0x08008868

080008a4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe4a 	bl	8000548 <_ZN3ros3MsgC1Ev>
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	809a      	strh	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
    {
    }
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08008d18 	.word	0x08008d18
 80008e8:	08008820 	.word	0x08008820

080008ec <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	8899      	ldrh	r1, [r3, #4]
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	b2ca      	uxtb	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	889b      	ldrh	r3, [r3, #4]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b299      	uxth	r1, r3
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3301      	adds	r3, #1
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	b2ca      	uxtb	r2, r1
 800091a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	3302      	adds	r3, #2
 8000920:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc86 	bl	8000238 <strlen>
 800092c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	69b9      	ldr	r1, [r7, #24]
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ffaf 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	3304      	adds	r3, #4
 8000940:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	18d0      	adds	r0, r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4619      	mov	r1, r3
 8000950:	f007 fe12 	bl	8008578 <memcpy>
      offset += length_topic_name;
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4413      	add	r3, r2
 800095a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc69 	bl	8000238 <strlen>
 8000966:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	6979      	ldr	r1, [r7, #20]
 8000970:	4618      	mov	r0, r3
 8000972:	f003 ff92 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	18d0      	adds	r0, r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	4619      	mov	r1, r3
 800098a:	f007 fdf5 	bl	8008578 <memcpy>
      offset += length_message_type;
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	4413      	add	r3, r2
 8000994:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc4c 	bl	8000238 <strlen>
 80009a0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 ff75 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3304      	adds	r3, #4
 80009b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	18d0      	adds	r0, r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f007 fdd8 	bl	8008578 <memcpy>
      offset += length_md5sum;
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4413      	add	r3, r2
 80009ce:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80009d6:	68f9      	ldr	r1, [r7, #12]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	0a19      	lsrs	r1, r3, #8
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3301      	adds	r3, #1
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	0c19      	lsrs	r1, r3, #16
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3302      	adds	r3, #2
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	0e19      	lsrs	r1, r3, #24
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3303      	adds	r3, #3
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a18:	69fb      	ldr	r3, [r7, #28]
    }
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b08a      	sub	sp, #40	; 0x28
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	3301      	adds	r3, #1
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3302      	adds	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	441a      	add	r2, r3
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 ff31 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	3304      	adds	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	4413      	add	r3, r2
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d20c      	bcs.n	8000aa4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	441a      	add	r2, r3
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	440b      	add	r3, r1
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa2:	e7ec      	b.n	8000a7e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	441a      	add	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	441a      	add	r2, r3
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fefe 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	3304      	adds	r3, #4
 8000ade:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	623b      	str	r3, [r7, #32]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4413      	add	r3, r2
 8000aea:	6a3a      	ldr	r2, [r7, #32]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d20c      	bcs.n	8000b0a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	441a      	add	r2, r3
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	440b      	add	r3, r1
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	3301      	adds	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
 8000b08:	e7ec      	b.n	8000ae4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4413      	add	r3, r2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	441a      	add	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	441a      	add	r2, r3
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fecb 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	3304      	adds	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d20c      	bcs.n	8000b70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	441a      	add	r2, r3
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	440b      	add	r3, r1
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	e7ec      	b.n	8000b4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	3b01      	subs	r3, #1
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	6839      	ldr	r1, [r7, #0]
 8000b9e:	440a      	add	r2, r1
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	3301      	adds	r3, #1
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	440b      	add	r3, r1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3303      	adds	r3, #3
 8000bd0:	6839      	ldr	r1, [r7, #0]
 8000bd2:	440b      	add	r3, r1
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	061b      	lsls	r3, r3, #24
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	3304      	adds	r3, #4
 8000be6:	61bb      	str	r3, [r7, #24]
     return offset;
 8000be8:	69bb      	ldr	r3, [r7, #24]
    }
 8000bea:	4618      	mov	r0, r3
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	0800888c 	.word	0x0800888c

08000c10 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	080088a8 	.word	0x080088a8

08000c2c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc86 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	711a      	strb	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000c4c:	609a      	str	r2, [r3, #8]
    {
    }
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	08008d00 	.word	0x08008d00
 8000c5c:	08008820 	.word	0x08008820

08000c60 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	7912      	ldrb	r2, [r2, #4]
 8000c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fad7 	bl	8000238 <strlen>
 8000c8a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fe00 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	18d0      	adds	r0, r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f007 fc63 	bl	8008578 <memcpy>
      offset += length_msg;
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000cba:	68fb      	ldr	r3, [r7, #12]
    }
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	441a      	add	r2, r3
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fdf0 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d20c      	bcs.n	8000d26 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	441a      	add	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e7ec      	b.n	8000d00 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	4413      	add	r3, r2
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
     return offset;
 8000d4a:	693b      	ldr	r3, [r7, #16]
    }
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	080088cc 	.word	0x080088cc

08000d70 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	080088e0 	.word	0x080088e0

08000d8c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fbd6 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08008ce8 	.word	0x08008ce8

08000dd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6859      	ldr	r1, [r3, #4]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	0a19      	lsrs	r1, r3, #8
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	0c19      	lsrs	r1, r3, #16
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2ca      	uxtb	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	0e19      	lsrs	r1, r3, #24
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3303      	adds	r3, #3
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3304      	adds	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	6a3a      	ldr	r2, [r7, #32]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d22b      	bcs.n	8000e92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2ca      	uxtb	r2, r1
 8000e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	0a19      	lsrs	r1, r3, #8
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2ca      	uxtb	r2, r1
 8000e62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	0e19      	lsrs	r1, r3, #24
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b2ca      	uxtb	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3304      	adds	r3, #4
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	e7ce      	b.n	8000e30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6919      	ldr	r1, [r3, #16]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	0a19      	lsrs	r1, r3, #8
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	0c19      	lsrs	r1, r3, #16
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3302      	adds	r3, #2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2ca      	uxtb	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	0e19      	lsrs	r1, r3, #24
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3303      	adds	r3, #3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3304      	adds	r3, #4
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d22b      	bcs.n	8000f42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ef8:	68f9      	ldr	r1, [r7, #12]
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	b2ca      	uxtb	r2, r1
 8000f02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	0a19      	lsrs	r1, r3, #8
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	0c19      	lsrs	r1, r3, #16
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2ca      	uxtb	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	0e19      	lsrs	r1, r3, #24
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	3303      	adds	r3, #3
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	3304      	adds	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e7ce      	b.n	8000ee0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69d9      	ldr	r1, [r3, #28]
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	0a19      	lsrs	r1, r3, #8
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2ca      	uxtb	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	0e19      	lsrs	r1, r3, #24
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3304      	adds	r3, #4
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d228      	bcs.n	8000fec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f946 	bl	8000238 <strlen>
 8000fac:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	6979      	ldr	r1, [r7, #20]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fc6f 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	18d0      	adds	r0, r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f007 face 	bl	8008578 <memcpy>
      offset += length_stringsi;
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	e7d1      	b.n	8000f90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b08e      	sub	sp, #56	; 0x38
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	3301      	adds	r3, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	6a3a      	ldr	r2, [r7, #32]
 800101c:	4313      	orrs	r3, r2
 800101e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	3302      	adds	r3, #2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	6a3a      	ldr	r2, [r7, #32]
 800102e:	4313      	orrs	r3, r2
 8001030:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001034:	3303      	adds	r3, #3
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	6a3a      	ldr	r2, [r7, #32]
 8001040:	4313      	orrs	r3, r2
 8001042:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001046:	3304      	adds	r3, #4
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	6a3a      	ldr	r2, [r7, #32]
 8001050:	429a      	cmp	r2, r3
 8001052:	d90a      	bls.n	800106a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f007 fa9e 	bl	80085a0 <realloc>
 8001064:	4602      	mov	r2, r0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800107a:	429a      	cmp	r2, r3
 800107c:	d236      	bcs.n	80010ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	440a      	add	r2, r1
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001094:	3301      	adds	r3, #1
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	440b      	add	r3, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a6:	3302      	adds	r3, #2
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	440b      	add	r3, r1
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	3303      	adds	r3, #3
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	440b      	add	r3, r1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	3304      	adds	r3, #4
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80010e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e6:	3301      	adds	r3, #1
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
 80010ea:	e7c3      	b.n	8001074 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	3301      	adds	r3, #1
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4313      	orrs	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	3302      	adds	r3, #2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4313      	orrs	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	3303      	adds	r3, #3
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4313      	orrs	r3, r2
 800112a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3304      	adds	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	d90a      	bls.n	8001152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699a      	ldr	r2, [r3, #24]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f007 fa2a 	bl	80085a0 <realloc>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001162:	429a      	cmp	r2, r3
 8001164:	d236      	bcs.n	80011d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	440a      	add	r2, r1
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	3301      	adds	r3, #1
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	440b      	add	r3, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118e:	3302      	adds	r3, #2
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	440b      	add	r3, r1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	3303      	adds	r3, #3
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	440b      	add	r3, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	3304      	adds	r3, #4
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	3214      	adds	r2, #20
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3301      	adds	r3, #1
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d2:	e7c3      	b.n	800115c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	3301      	adds	r3, #1
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	3302      	adds	r3, #2
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001204:	3303      	adds	r3, #3
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	061b      	lsls	r3, r3, #24
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001216:	3304      	adds	r3, #4
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	429a      	cmp	r2, r3
 8001222:	d90a      	bls.n	800123a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f007 f9b6 	bl	80085a0 <realloc>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124a:	429a      	cmp	r2, r3
 800124c:	d23f      	bcs.n	80012ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	441a      	add	r2, r3
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fb3b 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	3304      	adds	r3, #4
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001272:	429a      	cmp	r2, r3
 8001274:	d20c      	bcs.n	8001290 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	441a      	add	r2, r3
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	3b01      	subs	r3, #1
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	440b      	add	r3, r1
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	3301      	adds	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e7ec      	b.n	800126a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	3b01      	subs	r3, #1
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	4413      	add	r3, r2
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80012a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a2:	3b01      	subs	r3, #1
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	441a      	add	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80012ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	3220      	adds	r2, #32
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	3301      	adds	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	e7ba      	b.n	8001244 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	08008bac 	.word	0x08008bac

080012f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	08008904 	.word	0x08008904

08001310 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68d8      	ldr	r0, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6891      	ldr	r1, [r2, #8]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
  };
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
  }
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 128;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	425b      	negs	r3, r3
 8001392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 256;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
      huart(&huart6), rind(0), twind(0), tfind(0){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <_ZN13STM32HardwareC1Ev+0x34>)
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    }
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	200000a4 	.word	0x200000a4

080013dc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f804 	bl	80013f2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	4619      	mov	r1, r3
 8001406:	f006 f9e1 	bl	80077cc <HAL_UART_Receive_DMA>
    }
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001412:	b590      	push	{r4, r7, lr}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
      int c = -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141e:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa9 	bl	800137e <_ZN13STM32Hardware10getRdmaIndEv>
 800142c:	4603      	mov	r3, r0
 800142e:	429c      	cmp	r4, r3
 8001430:	bf14      	ite	ne
 8001432:	2301      	movne	r3, #1
 8001434:	2300      	moveq	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d012      	beq.n	8001462 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
      return c;
 8001462:	68fb      	ldr	r3, [r7, #12]
    }
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	2b20      	cmp	r3, #32
 800147c:	d108      	bne.n	8001490 <_ZN13STM32Hardware5flushEv+0x24>
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <_ZN13STM32Hardware5flushEv+0xb0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <_ZN13STM32Hardware5flushEv+0x24>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <_ZN13STM32Hardware5flushEv+0x26>
 8001490:	2300      	movs	r3, #0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d03d      	beq.n	8001512 <_ZN13STM32Hardware5flushEv+0xa6>
        mutex = true;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <_ZN13STM32Hardware5flushEv+0xb0>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d02f      	beq.n	800150c <_ZN13STM32Hardware5flushEv+0xa0>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20a      	bcs.n	80014d2 <_ZN13STM32Hardware5flushEv+0x66>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	e006      	b.n	80014e0 <_ZN13STM32Hardware5flushEv+0x74>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80014de:	b29b      	uxth	r3, r3
 80014e0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80014ec:	3388      	adds	r3, #136	; 0x88
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	89fa      	ldrh	r2, [r7, #14]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f006 f8ed 	bl	80076d4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8001500:	89fb      	ldrh	r3, [r7, #14]
 8001502:	4413      	add	r3, r2
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        }
        mutex = false;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <_ZN13STM32Hardware5flushEv+0xb0>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
      }
    }
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000a0 	.word	0x200000a0

08001520 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]


      int n = length;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001536:	bfa8      	it	ge
 8001538:	f44f 7380 	movge.w	r3, #256	; 0x100
 800153c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001544:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4293      	cmp	r3, r2
 800154c:	bf28      	it	cs
 800154e:	4613      	movcs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001558:	3388      	adds	r3, #136	; 0x88
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f007 f808 	bl	8008578 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	4413      	add	r3, r2
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

      if(n != n_tail){
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	429a      	cmp	r2, r3
 8001580:	d00b      	beq.n	800159a <_ZN13STM32Hardware5writeEPhi+0x7a>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	18d1      	adds	r1, r2, r3
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f006 ffef 	bl	8008578 <memcpy>
      }

      flush();
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff ff66 	bl	800146c <_ZN13STM32Hardware5flushEv>
    }
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick(); }
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	f004 f95a 	bl	8005868 <HAL_GetTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffbc 	bl	8000548 <_ZN3ros3MsgC1Ev>
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3308      	adds	r3, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f85d 	bl	80006a0 <_ZN3ros4TimeC1Ev>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80015ea:	611a      	str	r2, [r3, #16]
    {
    }
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	08008cbc 	.word	0x08008cbc
 80015fc:	08008820 	.word	0x08008820

08001600 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0a19      	lsrs	r1, r3, #8
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c19      	lsrs	r1, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3302      	adds	r3, #2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0e19      	lsrs	r1, r3, #24
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3303      	adds	r3, #3
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3304      	adds	r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0a19      	lsrs	r1, r3, #8
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	0c19      	lsrs	r1, r3, #16
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3302      	adds	r3, #2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0e19      	lsrs	r1, r3, #24
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3303      	adds	r3, #3
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3304      	adds	r3, #4
 80016a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68d9      	ldr	r1, [r3, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a19      	lsrs	r1, r3, #8
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	0c19      	lsrs	r1, r3, #16
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3302      	adds	r3, #2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0e19      	lsrs	r1, r3, #24
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3303      	adds	r3, #3
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3304      	adds	r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fda1 	bl	8000238 <strlen>
 80016f6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 f8ca 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	18d0      	adds	r0, r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	4619      	mov	r1, r3
 800171a:	f006 ff2d 	bl	8008578 <memcpy>
      offset += length_frame_id;
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
      return offset;
 8001726:	68fb      	ldr	r3, [r7, #12]
    }
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	3301      	adds	r3, #1
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	440b      	add	r3, r1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3302      	adds	r3, #2
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	440b      	add	r3, r1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3303      	adds	r3, #3
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	440b      	add	r3, r1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3304      	adds	r3, #4
 8001792:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3301      	adds	r3, #1
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	440b      	add	r3, r1
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	3302      	adds	r3, #2
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3303      	adds	r3, #3
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	440b      	add	r3, r1
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	3304      	adds	r3, #4
 80017e8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	440b      	add	r3, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3302      	adds	r3, #2
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	440b      	add	r3, r1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3303      	adds	r3, #3
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	440b      	add	r3, r1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3304      	adds	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	441a      	add	r2, r3
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f842 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	3304      	adds	r3, #4
 8001856:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	d20c      	bcs.n	8001882 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	441a      	add	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3b01      	subs	r3, #1
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	440b      	add	r3, r1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e7ec      	b.n	800185c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	3b01      	subs	r3, #1
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3b01      	subs	r3, #1
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	441a      	add	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
     return offset;
 80018a6:	693b      	ldr	r3, [r7, #16]
    }
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	08008928 	.word	0x08008928

080018cc <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	08008938 	.word	0x08008938

080018e8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe28 	bl	8000548 <_ZN3ros3MsgC1Ev>
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    {
    }
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08008ca4 	.word	0x08008ca4

08001924 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001924:	b490      	push	{r4, r7}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001938:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	440a      	add	r2, r1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001946:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	0a0b      	lsrs	r3, r1, #8
 8001954:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001958:	0a14      	lsrs	r4, r2, #8
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	3201      	adds	r2, #1
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	440a      	add	r2, r1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001966:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f04f 0400 	mov.w	r4, #0
 8001972:	0c0b      	lsrs	r3, r1, #16
 8001974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001978:	0c14      	lsrs	r4, r2, #16
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	3202      	adds	r2, #2
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	440a      	add	r2, r1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001986:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0e0b      	lsrs	r3, r1, #24
 8001994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001998:	0e14      	lsrs	r4, r2, #24
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	3203      	adds	r2, #3
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	440a      	add	r2, r1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80019a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	0013      	movs	r3, r2
 80019b4:	2400      	movs	r4, #0
 80019b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b8:	3204      	adds	r2, #4
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	440a      	add	r2, r1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80019c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	0a13      	lsrs	r3, r2, #8
 80019d0:	2400      	movs	r4, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	3205      	adds	r2, #5
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	440a      	add	r2, r1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80019de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	0c13      	lsrs	r3, r2, #16
 80019ec:	2400      	movs	r4, #0
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	3206      	adds	r2, #6
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80019fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	0e13      	lsrs	r3, r2, #24
 8001a08:	2400      	movs	r4, #0
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	3207      	adds	r2, #7
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	440a      	add	r2, r1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3304      	adds	r3, #4
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001a22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	440a      	add	r2, r1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001a30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	0a0b      	lsrs	r3, r1, #8
 8001a3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a42:	0a14      	lsrs	r4, r2, #8
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	3201      	adds	r2, #1
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	440a      	add	r2, r1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001a50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	0c0b      	lsrs	r3, r1, #16
 8001a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a62:	0c14      	lsrs	r4, r2, #16
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	3202      	adds	r2, #2
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	440a      	add	r2, r1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001a70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f04f 0400 	mov.w	r4, #0
 8001a7c:	0e0b      	lsrs	r3, r1, #24
 8001a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a82:	0e14      	lsrs	r4, r2, #24
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	3203      	adds	r2, #3
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	440a      	add	r2, r1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001a90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	3204      	adds	r2, #4
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001aac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	f04f 0400 	mov.w	r4, #0
 8001ab8:	0a13      	lsrs	r3, r2, #8
 8001aba:	2400      	movs	r4, #0
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	3205      	adds	r2, #5
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	440a      	add	r2, r1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001ac8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	f04f 0400 	mov.w	r4, #0
 8001ad4:	0c13      	lsrs	r3, r2, #16
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	3206      	adds	r2, #6
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	440a      	add	r2, r1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001ae4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f04f 0400 	mov.w	r4, #0
 8001af0:	0e13      	lsrs	r3, r2, #24
 8001af2:	2400      	movs	r4, #0
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	3207      	adds	r2, #7
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	440a      	add	r2, r1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3304      	adds	r3, #4
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001b0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	440a      	add	r2, r1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001b1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f04f 0400 	mov.w	r4, #0
 8001b26:	0a0b      	lsrs	r3, r1, #8
 8001b28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b2c:	0a14      	lsrs	r4, r2, #8
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	3201      	adds	r2, #1
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	440a      	add	r2, r1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001b3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f04f 0400 	mov.w	r4, #0
 8001b46:	0c0b      	lsrs	r3, r1, #16
 8001b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b4c:	0c14      	lsrs	r4, r2, #16
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	3202      	adds	r2, #2
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	440a      	add	r2, r1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001b5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	0e0b      	lsrs	r3, r1, #24
 8001b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b6c:	0e14      	lsrs	r4, r2, #24
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	3203      	adds	r2, #3
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	440a      	add	r2, r1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001b7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	0013      	movs	r3, r2
 8001b88:	2400      	movs	r4, #0
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	3204      	adds	r2, #4
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	440a      	add	r2, r1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001b96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	0a13      	lsrs	r3, r2, #8
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba8:	3205      	adds	r2, #5
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	440a      	add	r2, r1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001bb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f04f 0400 	mov.w	r4, #0
 8001bbe:	0c13      	lsrs	r3, r2, #16
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc4:	3206      	adds	r2, #6
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	440a      	add	r2, r1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001bce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f04f 0400 	mov.w	r4, #0
 8001bda:	0e13      	lsrs	r3, r2, #24
 8001bdc:	2400      	movs	r4, #0
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	3207      	adds	r2, #7
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	440a      	add	r2, r1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3304      	adds	r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc90      	pop	{r4, r7}
 8001bfa:	4770      	bx	lr

08001bfc <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bfc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c00:	b08c      	sub	sp, #48	; 0x30
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	4403      	add	r3, r0
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461c      	mov	r4, r3
 8001c26:	b2e4      	uxtb	r4, r4
 8001c28:	f04f 0500 	mov.w	r5, #0
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	462c      	mov	r4, r5
 8001c30:	ea43 0301 	orr.w	r3, r3, r1
 8001c34:	ea44 0402 	orr.w	r4, r4, r2
 8001c38:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c3c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c40:	461d      	mov	r5, r3
 8001c42:	4626      	mov	r6, r4
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	3301      	adds	r3, #1
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f04f 0400 	mov.w	r4, #0
 8001c5c:	0214      	lsls	r4, r2, #8
 8001c5e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8001c62:	020b      	lsls	r3, r1, #8
 8001c64:	4629      	mov	r1, r5
 8001c66:	4632      	mov	r2, r6
 8001c68:	ea41 0103 	orr.w	r1, r1, r3
 8001c6c:	ea42 0204 	orr.w	r2, r2, r4
 8001c70:	460b      	mov	r3, r1
 8001c72:	4614      	mov	r4, r2
 8001c74:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	4626      	mov	r6, r4
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	3302      	adds	r3, #2
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2d9      	uxtb	r1, r3
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	0414      	lsls	r4, r2, #16
 8001c9a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8001c9e:	040b      	lsls	r3, r1, #16
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4632      	mov	r2, r6
 8001ca4:	ea41 0103 	orr.w	r1, r1, r3
 8001ca8:	ea42 0204 	orr.w	r2, r2, r4
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3303      	adds	r3, #3
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	4403      	add	r3, r0
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001ccc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8001cd0:	ea41 030a 	orr.w	r3, r1, sl
 8001cd4:	ea42 040b 	orr.w	r4, r2, fp
 8001cd8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001cdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	68b8      	ldr	r0, [r7, #8]
 8001ce6:	4403      	add	r3, r0
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	fa5f fa83 	uxtb.w	sl, r3
 8001cee:	f04f 0b00 	mov.w	fp, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f04f 0400 	mov.w	r4, #0
 8001cfa:	4625      	mov	r5, r4
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	4653      	mov	r3, sl
 8001d00:	461d      	mov	r5, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	461c      	mov	r4, r3
 8001d06:	4623      	mov	r3, r4
 8001d08:	462c      	mov	r4, r5
 8001d0a:	ea43 0301 	orr.w	r3, r3, r1
 8001d0e:	ea44 0402 	orr.w	r4, r4, r2
 8001d12:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001d16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	3305      	adds	r3, #5
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	4403      	add	r3, r0
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	fa5f fa83 	uxtb.w	sl, r3
 8001d28:	f04f 0b00 	mov.w	fp, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f04f 0400 	mov.w	r4, #0
 8001d34:	4625      	mov	r5, r4
 8001d36:	461c      	mov	r4, r3
 8001d38:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	461c      	mov	r4, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	462c      	mov	r4, r5
 8001d46:	ea43 0301 	orr.w	r3, r3, r1
 8001d4a:	ea44 0402 	orr.w	r4, r4, r2
 8001d4e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001d52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	3306      	adds	r3, #6
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	4403      	add	r3, r0
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	fa5f fa83 	uxtb.w	sl, r3
 8001d64:	f04f 0b00 	mov.w	fp, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	4625      	mov	r5, r4
 8001d72:	461c      	mov	r4, r3
 8001d74:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8001d78:	461d      	mov	r5, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	461c      	mov	r4, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	462c      	mov	r4, r5
 8001d82:	ea43 0301 	orr.w	r3, r3, r1
 8001d86:	ea44 0402 	orr.w	r4, r4, r2
 8001d8a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001d8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	3307      	adds	r3, #7
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	4403      	add	r3, r0
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	fa5f fa83 	uxtb.w	sl, r3
 8001da0:	f04f 0b00 	mov.w	fp, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	f04f 0400 	mov.w	r4, #0
 8001dac:	4625      	mov	r5, r4
 8001dae:	461c      	mov	r4, r3
 8001db0:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8001db4:	461d      	mov	r5, r3
 8001db6:	2300      	movs	r3, #0
 8001db8:	461c      	mov	r4, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	462c      	mov	r4, r5
 8001dbe:	ea43 0301 	orr.w	r3, r3, r1
 8001dc2:	ea44 0402 	orr.w	r4, r4, r2
 8001dc6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->x);
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001de2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	4403      	add	r3, r0
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	fa5f fa83 	uxtb.w	sl, r3
 8001df2:	f04f 0b00 	mov.w	fp, #0
 8001df6:	ea4a 0301 	orr.w	r3, sl, r1
 8001dfa:	ea4b 0402 	orr.w	r4, fp, r2
 8001dfe:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	3301      	adds	r3, #1
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	4625      	mov	r5, r4
 8001e20:	461c      	mov	r4, r3
 8001e22:	0213      	lsls	r3, r2, #8
 8001e24:	461d      	mov	r5, r3
 8001e26:	462b      	mov	r3, r5
 8001e28:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001e2c:	461d      	mov	r5, r3
 8001e2e:	020b      	lsls	r3, r1, #8
 8001e30:	461c      	mov	r4, r3
 8001e32:	4623      	mov	r3, r4
 8001e34:	462c      	mov	r4, r5
 8001e36:	ea43 030a 	orr.w	r3, r3, sl
 8001e3a:	ea44 040b 	orr.w	r4, r4, fp
 8001e3e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2d9      	uxtb	r1, r3
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f04f 0400 	mov.w	r4, #0
 8001e5e:	4625      	mov	r5, r4
 8001e60:	461c      	mov	r4, r3
 8001e62:	0413      	lsls	r3, r2, #16
 8001e64:	461d      	mov	r5, r3
 8001e66:	462b      	mov	r3, r5
 8001e68:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	040b      	lsls	r3, r1, #16
 8001e70:	461c      	mov	r4, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	462c      	mov	r4, r5
 8001e76:	ea43 030a 	orr.w	r3, r3, sl
 8001e7a:	ea44 040b 	orr.w	r4, r4, fp
 8001e7e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	3303      	adds	r3, #3
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	4403      	add	r3, r0
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f04f 0400 	mov.w	r4, #0
 8001e96:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001e9a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8001e9e:	ea41 0308 	orr.w	r3, r1, r8
 8001ea2:	ea42 0409 	orr.w	r4, r2, r9
 8001ea6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001eaa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	4403      	add	r3, r0
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	fa5f f883 	uxtb.w	r8, r3
 8001ebc:	f04f 0900 	mov.w	r9, #0
 8001ec0:	f04f 0a00 	mov.w	sl, #0
 8001ec4:	f04f 0b00 	mov.w	fp, #0
 8001ec8:	46c3      	mov	fp, r8
 8001eca:	f04f 0a00 	mov.w	sl, #0
 8001ece:	ea4a 0301 	orr.w	r3, sl, r1
 8001ed2:	ea4b 0402 	orr.w	r4, fp, r2
 8001ed6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001eda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	3305      	adds	r3, #5
 8001ee2:	68b8      	ldr	r0, [r7, #8]
 8001ee4:	4403      	add	r3, r0
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	fa5f f883 	uxtb.w	r8, r3
 8001eec:	f04f 0900 	mov.w	r9, #0
 8001ef0:	f04f 0a00 	mov.w	sl, #0
 8001ef4:	f04f 0b00 	mov.w	fp, #0
 8001ef8:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8001efc:	f04f 0a00 	mov.w	sl, #0
 8001f00:	ea4a 0301 	orr.w	r3, sl, r1
 8001f04:	ea4b 0402 	orr.w	r4, fp, r2
 8001f08:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f12:	3306      	adds	r3, #6
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	4403      	add	r3, r0
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	fa5f f883 	uxtb.w	r8, r3
 8001f1e:	f04f 0900 	mov.w	r9, #0
 8001f22:	f04f 0a00 	mov.w	sl, #0
 8001f26:	f04f 0b00 	mov.w	fp, #0
 8001f2a:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8001f2e:	f04f 0a00 	mov.w	sl, #0
 8001f32:	ea4a 0301 	orr.w	r3, sl, r1
 8001f36:	ea4b 0402 	orr.w	r4, fp, r2
 8001f3a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001f3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	3307      	adds	r3, #7
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	4403      	add	r3, r0
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	fa5f f883 	uxtb.w	r8, r3
 8001f50:	f04f 0900 	mov.w	r9, #0
 8001f54:	f04f 0a00 	mov.w	sl, #0
 8001f58:	f04f 0b00 	mov.w	fp, #0
 8001f5c:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8001f60:	f04f 0a00 	mov.w	sl, #0
 8001f64:	ea4a 0301 	orr.w	r3, sl, r1
 8001f68:	ea4b 0402 	orr.w	r4, fp, r2
 8001f6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->y);
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	3304      	adds	r3, #4
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	f04f 0400 	mov.w	r4, #0
 8001f84:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	68b8      	ldr	r0, [r7, #8]
 8001f90:	4403      	add	r3, r0
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	fa5f f883 	uxtb.w	r8, r3
 8001f98:	f04f 0900 	mov.w	r9, #0
 8001f9c:	ea48 0301 	orr.w	r3, r8, r1
 8001fa0:	ea49 0402 	orr.w	r4, r9, r2
 8001fa4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fa8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	3301      	adds	r3, #1
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2d9      	uxtb	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0a00 	mov.w	sl, #0
 8001fc0:	f04f 0b00 	mov.w	fp, #0
 8001fc4:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8001fc8:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8001fcc:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8001fd0:	ea4a 0308 	orr.w	r3, sl, r8
 8001fd4:	ea4b 0409 	orr.w	r4, fp, r9
 8001fd8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fdc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2d9      	uxtb	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0a00 	mov.w	sl, #0
 8001ff4:	f04f 0b00 	mov.w	fp, #0
 8001ff8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8001ffc:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002000:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002004:	ea4a 0308 	orr.w	r3, sl, r8
 8002008:	ea4b 0409 	orr.w	r4, fp, r9
 800200c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002010:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	3303      	adds	r3, #3
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	4403      	add	r3, r0
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	0a18      	lsrs	r0, r3, #8
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002030:	ea43 0301 	orr.w	r3, r3, r1
 8002034:	ea44 0402 	orr.w	r4, r4, r2
 8002038:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800203c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	3304      	adds	r3, #4
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	4403      	add	r3, r0
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2dd      	uxtb	r5, r3
 800204c:	f04f 0600 	mov.w	r6, #0
 8002050:	f04f 0800 	mov.w	r8, #0
 8002054:	f04f 0900 	mov.w	r9, #0
 8002058:	46a9      	mov	r9, r5
 800205a:	f04f 0800 	mov.w	r8, #0
 800205e:	ea48 0301 	orr.w	r3, r8, r1
 8002062:	ea49 0402 	orr.w	r4, r9, r2
 8002066:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800206a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	3305      	adds	r3, #5
 8002072:	68b8      	ldr	r0, [r7, #8]
 8002074:	4403      	add	r3, r0
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2dd      	uxtb	r5, r3
 800207a:	f04f 0600 	mov.w	r6, #0
 800207e:	f04f 0800 	mov.w	r8, #0
 8002082:	f04f 0900 	mov.w	r9, #0
 8002086:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800208a:	f04f 0800 	mov.w	r8, #0
 800208e:	ea48 0301 	orr.w	r3, r8, r1
 8002092:	ea49 0402 	orr.w	r4, r9, r2
 8002096:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800209a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	3306      	adds	r3, #6
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	4403      	add	r3, r0
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2dd      	uxtb	r5, r3
 80020aa:	f04f 0600 	mov.w	r6, #0
 80020ae:	f04f 0800 	mov.w	r8, #0
 80020b2:	f04f 0900 	mov.w	r9, #0
 80020b6:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80020ba:	f04f 0800 	mov.w	r8, #0
 80020be:	ea48 0301 	orr.w	r3, r8, r1
 80020c2:	ea49 0402 	orr.w	r4, r9, r2
 80020c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80020ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	3307      	adds	r3, #7
 80020d2:	68b8      	ldr	r0, [r7, #8]
 80020d4:	4403      	add	r3, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2dd      	uxtb	r5, r3
 80020da:	f04f 0600 	mov.w	r6, #0
 80020de:	f04f 0800 	mov.w	r8, #0
 80020e2:	f04f 0900 	mov.w	r9, #0
 80020e6:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80020ea:	f04f 0800 	mov.w	r8, #0
 80020ee:	ea48 0301 	orr.w	r3, r8, r1
 80020f2:	ea49 0402 	orr.w	r4, r9, r2
 80020f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->z);
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	3304      	adds	r3, #4
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002108:	4618      	mov	r0, r3
 800210a:	3730      	adds	r7, #48	; 0x30
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002112:	4770      	bx	lr

08002114 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	0800895c 	.word	0x0800895c

08002130 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	08008970 	.word	0x08008970

0800214c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f9f6 	bl	8000548 <_ZN3ros3MsgC1Ev>
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    {
    }
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08008c8c 	.word	0x08008c8c

08002190 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002190:	b490      	push	{r4, r7}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80021a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	440a      	add	r2, r1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80021b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	0a0b      	lsrs	r3, r1, #8
 80021c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021c4:	0a14      	lsrs	r4, r2, #8
 80021c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c8:	3201      	adds	r2, #1
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	440a      	add	r2, r1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80021d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	0c0b      	lsrs	r3, r1, #16
 80021e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021e4:	0c14      	lsrs	r4, r2, #16
 80021e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e8:	3202      	adds	r2, #2
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	440a      	add	r2, r1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80021f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	f04f 0400 	mov.w	r4, #0
 80021fe:	0e0b      	lsrs	r3, r1, #24
 8002200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002204:	0e14      	lsrs	r4, r2, #24
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	3203      	adds	r2, #3
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	440a      	add	r2, r1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002212:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f04f 0400 	mov.w	r4, #0
 800221e:	0013      	movs	r3, r2
 8002220:	2400      	movs	r4, #0
 8002222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002224:	3204      	adds	r2, #4
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	440a      	add	r2, r1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800222e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f04f 0400 	mov.w	r4, #0
 800223a:	0a13      	lsrs	r3, r2, #8
 800223c:	2400      	movs	r4, #0
 800223e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002240:	3205      	adds	r2, #5
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	440a      	add	r2, r1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800224a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	0c13      	lsrs	r3, r2, #16
 8002258:	2400      	movs	r4, #0
 800225a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225c:	3206      	adds	r2, #6
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	440a      	add	r2, r1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002266:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0e13      	lsrs	r3, r2, #24
 8002274:	2400      	movs	r4, #0
 8002276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002278:	3207      	adds	r2, #7
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	440a      	add	r2, r1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	3304      	adds	r3, #4
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800228e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	440a      	add	r2, r1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800229c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	0a0b      	lsrs	r3, r1, #8
 80022aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022ae:	0a14      	lsrs	r4, r2, #8
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	3201      	adds	r2, #1
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	440a      	add	r2, r1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80022bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f04f 0400 	mov.w	r4, #0
 80022c8:	0c0b      	lsrs	r3, r1, #16
 80022ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022ce:	0c14      	lsrs	r4, r2, #16
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d2:	3202      	adds	r2, #2
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	440a      	add	r2, r1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80022dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	0e0b      	lsrs	r3, r1, #24
 80022ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022ee:	0e14      	lsrs	r4, r2, #24
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	3203      	adds	r2, #3
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	440a      	add	r2, r1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80022fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f04f 0400 	mov.w	r4, #0
 8002308:	0013      	movs	r3, r2
 800230a:	2400      	movs	r4, #0
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230e:	3204      	adds	r2, #4
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	440a      	add	r2, r1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002318:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f04f 0400 	mov.w	r4, #0
 8002324:	0a13      	lsrs	r3, r2, #8
 8002326:	2400      	movs	r4, #0
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232a:	3205      	adds	r2, #5
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	440a      	add	r2, r1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002334:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	0c13      	lsrs	r3, r2, #16
 8002342:	2400      	movs	r4, #0
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	3206      	adds	r2, #6
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	440a      	add	r2, r1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002350:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	0e13      	lsrs	r3, r2, #24
 800235e:	2400      	movs	r4, #0
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	3207      	adds	r2, #7
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	440a      	add	r2, r1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	3304      	adds	r3, #4
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002378:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800237c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	440a      	add	r2, r1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002386:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	f04f 0400 	mov.w	r4, #0
 8002392:	0a0b      	lsrs	r3, r1, #8
 8002394:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002398:	0a14      	lsrs	r4, r2, #8
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	3201      	adds	r2, #1
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	440a      	add	r2, r1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80023a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	0c0b      	lsrs	r3, r1, #16
 80023b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023b8:	0c14      	lsrs	r4, r2, #16
 80023ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023bc:	3202      	adds	r2, #2
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	440a      	add	r2, r1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80023c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	0e0b      	lsrs	r3, r1, #24
 80023d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023d8:	0e14      	lsrs	r4, r2, #24
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	3203      	adds	r2, #3
 80023de:	6839      	ldr	r1, [r7, #0]
 80023e0:	440a      	add	r2, r1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80023e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	0013      	movs	r3, r2
 80023f4:	2400      	movs	r4, #0
 80023f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f8:	3204      	adds	r2, #4
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	440a      	add	r2, r1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002402:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	0a13      	lsrs	r3, r2, #8
 8002410:	2400      	movs	r4, #0
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	3205      	adds	r2, #5
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	440a      	add	r2, r1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800241e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	f04f 0400 	mov.w	r4, #0
 800242a:	0c13      	lsrs	r3, r2, #16
 800242c:	2400      	movs	r4, #0
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	3206      	adds	r2, #6
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	440a      	add	r2, r1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800243a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	0e13      	lsrs	r3, r2, #24
 8002448:	2400      	movs	r4, #0
 800244a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244c:	3207      	adds	r2, #7
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	440a      	add	r2, r1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	3304      	adds	r3, #4
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002462:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	440a      	add	r2, r1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002470:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f04f 0400 	mov.w	r4, #0
 800247c:	0a0b      	lsrs	r3, r1, #8
 800247e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002482:	0a14      	lsrs	r4, r2, #8
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	3201      	adds	r2, #1
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	440a      	add	r2, r1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002490:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f04f 0400 	mov.w	r4, #0
 800249c:	0c0b      	lsrs	r3, r1, #16
 800249e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024a2:	0c14      	lsrs	r4, r2, #16
 80024a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a6:	3202      	adds	r2, #2
 80024a8:	6839      	ldr	r1, [r7, #0]
 80024aa:	440a      	add	r2, r1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80024b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	0e0b      	lsrs	r3, r1, #24
 80024be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024c2:	0e14      	lsrs	r4, r2, #24
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	3203      	adds	r2, #3
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440a      	add	r2, r1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80024d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	f04f 0400 	mov.w	r4, #0
 80024dc:	0013      	movs	r3, r2
 80024de:	2400      	movs	r4, #0
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	3204      	adds	r2, #4
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	440a      	add	r2, r1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80024ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	f04f 0400 	mov.w	r4, #0
 80024f8:	0a13      	lsrs	r3, r2, #8
 80024fa:	2400      	movs	r4, #0
 80024fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fe:	3205      	adds	r2, #5
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	440a      	add	r2, r1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002508:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	0c13      	lsrs	r3, r2, #16
 8002516:	2400      	movs	r4, #0
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	3206      	adds	r2, #6
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	440a      	add	r2, r1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002524:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	0e13      	lsrs	r3, r2, #24
 8002532:	2400      	movs	r4, #0
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	3207      	adds	r2, #7
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	440a      	add	r2, r1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	3304      	adds	r3, #4
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002548:	4618      	mov	r0, r3
 800254a:	3730      	adds	r7, #48	; 0x30
 800254c:	46bd      	mov	sp, r7
 800254e:	bc90      	pop	{r4, r7}
 8002550:	4770      	bx	lr

08002552 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002552:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af00      	add	r7, sp, #0
 800255a:	61f8      	str	r0, [r7, #28]
 800255c:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	f04f 0400 	mov.w	r4, #0
 800256a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800256e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002574:	69b8      	ldr	r0, [r7, #24]
 8002576:	4403      	add	r3, r0
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2dd      	uxtb	r5, r3
 800257c:	f04f 0600 	mov.w	r6, #0
 8002580:	ea45 0301 	orr.w	r3, r5, r1
 8002584:	ea46 0402 	orr.w	r4, r6, r2
 8002588:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800258c:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8002590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002592:	3301      	adds	r3, #1
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2d9      	uxtb	r1, r3
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80025ac:	0213      	lsls	r3, r2, #8
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	020b      	lsls	r3, r1, #8
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025c0:	ea43 0305 	orr.w	r3, r3, r5
 80025c4:	ea44 0406 	orr.w	r4, r4, r6
 80025c8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025cc:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 80025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2d9      	uxtb	r1, r3
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	f04f 0400 	mov.w	r4, #0
 80025e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80025ec:	0413      	lsls	r3, r2, #16
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	040b      	lsls	r3, r1, #16
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002600:	ea43 0305 	orr.w	r3, r3, r5
 8002604:	ea44 0406 	orr.w	r4, r4, r6
 8002608:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800260c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	3303      	adds	r3, #3
 8002614:	69b8      	ldr	r0, [r7, #24]
 8002616:	4403      	add	r3, r0
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f04f 0400 	mov.w	r4, #0
 8002620:	0a18      	lsrs	r0, r3, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800262c:	ea43 0301 	orr.w	r3, r3, r1
 8002630:	ea44 0402 	orr.w	r4, r4, r2
 8002634:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002638:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	3304      	adds	r3, #4
 8002640:	69b8      	ldr	r0, [r7, #24]
 8002642:	4403      	add	r3, r0
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2dd      	uxtb	r5, r3
 8002648:	f04f 0600 	mov.w	r6, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	f04f 0400 	mov.w	r4, #0
 8002654:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002658:	002b      	movs	r3, r5
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002664:	ea43 0301 	orr.w	r3, r3, r1
 8002668:	ea44 0402 	orr.w	r4, r4, r2
 800266c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002670:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	3305      	adds	r3, #5
 8002678:	69b8      	ldr	r0, [r7, #24]
 800267a:	4403      	add	r3, r0
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2dd      	uxtb	r5, r3
 8002680:	f04f 0600 	mov.w	r6, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	f04f 0400 	mov.w	r4, #0
 800268c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002690:	022b      	lsls	r3, r5, #8
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800269c:	ea43 0301 	orr.w	r3, r3, r1
 80026a0:	ea44 0402 	orr.w	r4, r4, r2
 80026a4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	3306      	adds	r3, #6
 80026b0:	69b8      	ldr	r0, [r7, #24]
 80026b2:	4403      	add	r3, r0
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b2dd      	uxtb	r5, r3
 80026b8:	f04f 0600 	mov.w	r6, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80026c8:	042b      	lsls	r3, r5, #16
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026d4:	ea43 0301 	orr.w	r3, r3, r1
 80026d8:	ea44 0402 	orr.w	r4, r4, r2
 80026dc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80026e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e6:	3307      	adds	r3, #7
 80026e8:	69b8      	ldr	r0, [r7, #24]
 80026ea:	4403      	add	r3, r0
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2dd      	uxtb	r5, r3
 80026f0:	f04f 0600 	mov.w	r6, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	f04f 0400 	mov.w	r4, #0
 80026fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002700:	062b      	lsls	r3, r5, #24
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800270c:	ea43 0301 	orr.w	r3, r3, r1
 8002710:	ea44 0402 	orr.w	r4, r4, r2
 8002714:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8002718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->x);
 800271e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002720:	3304      	adds	r3, #4
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	f04f 0400 	mov.w	r4, #0
 800272c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002730:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	69b8      	ldr	r0, [r7, #24]
 8002738:	4403      	add	r3, r0
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2dd      	uxtb	r5, r3
 800273e:	f04f 0600 	mov.w	r6, #0
 8002742:	ea45 0301 	orr.w	r3, r5, r1
 8002746:	ea46 0402 	orr.w	r4, r6, r2
 800274a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800274e:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	3301      	adds	r3, #1
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b2d9      	uxtb	r1, r3
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f04f 0400 	mov.w	r4, #0
 800276a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800276e:	0213      	lsls	r3, r2, #8
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	020b      	lsls	r3, r1, #8
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002782:	ea43 0305 	orr.w	r3, r3, r5
 8002786:	ea44 0406 	orr.w	r4, r4, r6
 800278a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800278e:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002794:	3302      	adds	r3, #2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2d9      	uxtb	r1, r3
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80027ae:	0413      	lsls	r3, r2, #16
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	040b      	lsls	r3, r1, #16
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027c2:	ea43 0305 	orr.w	r3, r3, r5
 80027c6:	ea44 0406 	orr.w	r4, r4, r6
 80027ca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80027d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d4:	3303      	adds	r3, #3
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	4403      	add	r3, r0
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	0a18      	lsrs	r0, r3, #8
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80027ee:	ea43 0301 	orr.w	r3, r3, r1
 80027f2:	ea44 0402 	orr.w	r4, r4, r2
 80027f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80027fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80027fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002800:	3304      	adds	r3, #4
 8002802:	69b8      	ldr	r0, [r7, #24]
 8002804:	4403      	add	r3, r0
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2dd      	uxtb	r5, r3
 800280a:	f04f 0600 	mov.w	r6, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800281a:	002b      	movs	r3, r5
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002826:	ea43 0301 	orr.w	r3, r3, r1
 800282a:	ea44 0402 	orr.w	r4, r4, r2
 800282e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002832:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002838:	3305      	adds	r3, #5
 800283a:	69b8      	ldr	r0, [r7, #24]
 800283c:	4403      	add	r3, r0
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2dd      	uxtb	r5, r3
 8002842:	f04f 0600 	mov.w	r6, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f04f 0400 	mov.w	r4, #0
 800284e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002852:	022b      	lsls	r3, r5, #8
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800285e:	ea43 0301 	orr.w	r3, r3, r1
 8002862:	ea44 0402 	orr.w	r4, r4, r2
 8002866:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800286a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	3306      	adds	r3, #6
 8002872:	69b8      	ldr	r0, [r7, #24]
 8002874:	4403      	add	r3, r0
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2dd      	uxtb	r5, r3
 800287a:	f04f 0600 	mov.w	r6, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800288a:	042b      	lsls	r3, r5, #16
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002896:	ea43 0301 	orr.w	r3, r3, r1
 800289a:	ea44 0402 	orr.w	r4, r4, r2
 800289e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80028a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a8:	3307      	adds	r3, #7
 80028aa:	69b8      	ldr	r0, [r7, #24]
 80028ac:	4403      	add	r3, r0
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b2dd      	uxtb	r5, r3
 80028b2:	f04f 0600 	mov.w	r6, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80028c2:	062b      	lsls	r3, r5, #24
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80028ce:	ea43 0301 	orr.w	r3, r3, r1
 80028d2:	ea44 0402 	orr.w	r4, r4, r2
 80028d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 80028da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->y);
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	3304      	adds	r3, #4
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f04f 0400 	mov.w	r4, #0
 80028ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80028f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f8:	69b8      	ldr	r0, [r7, #24]
 80028fa:	4403      	add	r3, r0
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2dd      	uxtb	r5, r3
 8002900:	f04f 0600 	mov.w	r6, #0
 8002904:	ea45 0301 	orr.w	r3, r5, r1
 8002908:	ea46 0402 	orr.w	r4, r6, r2
 800290c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002910:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002916:	3301      	adds	r3, #1
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2d9      	uxtb	r1, r3
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f04f 0400 	mov.w	r4, #0
 800292c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002930:	0213      	lsls	r3, r2, #8
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	020b      	lsls	r3, r1, #8
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002944:	ea43 0305 	orr.w	r3, r3, r5
 8002948:	ea44 0406 	orr.w	r4, r4, r6
 800294c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002950:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2d9      	uxtb	r1, r3
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002970:	0413      	lsls	r3, r2, #16
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	040b      	lsls	r3, r1, #16
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002984:	ea43 0305 	orr.w	r3, r3, r5
 8002988:	ea44 0406 	orr.w	r4, r4, r6
 800298c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002990:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	3303      	adds	r3, #3
 8002998:	69b8      	ldr	r0, [r7, #24]
 800299a:	4403      	add	r3, r0
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f04f 0400 	mov.w	r4, #0
 80029a4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80029a8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80029ac:	ea41 030a 	orr.w	r3, r1, sl
 80029b0:	ea42 040b 	orr.w	r4, r2, fp
 80029b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	3304      	adds	r3, #4
 80029c0:	69b8      	ldr	r0, [r7, #24]
 80029c2:	4403      	add	r3, r0
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2dd      	uxtb	r5, r3
 80029c8:	f04f 0600 	mov.w	r6, #0
 80029cc:	f04f 0a00 	mov.w	sl, #0
 80029d0:	f04f 0b00 	mov.w	fp, #0
 80029d4:	46ab      	mov	fp, r5
 80029d6:	f04f 0a00 	mov.w	sl, #0
 80029da:	ea4a 0301 	orr.w	r3, sl, r1
 80029de:	ea4b 0402 	orr.w	r4, fp, r2
 80029e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80029ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ec:	3305      	adds	r3, #5
 80029ee:	69b8      	ldr	r0, [r7, #24]
 80029f0:	4403      	add	r3, r0
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b2dd      	uxtb	r5, r3
 80029f6:	f04f 0600 	mov.w	r6, #0
 80029fa:	f04f 0a00 	mov.w	sl, #0
 80029fe:	f04f 0b00 	mov.w	fp, #0
 8002a02:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 8002a06:	f04f 0a00 	mov.w	sl, #0
 8002a0a:	ea4a 0301 	orr.w	r3, sl, r1
 8002a0e:	ea4b 0402 	orr.w	r4, fp, r2
 8002a12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	69b8      	ldr	r0, [r7, #24]
 8002a20:	4403      	add	r3, r0
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2dd      	uxtb	r5, r3
 8002a26:	f04f 0600 	mov.w	r6, #0
 8002a2a:	f04f 0a00 	mov.w	sl, #0
 8002a2e:	f04f 0b00 	mov.w	fp, #0
 8002a32:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8002a36:	f04f 0a00 	mov.w	sl, #0
 8002a3a:	ea4a 0301 	orr.w	r3, sl, r1
 8002a3e:	ea4b 0402 	orr.w	r4, fp, r2
 8002a42:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	4403      	add	r3, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b2dd      	uxtb	r5, r3
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	f04f 0a00 	mov.w	sl, #0
 8002a5e:	f04f 0b00 	mov.w	fp, #0
 8002a62:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 8002a66:	f04f 0a00 	mov.w	sl, #0
 8002a6a:	ea4a 0301 	orr.w	r3, sl, r1
 8002a6e:	ea4b 0402 	orr.w	r4, fp, r2
 8002a72:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 8002a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->z);
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	3304      	adds	r3, #4
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a94:	69b8      	ldr	r0, [r7, #24]
 8002a96:	4403      	add	r3, r0
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2dd      	uxtb	r5, r3
 8002a9c:	f04f 0600 	mov.w	r6, #0
 8002aa0:	ea45 0301 	orr.w	r3, r5, r1
 8002aa4:	ea46 0402 	orr.w	r4, r6, r2
 8002aa8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aac:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8002ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2d9      	uxtb	r1, r3
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0a00 	mov.w	sl, #0
 8002ac4:	f04f 0b00 	mov.w	fp, #0
 8002ac8:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8002acc:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002ad0:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002ad4:	ea4a 0305 	orr.w	r3, sl, r5
 8002ad8:	ea4b 0406 	orr.w	r4, fp, r6
 8002adc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ae0:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0a00 	mov.w	sl, #0
 8002af8:	f04f 0b00 	mov.w	fp, #0
 8002afc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002b00:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002b04:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002b08:	ea4a 0305 	orr.w	r3, sl, r5
 8002b0c:	ea4b 0406 	orr.w	r4, fp, r6
 8002b10:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	3303      	adds	r3, #3
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	4403      	add	r3, r0
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f04f 0400 	mov.w	r4, #0
 8002b28:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002b2c:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8002b30:	ea41 0308 	orr.w	r3, r1, r8
 8002b34:	ea42 0409 	orr.w	r4, r2, r9
 8002b38:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	3304      	adds	r3, #4
 8002b44:	69b8      	ldr	r0, [r7, #24]
 8002b46:	4403      	add	r3, r0
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2dd      	uxtb	r5, r3
 8002b4c:	f04f 0600 	mov.w	r6, #0
 8002b50:	f04f 0800 	mov.w	r8, #0
 8002b54:	f04f 0900 	mov.w	r9, #0
 8002b58:	46a9      	mov	r9, r5
 8002b5a:	f04f 0800 	mov.w	r8, #0
 8002b5e:	ea48 0301 	orr.w	r3, r8, r1
 8002b62:	ea49 0402 	orr.w	r4, r9, r2
 8002b66:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b70:	3305      	adds	r3, #5
 8002b72:	69b8      	ldr	r0, [r7, #24]
 8002b74:	4403      	add	r3, r0
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2dd      	uxtb	r5, r3
 8002b7a:	f04f 0600 	mov.w	r6, #0
 8002b7e:	f04f 0800 	mov.w	r8, #0
 8002b82:	f04f 0900 	mov.w	r9, #0
 8002b86:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8002b8a:	f04f 0800 	mov.w	r8, #0
 8002b8e:	ea48 0301 	orr.w	r3, r8, r1
 8002b92:	ea49 0402 	orr.w	r4, r9, r2
 8002b96:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba0:	3306      	adds	r3, #6
 8002ba2:	69b8      	ldr	r0, [r7, #24]
 8002ba4:	4403      	add	r3, r0
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2dd      	uxtb	r5, r3
 8002baa:	f04f 0600 	mov.w	r6, #0
 8002bae:	f04f 0800 	mov.w	r8, #0
 8002bb2:	f04f 0900 	mov.w	r9, #0
 8002bb6:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002bba:	f04f 0800 	mov.w	r8, #0
 8002bbe:	ea48 0301 	orr.w	r3, r8, r1
 8002bc2:	ea49 0402 	orr.w	r4, r9, r2
 8002bc6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002bca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	3307      	adds	r3, #7
 8002bd2:	69b8      	ldr	r0, [r7, #24]
 8002bd4:	4403      	add	r3, r0
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2dd      	uxtb	r5, r3
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	f04f 0800 	mov.w	r8, #0
 8002be2:	f04f 0900 	mov.w	r9, #0
 8002be6:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002bea:	f04f 0800 	mov.w	r8, #0
 8002bee:	ea48 0301 	orr.w	r3, r8, r1
 8002bf2:	ea49 0402 	orr.w	r4, r9, r2
 8002bf6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8002bfa:	6a3a      	ldr	r2, [r7, #32]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->w);
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	3304      	adds	r3, #4
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3748      	adds	r7, #72	; 0x48
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c12:	4770      	bx	lr

08002c14 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	08008994 	.word	0x08008994

08002c30 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	080089b0 	.word	0x080089b0

08002c4c <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc76 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8002c5c:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fe3e 	bl	80018e8 <_ZN13geometry_msgs5PointC1Ev>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fa6b 	bl	800214c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	08008c74 	.word	0x08008c74

08002c84 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1d18      	adds	r0, r3, #4
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fe fe41 	bl	8001924 <_ZNK13geometry_msgs5Point9serializeEPh>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f103 0014 	add.w	r0, r3, #20
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7ff fa6a 	bl	8002190 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1d18      	adds	r0, r3, #4
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fe ff88 	bl	8001bfc <_ZN13geometry_msgs5Point11deserializeEPh>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 0014 	add.w	r0, r3, #20
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff fc26 	bl	8002552 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
     return offset;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	080089d4 	.word	0x080089d4

08002d34 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	080089e8 	.word	0x080089e8

08002d50 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fbf4 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff6e 	bl	8002c4c <_ZN13geometry_msgs4PoseC1Ev>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002d76:	2323      	movs	r3, #35	; 0x23
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db05      	blt.n	8002d88 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	3204      	adds	r2, #4
 8002d84:	3b01      	subs	r3, #1
 8002d86:	e7f7      	b.n	8002d78 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	08008c5c 	.word	0x08008c5c

08002d98 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1d18      	adds	r0, r3, #4
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7ff ff67 	bl	8002c84 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4413      	add	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b23      	cmp	r3, #35	; 0x23
 8002dc6:	d87d      	bhi.n	8002ec4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x12c>
      union {
        float real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	330a      	adds	r3, #10
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8002dd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	440a      	add	r2, r1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8002de6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	0a0b      	lsrs	r3, r1, #8
 8002df4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002df8:	0a14      	lsrs	r4, r2, #8
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	440a      	add	r2, r1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8002e06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	0c0b      	lsrs	r3, r1, #16
 8002e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e18:	0c14      	lsrs	r4, r2, #16
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	3202      	adds	r2, #2
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	440a      	add	r2, r1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8002e26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	f04f 0400 	mov.w	r4, #0
 8002e32:	0e0b      	lsrs	r3, r1, #24
 8002e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e38:	0e14      	lsrs	r4, r2, #24
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	3203      	adds	r2, #3
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	440a      	add	r2, r1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8002e46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	0013      	movs	r3, r2
 8002e54:	2400      	movs	r4, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	3204      	adds	r2, #4
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	440a      	add	r2, r1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8002e62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f04f 0400 	mov.w	r4, #0
 8002e6e:	0a13      	lsrs	r3, r2, #8
 8002e70:	2400      	movs	r4, #0
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	3205      	adds	r2, #5
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	440a      	add	r2, r1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8002e7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	0c13      	lsrs	r3, r2, #16
 8002e8c:	2400      	movs	r4, #0
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	3206      	adds	r2, #6
 8002e92:	6839      	ldr	r1, [r7, #0]
 8002e94:	440a      	add	r2, r1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8002e9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	0e13      	lsrs	r3, r2, #24
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	3207      	adds	r2, #7
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e77e      	b.n	8002dc2 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8002ec4:	697b      	ldr	r3, [r7, #20]
    }
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}

08002ece <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ece:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
      offset += this->pose.deserialize(inbuffer + offset);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1d18      	adds	r0, r3, #4
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7ff fef0 	bl	8002cce <_ZN13geometry_msgs4Pose11deserializeEPh>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b23      	cmp	r3, #35	; 0x23
 8002efe:	f200 80ce 	bhi.w	800309e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1d0>
      union {
        float real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	4403      	add	r3, r0
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	fa5f f883 	uxtb.w	r8, r3
 8002f1e:	f04f 0900 	mov.w	r9, #0
 8002f22:	ea48 0301 	orr.w	r3, r8, r1
 8002f26:	ea49 0402 	orr.w	r4, r9, r2
 8002f2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f2e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2d9      	uxtb	r1, r3
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0b00 	mov.w	fp, #0
 8002f46:	f04f 0c00 	mov.w	ip, #0
 8002f4a:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8002f4e:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8002f52:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8002f56:	ea4b 0308 	orr.w	r3, fp, r8
 8002f5a:	ea4c 0409 	orr.w	r4, ip, r9
 8002f5e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f62:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2d9      	uxtb	r1, r3
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0b00 	mov.w	fp, #0
 8002f7a:	f04f 0c00 	mov.w	ip, #0
 8002f7e:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8002f82:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8002f86:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8002f8a:	ea4b 0308 	orr.w	r3, fp, r8
 8002f8e:	ea4c 0409 	orr.w	r4, ip, r9
 8002f92:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	4403      	add	r3, r0
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f04f 0400 	mov.w	r4, #0
 8002faa:	0a1e      	lsrs	r6, r3, #8
 8002fac:	061d      	lsls	r5, r3, #24
 8002fae:	ea41 0305 	orr.w	r3, r1, r5
 8002fb2:	ea42 0406 	orr.w	r4, r2, r6
 8002fb6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	4403      	add	r3, r0
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	fa5f f883 	uxtb.w	r8, r3
 8002fcc:	f04f 0900 	mov.w	r9, #0
 8002fd0:	f04f 0b00 	mov.w	fp, #0
 8002fd4:	f04f 0c00 	mov.w	ip, #0
 8002fd8:	46c4      	mov	ip, r8
 8002fda:	f04f 0b00 	mov.w	fp, #0
 8002fde:	ea4b 0301 	orr.w	r3, fp, r1
 8002fe2:	ea4c 0402 	orr.w	r4, ip, r2
 8002fe6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3305      	adds	r3, #5
 8002ff2:	6838      	ldr	r0, [r7, #0]
 8002ff4:	4403      	add	r3, r0
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	fa5f f883 	uxtb.w	r8, r3
 8002ffc:	f04f 0900 	mov.w	r9, #0
 8003000:	f04f 0b00 	mov.w	fp, #0
 8003004:	f04f 0c00 	mov.w	ip, #0
 8003008:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 800300c:	f04f 0b00 	mov.w	fp, #0
 8003010:	ea4b 0301 	orr.w	r3, fp, r1
 8003014:	ea4c 0402 	orr.w	r4, ip, r2
 8003018:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800301c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3306      	adds	r3, #6
 8003024:	6838      	ldr	r0, [r7, #0]
 8003026:	4403      	add	r3, r0
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	fa5f f883 	uxtb.w	r8, r3
 800302e:	f04f 0900 	mov.w	r9, #0
 8003032:	f04f 0b00 	mov.w	fp, #0
 8003036:	f04f 0c00 	mov.w	ip, #0
 800303a:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 800303e:	f04f 0b00 	mov.w	fp, #0
 8003042:	ea4b 0301 	orr.w	r3, fp, r1
 8003046:	ea4c 0402 	orr.w	r4, ip, r2
 800304a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800304e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3307      	adds	r3, #7
 8003056:	6838      	ldr	r0, [r7, #0]
 8003058:	4403      	add	r3, r0
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	fa5f f883 	uxtb.w	r8, r3
 8003060:	f04f 0900 	mov.w	r9, #0
 8003064:	f04f 0b00 	mov.w	fp, #0
 8003068:	f04f 0c00 	mov.w	ip, #0
 800306c:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8003070:	f04f 0b00 	mov.w	fp, #0
 8003074:	ea4b 0301 	orr.w	r3, fp, r1
 8003078:	ea4c 0402 	orr.w	r4, ip, r2
 800307c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	330a      	adds	r3, #10
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3304      	adds	r3, #4
 800308e:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->covariance[i]);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3304      	adds	r3, #4
 8003094:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3301      	adds	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e72d      	b.n	8002efa <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2c>
      }
     return offset;
 800309e:	697b      	ldr	r3, [r7, #20]
    }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

080030ac <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	08008a0c 	.word	0x08008a0c

080030c8 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	08008a30 	.word	0x08008a30

080030e4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa2a 	bl	8000548 <_ZN3ros3MsgC1Ev>
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
    {
    }
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08008c44 	.word	0x08008c44

08003120 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003120:	b490      	push	{r4, r7}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003134:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	440a      	add	r2, r1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003142:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	f04f 0400 	mov.w	r4, #0
 800314e:	0a0b      	lsrs	r3, r1, #8
 8003150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003154:	0a14      	lsrs	r4, r2, #8
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	3201      	adds	r2, #1
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	440a      	add	r2, r1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003162:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	0c0b      	lsrs	r3, r1, #16
 8003170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003174:	0c14      	lsrs	r4, r2, #16
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	3202      	adds	r2, #2
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	440a      	add	r2, r1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003182:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	f04f 0400 	mov.w	r4, #0
 800318e:	0e0b      	lsrs	r3, r1, #24
 8003190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003194:	0e14      	lsrs	r4, r2, #24
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	3203      	adds	r2, #3
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	440a      	add	r2, r1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80031a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f04f 0400 	mov.w	r4, #0
 80031ae:	0013      	movs	r3, r2
 80031b0:	2400      	movs	r4, #0
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	3204      	adds	r2, #4
 80031b6:	6839      	ldr	r1, [r7, #0]
 80031b8:	440a      	add	r2, r1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80031be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	0a13      	lsrs	r3, r2, #8
 80031cc:	2400      	movs	r4, #0
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	3205      	adds	r2, #5
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	440a      	add	r2, r1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80031da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	0c13      	lsrs	r3, r2, #16
 80031e8:	2400      	movs	r4, #0
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	3206      	adds	r2, #6
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	440a      	add	r2, r1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80031f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0e13      	lsrs	r3, r2, #24
 8003204:	2400      	movs	r4, #0
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	3207      	adds	r2, #7
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	440a      	add	r2, r1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	3304      	adds	r3, #4
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800321e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	440a      	add	r2, r1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800322c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	0a0b      	lsrs	r3, r1, #8
 800323a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800323e:	0a14      	lsrs	r4, r2, #8
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	3201      	adds	r2, #1
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	440a      	add	r2, r1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800324c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f04f 0400 	mov.w	r4, #0
 8003258:	0c0b      	lsrs	r3, r1, #16
 800325a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800325e:	0c14      	lsrs	r4, r2, #16
 8003260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003262:	3202      	adds	r2, #2
 8003264:	6839      	ldr	r1, [r7, #0]
 8003266:	440a      	add	r2, r1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800326c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	0e0b      	lsrs	r3, r1, #24
 800327a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800327e:	0e14      	lsrs	r4, r2, #24
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	3203      	adds	r2, #3
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	440a      	add	r2, r1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800328c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	f04f 0400 	mov.w	r4, #0
 8003298:	0013      	movs	r3, r2
 800329a:	2400      	movs	r4, #0
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	3204      	adds	r2, #4
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	440a      	add	r2, r1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80032a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	0a13      	lsrs	r3, r2, #8
 80032b6:	2400      	movs	r4, #0
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	3205      	adds	r2, #5
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	440a      	add	r2, r1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80032c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	0c13      	lsrs	r3, r2, #16
 80032d2:	2400      	movs	r4, #0
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	3206      	adds	r2, #6
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	440a      	add	r2, r1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80032e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	0e13      	lsrs	r3, r2, #24
 80032ee:	2400      	movs	r4, #0
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	3207      	adds	r2, #7
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	440a      	add	r2, r1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	3304      	adds	r3, #4
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003308:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	440a      	add	r2, r1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003316:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	0a0b      	lsrs	r3, r1, #8
 8003324:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003328:	0a14      	lsrs	r4, r2, #8
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	3201      	adds	r2, #1
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	440a      	add	r2, r1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003336:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	0c0b      	lsrs	r3, r1, #16
 8003344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003348:	0c14      	lsrs	r4, r2, #16
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	3202      	adds	r2, #2
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	440a      	add	r2, r1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003356:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	0e0b      	lsrs	r3, r1, #24
 8003364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003368:	0e14      	lsrs	r4, r2, #24
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	3203      	adds	r2, #3
 800336e:	6839      	ldr	r1, [r7, #0]
 8003370:	440a      	add	r2, r1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003376:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	0013      	movs	r3, r2
 8003384:	2400      	movs	r4, #0
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	3204      	adds	r2, #4
 800338a:	6839      	ldr	r1, [r7, #0]
 800338c:	440a      	add	r2, r1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003392:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	0a13      	lsrs	r3, r2, #8
 80033a0:	2400      	movs	r4, #0
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	3205      	adds	r2, #5
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	440a      	add	r2, r1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80033ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f04f 0400 	mov.w	r4, #0
 80033ba:	0c13      	lsrs	r3, r2, #16
 80033bc:	2400      	movs	r4, #0
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	3206      	adds	r2, #6
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	440a      	add	r2, r1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80033ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	f04f 0400 	mov.w	r4, #0
 80033d6:	0e13      	lsrs	r3, r2, #24
 80033d8:	2400      	movs	r4, #0
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	3207      	adds	r2, #7
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	440a      	add	r2, r1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	3304      	adds	r3, #4
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80033ee:	4618      	mov	r0, r3
 80033f0:	3728      	adds	r7, #40	; 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc90      	pop	{r4, r7}
 80033f6:	4770      	bx	lr

080033f8 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033fc:	b08c      	sub	sp, #48	; 0x30
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003414:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	4403      	add	r3, r0
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461c      	mov	r4, r3
 8003422:	b2e4      	uxtb	r4, r4
 8003424:	f04f 0500 	mov.w	r5, #0
 8003428:	4623      	mov	r3, r4
 800342a:	462c      	mov	r4, r5
 800342c:	ea43 0301 	orr.w	r3, r3, r1
 8003430:	ea44 0402 	orr.w	r4, r4, r2
 8003434:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003438:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800343c:	461d      	mov	r5, r3
 800343e:	4626      	mov	r6, r4
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	3301      	adds	r3, #1
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2d9      	uxtb	r1, r3
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	0214      	lsls	r4, r2, #8
 800345a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800345e:	020b      	lsls	r3, r1, #8
 8003460:	4629      	mov	r1, r5
 8003462:	4632      	mov	r2, r6
 8003464:	ea41 0103 	orr.w	r1, r1, r3
 8003468:	ea42 0204 	orr.w	r2, r2, r4
 800346c:	460b      	mov	r3, r1
 800346e:	4614      	mov	r4, r2
 8003470:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003474:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003478:	461d      	mov	r5, r3
 800347a:	4626      	mov	r6, r4
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	3302      	adds	r3, #2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2d9      	uxtb	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	0414      	lsls	r4, r2, #16
 8003496:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800349a:	040b      	lsls	r3, r1, #16
 800349c:	4629      	mov	r1, r5
 800349e:	4632      	mov	r2, r6
 80034a0:	ea41 0103 	orr.w	r1, r1, r3
 80034a4:	ea42 0204 	orr.w	r2, r2, r4
 80034a8:	460b      	mov	r3, r1
 80034aa:	4614      	mov	r4, r2
 80034ac:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	3303      	adds	r3, #3
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	4403      	add	r3, r0
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f04f 0400 	mov.w	r4, #0
 80034c4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80034c8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80034cc:	ea41 030a 	orr.w	r3, r1, sl
 80034d0:	ea42 040b 	orr.w	r4, r2, fp
 80034d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	3304      	adds	r3, #4
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	4403      	add	r3, r0
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	fa5f fa83 	uxtb.w	sl, r3
 80034ea:	f04f 0b00 	mov.w	fp, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	f04f 0400 	mov.w	r4, #0
 80034f6:	4625      	mov	r5, r4
 80034f8:	461c      	mov	r4, r3
 80034fa:	4653      	mov	r3, sl
 80034fc:	461d      	mov	r5, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	461c      	mov	r4, r3
 8003502:	4623      	mov	r3, r4
 8003504:	462c      	mov	r4, r5
 8003506:	ea43 0301 	orr.w	r3, r3, r1
 800350a:	ea44 0402 	orr.w	r4, r4, r2
 800350e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003512:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	3305      	adds	r3, #5
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	4403      	add	r3, r0
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	fa5f fa83 	uxtb.w	sl, r3
 8003524:	f04f 0b00 	mov.w	fp, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	4625      	mov	r5, r4
 8003532:	461c      	mov	r4, r3
 8003534:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8003538:	461d      	mov	r5, r3
 800353a:	2300      	movs	r3, #0
 800353c:	461c      	mov	r4, r3
 800353e:	4623      	mov	r3, r4
 8003540:	462c      	mov	r4, r5
 8003542:	ea43 0301 	orr.w	r3, r3, r1
 8003546:	ea44 0402 	orr.w	r4, r4, r2
 800354a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800354e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	3306      	adds	r3, #6
 8003556:	68b8      	ldr	r0, [r7, #8]
 8003558:	4403      	add	r3, r0
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	fa5f fa83 	uxtb.w	sl, r3
 8003560:	f04f 0b00 	mov.w	fp, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	4625      	mov	r5, r4
 800356e:	461c      	mov	r4, r3
 8003570:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8003574:	461d      	mov	r5, r3
 8003576:	2300      	movs	r3, #0
 8003578:	461c      	mov	r4, r3
 800357a:	4623      	mov	r3, r4
 800357c:	462c      	mov	r4, r5
 800357e:	ea43 0301 	orr.w	r3, r3, r1
 8003582:	ea44 0402 	orr.w	r4, r4, r2
 8003586:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800358a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	3307      	adds	r3, #7
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	4403      	add	r3, r0
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	fa5f fa83 	uxtb.w	sl, r3
 800359c:	f04f 0b00 	mov.w	fp, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	4625      	mov	r5, r4
 80035aa:	461c      	mov	r4, r3
 80035ac:	ea4f 630a 	mov.w	r3, sl, lsl #24
 80035b0:	461d      	mov	r5, r3
 80035b2:	2300      	movs	r3, #0
 80035b4:	461c      	mov	r4, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	462c      	mov	r4, r5
 80035ba:	ea43 0301 	orr.w	r3, r3, r1
 80035be:	ea44 0402 	orr.w	r4, r4, r2
 80035c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->x);
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	3304      	adds	r3, #4
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f04f 0400 	mov.w	r4, #0
 80035da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	4403      	add	r3, r0
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	fa5f fa83 	uxtb.w	sl, r3
 80035ee:	f04f 0b00 	mov.w	fp, #0
 80035f2:	ea4a 0301 	orr.w	r3, sl, r1
 80035f6:	ea4b 0402 	orr.w	r4, fp, r2
 80035fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	3301      	adds	r3, #1
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2d9      	uxtb	r1, r3
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	4625      	mov	r5, r4
 800361c:	461c      	mov	r4, r3
 800361e:	0213      	lsls	r3, r2, #8
 8003620:	461d      	mov	r5, r3
 8003622:	462b      	mov	r3, r5
 8003624:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003628:	461d      	mov	r5, r3
 800362a:	020b      	lsls	r3, r1, #8
 800362c:	461c      	mov	r4, r3
 800362e:	4623      	mov	r3, r4
 8003630:	462c      	mov	r4, r5
 8003632:	ea43 030a 	orr.w	r3, r3, sl
 8003636:	ea44 040b 	orr.w	r4, r4, fp
 800363a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800363e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	3302      	adds	r3, #2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b2d9      	uxtb	r1, r3
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	4625      	mov	r5, r4
 800365c:	461c      	mov	r4, r3
 800365e:	0413      	lsls	r3, r2, #16
 8003660:	461d      	mov	r5, r3
 8003662:	462b      	mov	r3, r5
 8003664:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003668:	461d      	mov	r5, r3
 800366a:	040b      	lsls	r3, r1, #16
 800366c:	461c      	mov	r4, r3
 800366e:	4623      	mov	r3, r4
 8003670:	462c      	mov	r4, r5
 8003672:	ea43 030a 	orr.w	r3, r3, sl
 8003676:	ea44 040b 	orr.w	r4, r4, fp
 800367a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800367e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	3303      	adds	r3, #3
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	4403      	add	r3, r0
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003696:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800369a:	ea41 0308 	orr.w	r3, r1, r8
 800369e:	ea42 0409 	orr.w	r4, r2, r9
 80036a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	3304      	adds	r3, #4
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	4403      	add	r3, r0
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	fa5f f883 	uxtb.w	r8, r3
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	f04f 0a00 	mov.w	sl, #0
 80036c0:	f04f 0b00 	mov.w	fp, #0
 80036c4:	46c3      	mov	fp, r8
 80036c6:	f04f 0a00 	mov.w	sl, #0
 80036ca:	ea4a 0301 	orr.w	r3, sl, r1
 80036ce:	ea4b 0402 	orr.w	r4, fp, r2
 80036d2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80036d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	3305      	adds	r3, #5
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	4403      	add	r3, r0
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	fa5f f883 	uxtb.w	r8, r3
 80036e8:	f04f 0900 	mov.w	r9, #0
 80036ec:	f04f 0a00 	mov.w	sl, #0
 80036f0:	f04f 0b00 	mov.w	fp, #0
 80036f4:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 80036f8:	f04f 0a00 	mov.w	sl, #0
 80036fc:	ea4a 0301 	orr.w	r3, sl, r1
 8003700:	ea4b 0402 	orr.w	r4, fp, r2
 8003704:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003708:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	3306      	adds	r3, #6
 8003710:	68b8      	ldr	r0, [r7, #8]
 8003712:	4403      	add	r3, r0
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	fa5f f883 	uxtb.w	r8, r3
 800371a:	f04f 0900 	mov.w	r9, #0
 800371e:	f04f 0a00 	mov.w	sl, #0
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800372a:	f04f 0a00 	mov.w	sl, #0
 800372e:	ea4a 0301 	orr.w	r3, sl, r1
 8003732:	ea4b 0402 	orr.w	r4, fp, r2
 8003736:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800373a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	3307      	adds	r3, #7
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	4403      	add	r3, r0
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	fa5f f883 	uxtb.w	r8, r3
 800374c:	f04f 0900 	mov.w	r9, #0
 8003750:	f04f 0a00 	mov.w	sl, #0
 8003754:	f04f 0b00 	mov.w	fp, #0
 8003758:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 800375c:	f04f 0a00 	mov.w	sl, #0
 8003760:	ea4a 0301 	orr.w	r3, sl, r1
 8003764:	ea4b 0402 	orr.w	r4, fp, r2
 8003768:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->y);
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	3304      	adds	r3, #4
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003784:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	68b8      	ldr	r0, [r7, #8]
 800378c:	4403      	add	r3, r0
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	fa5f f883 	uxtb.w	r8, r3
 8003794:	f04f 0900 	mov.w	r9, #0
 8003798:	ea48 0301 	orr.w	r3, r8, r1
 800379c:	ea49 0402 	orr.w	r4, r9, r2
 80037a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	3301      	adds	r3, #1
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b2d9      	uxtb	r1, r3
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0a00 	mov.w	sl, #0
 80037bc:	f04f 0b00 	mov.w	fp, #0
 80037c0:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 80037c4:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 80037c8:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 80037cc:	ea4a 0308 	orr.w	r3, sl, r8
 80037d0:	ea4b 0409 	orr.w	r4, fp, r9
 80037d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	3302      	adds	r3, #2
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2d9      	uxtb	r1, r3
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0a00 	mov.w	sl, #0
 80037f0:	f04f 0b00 	mov.w	fp, #0
 80037f4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80037f8:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 80037fc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8003800:	ea4a 0308 	orr.w	r3, sl, r8
 8003804:	ea4b 0409 	orr.w	r4, fp, r9
 8003808:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800380c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	3303      	adds	r3, #3
 8003814:	68b8      	ldr	r0, [r7, #8]
 8003816:	4403      	add	r3, r0
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	0a18      	lsrs	r0, r3, #8
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	e9d7 3400 	ldrd	r3, r4, [r7]
 800382c:	ea43 0301 	orr.w	r3, r3, r1
 8003830:	ea44 0402 	orr.w	r4, r4, r2
 8003834:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003838:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	3304      	adds	r3, #4
 8003840:	68b8      	ldr	r0, [r7, #8]
 8003842:	4403      	add	r3, r0
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2dd      	uxtb	r5, r3
 8003848:	f04f 0600 	mov.w	r6, #0
 800384c:	f04f 0800 	mov.w	r8, #0
 8003850:	f04f 0900 	mov.w	r9, #0
 8003854:	46a9      	mov	r9, r5
 8003856:	f04f 0800 	mov.w	r8, #0
 800385a:	ea48 0301 	orr.w	r3, r8, r1
 800385e:	ea49 0402 	orr.w	r4, r9, r2
 8003862:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003866:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	3305      	adds	r3, #5
 800386e:	68b8      	ldr	r0, [r7, #8]
 8003870:	4403      	add	r3, r0
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2dd      	uxtb	r5, r3
 8003876:	f04f 0600 	mov.w	r6, #0
 800387a:	f04f 0800 	mov.w	r8, #0
 800387e:	f04f 0900 	mov.w	r9, #0
 8003882:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8003886:	f04f 0800 	mov.w	r8, #0
 800388a:	ea48 0301 	orr.w	r3, r8, r1
 800388e:	ea49 0402 	orr.w	r4, r9, r2
 8003892:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003896:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	3306      	adds	r3, #6
 800389e:	68b8      	ldr	r0, [r7, #8]
 80038a0:	4403      	add	r3, r0
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b2dd      	uxtb	r5, r3
 80038a6:	f04f 0600 	mov.w	r6, #0
 80038aa:	f04f 0800 	mov.w	r8, #0
 80038ae:	f04f 0900 	mov.w	r9, #0
 80038b2:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80038b6:	f04f 0800 	mov.w	r8, #0
 80038ba:	ea48 0301 	orr.w	r3, r8, r1
 80038be:	ea49 0402 	orr.w	r4, r9, r2
 80038c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80038c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	3307      	adds	r3, #7
 80038ce:	68b8      	ldr	r0, [r7, #8]
 80038d0:	4403      	add	r3, r0
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2dd      	uxtb	r5, r3
 80038d6:	f04f 0600 	mov.w	r6, #0
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	f04f 0900 	mov.w	r9, #0
 80038e2:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80038e6:	f04f 0800 	mov.w	r8, #0
 80038ea:	ea48 0301 	orr.w	r3, r8, r1
 80038ee:	ea49 0402 	orr.w	r4, r9, r2
 80038f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->z);
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	3304      	adds	r3, #4
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	; 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800390e:	4770      	bx	lr

08003910 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	08008a54 	.word	0x08008a54

0800392c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	08008970 	.word	0x08008970

08003948 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fdf8 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fbbe 	bl	80030e4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3314      	adds	r3, #20
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fbb9 	bl	80030e4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	08008c2c 	.word	0x08008c2c

08003980 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1d18      	adds	r0, r3, #4
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7ff fbc1 	bl	8003120 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800399e:	4602      	mov	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f103 0014 	add.w	r0, r3, #20
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7ff fbb4 	bl	8003120 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
      return offset;
 80039c0:	68fb      	ldr	r3, [r7, #12]
    }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1d18      	adds	r0, r3, #4
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f7ff fd08 	bl	80033f8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 0014 	add.w	r0, r3, #20
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7ff fcfb 	bl	80033f8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
     return offset;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
    }
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	08008a6c 	.word	0x08008a6c

08003a30 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	08008a80 	.word	0x08008a80

08003a4c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fd76 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff6e 	bl	8003948 <_ZN13geometry_msgs5TwistC1Ev>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003a72:	2323      	movs	r3, #35	; 0x23
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db05      	blt.n	8003a84 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	3204      	adds	r2, #4
 8003a80:	3b01      	subs	r3, #1
 8003a82:	e7f7      	b.n	8003a74 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08008c14 	.word	0x08008c14

08003a94 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1d18      	adds	r0, r3, #4
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7ff ff67 	bl	8003980 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b23      	cmp	r3, #35	; 0x23
 8003ac2:	d87c      	bhi.n	8003bbe <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x12a>
      union {
        float real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	330a      	adds	r3, #10
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8003ad2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	440a      	add	r2, r1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8003ae0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f04f 0400 	mov.w	r4, #0
 8003aec:	0a0b      	lsrs	r3, r1, #8
 8003aee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003af2:	0a14      	lsrs	r4, r2, #8
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	3201      	adds	r2, #1
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	440a      	add	r2, r1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8003b00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	0c0b      	lsrs	r3, r1, #16
 8003b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b12:	0c14      	lsrs	r4, r2, #16
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	3202      	adds	r2, #2
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8003b20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	0e0b      	lsrs	r3, r1, #24
 8003b2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b32:	0e14      	lsrs	r4, r2, #24
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	3203      	adds	r2, #3
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8003b40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f04f 0400 	mov.w	r4, #0
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	2400      	movs	r4, #0
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	3204      	adds	r2, #4
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	440a      	add	r2, r1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8003b5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f04f 0400 	mov.w	r4, #0
 8003b68:	0a13      	lsrs	r3, r2, #8
 8003b6a:	2400      	movs	r4, #0
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	3205      	adds	r2, #5
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	440a      	add	r2, r1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8003b78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f04f 0400 	mov.w	r4, #0
 8003b84:	0c13      	lsrs	r3, r2, #16
 8003b86:	2400      	movs	r4, #0
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	3206      	adds	r2, #6
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	440a      	add	r2, r1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8003b94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f04f 0400 	mov.w	r4, #0
 8003ba0:	0e13      	lsrs	r3, r2, #24
 8003ba2:	2400      	movs	r4, #0
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	3207      	adds	r2, #7
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	440a      	add	r2, r1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	e77f      	b.n	8003abe <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8003bbe:	697b      	ldr	r3, [r7, #20]
    }
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bc8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
      offset += this->twist.deserialize(inbuffer + offset);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1d18      	adds	r0, r3, #4
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7ff fef1 	bl	80039ca <_ZN13geometry_msgs5Twist11deserializeEPh>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4413      	add	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b23      	cmp	r3, #35	; 0x23
 8003bf8:	f200 80cd 	bhi.w	8003d96 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1ce>
      union {
        float real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	4403      	add	r3, r0
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	fa5f f883 	uxtb.w	r8, r3
 8003c18:	f04f 0900 	mov.w	r9, #0
 8003c1c:	ea48 0301 	orr.w	r3, r8, r1
 8003c20:	ea49 0402 	orr.w	r4, r9, r2
 8003c24:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c28:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2d9      	uxtb	r1, r3
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0b00 	mov.w	fp, #0
 8003c40:	f04f 0c00 	mov.w	ip, #0
 8003c44:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003c48:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003c4c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003c50:	ea4b 0308 	orr.w	r3, fp, r8
 8003c54:	ea4c 0409 	orr.w	r4, ip, r9
 8003c58:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c5c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3302      	adds	r3, #2
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2d9      	uxtb	r1, r3
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0b00 	mov.w	fp, #0
 8003c74:	f04f 0c00 	mov.w	ip, #0
 8003c78:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8003c7c:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8003c80:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8003c84:	ea4b 0308 	orr.w	r3, fp, r8
 8003c88:	ea4c 0409 	orr.w	r4, ip, r9
 8003c8c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3303      	adds	r3, #3
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	4403      	add	r3, r0
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f04f 0400 	mov.w	r4, #0
 8003ca4:	0a1e      	lsrs	r6, r3, #8
 8003ca6:	061d      	lsls	r5, r3, #24
 8003ca8:	ea41 0305 	orr.w	r3, r1, r5
 8003cac:	ea42 0406 	orr.w	r4, r2, r6
 8003cb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	4403      	add	r3, r0
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	fa5f f883 	uxtb.w	r8, r3
 8003cc6:	f04f 0900 	mov.w	r9, #0
 8003cca:	f04f 0b00 	mov.w	fp, #0
 8003cce:	f04f 0c00 	mov.w	ip, #0
 8003cd2:	46c4      	mov	ip, r8
 8003cd4:	f04f 0b00 	mov.w	fp, #0
 8003cd8:	ea4b 0301 	orr.w	r3, fp, r1
 8003cdc:	ea4c 0402 	orr.w	r4, ip, r2
 8003ce0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ce4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3305      	adds	r3, #5
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	4403      	add	r3, r0
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	fa5f f883 	uxtb.w	r8, r3
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	f04f 0b00 	mov.w	fp, #0
 8003cfe:	f04f 0c00 	mov.w	ip, #0
 8003d02:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8003d06:	f04f 0b00 	mov.w	fp, #0
 8003d0a:	ea4b 0301 	orr.w	r3, fp, r1
 8003d0e:	ea4c 0402 	orr.w	r4, ip, r2
 8003d12:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	4403      	add	r3, r0
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	fa5f f883 	uxtb.w	r8, r3
 8003d28:	f04f 0900 	mov.w	r9, #0
 8003d2c:	f04f 0b00 	mov.w	fp, #0
 8003d30:	f04f 0c00 	mov.w	ip, #0
 8003d34:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8003d38:	f04f 0b00 	mov.w	fp, #0
 8003d3c:	ea4b 0301 	orr.w	r3, fp, r1
 8003d40:	ea4c 0402 	orr.w	r4, ip, r2
 8003d44:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	6838      	ldr	r0, [r7, #0]
 8003d52:	4403      	add	r3, r0
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	fa5f f883 	uxtb.w	r8, r3
 8003d5a:	f04f 0900 	mov.w	r9, #0
 8003d5e:	f04f 0b00 	mov.w	fp, #0
 8003d62:	f04f 0c00 	mov.w	ip, #0
 8003d66:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8003d6a:	f04f 0b00 	mov.w	fp, #0
 8003d6e:	ea4b 0301 	orr.w	r3, fp, r1
 8003d72:	ea4c 0402 	orr.w	r4, ip, r2
 8003d76:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	330a      	adds	r3, #10
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->covariance[i]);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	e72e      	b.n	8003bf4 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2c>
      }
     return offset;
 8003d96:	697b      	ldr	r3, [r7, #20]
    }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08003da4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	08008aa4 	.word	0x08008aa4

08003dc0 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	08008ac8 	.word	0x08008ac8

08003ddc <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fbae 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8003dec:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fbe2 	bl	80015c0 <_ZN8std_msgs6HeaderC1Ev>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	331c      	adds	r3, #28
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ffa2 	bl	8002d50 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	33d8      	adds	r3, #216	; 0xd8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fe1b 	bl	8003a4c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08008bfc 	.word	0x08008bfc
 8003e24:	08008820 	.word	0x08008820

08003e28 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1d18      	adds	r0, r3, #4
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fd fbdd 	bl	8001600 <_ZNK8std_msgs6Header9serializeEPh>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc f9f0 	bl	8000238 <strlen>
 8003e58:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd19 	bl	800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	18d0      	adds	r0, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f004 fb7c 	bl	8008578 <memcpy>
      offset += length_child_frame_id;
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f103 001c 	add.w	r0, r3, #28
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7fe ff7f 	bl	8002d98 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f7ff fdf0 	bl	8003a94 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
      return offset;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1d18      	adds	r0, r3, #4
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f7fd fc26 	bl	8001730 <_ZN8std_msgs6Header11deserializeEPh>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	f107 030c 	add.w	r3, r7, #12
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fcec 	bl	80048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3304      	adds	r3, #4
 8003f02:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d20c      	bcs.n	8003f2e <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	441a      	add	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	440b      	add	r3, r1
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e7ec      	b.n	8003f08 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	3b01      	subs	r3, #1
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f103 001c 	add.w	r0, r3, #28
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fe ffb5 	bl	8002ece <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7ff fe25 	bl	8003bc8 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
     return offset;
 8003f86:	693b      	ldr	r3, [r7, #16]
    }
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	08008aec 	.word	0x08008aec

08003fac <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	08008b00 	.word	0x08008b00

08003fc8 <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef float _temperature_type;
      _temperature_type temperature;
      typedef float _variance_type;
      _variance_type variance;

    Temperature():
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fab8 	bl	8000548 <_ZN3ros3MsgC1Ev>
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <_ZN11sensor_msgs11TemperatureC1Ev+0x3c>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd faec 	bl	80015c0 <_ZN8std_msgs6HeaderC1Ev>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	61da      	str	r2, [r3, #28]
    {
    }
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	08008be4 	.word	0x08008be4

08004008 <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1d18      	adds	r0, r3, #4
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	4413      	add	r3, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fd faed 	bl	8001600 <_ZNK8std_msgs6Header9serializeEPh>
 8004026:	4602      	mov	r2, r0
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint64_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8004034:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	440a      	add	r2, r1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8004042:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	0a0b      	lsrs	r3, r1, #8
 8004050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004054:	0a14      	lsrs	r4, r2, #8
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	3201      	adds	r2, #1
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	440a      	add	r2, r1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8004062:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	f04f 0400 	mov.w	r4, #0
 800406e:	0c0b      	lsrs	r3, r1, #16
 8004070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004074:	0c14      	lsrs	r4, r2, #16
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	3202      	adds	r2, #2
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	440a      	add	r2, r1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8004082:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f04f 0400 	mov.w	r4, #0
 800408e:	0e0b      	lsrs	r3, r1, #24
 8004090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004094:	0e14      	lsrs	r4, r2, #24
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	3203      	adds	r2, #3
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	440a      	add	r2, r1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_temperature.base >> (8 * 4)) & 0xFF;
 80040a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f04f 0400 	mov.w	r4, #0
 80040ae:	0013      	movs	r3, r2
 80040b0:	2400      	movs	r4, #0
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	3204      	adds	r2, #4
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	440a      	add	r2, r1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_temperature.base >> (8 * 5)) & 0xFF;
 80040be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	f04f 0400 	mov.w	r4, #0
 80040ca:	0a13      	lsrs	r3, r2, #8
 80040cc:	2400      	movs	r4, #0
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	3205      	adds	r2, #5
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	440a      	add	r2, r1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_temperature.base >> (8 * 6)) & 0xFF;
 80040da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	0c13      	lsrs	r3, r2, #16
 80040e8:	2400      	movs	r4, #0
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	3206      	adds	r2, #6
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	440a      	add	r2, r1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_temperature.base >> (8 * 7)) & 0xFF;
 80040f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	0e13      	lsrs	r3, r2, #24
 8004104:	2400      	movs	r4, #0
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	3207      	adds	r2, #7
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	440a      	add	r2, r1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->temperature);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 800411e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	440a      	add	r2, r1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 800412c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	0a0b      	lsrs	r3, r1, #8
 800413a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800413e:	0a14      	lsrs	r4, r2, #8
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	3201      	adds	r2, #1
 8004144:	6839      	ldr	r1, [r7, #0]
 8004146:	440a      	add	r2, r1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 800414c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	0c0b      	lsrs	r3, r1, #16
 800415a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800415e:	0c14      	lsrs	r4, r2, #16
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	3202      	adds	r2, #2
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	440a      	add	r2, r1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 800416c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	0e0b      	lsrs	r3, r1, #24
 800417a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800417e:	0e14      	lsrs	r4, r2, #24
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	3203      	adds	r2, #3
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	440a      	add	r2, r1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 800418c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	0013      	movs	r3, r2
 800419a:	2400      	movs	r4, #0
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	3204      	adds	r2, #4
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	440a      	add	r2, r1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 80041a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	0a13      	lsrs	r3, r2, #8
 80041b6:	2400      	movs	r4, #0
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	3205      	adds	r2, #5
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	440a      	add	r2, r1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 80041c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	f04f 0400 	mov.w	r4, #0
 80041d0:	0c13      	lsrs	r3, r2, #16
 80041d2:	2400      	movs	r4, #0
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	3206      	adds	r2, #6
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	440a      	add	r2, r1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 80041e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	0e13      	lsrs	r3, r2, #24
 80041ee:	2400      	movs	r4, #0
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	3207      	adds	r2, #7
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	440a      	add	r2, r1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3304      	adds	r3, #4
 8004200:	61fb      	str	r3, [r7, #28]
      return offset;
 8004202:	69fb      	ldr	r3, [r7, #28]
    }
 8004204:	4618      	mov	r0, r3
 8004206:	3724      	adds	r7, #36	; 0x24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004210:	b08b      	sub	sp, #44	; 0x2c
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	4413      	add	r3, r2
 8004226:	4619      	mov	r1, r3
 8004228:	f7fd fa82 	bl	8001730 <_ZN8std_msgs6Header11deserializeEPh>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	4413      	add	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_temperature;
      u_temperature.base = 0;
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004240:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	68b8      	ldr	r0, [r7, #8]
 8004248:	4403      	add	r3, r0
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	fa5f fa83 	uxtb.w	sl, r3
 8004250:	f04f 0b00 	mov.w	fp, #0
 8004254:	ea4a 0301 	orr.w	r3, sl, r1
 8004258:	ea4b 0402 	orr.w	r4, fp, r2
 800425c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004260:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	3301      	adds	r3, #1
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2d9      	uxtb	r1, r3
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	e9c7 3400 	strd	r3, r4, [r7]
 8004280:	0213      	lsls	r3, r2, #8
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	020b      	lsls	r3, r1, #8
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004294:	ea43 030a 	orr.w	r3, r3, sl
 8004298:	ea44 040b 	orr.w	r4, r4, fp
 800429c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80042a0:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	3302      	adds	r3, #2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4413      	add	r3, r2
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2d9      	uxtb	r1, r3
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	e9c7 3400 	strd	r3, r4, [r7]
 80042c0:	0413      	lsls	r3, r2, #16
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	040b      	lsls	r3, r1, #16
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80042d4:	ea43 030a 	orr.w	r3, r3, sl
 80042d8:	ea44 040b 	orr.w	r4, r4, fp
 80042dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	3303      	adds	r3, #3
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	4403      	add	r3, r0
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80042f8:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80042fc:	ea41 0308 	orr.w	r3, r1, r8
 8004300:	ea42 0409 	orr.w	r4, r2, r9
 8004304:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004308:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	3304      	adds	r3, #4
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	4403      	add	r3, r0
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	fa5f f883 	uxtb.w	r8, r3
 800431a:	f04f 0900 	mov.w	r9, #0
 800431e:	f04f 0a00 	mov.w	sl, #0
 8004322:	f04f 0b00 	mov.w	fp, #0
 8004326:	46c3      	mov	fp, r8
 8004328:	f04f 0a00 	mov.w	sl, #0
 800432c:	ea4a 0301 	orr.w	r3, sl, r1
 8004330:	ea4b 0402 	orr.w	r4, fp, r2
 8004334:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004338:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	3305      	adds	r3, #5
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	4403      	add	r3, r0
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	fa5f f883 	uxtb.w	r8, r3
 800434a:	f04f 0900 	mov.w	r9, #0
 800434e:	f04f 0a00 	mov.w	sl, #0
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 800435a:	f04f 0a00 	mov.w	sl, #0
 800435e:	ea4a 0301 	orr.w	r3, sl, r1
 8004362:	ea4b 0402 	orr.w	r4, fp, r2
 8004366:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800436a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	3306      	adds	r3, #6
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	4403      	add	r3, r0
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	fa5f f883 	uxtb.w	r8, r3
 800437c:	f04f 0900 	mov.w	r9, #0
 8004380:	f04f 0a00 	mov.w	sl, #0
 8004384:	f04f 0b00 	mov.w	fp, #0
 8004388:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800438c:	f04f 0a00 	mov.w	sl, #0
 8004390:	ea4a 0301 	orr.w	r3, sl, r1
 8004394:	ea4b 0402 	orr.w	r4, fp, r2
 8004398:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800439c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	3307      	adds	r3, #7
 80043a4:	68b8      	ldr	r0, [r7, #8]
 80043a6:	4403      	add	r3, r0
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	fa5f f883 	uxtb.w	r8, r3
 80043ae:	f04f 0900 	mov.w	r9, #0
 80043b2:	f04f 0a00 	mov.w	sl, #0
 80043b6:	f04f 0b00 	mov.w	fp, #0
 80043ba:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80043be:	f04f 0a00 	mov.w	sl, #0
 80043c2:	ea4a 0301 	orr.w	r3, sl, r1
 80043c6:	ea4b 0402 	orr.w	r4, fp, r2
 80043ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->temperature = u_temperature.real;
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->temperature);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	3304      	adds	r3, #4
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80043e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	4403      	add	r3, r0
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	fa5f f883 	uxtb.w	r8, r3
 80043f6:	f04f 0900 	mov.w	r9, #0
 80043fa:	ea48 0301 	orr.w	r3, r8, r1
 80043fe:	ea49 0402 	orr.w	r4, r9, r2
 8004402:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004406:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2d9      	uxtb	r1, r3
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0a00 	mov.w	sl, #0
 800441e:	f04f 0b00 	mov.w	fp, #0
 8004422:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8004426:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 800442a:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 800442e:	ea4a 0308 	orr.w	r3, sl, r8
 8004432:	ea4b 0409 	orr.w	r4, fp, r9
 8004436:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800443a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	3302      	adds	r3, #2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2d9      	uxtb	r1, r3
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0a00 	mov.w	sl, #0
 8004452:	f04f 0b00 	mov.w	fp, #0
 8004456:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800445a:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 800445e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8004462:	ea4a 0308 	orr.w	r3, sl, r8
 8004466:	ea4b 0409 	orr.w	r4, fp, r9
 800446a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800446e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	3303      	adds	r3, #3
 8004476:	68b8      	ldr	r0, [r7, #8]
 8004478:	4403      	add	r3, r0
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	0a1e      	lsrs	r6, r3, #8
 8004484:	061d      	lsls	r5, r3, #24
 8004486:	ea41 0305 	orr.w	r3, r1, r5
 800448a:	ea42 0406 	orr.w	r4, r2, r6
 800448e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004492:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3304      	adds	r3, #4
 800449a:	68b8      	ldr	r0, [r7, #8]
 800449c:	4403      	add	r3, r0
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2dd      	uxtb	r5, r3
 80044a2:	f04f 0600 	mov.w	r6, #0
 80044a6:	f04f 0800 	mov.w	r8, #0
 80044aa:	f04f 0900 	mov.w	r9, #0
 80044ae:	46a9      	mov	r9, r5
 80044b0:	f04f 0800 	mov.w	r8, #0
 80044b4:	ea48 0301 	orr.w	r3, r8, r1
 80044b8:	ea49 0402 	orr.w	r4, r9, r2
 80044bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80044c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	3305      	adds	r3, #5
 80044c8:	68b8      	ldr	r0, [r7, #8]
 80044ca:	4403      	add	r3, r0
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2dd      	uxtb	r5, r3
 80044d0:	f04f 0600 	mov.w	r6, #0
 80044d4:	f04f 0800 	mov.w	r8, #0
 80044d8:	f04f 0900 	mov.w	r9, #0
 80044dc:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80044e0:	f04f 0800 	mov.w	r8, #0
 80044e4:	ea48 0301 	orr.w	r3, r8, r1
 80044e8:	ea49 0402 	orr.w	r4, r9, r2
 80044ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80044f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3306      	adds	r3, #6
 80044f8:	68b8      	ldr	r0, [r7, #8]
 80044fa:	4403      	add	r3, r0
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2dd      	uxtb	r5, r3
 8004500:	f04f 0600 	mov.w	r6, #0
 8004504:	f04f 0800 	mov.w	r8, #0
 8004508:	f04f 0900 	mov.w	r9, #0
 800450c:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8004510:	f04f 0800 	mov.w	r8, #0
 8004514:	ea48 0301 	orr.w	r3, r8, r1
 8004518:	ea49 0402 	orr.w	r4, r9, r2
 800451c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004520:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	3307      	adds	r3, #7
 8004528:	68b8      	ldr	r0, [r7, #8]
 800452a:	4403      	add	r3, r0
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2dd      	uxtb	r5, r3
 8004530:	f04f 0600 	mov.w	r6, #0
 8004534:	f04f 0800 	mov.w	r8, #0
 8004538:	f04f 0900 	mov.w	r9, #0
 800453c:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8004540:	f04f 0800 	mov.w	r8, #0
 8004544:	ea48 0301 	orr.w	r3, r8, r1
 8004548:	ea49 0402 	orr.w	r4, r9, r2
 800454c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->variance);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	3304      	adds	r3, #4
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800455e:	4618      	mov	r0, r3
 8004560:	372c      	adds	r7, #44	; 0x2c
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004568 <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <_ZN11sensor_msgs11Temperature7getTypeEv+0x18>)
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08008b24 	.word	0x08008b24

08004584 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <_ZN11sensor_msgs11Temperature6getMD5Ev+0x18>)
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	08008b3c 	.word	0x08008b3c

080045a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045a4:	f001 f90f 	bl	80057c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045a8:	f000 f830 	bl	800460c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045ac:	f000 f912 	bl	80047d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80045b0:	f000 f8ea 	bl	8004788 <_ZL11MX_DMA_Initv>
  MX_USART6_UART_Init();
 80045b4:	f000 f8b4 	bl	8004720 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */
	nh.initNode();
 80045b8:	480e      	ldr	r0, [pc, #56]	; (80045f4 <main+0x54>)
 80045ba:	f000 fa41 	bl	8004a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 80045be:	490e      	ldr	r1, [pc, #56]	; (80045f8 <main+0x58>)
 80045c0:	480c      	ldr	r0, [pc, #48]	; (80045f4 <main+0x54>)
 80045c2:	f000 fa5a 	bl	8004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(odom_pub);
 80045c6:	490d      	ldr	r1, [pc, #52]	; (80045fc <main+0x5c>)
 80045c8:	480a      	ldr	r0, [pc, #40]	; (80045f4 <main+0x54>)
 80045ca:	f000 fa56 	bl	8004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	str_msg.data = hello;
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <main+0x60>)
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <main+0x64>)
 80045d2:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		chatter.publish(&str_msg);
 80045d4:	490a      	ldr	r1, [pc, #40]	; (8004600 <main+0x60>)
 80045d6:	4808      	ldr	r0, [pc, #32]	; (80045f8 <main+0x58>)
 80045d8:	f7fc feb1 	bl	800133e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		odom_pub.publish(&temp);
 80045dc:	490a      	ldr	r1, [pc, #40]	; (8004608 <main+0x68>)
 80045de:	4807      	ldr	r0, [pc, #28]	; (80045fc <main+0x5c>)
 80045e0:	f7fc fead 	bl	800133e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 80045e4:	4803      	ldr	r0, [pc, #12]	; (80045f4 <main+0x54>)
 80045e6:	f000 fa78 	bl	8004ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

		HAL_Delay(1000);
 80045ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ee:	f001 f947 	bl	8005880 <HAL_Delay>
		chatter.publish(&str_msg);
 80045f2:	e7ef      	b.n	80045d4 <main+0x34>
 80045f4:	200001e4 	.word	0x200001e4
 80045f8:	200008a8 	.word	0x200008a8
 80045fc:	20000a6c 	.word	0x20000a6c
 8004600:	200008a0 	.word	0x200008a0
 8004604:	20000000 	.word	0x20000000
 8004608:	20000a4c 	.word	0x20000a4c

0800460c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0b8      	sub	sp, #224	; 0xe0
 8004610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004616:	2234      	movs	r2, #52	; 0x34
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f003 ffb7 	bl	800858e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004620:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	2290      	movs	r2, #144	; 0x90
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f003 ffa8 	bl	800858e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <_Z18SystemClock_Configv+0x10c>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	4a35      	ldr	r2, [pc, #212]	; (8004718 <_Z18SystemClock_Configv+0x10c>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6413      	str	r3, [r2, #64]	; 0x40
 800464a:	4b33      	ldr	r3, [pc, #204]	; (8004718 <_Z18SystemClock_Configv+0x10c>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <_Z18SystemClock_Configv+0x110>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800465e:	4a2f      	ldr	r2, [pc, #188]	; (800471c <_Z18SystemClock_Configv+0x110>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b2d      	ldr	r3, [pc, #180]	; (800471c <_Z18SystemClock_Configv+0x110>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004672:	2302      	movs	r3, #2
 8004674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004678:	2301      	movs	r3, #1
 800467a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800467e:	2310      	movs	r3, #16
 8004680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800468a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800468e:	4618      	mov	r0, r3
 8004690:	f001 ff6c 	bl	800656c <HAL_RCC_OscConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80046a4:	f000 f8f2 	bl	800488c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a8:	230f      	movs	r3, #15
 80046aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80046c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f002 f9bf 	bl	8006a50 <HAL_RCC_ClockConfig>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80046e2:	f000 f8d3 	bl	800488c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80046e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80046ec:	2300      	movs	r3, #0
 80046ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046f0:	f107 0308 	add.w	r3, r7, #8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f002 fb79 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 800470a:	f000 f8bf 	bl	800488c <Error_Handler>
  }
}
 800470e:	bf00      	nop
 8004710:	37e0      	adds	r7, #224	; 0xe0
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000

08004720 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004726:	4a17      	ldr	r2, [pc, #92]	; (8004784 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004728:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 800472c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004730:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004746:	220c      	movs	r2, #12
 8004748:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004758:	2200      	movs	r2, #0
 800475a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 800475e:	2200      	movs	r2, #0
 8004760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <_ZL19MX_USART6_UART_Initv+0x60>)
 8004764:	f002 ff68 	bl	8007638 <HAL_UART_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8004778:	f000 f888 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200000a4 	.word	0x200000a4
 8004784:	40011400 	.word	0x40011400

08004788 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <_ZL11MX_DMA_Initv+0x48>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <_ZL11MX_DMA_Initv+0x48>)
 8004794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <_ZL11MX_DMA_Initv+0x48>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	2039      	movs	r0, #57	; 0x39
 80047ac:	f001 f965 	bl	8005a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80047b0:	2039      	movs	r0, #57	; 0x39
 80047b2:	f001 f97e 	bl	8005ab2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2045      	movs	r0, #69	; 0x45
 80047bc:	f001 f95d 	bl	8005a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80047c0:	2045      	movs	r0, #69	; 0x45
 80047c2:	f001 f976 	bl	8005ab2 <HAL_NVIC_EnableIRQ>

}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047da:	f107 030c 	add.w	r3, r7, #12
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	60da      	str	r2, [r3, #12]
 80047e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 80047f0:	f043 0320 	orr.w	r3, r3, #32
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	4a0d      	ldr	r2, [pc, #52]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	6313      	str	r3, [r2, #48]	; 0x30
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <_ZL12MX_GPIO_Initv+0x68>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800481a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800481e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004820:	2303      	movs	r3, #3
 8004822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4619      	mov	r1, r3
 800482e:	4804      	ldr	r0, [pc, #16]	; (8004840 <_ZL12MX_GPIO_Initv+0x6c>)
 8004830:	f001 fcf2 	bl	8006218 <HAL_GPIO_Init>

}
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	40021400 	.word	0x40021400

08004844 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <HAL_UART_TxCpltCallback+0x20>)
 800484e:	f000 fb20 	bl	8004e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004852:	4603      	mov	r3, r0
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc fe09 	bl	800146c <_ZN13STM32Hardware5flushEv>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200001e4 	.word	0x200001e4

08004868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8004870:	4805      	ldr	r0, [pc, #20]	; (8004888 <HAL_UART_RxCpltCallback+0x20>)
 8004872:	f000 fb0e 	bl	8004e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004876:	4603      	mov	r3, r0
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc fdba 	bl	80013f2 <_ZN13STM32Hardware10reset_rbufEv>
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200001e4 	.word	0x200001e4

0800488c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d80d      	bhi.n	80048ca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	fa22 f103 	lsr.w	r1, r2, r3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	b2ca      	uxtb	r2, r1
 80048c0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e7ee      	b.n	80048a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d811      	bhi.n	8004914 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	440a      	add	r2, r1
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	4611      	mov	r1, r2
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	00d2      	lsls	r2, r2, #3
 8004902:	fa01 f202 	lsl.w	r2, r1, r2
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e7ea      	b.n	80048ea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	08008cd4 	.word	0x08008cd4

08004940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ffe8 	bl	8004920 <_ZN3ros15NodeHandleBase_C1Ev>
 8004950:	4a3a      	ldr	r2, [pc, #232]	; (8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fd22 	bl	80013a4 <_ZN13STM32HardwareC1Ev>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fa0c 	bl	8000d8c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b18      	cmp	r3, #24
 800497c:	d80b      	bhi.n	8004996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	2200      	movs	r2, #0
 800498c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e7f0      	b.n	8004978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b18      	cmp	r3, #24
 800499e:	d80a      	bhi.n	80049b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 80049a8:	2100      	movs	r1, #0
 80049aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e7f1      	b.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	d20a      	bcs.n	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e7f0      	b.n	80049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e2:	d20a      	bcs.n	80049fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	e7f0      	b.n	80049dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c3 2698 	str.w	r2, [r3, #1688]	; 0x698
    req_param_resp.ints = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
    req_param_resp.floats_length = 0;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    req_param_resp.floats = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
    req_param_resp.ints_length = 0;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2698 	str.w	r2, [r3, #1688]	; 0x698
    req_param_resp.ints = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

    spin_timeout_ = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  }
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08008bd0 	.word	0x08008bd0

08004a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc fcc5 	bl	80013dc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
    bytes_ = 0;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
    index_ = 0;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
    topic_ = 0;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
  };
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b18      	cmp	r3, #24
 8004a8c:	dc1e      	bgt.n	8004acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	60da      	str	r2, [r3, #12]
        return true;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e004      	b.n	8004ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e7dd      	b.n	8004a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004acc:	2300      	movs	r3, #0
  }
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc fd5e 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8004aec:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d903      	bls.n	8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
    if (mode_ != MODE_FIRST_FF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 368c 	ldr.w	r3, [r3, #1676]	; 0x68c
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d903      	bls.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
      if (spin_timeout_ > 0)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d014      	beq.n	8004b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc fd37 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b46:	429a      	cmp	r2, r3
 8004b48:	bf8c      	ite	hi
 8004b4a:	2301      	movhi	r3, #1
 8004b4c:	2300      	movls	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8004b54:	f06f 0301 	mvn.w	r3, #1
 8004b58:	e197      	b.n	8004e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fc57 	bl	8001412 <_ZN13STM32Hardware4readEv>
 8004b64:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f2c0 8177 	blt.w	8004e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 267c 	ldr.w	r2, [r3, #1660]	; 0x67c
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004b84:	2b07      	cmp	r3, #7
 8004b86:	d11e      	bne.n	8004bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	f8c2 1678 	str.w	r1, [r2, #1656]	; 0x678
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	b2d1      	uxtb	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
        bytes_--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1b4      	bne.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004bc4:	e7af      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d128      	bne.n	8004c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2bff      	cmp	r3, #255	; 0xff
 8004bd4:	d10d      	bne.n	8004bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f103 0214 	add.w	r2, r3, #20
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 8004bf0:	e799      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc fcd6 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bf8c      	ite	hi
 8004c0a:	2301      	movhi	r3, #1
 8004c0c:	2300      	movls	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d088      	beq.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
          return SPIN_TIMEOUT;
 8004c1c:	f06f 0301 	mvn.w	r3, #1
 8004c20:	e133      	b.n	8004e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11b      	bne.n	8004c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2bfe      	cmp	r3, #254	; 0xfe
 8004c30:	d107      	bne.n	8004c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004c40:	e771      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
          if (configured_ == false)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8004c50:	f083 0301 	eor.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f43f af65 	beq.w	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f924 	bl	8004eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004c62:	e760      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d113      	bne.n	8004c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        index_ = 0;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        mode_++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        checksum_ = data;               /* first byte for calculating size checksum */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 8004c94:	e747      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d110      	bne.n	8004cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 2670 	ldr.w	r2, [r3, #1648]	; 0x670
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	441a      	add	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
        mode_++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004cc0:	e731      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d116      	bne.n	8004cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 8004cd2:	425a      	negs	r2, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	bf58      	it	pl
 8004cda:	4253      	negpl	r3, r2
 8004cdc:	2bff      	cmp	r3, #255	; 0xff
 8004cde:	d107      	bne.n	8004cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004cee:	e71a      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004cf8:	e715      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d10f      	bne.n	8004d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        checksum_ = data;               /* first byte included in checksum */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 8004d22:	e700      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d117      	bne.n	8004d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 2674 	ldr.w	r2, [r3, #1652]	; 0x674
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
        mode_ = MODE_MESSAGE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2207      	movs	r2, #7
 8004d44:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        if (bytes_ == 0)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f aee9 	bne.w	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2208      	movs	r2, #8
 8004d58:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8004d5c:	e6e3      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	f47f aede 	bne.w	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
        if ((checksum_ % 256) == 255)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 8004d78:	425a      	negs	r2, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	bf58      	it	pl
 8004d80:	4253      	negpl	r3, r2
 8004d82:	2bff      	cmp	r3, #255	; 0xff
 8004d84:	f47f aecf 	bne.w	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f889 	bl	8004eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f8a4 	bl	8004ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
            last_sync_receive_time = c_time;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            return SPIN_ERR;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004db2:	e06a      	b.n	8004e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004dba:	2b0a      	cmp	r3, #10
 8004dbc:	d107      	bne.n	8004dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f96c 	bl	80050a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004dcc:	e6ab      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004dd4:	2b06      	cmp	r3, #6
 8004dd6:	d10e      	bne.n	8004df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f7fc f905 	bl	8000ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8004df4:	e697      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004dfc:	2b0b      	cmp	r3, #11
 8004dfe:	d104      	bne.n	8004e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8004e08:	e68d      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004e10:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f43f ae81 	beq.w	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004e2a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004e34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004e3e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	f502 72d2 	add.w	r2, r2, #420	; 0x1a4
 8004e56:	4611      	mov	r1, r2
 8004e58:	4798      	blx	r3
    while (true)
 8004e5a:	e664      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004e5c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00f      	beq.n	8004e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d906      	bls.n	8004e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f815 	bl	8004eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
    return SPIN_OK;
 8004e88:	2300      	movs	r3, #0
  }
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
  }
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fc04 	bl	80006c4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f107 020c 	add.w	r2, r7, #12
 8004ec6:	210a      	movs	r1, #10
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
    rt_time = hardware_.time();
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fc fb69 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  }
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004ee6:	b590      	push	{r4, r7, lr}
 8004ee8:	b08b      	sub	sp, #44	; 0x2c
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004eee:	f107 030c 	add.w	r3, r7, #12
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fb fcd6 	bl	80008a4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2b18      	cmp	r3, #24
 8004f00:	dc63      	bgt.n	8004fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d056      	beq.n	8004fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4608      	mov	r0, r1
 8004f62:	4798      	blx	r3
 8004f64:	4603      	mov	r3, r0
 8004f66:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4798      	blx	r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fc f9d8 	bl	8001366 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc8:	e798      	b.n	8004efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b18      	cmp	r3, #24
 8004fd2:	dc5f      	bgt.n	8005094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d053      	beq.n	800508c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffa:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 800500e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4608      	mov	r0, r1
 8005026:	4798      	blx	r3
 8005028:	4603      	mov	r3, r0
 800502a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8005034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503c:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8005040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4608      	mov	r0, r1
 800504c:	4798      	blx	r3
 800504e:	4603      	mov	r3, r0
 8005050:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005056:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8005066:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8005072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4608      	mov	r0, r1
 800507e:	4798      	blx	r3
 8005080:	4601      	mov	r1, r0
 8005082:	f107 030c 	add.w	r3, r7, #12
 8005086:	461a      	mov	r2, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	3301      	adds	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	e79c      	b.n	8004fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
  }
 800509c:	bf00      	nop
 800509e:	372c      	adds	r7, #44	; 0x2c
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}

080050a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fb06 	bl	80006c4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fc fa73 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 80050c2:	4602      	mov	r2, r0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fb fb65 	bl	80007a4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4915      	ldr	r1, [pc, #84]	; (8005134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80050e0:	fba1 1303 	umull	r1, r3, r1, r3
 80050e4:	099b      	lsrs	r3, r3, #6
 80050e6:	4413      	add	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80050ea:	6939      	ldr	r1, [r7, #16]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80050f0:	fba3 0302 	umull	r0, r3, r3, r2
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050fa:	fb00 f303 	mul.w	r3, r0, r3
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	440b      	add	r3, r1
 8005108:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8a4 	bl	8005260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7fc fa43 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
  }
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	10624dd3 	.word	0x10624dd3
 8005138:	000f4240 	.word	0x000f4240

0800513c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b63      	cmp	r3, #99	; 0x63
 800514c:	dd09      	ble.n	8005162 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800515e:	2300      	movs	r3, #0
 8005160:	e077      	b.n	8005252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 7269 	add.w	r2, r2, #932	; 0x3a4
 800516e:	3207      	adds	r2, #7
 8005170:	4611      	mov	r1, r2
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	22ff      	movs	r2, #255	; 0xff
 800517c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
    message_out[1] = PROTOCOL_VER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	22fe      	movs	r2, #254	; 0xfe
 8005184:	f883 23a5 	strb.w	r2, [r3, #933]	; 0x3a5
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	b29b      	uxth	r3, r3
 8005196:	121b      	asrs	r3, r3, #8
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 23a6 	ldrb.w	r2, [r3, #934]	; 0x3a6
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 80051ac:	4413      	add	r3, r2
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	121b      	asrs	r3, r3, #8
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa

    /* calculate checksum */
    int chk = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80051d6:	2305      	movs	r3, #5
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	3307      	adds	r3, #7
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	da0d      	bge.n	8005200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	3301      	adds	r3, #1
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e7ec      	b.n	80051da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	3307      	adds	r3, #7
 8005204:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	425a      	negs	r2, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	bf58      	it	pl
 8005210:	4253      	negpl	r3, r2
 8005212:	b2da      	uxtb	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6179      	str	r1, [r7, #20]
 800521a:	43d2      	mvns	r2, r2
 800521c:	b2d1      	uxtb	r1, r2
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	460a      	mov	r2, r1
 8005224:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

    if (l <= OUTPUT_SIZE)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522e:	dc0a      	bgt.n	8005246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1d18      	adds	r0, r3, #4
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4619      	mov	r1, r3
 800523e:	f7fc f96f 	bl	8001520 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	e005      	b.n	8005252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005246:	4905      	ldr	r1, [pc, #20]	; (800525c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f849 	bl	80052e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	08008b60 	.word	0x08008b60

08005260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fc f99a 	bl	80015a8 <_ZN13STM32Hardware4timeEv>
 8005274:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4915      	ldr	r1, [pc, #84]	; (80052d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800527e:	fba1 1303 	umull	r1, r3, r1, r3
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005296:	fba3 0302 	umull	r0, r3, r3, r2
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052a0:	fb00 f303 	mul.w	r3, r0, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	1aca      	subs	r2, r1, r3
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80052b0:	4413      	add	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    normalizeSecNSec(sec_offset, nsec_offset);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fa28 	bl	800571c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	10624dd3 	.word	0x10624dd3
 80052d8:	000f4240 	.word	0x000f4240
 80052dc:	3b9aca00 	.word	0x3b9aca00

080052e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	2103      	movs	r1, #3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f804 	bl	80052fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	460b      	mov	r3, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb fc8c 	bl	8000c2c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005314:	7afb      	ldrb	r3, [r7, #11]
 8005316:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f107 0214 	add.w	r2, r7, #20
 8005326:	2107      	movs	r1, #7
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	4798      	blx	r3
  }
 800532c:	bf00      	nop
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_Z41__static_initialization_and_destruction_0ii>:
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d11c      	bne.n	800537e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800534a:	4293      	cmp	r3, r2
 800534c:	d117      	bne.n	800537e <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle nh;
 800534e:	480e      	ldr	r0, [pc, #56]	; (8005388 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005350:	f7ff faf6 	bl	8004940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8005354:	480d      	ldr	r0, [pc, #52]	; (800538c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005356:	f7fb f907 	bl	8000568 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800535a:	2300      	movs	r3, #0
 800535c:	4a0b      	ldr	r2, [pc, #44]	; (800538c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800535e:	490c      	ldr	r1, [pc, #48]	; (8005390 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005362:	f7fb ffd5 	bl	8001310 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odometry;
 8005366:	480c      	ldr	r0, [pc, #48]	; (8005398 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005368:	f7fe fd38 	bl	8003ddc <_ZN8nav_msgs8OdometryC1Ev>
sensor_msgs::Temperature temp;
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800536e:	f7fe fe2b 	bl	8003fc8 <_ZN11sensor_msgs11TemperatureC1Ev>
ros::Publisher odom_pub("odom", &temp);
 8005372:	2300      	movs	r3, #0
 8005374:	4a09      	ldr	r2, [pc, #36]	; (800539c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005376:	490a      	ldr	r1, [pc, #40]	; (80053a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005378:	480a      	ldr	r0, [pc, #40]	; (80053a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800537a:	f7fb ffc9 	bl	8001310 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200001e4 	.word	0x200001e4
 800538c:	200008a0 	.word	0x200008a0
 8005390:	08008b9c 	.word	0x08008b9c
 8005394:	200008a8 	.word	0x200008a8
 8005398:	200008bc 	.word	0x200008bc
 800539c:	20000a4c 	.word	0x20000a4c
 80053a0:	08008ba4 	.word	0x08008ba4
 80053a4:	20000a6c 	.word	0x20000a6c

080053a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
    return configured_;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
  };
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <_GLOBAL__sub_I_huart6>:
 80053c2:	b580      	push	{r7, lr}
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053ca:	2001      	movs	r0, #1
 80053cc:	f7ff ffb2 	bl	8005334 <_Z41__static_initialization_and_destruction_0ii>
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_MspInit+0x44>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <HAL_MspInit+0x44>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <HAL_MspInit+0x44>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_MspInit+0x44>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <HAL_MspInit+0x44>)
 80053f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053fc:	6453      	str	r3, [r2, #68]	; 0x44
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <HAL_MspInit+0x44>)
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800

0800541c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005424:	f107 0314 	add.w	r3, r7, #20
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a49      	ldr	r2, [pc, #292]	; (8005560 <HAL_UART_MspInit+0x144>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f040 808c 	bne.w	8005558 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005440:	4b48      	ldr	r3, [pc, #288]	; (8005564 <HAL_UART_MspInit+0x148>)
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	4a47      	ldr	r2, [pc, #284]	; (8005564 <HAL_UART_MspInit+0x148>)
 8005446:	f043 0320 	orr.w	r3, r3, #32
 800544a:	6453      	str	r3, [r2, #68]	; 0x44
 800544c:	4b45      	ldr	r3, [pc, #276]	; (8005564 <HAL_UART_MspInit+0x148>)
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005458:	4b42      	ldr	r3, [pc, #264]	; (8005564 <HAL_UART_MspInit+0x148>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4a41      	ldr	r2, [pc, #260]	; (8005564 <HAL_UART_MspInit+0x148>)
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	6313      	str	r3, [r2, #48]	; 0x30
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_UART_MspInit+0x148>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005470:	23c0      	movs	r3, #192	; 0xc0
 8005472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800547c:	2303      	movs	r3, #3
 800547e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005480:	2308      	movs	r3, #8
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4619      	mov	r1, r3
 800548a:	4837      	ldr	r0, [pc, #220]	; (8005568 <HAL_UART_MspInit+0x14c>)
 800548c:	f000 fec4 	bl	8006218 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005490:	4b36      	ldr	r3, [pc, #216]	; (800556c <HAL_UART_MspInit+0x150>)
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <HAL_UART_MspInit+0x154>)
 8005494:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005496:	4b35      	ldr	r3, [pc, #212]	; (800556c <HAL_UART_MspInit+0x150>)
 8005498:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800549c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800549e:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_UART_MspInit+0x150>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054a4:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_UART_MspInit+0x150>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054aa:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_UART_MspInit+0x150>)
 80054ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054b0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054b2:	4b2e      	ldr	r3, [pc, #184]	; (800556c <HAL_UART_MspInit+0x150>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054b8:	4b2c      	ldr	r3, [pc, #176]	; (800556c <HAL_UART_MspInit+0x150>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_UART_MspInit+0x150>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054c4:	4b29      	ldr	r3, [pc, #164]	; (800556c <HAL_UART_MspInit+0x150>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_UART_MspInit+0x150>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80054d0:	4826      	ldr	r0, [pc, #152]	; (800556c <HAL_UART_MspInit+0x150>)
 80054d2:	f000 fb09 	bl	8005ae8 <HAL_DMA_Init>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80054dc:	f7ff f9d6 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_UART_MspInit+0x150>)
 80054e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80054e6:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_UART_MspInit+0x150>)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80054ec:	4b21      	ldr	r3, [pc, #132]	; (8005574 <HAL_UART_MspInit+0x158>)
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_UART_MspInit+0x15c>)
 80054f0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80054f2:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_UART_MspInit+0x158>)
 80054f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80054f8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_UART_MspInit+0x158>)
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005500:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005502:	2200      	movs	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005506:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800550c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005510:	2200      	movs	r2, #0
 8005512:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005516:	2200      	movs	r2, #0
 8005518:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_UART_MspInit+0x158>)
 800551c:	2200      	movs	r2, #0
 800551e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005522:	2200      	movs	r2, #0
 8005524:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005528:	2200      	movs	r2, #0
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800552c:	4811      	ldr	r0, [pc, #68]	; (8005574 <HAL_UART_MspInit+0x158>)
 800552e:	f000 fadb 	bl	8005ae8 <HAL_DMA_Init>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8005538:	f7ff f9a8 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005540:	669a      	str	r2, [r3, #104]	; 0x68
 8005542:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <HAL_UART_MspInit+0x158>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005548:	2200      	movs	r2, #0
 800554a:	2100      	movs	r1, #0
 800554c:	2047      	movs	r0, #71	; 0x47
 800554e:	f000 fa94 	bl	8005a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005552:	2047      	movs	r0, #71	; 0x47
 8005554:	f000 faad 	bl	8005ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005558:	bf00      	nop
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40011400 	.word	0x40011400
 8005564:	40023800 	.word	0x40023800
 8005568:	40020800 	.word	0x40020800
 800556c:	20000124 	.word	0x20000124
 8005570:	40026428 	.word	0x40026428
 8005574:	20000184 	.word	0x20000184
 8005578:	400264a0 	.word	0x400264a0

0800557c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800558e:	e7fe      	b.n	800558e <HardFault_Handler+0x4>

08005590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005594:	e7fe      	b.n	8005594 <MemManage_Handler+0x4>

08005596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <BusFault_Handler+0x4>

0800559c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <UsageFault_Handler+0x4>

080055a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055c2:	bf00      	nop
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d0:	f000 f936 	bl	8005840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80055dc:	4802      	ldr	r0, [pc, #8]	; (80055e8 <DMA2_Stream1_IRQHandler+0x10>)
 80055de:	f000 fbb3 	bl	8005d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000124 	.word	0x20000124

080055ec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <DMA2_Stream6_IRQHandler+0x10>)
 80055f2:	f000 fba9 	bl	8005d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000184 	.word	0x20000184

08005600 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005604:	4802      	ldr	r0, [pc, #8]	; (8005610 <USART6_IRQHandler+0x10>)
 8005606:	f002 f965 	bl	80078d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200000a4 	.word	0x200000a4

08005614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
	return 1;
 8005618:	2301      	movs	r3, #1
}
 800561a:	4618      	mov	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_kill>:

int _kill(int pid, int sig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800562e:	f002 ff79 	bl	8008524 <__errno>
 8005632:	4602      	mov	r2, r0
 8005634:	2316      	movs	r3, #22
 8005636:	6013      	str	r3, [r2, #0]
	return -1;
 8005638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_exit>:

void _exit (int status)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800564c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ffe7 	bl	8005624 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005656:	e7fe      	b.n	8005656 <_exit+0x12>

08005658 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <_sbrk+0x50>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <_sbrk+0x16>
		heap_end = &end;
 8005668:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <_sbrk+0x50>)
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <_sbrk+0x54>)
 800566c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <_sbrk+0x50>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <_sbrk+0x50>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	466a      	mov	r2, sp
 800567e:	4293      	cmp	r3, r2
 8005680:	d907      	bls.n	8005692 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005682:	f002 ff4f 	bl	8008524 <__errno>
 8005686:	4602      	mov	r2, r0
 8005688:	230c      	movs	r3, #12
 800568a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800568c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005690:	e006      	b.n	80056a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <_sbrk+0x50>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	4a03      	ldr	r2, [pc, #12]	; (80056a8 <_sbrk+0x50>)
 800569c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000a80 	.word	0x20000a80
 80056ac:	20000a98 	.word	0x20000a98

080056b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <SystemInit+0x5c>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	4a14      	ldr	r2, [pc, #80]	; (800570c <SystemInit+0x5c>)
 80056bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <SystemInit+0x60>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a11      	ldr	r2, [pc, #68]	; (8005710 <SystemInit+0x60>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <SystemInit+0x60>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <SystemInit+0x60>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	490d      	ldr	r1, [pc, #52]	; (8005710 <SystemInit+0x60>)
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <SystemInit+0x64>)
 80056de:	4013      	ands	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <SystemInit+0x60>)
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <SystemInit+0x68>)
 80056e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <SystemInit+0x60>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a08      	ldr	r2, [pc, #32]	; (8005710 <SystemInit+0x60>)
 80056ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <SystemInit+0x60>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <SystemInit+0x5c>)
 80056fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005700:	609a      	str	r2, [r3, #8]
#endif
}
 8005702:	bf00      	nop
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	40023800 	.word	0x40023800
 8005714:	fef6ffff 	.word	0xfef6ffff
 8005718:	24003010 	.word	0x24003010

0800571c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	0a5a      	lsrs	r2, r3, #9
 800572c:	490f      	ldr	r1, [pc, #60]	; (800576c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800572e:	fba1 1202 	umull	r1, r2, r1, r2
 8005732:	09d2      	lsrs	r2, r2, #7
 8005734:	490e      	ldr	r1, [pc, #56]	; (8005770 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005736:	fb01 f202 	mul.w	r2, r1, r2
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	0a5b      	lsrs	r3, r3, #9
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	09db      	lsrs	r3, r3, #7
 800574c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	00044b83 	.word	0x00044b83
 8005770:	3b9aca00 	.word	0x3b9aca00

08005774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800577a:	e003      	b.n	8005784 <LoopCopyDataInit>

0800577c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800577e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005782:	3104      	adds	r1, #4

08005784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005784:	480b      	ldr	r0, [pc, #44]	; (80057b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800578a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800578c:	d3f6      	bcc.n	800577c <CopyDataInit>
  ldr  r2, =_sbss
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005790:	e002      	b.n	8005798 <LoopFillZerobss>

08005792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005794:	f842 3b04 	str.w	r3, [r2], #4

08005798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800579a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800579c:	d3f9      	bcc.n	8005792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800579e:	f7ff ff87 	bl	80056b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057a2:	f002 fec5 	bl	8008530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057a6:	f7fe fefb 	bl	80045a0 <main>
  bx  lr    
 80057aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057ac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80057b0:	08008da4 	.word	0x08008da4
  ldr  r0, =_sdata
 80057b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057b8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80057bc:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80057c0:	20000a94 	.word	0x20000a94

080057c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057c4:	e7fe      	b.n	80057c4 <ADC_IRQHandler>

080057c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ca:	2003      	movs	r0, #3
 80057cc:	f000 f94a 	bl	8005a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057d0:	2000      	movs	r0, #0
 80057d2:	f000 f805 	bl	80057e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80057d6:	f7ff fdfd 	bl	80053d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_InitTick+0x54>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_InitTick+0x58>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	4619      	mov	r1, r3
 80057f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f965 	bl	8005ace <HAL_SYSTICK_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e00e      	b.n	800582c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d80a      	bhi.n	800582a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005814:	2200      	movs	r2, #0
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800581c:	f000 f92d 	bl	8005a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <HAL_InitTick+0x5c>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000010 	.word	0x20000010
 8005838:	20000018 	.word	0x20000018
 800583c:	20000014 	.word	0x20000014

08005840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_IncTick+0x20>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_IncTick+0x24>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4413      	add	r3, r2
 8005850:	4a04      	ldr	r2, [pc, #16]	; (8005864 <HAL_IncTick+0x24>)
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000018 	.word	0x20000018
 8005864:	20000a8c 	.word	0x20000a8c

08005868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return uwTick;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <HAL_GetTick+0x14>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000a8c 	.word	0x20000a8c

08005880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7ff ffee 	bl	8005868 <HAL_GetTick>
 800588c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d005      	beq.n	80058a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <HAL_Delay+0x40>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058a6:	bf00      	nop
 80058a8:	f7ff ffde 	bl	8005868 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d8f7      	bhi.n	80058a8 <HAL_Delay+0x28>
  {
  }
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000018 	.word	0x20000018

080058c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <__NVIC_SetPriorityGrouping+0x40>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e0:	4013      	ands	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <__NVIC_SetPriorityGrouping+0x44>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <__NVIC_SetPriorityGrouping+0x40>)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	60d3      	str	r3, [r2, #12]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000ed00 	.word	0xe000ed00
 8005908:	05fa0000 	.word	0x05fa0000

0800590c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <__NVIC_GetPriorityGrouping+0x18>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	0a1b      	lsrs	r3, r3, #8
 8005916:	f003 0307 	and.w	r3, r3, #7
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	db0b      	blt.n	8005952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	f003 021f 	and.w	r2, r3, #31
 8005940:	4907      	ldr	r1, [pc, #28]	; (8005960 <__NVIC_EnableIRQ+0x38>)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2001      	movs	r0, #1
 800594a:	fa00 f202 	lsl.w	r2, r0, r2
 800594e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000e100 	.word	0xe000e100

08005964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db0a      	blt.n	800598e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	490c      	ldr	r1, [pc, #48]	; (80059b0 <__NVIC_SetPriority+0x4c>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	0112      	lsls	r2, r2, #4
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	440b      	add	r3, r1
 8005988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800598c:	e00a      	b.n	80059a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	4908      	ldr	r1, [pc, #32]	; (80059b4 <__NVIC_SetPriority+0x50>)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	3b04      	subs	r3, #4
 800599c:	0112      	lsls	r2, r2, #4
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	440b      	add	r3, r1
 80059a2:	761a      	strb	r2, [r3, #24]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000e100 	.word	0xe000e100
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f1c3 0307 	rsb	r3, r3, #7
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	bf28      	it	cs
 80059d6:	2304      	movcs	r3, #4
 80059d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3304      	adds	r3, #4
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d902      	bls.n	80059e8 <NVIC_EncodePriority+0x30>
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3b03      	subs	r3, #3
 80059e6:	e000      	b.n	80059ea <NVIC_EncodePriority+0x32>
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43da      	mvns	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	401a      	ands	r2, r3
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	43d9      	mvns	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a10:	4313      	orrs	r3, r2
         );
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a30:	d301      	bcc.n	8005a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a32:	2301      	movs	r3, #1
 8005a34:	e00f      	b.n	8005a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <SysTick_Config+0x40>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a3e:	210f      	movs	r1, #15
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a44:	f7ff ff8e 	bl	8005964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <SysTick_Config+0x40>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <SysTick_Config+0x40>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	e000e010 	.word	0xe000e010

08005a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff29 	bl	80058c4 <__NVIC_SetPriorityGrouping>
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b086      	sub	sp, #24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	4603      	mov	r3, r0
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a8c:	f7ff ff3e 	bl	800590c <__NVIC_GetPriorityGrouping>
 8005a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f7ff ff8e 	bl	80059b8 <NVIC_EncodePriority>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ff5d 	bl	8005964 <__NVIC_SetPriority>
}
 8005aaa:	bf00      	nop
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	4603      	mov	r3, r0
 8005aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ff31 	bl	8005928 <__NVIC_EnableIRQ>
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ffa2 	bl	8005a20 <SysTick_Config>
 8005adc:	4603      	mov	r3, r0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005af4:	f7ff feb8 	bl	8005868 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e099      	b.n	8005c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b24:	e00f      	b.n	8005b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b26:	f7ff fe9f 	bl	8005868 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d908      	bls.n	8005b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e078      	b.n	8005c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e8      	bne.n	8005b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <HAL_DMA_Init+0x158>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d107      	bne.n	8005bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0307 	bic.w	r3, r3, #7
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d117      	bne.n	8005c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fa99 	bl	8006124 <DMA_CheckFifoParam>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2240      	movs	r2, #64	; 0x40
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c06:	2301      	movs	r3, #1
 8005c08:	e016      	b.n	8005c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa50 	bl	80060b8 <DMA_CalcBaseAndBitshift>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	223f      	movs	r2, #63	; 0x3f
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	e010803f 	.word	0xe010803f

08005c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_DMA_Start_IT+0x26>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e048      	b.n	8005cfc <HAL_DMA_Start_IT+0xb8>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d137      	bne.n	8005cee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f9e2 	bl	800605c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	223f      	movs	r2, #63	; 0x3f
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0216 	orr.w	r2, r2, #22
 8005cb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cc2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0208 	orr.w	r2, r2, #8
 8005cda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e005      	b.n	8005cfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00c      	b.n	8005d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2205      	movs	r2, #5
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005d54:	4b92      	ldr	r3, [pc, #584]	; (8005fa0 <HAL_DMA_IRQHandler+0x258>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a92      	ldr	r2, [pc, #584]	; (8005fa4 <HAL_DMA_IRQHandler+0x25c>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0a9b      	lsrs	r3, r3, #10
 8005d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	2208      	movs	r2, #8
 8005d74:	409a      	lsls	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01a      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da0:	2208      	movs	r2, #8
 8005da2:	409a      	lsls	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	f043 0201 	orr.w	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	2201      	movs	r2, #1
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d012      	beq.n	8005dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	f043 0202 	orr.w	r2, r3, #2
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dee:	2204      	movs	r2, #4
 8005df0:	409a      	lsls	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	f043 0204 	orr.w	r2, r3, #4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e24:	2210      	movs	r2, #16
 8005e26:	409a      	lsls	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d043      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03c      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e42:	2210      	movs	r2, #16
 8005e44:	409a      	lsls	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d024      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	e01f      	b.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	e016      	b.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0208 	bic.w	r2, r2, #8
 8005ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 808e 	beq.w	8005fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8086 	beq.w	8005fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	2220      	movs	r2, #32
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d136      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0216 	bic.w	r2, r2, #22
 8005f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_DMA_IRQHandler+0x1da>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0208 	bic.w	r2, r2, #8
 8005f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f36:	223f      	movs	r2, #63	; 0x3f
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d07d      	beq.n	8006052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
        }
        return;
 8005f5e:	e078      	b.n	8006052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01c      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d030      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
 8005f8c:	e02b      	b.n	8005fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d027      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
 8005f9e:	e022      	b.n	8005fe6 <HAL_DMA_IRQHandler+0x29e>
 8005fa0:	20000010 	.word	0x20000010
 8005fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0210 	bic.w	r2, r2, #16
 8005fc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d032      	beq.n	8006054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d022      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2205      	movs	r2, #5
 8005ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3301      	adds	r3, #1
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	429a      	cmp	r2, r3
 800601c:	d307      	bcc.n	800602e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f2      	bne.n	8006012 <HAL_DMA_IRQHandler+0x2ca>
 800602c:	e000      	b.n	8006030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800602e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	e000      	b.n	8006054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006052:	bf00      	nop
    }
  }
}
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006078:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d108      	bne.n	800609c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800609a:	e007      	b.n	80060ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	3b10      	subs	r3, #16
 80060c8:	4a13      	ldr	r2, [pc, #76]	; (8006118 <DMA_CalcBaseAndBitshift+0x60>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060d2:	4a12      	ldr	r2, [pc, #72]	; (800611c <DMA_CalcBaseAndBitshift+0x64>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d908      	bls.n	80060f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <DMA_CalcBaseAndBitshift+0x68>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	1d1a      	adds	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	659a      	str	r2, [r3, #88]	; 0x58
 80060f6:	e006      	b.n	8006106 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b08      	ldr	r3, [pc, #32]	; (8006120 <DMA_CalcBaseAndBitshift+0x68>)
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	aaaaaaab 	.word	0xaaaaaaab
 800611c:	08008d88 	.word	0x08008d88
 8006120:	fffffc00 	.word	0xfffffc00

08006124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11f      	bne.n	800617e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d855      	bhi.n	80061f0 <DMA_CheckFifoParam+0xcc>
 8006144:	a201      	add	r2, pc, #4	; (adr r2, 800614c <DMA_CheckFifoParam+0x28>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800616f 	.word	0x0800616f
 8006154:	0800615d 	.word	0x0800615d
 8006158:	080061f1 	.word	0x080061f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d045      	beq.n	80061f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800616c:	e042      	b.n	80061f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006176:	d13f      	bne.n	80061f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800617c:	e03c      	b.n	80061f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006186:	d121      	bne.n	80061cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d836      	bhi.n	80061fc <DMA_CheckFifoParam+0xd8>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <DMA_CheckFifoParam+0x70>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061ab 	.word	0x080061ab
 800619c:	080061a5 	.word	0x080061a5
 80061a0:	080061bd 	.word	0x080061bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
      break;
 80061a8:	e02f      	b.n	800620a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d024      	beq.n	8006200 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ba:	e021      	b.n	8006200 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061c4:	d11e      	bne.n	8006204 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061ca:	e01b      	b.n	8006204 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d902      	bls.n	80061d8 <DMA_CheckFifoParam+0xb4>
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d003      	beq.n	80061de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061d6:	e018      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e015      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	e00b      	b.n	8006208 <DMA_CheckFifoParam+0xe4>
      break;
 80061f0:	bf00      	nop
 80061f2:	e00a      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 80061f4:	bf00      	nop
 80061f6:	e008      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 80061f8:	bf00      	nop
 80061fa:	e006      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 80061fc:	bf00      	nop
 80061fe:	e004      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;   
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 8006208:	bf00      	nop
    }
  } 
  
  return status; 
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e175      	b.n	8006524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006238:	2201      	movs	r2, #1
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4013      	ands	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	f040 8164 	bne.w	800651e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <HAL_GPIO_Init+0x4e>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b12      	cmp	r3, #18
 8006264:	d123      	bne.n	80062ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	08da      	lsrs	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3208      	adds	r2, #8
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	220f      	movs	r2, #15
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	08da      	lsrs	r2, r3, #3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3208      	adds	r2, #8
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2203      	movs	r2, #3
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0203 	and.w	r2, r3, #3
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d00b      	beq.n	8006302 <HAL_GPIO_Init+0xea>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d007      	beq.n	8006302 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062f6:	2b11      	cmp	r3, #17
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b12      	cmp	r3, #18
 8006300:	d130      	bne.n	8006364 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	2203      	movs	r2, #3
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 0201 	and.w	r2, r3, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4313      	orrs	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	2203      	movs	r2, #3
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80be 	beq.w	800651e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_GPIO_Init+0x320>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a64      	ldr	r2, [pc, #400]	; (8006538 <HAL_GPIO_Init+0x320>)
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b62      	ldr	r3, [pc, #392]	; (8006538 <HAL_GPIO_Init+0x320>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063ba:	4a60      	ldr	r2, [pc, #384]	; (800653c <HAL_GPIO_Init+0x324>)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	3302      	adds	r3, #2
 80063c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	220f      	movs	r2, #15
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43db      	mvns	r3, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	4013      	ands	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a57      	ldr	r2, [pc, #348]	; (8006540 <HAL_GPIO_Init+0x328>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d037      	beq.n	8006456 <HAL_GPIO_Init+0x23e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a56      	ldr	r2, [pc, #344]	; (8006544 <HAL_GPIO_Init+0x32c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d031      	beq.n	8006452 <HAL_GPIO_Init+0x23a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a55      	ldr	r2, [pc, #340]	; (8006548 <HAL_GPIO_Init+0x330>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d02b      	beq.n	800644e <HAL_GPIO_Init+0x236>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a54      	ldr	r2, [pc, #336]	; (800654c <HAL_GPIO_Init+0x334>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d025      	beq.n	800644a <HAL_GPIO_Init+0x232>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a53      	ldr	r2, [pc, #332]	; (8006550 <HAL_GPIO_Init+0x338>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01f      	beq.n	8006446 <HAL_GPIO_Init+0x22e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a52      	ldr	r2, [pc, #328]	; (8006554 <HAL_GPIO_Init+0x33c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d019      	beq.n	8006442 <HAL_GPIO_Init+0x22a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a51      	ldr	r2, [pc, #324]	; (8006558 <HAL_GPIO_Init+0x340>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_GPIO_Init+0x226>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a50      	ldr	r2, [pc, #320]	; (800655c <HAL_GPIO_Init+0x344>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00d      	beq.n	800643a <HAL_GPIO_Init+0x222>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a4f      	ldr	r2, [pc, #316]	; (8006560 <HAL_GPIO_Init+0x348>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <HAL_GPIO_Init+0x21e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a4e      	ldr	r2, [pc, #312]	; (8006564 <HAL_GPIO_Init+0x34c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <HAL_GPIO_Init+0x21a>
 800642e:	2309      	movs	r3, #9
 8006430:	e012      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006432:	230a      	movs	r3, #10
 8006434:	e010      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006436:	2308      	movs	r3, #8
 8006438:	e00e      	b.n	8006458 <HAL_GPIO_Init+0x240>
 800643a:	2307      	movs	r3, #7
 800643c:	e00c      	b.n	8006458 <HAL_GPIO_Init+0x240>
 800643e:	2306      	movs	r3, #6
 8006440:	e00a      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006442:	2305      	movs	r3, #5
 8006444:	e008      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006446:	2304      	movs	r3, #4
 8006448:	e006      	b.n	8006458 <HAL_GPIO_Init+0x240>
 800644a:	2303      	movs	r3, #3
 800644c:	e004      	b.n	8006458 <HAL_GPIO_Init+0x240>
 800644e:	2302      	movs	r3, #2
 8006450:	e002      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_GPIO_Init+0x240>
 8006456:	2300      	movs	r3, #0
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	f002 0203 	and.w	r2, r2, #3
 800645e:	0092      	lsls	r2, r2, #2
 8006460:	4093      	lsls	r3, r2
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006468:	4934      	ldr	r1, [pc, #208]	; (800653c <HAL_GPIO_Init+0x324>)
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	089b      	lsrs	r3, r3, #2
 800646e:	3302      	adds	r3, #2
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006476:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <HAL_GPIO_Init+0x350>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800649a:	4a33      	ldr	r2, [pc, #204]	; (8006568 <HAL_GPIO_Init+0x350>)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064a0:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_GPIO_Init+0x350>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <HAL_GPIO_Init+0x350>)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ca:	4b27      	ldr	r3, [pc, #156]	; (8006568 <HAL_GPIO_Init+0x350>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <HAL_GPIO_Init+0x350>)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064f4:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <HAL_GPIO_Init+0x350>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006518:	4a13      	ldr	r2, [pc, #76]	; (8006568 <HAL_GPIO_Init+0x350>)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	3301      	adds	r3, #1
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	f67f ae86 	bls.w	8006238 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800652c:	bf00      	nop
 800652e:	3724      	adds	r7, #36	; 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40023800 	.word	0x40023800
 800653c:	40013800 	.word	0x40013800
 8006540:	40020000 	.word	0x40020000
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40021400 	.word	0x40021400
 8006558:	40021800 	.word	0x40021800
 800655c:	40021c00 	.word	0x40021c00
 8006560:	40022000 	.word	0x40022000
 8006564:	40022400 	.word	0x40022400
 8006568:	40013c00 	.word	0x40013c00

0800656c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e25e      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8087 	beq.w	800669e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006590:	4b96      	ldr	r3, [pc, #600]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
 8006598:	2b04      	cmp	r3, #4
 800659a:	d00c      	beq.n	80065b6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659c:	4b93      	ldr	r3, [pc, #588]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d112      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
 80065a8:	4b90      	ldr	r3, [pc, #576]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d10b      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b6:	4b8d      	ldr	r3, [pc, #564]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d06c      	beq.n	800669c <HAL_RCC_OscConfig+0x130>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d168      	bne.n	800669c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e238      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x7a>
 80065d8:	4b84      	ldr	r3, [pc, #528]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a83      	ldr	r2, [pc, #524]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e02e      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x9c>
 80065ee:	4b7f      	ldr	r3, [pc, #508]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7e      	ldr	r2, [pc, #504]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b7c      	ldr	r3, [pc, #496]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7b      	ldr	r2, [pc, #492]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e01d      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006610:	d10c      	bne.n	800662c <HAL_RCC_OscConfig+0xc0>
 8006612:	4b76      	ldr	r3, [pc, #472]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a75      	ldr	r2, [pc, #468]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4b73      	ldr	r3, [pc, #460]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a72      	ldr	r2, [pc, #456]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e00b      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 800662c:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b6c      	ldr	r3, [pc, #432]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6b      	ldr	r2, [pc, #428]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800663e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7ff f90c 	bl	8005868 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006654:	f7ff f908 	bl	8005868 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	; 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e1ec      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b61      	ldr	r3, [pc, #388]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0xe8>
 8006672:	e014      	b.n	800669e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7ff f8f8 	bl	8005868 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800667c:	f7ff f8f4 	bl	8005868 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1d8      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668e:	4b57      	ldr	r3, [pc, #348]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x110>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d069      	beq.n	800677e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066aa:	4b50      	ldr	r3, [pc, #320]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b6:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d11c      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
 80066c2:	4b4a      	ldr	r3, [pc, #296]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d116      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1ac      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	4b41      	ldr	r3, [pc, #260]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	493d      	ldr	r1, [pc, #244]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fa:	e040      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006704:	4b39      	ldr	r3, [pc, #228]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a38      	ldr	r2, [pc, #224]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7ff f8aa 	bl	8005868 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006718:	f7ff f8a6 	bl	8005868 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e18a      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672a:	4b30      	ldr	r3, [pc, #192]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4929      	ldr	r1, [pc, #164]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
 800674a:	e018      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7ff f886 	bl	8005868 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006760:	f7ff f882 	bl	8005868 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e166      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d038      	beq.n	80067fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d019      	beq.n	80067c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006792:	4b16      	ldr	r3, [pc, #88]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7ff f863 	bl	8005868 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a6:	f7ff f85f 	bl	8005868 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e143      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x23a>
 80067c4:	e01a      	b.n	80067fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	4a08      	ldr	r2, [pc, #32]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7ff f849 	bl	8005868 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067da:	f7ff f845 	bl	8005868 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d903      	bls.n	80067f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e129      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
 80067ec:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f0:	4b95      	ldr	r3, [pc, #596]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80067f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a4 	beq.w	8006952 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4b8f      	ldr	r3, [pc, #572]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a8b      	ldr	r2, [pc, #556]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b89      	ldr	r3, [pc, #548]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006832:	4b86      	ldr	r3, [pc, #536]	; (8006a4c <HAL_RCC_OscConfig+0x4e0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d118      	bne.n	8006870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800683e:	4b83      	ldr	r3, [pc, #524]	; (8006a4c <HAL_RCC_OscConfig+0x4e0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a82      	ldr	r2, [pc, #520]	; (8006a4c <HAL_RCC_OscConfig+0x4e0>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684a:	f7ff f80d 	bl	8005868 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006852:	f7ff f809 	bl	8005868 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b64      	cmp	r3, #100	; 0x64
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e0ed      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006864:	4b79      	ldr	r3, [pc, #484]	; (8006a4c <HAL_RCC_OscConfig+0x4e0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HAL_RCC_OscConfig+0x31a>
 8006878:	4b73      	ldr	r3, [pc, #460]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a72      	ldr	r2, [pc, #456]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
 8006884:	e02d      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x33c>
 800688e:	4b6e      	ldr	r3, [pc, #440]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4a6d      	ldr	r2, [pc, #436]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	; 0x70
 800689a:	4b6b      	ldr	r3, [pc, #428]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	e01c      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d10c      	bne.n	80068ca <HAL_RCC_OscConfig+0x35e>
 80068b0:	4b65      	ldr	r3, [pc, #404]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	4a64      	ldr	r2, [pc, #400]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	6713      	str	r3, [r2, #112]	; 0x70
 80068bc:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a61      	ldr	r2, [pc, #388]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	e00b      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068ca:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a5b      	ldr	r2, [pc, #364]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d015      	beq.n	8006916 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ea:	f7fe ffbd 	bl	8005868 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fe ffb9 	bl	8005868 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e09b      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	4b4f      	ldr	r3, [pc, #316]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ee      	beq.n	80068f2 <HAL_RCC_OscConfig+0x386>
 8006914:	e014      	b.n	8006940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fe ffa7 	bl	8005868 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691c:	e00a      	b.n	8006934 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fe ffa3 	bl	8005868 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e085      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006934:	4b44      	ldr	r3, [pc, #272]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ee      	bne.n	800691e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006946:	4b40      	ldr	r3, [pc, #256]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800694c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d071      	beq.n	8006a3e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800695a:	4b3b      	ldr	r3, [pc, #236]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b08      	cmp	r3, #8
 8006964:	d069      	beq.n	8006a3a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d14b      	bne.n	8006a06 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a35      	ldr	r2, [pc, #212]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697a:	f7fe ff75 	bl	8005868 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006982:	f7fe ff71 	bl	8005868 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e055      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006994:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f0      	bne.n	8006982 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	019b      	lsls	r3, r3, #6
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	3b01      	subs	r3, #1
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	061b      	lsls	r3, r3, #24
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	071b      	lsls	r3, r3, #28
 80069cc:	491e      	ldr	r1, [pc, #120]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069de:	f7fe ff43 	bl	8005868 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fe ff3f 	bl	8005868 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e023      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x47a>
 8006a04:	e01b      	b.n	8006a3e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a0f      	ldr	r2, [pc, #60]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a12:	f7fe ff29 	bl	8005868 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1a:	f7fe ff25 	bl	8005868 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e009      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f0      	bne.n	8006a1a <HAL_RCC_OscConfig+0x4ae>
 8006a38:	e001      	b.n	8006a3e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40007000 	.word	0x40007000

08006a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0ce      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a68:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d910      	bls.n	8006a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b66      	ldr	r3, [pc, #408]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f023 020f 	bic.w	r2, r3, #15
 8006a7e:	4964      	ldr	r1, [pc, #400]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a86:	4b62      	ldr	r3, [pc, #392]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0b6      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d020      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab0:	4b58      	ldr	r3, [pc, #352]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4a57      	ldr	r2, [pc, #348]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ac8:	4b52      	ldr	r3, [pc, #328]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a51      	ldr	r2, [pc, #324]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad4:	4b4f      	ldr	r3, [pc, #316]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	494c      	ldr	r1, [pc, #304]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d040      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d107      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	4b46      	ldr	r3, [pc, #280]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d115      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e07d      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d107      	bne.n	8006b22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b12:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e071      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b22:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e069      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b32:	4b38      	ldr	r3, [pc, #224]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f023 0203 	bic.w	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4935      	ldr	r1, [pc, #212]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b44:	f7fe fe90 	bl	8005868 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b4c:	f7fe fe8c 	bl	8005868 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e051      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b62:	4b2c      	ldr	r3, [pc, #176]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 020c 	and.w	r2, r3, #12
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d1eb      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b74:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d210      	bcs.n	8006ba4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f023 020f 	bic.w	r2, r3, #15
 8006b8a:	4921      	ldr	r1, [pc, #132]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e030      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4915      	ldr	r1, [pc, #84]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	490d      	ldr	r1, [pc, #52]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006be2:	f000 f81d 	bl	8006c20 <HAL_RCC_GetSysClockFreq>
 8006be6:	4601      	mov	r1, r0
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf4:	5cd3      	ldrb	r3, [r2, r3]
 8006bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8006bfa:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <HAL_RCC_ClockConfig+0x1cc>)
 8006bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7fe fdee 	bl	80057e0 <HAL_InitTick>

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40023c00 	.word	0x40023c00
 8006c14:	40023800 	.word	0x40023800
 8006c18:	08008d70 	.word	0x08008d70
 8006c1c:	20000010 	.word	0x20000010

08006c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c36:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d007      	beq.n	8006c52 <HAL_RCC_GetSysClockFreq+0x32>
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d008      	beq.n	8006c58 <HAL_RCC_GetSysClockFreq+0x38>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 808d 	bne.w	8006d66 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c4e:	60bb      	str	r3, [r7, #8]
       break;
 8006c50:	e08c      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c52:	4b4b      	ldr	r3, [pc, #300]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c54:	60bb      	str	r3, [r7, #8]
      break;
 8006c56:	e089      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c58:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c60:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c62:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d023      	beq.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6e:	4b42      	ldr	r3, [pc, #264]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	f04f 0400 	mov.w	r4, #0
 8006c78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	ea03 0501 	and.w	r5, r3, r1
 8006c84:	ea04 0602 	and.w	r6, r4, r2
 8006c88:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c8a:	fb02 f106 	mul.w	r1, r2, r6
 8006c8e:	2200      	movs	r2, #0
 8006c90:	fb02 f205 	mul.w	r2, r2, r5
 8006c94:	440a      	add	r2, r1
 8006c96:	493a      	ldr	r1, [pc, #232]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c98:	fba5 0101 	umull	r0, r1, r5, r1
 8006c9c:	1853      	adds	r3, r2, r1
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f04f 0400 	mov.w	r4, #0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4623      	mov	r3, r4
 8006caa:	f7f9 facd 	bl	8000248 <__aeabi_uldivmod>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e049      	b.n	8006d4a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb6:	4b30      	ldr	r3, [pc, #192]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	f04f 0400 	mov.w	r4, #0
 8006cc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	ea03 0501 	and.w	r5, r3, r1
 8006ccc:	ea04 0602 	and.w	r6, r4, r2
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	f04f 0400 	mov.w	r4, #0
 8006cdc:	0154      	lsls	r4, r2, #5
 8006cde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ce2:	014b      	lsls	r3, r1, #5
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	1b49      	subs	r1, r1, r5
 8006cea:	eb62 0206 	sbc.w	r2, r2, r6
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	f04f 0400 	mov.w	r4, #0
 8006cf6:	0194      	lsls	r4, r2, #6
 8006cf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006cfc:	018b      	lsls	r3, r1, #6
 8006cfe:	1a5b      	subs	r3, r3, r1
 8006d00:	eb64 0402 	sbc.w	r4, r4, r2
 8006d04:	f04f 0100 	mov.w	r1, #0
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	00e2      	lsls	r2, r4, #3
 8006d0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d12:	00d9      	lsls	r1, r3, #3
 8006d14:	460b      	mov	r3, r1
 8006d16:	4614      	mov	r4, r2
 8006d18:	195b      	adds	r3, r3, r5
 8006d1a:	eb44 0406 	adc.w	r4, r4, r6
 8006d1e:	f04f 0100 	mov.w	r1, #0
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	02a2      	lsls	r2, r4, #10
 8006d28:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d2c:	0299      	lsls	r1, r3, #10
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	4621      	mov	r1, r4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f04f 0400 	mov.w	r4, #0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	f7f9 fa82 	bl	8000248 <__aeabi_uldivmod>
 8006d44:	4603      	mov	r3, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	0c1b      	lsrs	r3, r3, #16
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	60bb      	str	r3, [r7, #8]
      break;
 8006d64:	e002      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d68:	60bb      	str	r3, [r7, #8]
      break;
 8006d6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	00f42400 	.word	0x00f42400
 8006d80:	017d7840 	.word	0x017d7840

08006d84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d88:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000010 	.word	0x20000010

08006d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006da0:	f7ff fff0 	bl	8006d84 <HAL_RCC_GetHCLKFreq>
 8006da4:	4601      	mov	r1, r0
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	0a9b      	lsrs	r3, r3, #10
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	4a03      	ldr	r2, [pc, #12]	; (8006dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
 8006db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	08008d80 	.word	0x08008d80

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006dc8:	f7ff ffdc 	bl	8006d84 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4601      	mov	r1, r0
 8006dce:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	0b5b      	lsrs	r3, r3, #13
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4a03      	ldr	r2, [pc, #12]	; (8006de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dda:	5cd3      	ldrb	r3, [r2, r3]
 8006ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40023800 	.word	0x40023800
 8006de8:	08008d80 	.word	0x08008d80

08006dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d012      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e14:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4a68      	ldr	r2, [pc, #416]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e1e:	6093      	str	r3, [r2, #8]
 8006e20:	4b66      	ldr	r3, [pc, #408]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e28:	4964      	ldr	r1, [pc, #400]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d017      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e46:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	4959      	ldr	r1, [pc, #356]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e64:	d101      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e72:	2301      	movs	r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e82:	4b4e      	ldr	r3, [pc, #312]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	494a      	ldr	r1, [pc, #296]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea0:	d101      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 808b 	beq.w	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ed0:	4b3a      	ldr	r3, [pc, #232]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	4a39      	ldr	r2, [pc, #228]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eda:	6413      	str	r3, [r2, #64]	; 0x40
 8006edc:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ee8:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a34      	ldr	r2, [pc, #208]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef4:	f7fe fcb8 	bl	8005868 <HAL_GetTick>
 8006ef8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efc:	f7fe fcb4 	bl	8005868 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	; 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e38d      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f0e:	4b2c      	ldr	r3, [pc, #176]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f1a:	4b28      	ldr	r3, [pc, #160]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d035      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d02e      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f38:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f42:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4e:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	4a1a      	ldr	r2, [pc, #104]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f60:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d114      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fe fc7c 	bl	8005868 <HAL_GetTick>
 8006f70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f72:	e00a      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f74:	f7fe fc78 	bl	8005868 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e34f      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0ee      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa2:	d111      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	4901      	ldr	r1, [pc, #4]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	0ffffcff 	.word	0x0ffffcff
 8006fc8:	4bb3      	ldr	r3, [pc, #716]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4ab2      	ldr	r2, [pc, #712]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fd2:	6093      	str	r3, [r2, #8]
 8006fd4:	4bb0      	ldr	r3, [pc, #704]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe0:	49ad      	ldr	r1, [pc, #692]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d010      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ff2:	4ba9      	ldr	r3, [pc, #676]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff8:	4aa7      	ldr	r2, [pc, #668]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007002:	4ba5      	ldr	r3, [pc, #660]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007004:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	49a2      	ldr	r1, [pc, #648]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007020:	4b9d      	ldr	r3, [pc, #628]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702e:	499a      	ldr	r1, [pc, #616]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007042:	4b95      	ldr	r3, [pc, #596]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007048:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007050:	4991      	ldr	r1, [pc, #580]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007064:	4b8c      	ldr	r3, [pc, #560]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007072:	4989      	ldr	r1, [pc, #548]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007086:	4b84      	ldr	r3, [pc, #528]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	4980      	ldr	r1, [pc, #512]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070a8:	4b7b      	ldr	r3, [pc, #492]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ae:	f023 0203 	bic.w	r2, r3, #3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	4978      	ldr	r1, [pc, #480]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070ca:	4b73      	ldr	r3, [pc, #460]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f023 020c 	bic.w	r2, r3, #12
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	496f      	ldr	r1, [pc, #444]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ec:	4b6a      	ldr	r3, [pc, #424]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	4967      	ldr	r1, [pc, #412]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800710e:	4b62      	ldr	r3, [pc, #392]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711c:	495e      	ldr	r1, [pc, #376]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007130:	4b59      	ldr	r3, [pc, #356]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713e:	4956      	ldr	r1, [pc, #344]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007152:	4b51      	ldr	r3, [pc, #324]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007158:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	494d      	ldr	r1, [pc, #308]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007174:	4b48      	ldr	r3, [pc, #288]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007182:	4945      	ldr	r1, [pc, #276]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007196:	4b40      	ldr	r3, [pc, #256]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a4:	493c      	ldr	r1, [pc, #240]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071b8:	4b37      	ldr	r3, [pc, #220]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c6:	4934      	ldr	r1, [pc, #208]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d011      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e8:	492b      	ldr	r1, [pc, #172]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f8:	d101      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800720a:	2301      	movs	r3, #1
 800720c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800721a:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800721c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007220:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007228:	491b      	ldr	r1, [pc, #108]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800724c:	4912      	ldr	r1, [pc, #72]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007266:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007270:	4909      	ldr	r1, [pc, #36]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007296:	bf00      	nop
 8007298:	40023800 	.word	0x40023800
 800729c:	4985      	ldr	r1, [pc, #532]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80072b0:	4b80      	ldr	r3, [pc, #512]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c0:	497c      	ldr	r1, [pc, #496]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d005      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d6:	f040 80d6 	bne.w	8007486 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072da:	4b76      	ldr	r3, [pc, #472]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a75      	ldr	r2, [pc, #468]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e6:	f7fe fabf 	bl	8005868 <HAL_GetTick>
 80072ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072ec:	e008      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072ee:	f7fe fabb 	bl	8005868 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d901      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e194      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007300:	4b6c      	ldr	r3, [pc, #432]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d021      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11d      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007320:	4b64      	ldr	r3, [pc, #400]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800732e:	4b61      	ldr	r3, [pc, #388]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	019a      	lsls	r2, r3, #6
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	071b      	lsls	r3, r3, #28
 8007354:	4957      	ldr	r1, [pc, #348]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007370:	d00a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800737a:	2b00      	cmp	r3, #0
 800737c:	d02e      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007386:	d129      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007388:	4b4a      	ldr	r3, [pc, #296]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800738a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007396:	4b47      	ldr	r3, [pc, #284]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739c:	0f1b      	lsrs	r3, r3, #28
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	019a      	lsls	r2, r3, #6
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	431a      	orrs	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	071b      	lsls	r3, r3, #28
 80073bc:	493d      	ldr	r1, [pc, #244]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073c4:	4b3b      	ldr	r3, [pc, #236]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ca:	f023 021f 	bic.w	r2, r3, #31
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4937      	ldr	r1, [pc, #220]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01d      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073e8:	4b32      	ldr	r3, [pc, #200]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fc:	0f1b      	lsrs	r3, r3, #28
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	019a      	lsls	r2, r3, #6
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	431a      	orrs	r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	431a      	orrs	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	071b      	lsls	r3, r3, #28
 800741c:	4925      	ldr	r1, [pc, #148]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	019a      	lsls	r2, r3, #6
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	071b      	lsls	r3, r3, #28
 800744c:	4919      	ldr	r1, [pc, #100]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007454:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a16      	ldr	r2, [pc, #88]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800745a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007460:	f7fe fa02 	bl	8005868 <HAL_GetTick>
 8007464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007466:	e008      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007468:	f7fe f9fe 	bl	8005868 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b64      	cmp	r3, #100	; 0x64
 8007474:	d901      	bls.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e0d7      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800747a:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 80cd 	bne.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749a:	f7fe f9e5 	bl	8005868 <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074a0:	e00a      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074a2:	f7fe f9e1 	bl	8005868 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b64      	cmp	r3, #100	; 0x64
 80074ae:	d903      	bls.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0ba      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80074b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074b8:	4b5e      	ldr	r3, [pc, #376]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c4:	d0ed      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d02e      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d12a      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074ee:	4b51      	ldr	r3, [pc, #324]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074fc:	4b4d      	ldr	r3, [pc, #308]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	0f1b      	lsrs	r3, r3, #28
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	019a      	lsls	r2, r3, #6
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	071b      	lsls	r3, r3, #28
 8007522:	4944      	ldr	r1, [pc, #272]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800752a:	4b42      	ldr	r3, [pc, #264]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800752c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007530:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	3b01      	subs	r3, #1
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	493d      	ldr	r1, [pc, #244]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d022      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007558:	d11d      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800755a:	4b36      	ldr	r3, [pc, #216]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	0e1b      	lsrs	r3, r3, #24
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007568:	4b32      	ldr	r3, [pc, #200]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	0f1b      	lsrs	r3, r3, #28
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	019a      	lsls	r2, r3, #6
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	431a      	orrs	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	431a      	orrs	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	071b      	lsls	r3, r3, #28
 800758e:	4929      	ldr	r1, [pc, #164]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d028      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075a2:	4b24      	ldr	r3, [pc, #144]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a8:	0e1b      	lsrs	r3, r3, #24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075b0:	4b20      	ldr	r3, [pc, #128]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	019a      	lsls	r2, r3, #6
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	431a      	orrs	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	061b      	lsls	r3, r3, #24
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	071b      	lsls	r3, r3, #28
 80075d6:	4917      	ldr	r1, [pc, #92]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075de:	4b15      	ldr	r3, [pc, #84]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4911      	ldr	r1, [pc, #68]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007600:	f7fe f932 	bl	8005868 <HAL_GetTick>
 8007604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007606:	e008      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007608:	f7fe f92e 	bl	8005868 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	; 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e007      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007626:	d1ef      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40023800 	.word	0x40023800

08007638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e040      	b.n	80076cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fd fede 	bl	800541c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa66 	bl	8007b48 <UART_SetConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e022      	b.n	80076cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fcfe 	bl	8008090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd85 	bl	80081d4 <UART_CheckIdleState>
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d164      	bne.n	80077b4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_Transmit_DMA+0x22>
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e05d      	b.n	80077b6 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_UART_Transmit_DMA+0x34>
 8007704:	2302      	movs	r3, #2
 8007706:	e056      	b.n	80077b6 <HAL_UART_Transmit_DMA+0xe2>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2221      	movs	r2, #33	; 0x21
 8007730:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007736:	2b00      	cmp	r3, #0
 8007738:	d02a      	beq.n	8007790 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800773e:	4a20      	ldr	r2, [pc, #128]	; (80077c0 <HAL_UART_Transmit_DMA+0xec>)
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007746:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <HAL_UART_Transmit_DMA+0xf0>)
 8007748:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774e:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <HAL_UART_Transmit_DMA+0xf4>)
 8007750:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007756:	2200      	movs	r2, #0
 8007758:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007762:	4619      	mov	r1, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3328      	adds	r3, #40	; 0x28
 800776a:	461a      	mov	r2, r3
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	f7fe fa69 	bl	8005c44 <HAL_DMA_Start_IT>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2210      	movs	r2, #16
 800777c:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e012      	b.n	80077b6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2240      	movs	r2, #64	; 0x40
 8007796:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077ae:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	0800832d 	.word	0x0800832d
 80077c4:	0800837d 	.word	0x0800837d
 80077c8:	08008419 	.word	0x08008419

080077cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d16c      	bne.n	80078bc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_UART_Receive_DMA+0x22>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e065      	b.n	80078be <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_UART_Receive_DMA+0x34>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e05e      	b.n	80078be <HAL_UART_Receive_DMA+0xf2>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02a      	beq.n	8007880 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	4a26      	ldr	r2, [pc, #152]	; (80078c8 <HAL_UART_Receive_DMA+0xfc>)
 8007830:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007836:	4a25      	ldr	r2, [pc, #148]	; (80078cc <HAL_UART_Receive_DMA+0x100>)
 8007838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783e:	4a24      	ldr	r2, [pc, #144]	; (80078d0 <HAL_UART_Receive_DMA+0x104>)
 8007840:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007846:	2200      	movs	r2, #0
 8007848:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3324      	adds	r3, #36	; 0x24
 8007854:	4619      	mov	r1, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	461a      	mov	r2, r3
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	f7fe f9f1 	bl	8005c44 <HAL_DMA_Start_IT>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2210      	movs	r2, #16
 800786c:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2220      	movs	r2, #32
 800787a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e01e      	b.n	80078be <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007896:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e000      	b.n	80078be <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80078bc:	2302      	movs	r3, #2
  }
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08008399 	.word	0x08008399
 80078cc:	080083fd 	.word	0x080083fd
 80078d0:	08008419 	.word	0x08008419

080078d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d113      	bne.n	800792a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00e      	beq.n	800792a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80eb 	beq.w	8007af6 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
      }
      return;
 8007928:	e0e5      	b.n	8007af6 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80c0 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80b5 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <HAL_UART_IRQHandler+0x9c>
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007968:	f043 0201 	orr.w	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00e      	beq.n	8007998 <HAL_UART_IRQHandler+0xc4>
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2202      	movs	r2, #2
 800798a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007990:	f043 0204 	orr.w	r2, r3, #4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <HAL_UART_IRQHandler+0xec>
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2204      	movs	r2, #4
 80079b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b8:	f043 0202 	orr.w	r2, r3, #2
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d013      	beq.n	80079f2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2208      	movs	r2, #8
 80079e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ea:	f043 0208 	orr.w	r2, r3, #8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d07f      	beq.n	8007afa <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a22:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d004      	beq.n	8007a3c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d031      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fc55 	bl	80082ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d123      	bne.n	8007a98 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d013      	beq.n	8007a90 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6c:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <HAL_UART_IRQHandler+0x234>)
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe f945 	bl	8005d04 <HAL_DMA_Abort_IT>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d016      	beq.n	8007aae <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8e:	e00e      	b.n	8007aae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f84f 	bl	8007b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a96:	e00a      	b.n	8007aae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f84b 	bl	8007b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9e:	e006      	b.n	8007aae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f847 	bl	8007b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007aac:	e025      	b.n	8007afa <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	bf00      	nop
    return;
 8007ab0:	e023      	b.n	8007afa <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00d      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d008      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d017      	beq.n	8007afe <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
    }
    return;
 8007ad6:	e012      	b.n	8007afe <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00e      	beq.n	8007b00 <HAL_UART_IRQHandler+0x22c>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fce5 	bl	80084bc <UART_EndTransmit_IT>
    return;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <HAL_UART_IRQHandler+0x22c>
      return;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_UART_IRQHandler+0x22c>
    return;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_UART_IRQHandler+0x22c>
    return;
 8007afe:	bf00      	nop
  }

}
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	08008491 	.word	0x08008491

08007b0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4bb1      	ldr	r3, [pc, #708]	; (8007e3c <UART_SetConfig+0x2f4>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	6939      	ldr	r1, [r7, #16]
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a9f      	ldr	r2, [pc, #636]	; (8007e40 <UART_SetConfig+0x2f8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d121      	bne.n	8007c0c <UART_SetConfig+0xc4>
 8007bc8:	4b9e      	ldr	r3, [pc, #632]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d816      	bhi.n	8007c04 <UART_SetConfig+0xbc>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x94>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007bf3 	.word	0x08007bf3
 8007be8:	08007bff 	.word	0x08007bff
 8007bec:	2301      	movs	r3, #1
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e151      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e14e      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e14b      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007bfe:	2308      	movs	r3, #8
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e148      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c04:	2310      	movs	r3, #16
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	bf00      	nop
 8007c0a:	e144      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a8d      	ldr	r2, [pc, #564]	; (8007e48 <UART_SetConfig+0x300>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d134      	bne.n	8007c80 <UART_SetConfig+0x138>
 8007c16:	4b8b      	ldr	r3, [pc, #556]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1c:	f003 030c 	and.w	r3, r3, #12
 8007c20:	2b0c      	cmp	r3, #12
 8007c22:	d829      	bhi.n	8007c78 <UART_SetConfig+0x130>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0xe4>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c61 	.word	0x08007c61
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	08007c79 	.word	0x08007c79
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007c79 	.word	0x08007c79
 8007c44:	08007c79 	.word	0x08007c79
 8007c48:	08007c79 	.word	0x08007c79
 8007c4c:	08007c67 	.word	0x08007c67
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c73 	.word	0x08007c73
 8007c60:	2300      	movs	r3, #0
 8007c62:	77fb      	strb	r3, [r7, #31]
 8007c64:	e117      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c66:	2302      	movs	r3, #2
 8007c68:	77fb      	strb	r3, [r7, #31]
 8007c6a:	e114      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e111      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c72:	2308      	movs	r3, #8
 8007c74:	77fb      	strb	r3, [r7, #31]
 8007c76:	e10e      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	bf00      	nop
 8007c7e:	e10a      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a71      	ldr	r2, [pc, #452]	; (8007e4c <UART_SetConfig+0x304>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d120      	bne.n	8007ccc <UART_SetConfig+0x184>
 8007c8a:	4b6e      	ldr	r3, [pc, #440]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d00f      	beq.n	8007cb8 <UART_SetConfig+0x170>
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d802      	bhi.n	8007ca2 <UART_SetConfig+0x15a>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <UART_SetConfig+0x164>
 8007ca0:	e010      	b.n	8007cc4 <UART_SetConfig+0x17c>
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d005      	beq.n	8007cb2 <UART_SetConfig+0x16a>
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d009      	beq.n	8007cbe <UART_SetConfig+0x176>
 8007caa:	e00b      	b.n	8007cc4 <UART_SetConfig+0x17c>
 8007cac:	2300      	movs	r3, #0
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e0f1      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e0ee      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e0eb      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007cbe:	2308      	movs	r3, #8
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e0e8      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	bf00      	nop
 8007cca:	e0e4      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5f      	ldr	r2, [pc, #380]	; (8007e50 <UART_SetConfig+0x308>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d120      	bne.n	8007d18 <UART_SetConfig+0x1d0>
 8007cd6:	4b5b      	ldr	r3, [pc, #364]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d00f      	beq.n	8007d04 <UART_SetConfig+0x1bc>
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d802      	bhi.n	8007cee <UART_SetConfig+0x1a6>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <UART_SetConfig+0x1b0>
 8007cec:	e010      	b.n	8007d10 <UART_SetConfig+0x1c8>
 8007cee:	2b80      	cmp	r3, #128	; 0x80
 8007cf0:	d005      	beq.n	8007cfe <UART_SetConfig+0x1b6>
 8007cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8007cf4:	d009      	beq.n	8007d0a <UART_SetConfig+0x1c2>
 8007cf6:	e00b      	b.n	8007d10 <UART_SetConfig+0x1c8>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e0cb      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e0c8      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d04:	2304      	movs	r3, #4
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e0c5      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e0c2      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d10:	2310      	movs	r3, #16
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	bf00      	nop
 8007d16:	e0be      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a4d      	ldr	r2, [pc, #308]	; (8007e54 <UART_SetConfig+0x30c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d124      	bne.n	8007d6c <UART_SetConfig+0x224>
 8007d22:	4b48      	ldr	r3, [pc, #288]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d012      	beq.n	8007d58 <UART_SetConfig+0x210>
 8007d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d36:	d802      	bhi.n	8007d3e <UART_SetConfig+0x1f6>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <UART_SetConfig+0x204>
 8007d3c:	e012      	b.n	8007d64 <UART_SetConfig+0x21c>
 8007d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d42:	d006      	beq.n	8007d52 <UART_SetConfig+0x20a>
 8007d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d48:	d009      	beq.n	8007d5e <UART_SetConfig+0x216>
 8007d4a:	e00b      	b.n	8007d64 <UART_SetConfig+0x21c>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e0a1      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d52:	2302      	movs	r3, #2
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e09e      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e09b      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e098      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d64:	2310      	movs	r3, #16
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	bf00      	nop
 8007d6a:	e094      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a39      	ldr	r2, [pc, #228]	; (8007e58 <UART_SetConfig+0x310>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d124      	bne.n	8007dc0 <UART_SetConfig+0x278>
 8007d76:	4b33      	ldr	r3, [pc, #204]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d84:	d012      	beq.n	8007dac <UART_SetConfig+0x264>
 8007d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8a:	d802      	bhi.n	8007d92 <UART_SetConfig+0x24a>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <UART_SetConfig+0x258>
 8007d90:	e012      	b.n	8007db8 <UART_SetConfig+0x270>
 8007d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d96:	d006      	beq.n	8007da6 <UART_SetConfig+0x25e>
 8007d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d9c:	d009      	beq.n	8007db2 <UART_SetConfig+0x26a>
 8007d9e:	e00b      	b.n	8007db8 <UART_SetConfig+0x270>
 8007da0:	2301      	movs	r3, #1
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e077      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007da6:	2302      	movs	r3, #2
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e074      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007dac:	2304      	movs	r3, #4
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e071      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007db2:	2308      	movs	r3, #8
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e06e      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007db8:	2310      	movs	r3, #16
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	bf00      	nop
 8007dbe:	e06a      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <UART_SetConfig+0x314>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d124      	bne.n	8007e14 <UART_SetConfig+0x2cc>
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d012      	beq.n	8007e00 <UART_SetConfig+0x2b8>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	d802      	bhi.n	8007de6 <UART_SetConfig+0x29e>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d007      	beq.n	8007df4 <UART_SetConfig+0x2ac>
 8007de4:	e012      	b.n	8007e0c <UART_SetConfig+0x2c4>
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dea:	d006      	beq.n	8007dfa <UART_SetConfig+0x2b2>
 8007dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df0:	d009      	beq.n	8007e06 <UART_SetConfig+0x2be>
 8007df2:	e00b      	b.n	8007e0c <UART_SetConfig+0x2c4>
 8007df4:	2300      	movs	r3, #0
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e04d      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e04a      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e047      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e06:	2308      	movs	r3, #8
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e044      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	bf00      	nop
 8007e12:	e040      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a11      	ldr	r2, [pc, #68]	; (8007e60 <UART_SetConfig+0x318>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d139      	bne.n	8007e92 <UART_SetConfig+0x34a>
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <UART_SetConfig+0x2fc>)
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2c:	d027      	beq.n	8007e7e <UART_SetConfig+0x336>
 8007e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e32:	d817      	bhi.n	8007e64 <UART_SetConfig+0x31c>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01c      	beq.n	8007e72 <UART_SetConfig+0x32a>
 8007e38:	e027      	b.n	8007e8a <UART_SetConfig+0x342>
 8007e3a:	bf00      	nop
 8007e3c:	efff69f3 	.word	0xefff69f3
 8007e40:	40011000 	.word	0x40011000
 8007e44:	40023800 	.word	0x40023800
 8007e48:	40004400 	.word	0x40004400
 8007e4c:	40004800 	.word	0x40004800
 8007e50:	40004c00 	.word	0x40004c00
 8007e54:	40005000 	.word	0x40005000
 8007e58:	40011400 	.word	0x40011400
 8007e5c:	40007800 	.word	0x40007800
 8007e60:	40007c00 	.word	0x40007c00
 8007e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e68:	d006      	beq.n	8007e78 <UART_SetConfig+0x330>
 8007e6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e6e:	d009      	beq.n	8007e84 <UART_SetConfig+0x33c>
 8007e70:	e00b      	b.n	8007e8a <UART_SetConfig+0x342>
 8007e72:	2300      	movs	r3, #0
 8007e74:	77fb      	strb	r3, [r7, #31]
 8007e76:	e00e      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e00b      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e7e:	2304      	movs	r3, #4
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e008      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e84:	2308      	movs	r3, #8
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e005      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	bf00      	nop
 8007e90:	e001      	b.n	8007e96 <UART_SetConfig+0x34e>
 8007e92:	2310      	movs	r3, #16
 8007e94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e9e:	d17c      	bne.n	8007f9a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007ea0:	7ffb      	ldrb	r3, [r7, #31]
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d859      	bhi.n	8007f5a <UART_SetConfig+0x412>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x364>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007eef 	.word	0x08007eef
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f5b 	.word	0x08007f5b
 8007ebc:	08007f25 	.word	0x08007f25
 8007ec0:	08007f5b 	.word	0x08007f5b
 8007ec4:	08007f5b 	.word	0x08007f5b
 8007ec8:	08007f5b 	.word	0x08007f5b
 8007ecc:	08007f43 	.word	0x08007f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ed0:	f7fe ff64 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	005a      	lsls	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	441a      	add	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	61bb      	str	r3, [r7, #24]
        break;
 8007eec:	e038      	b.n	8007f60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007eee:	f7fe ff69 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	005a      	lsls	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	441a      	add	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	61bb      	str	r3, [r7, #24]
        break;
 8007f0a:	e029      	b.n	8007f60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	085a      	lsrs	r2, r3, #1
 8007f12:	4b5d      	ldr	r3, [pc, #372]	; (8008088 <UART_SetConfig+0x540>)
 8007f14:	4413      	add	r3, r2
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6852      	ldr	r2, [r2, #4]
 8007f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	61bb      	str	r3, [r7, #24]
        break;
 8007f22:	e01d      	b.n	8007f60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007f24:	f7fe fe7c 	bl	8006c20 <HAL_RCC_GetSysClockFreq>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	005a      	lsls	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	441a      	add	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	61bb      	str	r3, [r7, #24]
        break;
 8007f40:	e00e      	b.n	8007f60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	61bb      	str	r3, [r7, #24]
        break;
 8007f58:	e002      	b.n	8007f60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8007f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b0f      	cmp	r3, #15
 8007f64:	d916      	bls.n	8007f94 <UART_SetConfig+0x44c>
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6c:	d212      	bcs.n	8007f94 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f023 030f 	bic.w	r3, r3, #15
 8007f76:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	89fb      	ldrh	r3, [r7, #14]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	89fa      	ldrh	r2, [r7, #14]
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	e06e      	b.n	8008072 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
 8007f98:	e06b      	b.n	8008072 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007f9a:	7ffb      	ldrb	r3, [r7, #31]
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d857      	bhi.n	8008050 <UART_SetConfig+0x508>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x460>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	08008051 	.word	0x08008051
 8007fb8:	0800801d 	.word	0x0800801d
 8007fbc:	08008051 	.word	0x08008051
 8007fc0:	08008051 	.word	0x08008051
 8007fc4:	08008051 	.word	0x08008051
 8007fc8:	08008039 	.word	0x08008039
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007fcc:	f7fe fee6 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	441a      	add	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	61bb      	str	r3, [r7, #24]
        break;
 8007fe6:	e036      	b.n	8008056 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007fe8:	f7fe feec 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8007fec:	4602      	mov	r2, r0
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	61bb      	str	r3, [r7, #24]
        break;
 8008002:	e028      	b.n	8008056 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	085a      	lsrs	r2, r3, #1
 800800a:	4b20      	ldr	r3, [pc, #128]	; (800808c <UART_SetConfig+0x544>)
 800800c:	4413      	add	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6852      	ldr	r2, [r2, #4]
 8008012:	fbb3 f3f2 	udiv	r3, r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	61bb      	str	r3, [r7, #24]
        break;
 800801a:	e01c      	b.n	8008056 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800801c:	f7fe fe00 	bl	8006c20 <HAL_RCC_GetSysClockFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	61bb      	str	r3, [r7, #24]
        break;
 8008036:	e00e      	b.n	8008056 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	085b      	lsrs	r3, r3, #1
 800803e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	fbb2 f3f3 	udiv	r3, r2, r3
 800804a:	b29b      	uxth	r3, r3
 800804c:	61bb      	str	r3, [r7, #24]
        break;
 800804e:	e002      	b.n	8008056 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
        break;
 8008054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b0f      	cmp	r3, #15
 800805a:	d908      	bls.n	800806e <UART_SetConfig+0x526>
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008062:	d204      	bcs.n	800806e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	60da      	str	r2, [r3, #12]
 800806c:	e001      	b.n	8008072 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	01e84800 	.word	0x01e84800
 800808c:	00f42400 	.word	0x00f42400

08008090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01a      	beq.n	80081a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818e:	d10a      	bne.n	80081a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	605a      	str	r2, [r3, #4]
  }
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80081e2:	f7fd fb41 	bl	8005868 <HAL_GetTick>
 80081e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d10e      	bne.n	8008214 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f814 	bl	8008232 <UART_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e00a      	b.n	800822a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	4613      	mov	r3, r2
 8008240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008242:	e02a      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800824a:	d026      	beq.n	800829a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824c:	f7fd fb0c 	bl	8005868 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d302      	bcc.n	8008262 <UART_WaitOnFlagUntilTimeout+0x30>
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d11b      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008270:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e00f      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4013      	ands	r3, r2
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	bf0c      	ite	eq
 80082aa:	2301      	moveq	r3, #1
 80082ac:	2300      	movne	r3, #0
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d0c5      	beq.n	8008244 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80082d8:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008302:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d014      	beq.n	800836e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800835a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800836a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800836c:	e002      	b.n	8008374 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7fc fa68 	bl	8004844 <HAL_UART_TxCpltCallback>
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff fbbe 	bl	8007b0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ae:	d01e      	beq.n	80083ee <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fc fa3a 	bl	8004868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fb88 	bl	8007b20 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008410:	bf00      	nop
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008430:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d109      	bne.n	8008454 <UART_DMAError+0x3c>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b21      	cmp	r3, #33	; 0x21
 8008444:	d106      	bne.n	8008454 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2200      	movs	r2, #0
 800844a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f7ff ff37 	bl	80082c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d109      	bne.n	8008476 <UART_DMAError+0x5e>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b22      	cmp	r3, #34	; 0x22
 8008466:	d106      	bne.n	8008476 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008470:	6978      	ldr	r0, [r7, #20]
 8008472:	f7ff ff3b 	bl	80082ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847a:	f043 0210 	orr.w	r2, r3, #16
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008482:	6978      	ldr	r0, [r7, #20]
 8008484:	f7ff fb56 	bl	8007b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff fb40 	bl	8007b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fc f9af 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e6:	bf00      	nop
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <__cxa_pure_virtual>:
 80084ee:	b508      	push	{r3, lr}
 80084f0:	f000 f80c 	bl	800850c <_ZSt9terminatev>

080084f4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80084f4:	b508      	push	{r3, lr}
 80084f6:	4780      	blx	r0
 80084f8:	f000 f80d 	bl	8008516 <abort>

080084fc <_ZSt13get_terminatev>:
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <_ZSt13get_terminatev+0xc>)
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	f3bf 8f5b 	dmb	ish
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	2000001c 	.word	0x2000001c

0800850c <_ZSt9terminatev>:
 800850c:	b508      	push	{r3, lr}
 800850e:	f7ff fff5 	bl	80084fc <_ZSt13get_terminatev>
 8008512:	f7ff ffef 	bl	80084f4 <_ZN10__cxxabiv111__terminateEPFvvE>

08008516 <abort>:
 8008516:	b508      	push	{r3, lr}
 8008518:	2006      	movs	r0, #6
 800851a:	f000 f871 	bl	8008600 <raise>
 800851e:	2001      	movs	r0, #1
 8008520:	f7fd f890 	bl	8005644 <_exit>

08008524 <__errno>:
 8008524:	4b01      	ldr	r3, [pc, #4]	; (800852c <__errno+0x8>)
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	20000020 	.word	0x20000020

08008530 <__libc_init_array>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	4e0d      	ldr	r6, [pc, #52]	; (8008568 <__libc_init_array+0x38>)
 8008534:	4c0d      	ldr	r4, [pc, #52]	; (800856c <__libc_init_array+0x3c>)
 8008536:	1ba4      	subs	r4, r4, r6
 8008538:	10a4      	asrs	r4, r4, #2
 800853a:	2500      	movs	r5, #0
 800853c:	42a5      	cmp	r5, r4
 800853e:	d109      	bne.n	8008554 <__libc_init_array+0x24>
 8008540:	4e0b      	ldr	r6, [pc, #44]	; (8008570 <__libc_init_array+0x40>)
 8008542:	4c0c      	ldr	r4, [pc, #48]	; (8008574 <__libc_init_array+0x44>)
 8008544:	f000 f960 	bl	8008808 <_init>
 8008548:	1ba4      	subs	r4, r4, r6
 800854a:	10a4      	asrs	r4, r4, #2
 800854c:	2500      	movs	r5, #0
 800854e:	42a5      	cmp	r5, r4
 8008550:	d105      	bne.n	800855e <__libc_init_array+0x2e>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008558:	4798      	blx	r3
 800855a:	3501      	adds	r5, #1
 800855c:	e7ee      	b.n	800853c <__libc_init_array+0xc>
 800855e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008562:	4798      	blx	r3
 8008564:	3501      	adds	r5, #1
 8008566:	e7f2      	b.n	800854e <__libc_init_array+0x1e>
 8008568:	08008d98 	.word	0x08008d98
 800856c:	08008d98 	.word	0x08008d98
 8008570:	08008d98 	.word	0x08008d98
 8008574:	08008da0 	.word	0x08008da0

08008578 <memcpy>:
 8008578:	b510      	push	{r4, lr}
 800857a:	1e43      	subs	r3, r0, #1
 800857c:	440a      	add	r2, r1
 800857e:	4291      	cmp	r1, r2
 8008580:	d100      	bne.n	8008584 <memcpy+0xc>
 8008582:	bd10      	pop	{r4, pc}
 8008584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800858c:	e7f7      	b.n	800857e <memcpy+0x6>

0800858e <memset>:
 800858e:	4402      	add	r2, r0
 8008590:	4603      	mov	r3, r0
 8008592:	4293      	cmp	r3, r2
 8008594:	d100      	bne.n	8008598 <memset+0xa>
 8008596:	4770      	bx	lr
 8008598:	f803 1b01 	strb.w	r1, [r3], #1
 800859c:	e7f9      	b.n	8008592 <memset+0x4>
	...

080085a0 <realloc>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <realloc+0xc>)
 80085a2:	460a      	mov	r2, r1
 80085a4:	4601      	mov	r1, r0
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	f000 b8a0 	b.w	80086ec <_realloc_r>
 80085ac:	20000020 	.word	0x20000020

080085b0 <_raise_r>:
 80085b0:	291f      	cmp	r1, #31
 80085b2:	b538      	push	{r3, r4, r5, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	d904      	bls.n	80085c4 <_raise_r+0x14>
 80085ba:	2316      	movs	r3, #22
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085c6:	b112      	cbz	r2, 80085ce <_raise_r+0x1e>
 80085c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085cc:	b94b      	cbnz	r3, 80085e2 <_raise_r+0x32>
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 f830 	bl	8008634 <_getpid_r>
 80085d4:	462a      	mov	r2, r5
 80085d6:	4601      	mov	r1, r0
 80085d8:	4620      	mov	r0, r4
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085de:	f000 b817 	b.w	8008610 <_kill_r>
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d00a      	beq.n	80085fc <_raise_r+0x4c>
 80085e6:	1c59      	adds	r1, r3, #1
 80085e8:	d103      	bne.n	80085f2 <_raise_r+0x42>
 80085ea:	2316      	movs	r3, #22
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	2001      	movs	r0, #1
 80085f0:	e7e7      	b.n	80085c2 <_raise_r+0x12>
 80085f2:	2400      	movs	r4, #0
 80085f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085f8:	4628      	mov	r0, r5
 80085fa:	4798      	blx	r3
 80085fc:	2000      	movs	r0, #0
 80085fe:	e7e0      	b.n	80085c2 <_raise_r+0x12>

08008600 <raise>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <raise+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff bfd3 	b.w	80085b0 <_raise_r>
 800860a:	bf00      	nop
 800860c:	20000020 	.word	0x20000020

08008610 <_kill_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4c07      	ldr	r4, [pc, #28]	; (8008630 <_kill_r+0x20>)
 8008614:	2300      	movs	r3, #0
 8008616:	4605      	mov	r5, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	f7fd f801 	bl	8005624 <_kill>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d102      	bne.n	800862c <_kill_r+0x1c>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	b103      	cbz	r3, 800862c <_kill_r+0x1c>
 800862a:	602b      	str	r3, [r5, #0]
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	bf00      	nop
 8008630:	20000a90 	.word	0x20000a90

08008634 <_getpid_r>:
 8008634:	f7fc bfee 	b.w	8005614 <_getpid>

08008638 <_malloc_r>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	1ccd      	adds	r5, r1, #3
 800863c:	f025 0503 	bic.w	r5, r5, #3
 8008640:	3508      	adds	r5, #8
 8008642:	2d0c      	cmp	r5, #12
 8008644:	bf38      	it	cc
 8008646:	250c      	movcc	r5, #12
 8008648:	2d00      	cmp	r5, #0
 800864a:	4606      	mov	r6, r0
 800864c:	db01      	blt.n	8008652 <_malloc_r+0x1a>
 800864e:	42a9      	cmp	r1, r5
 8008650:	d903      	bls.n	800865a <_malloc_r+0x22>
 8008652:	230c      	movs	r3, #12
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	2000      	movs	r0, #0
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	f000 f87d 	bl	8008758 <__malloc_lock>
 800865e:	4a21      	ldr	r2, [pc, #132]	; (80086e4 <_malloc_r+0xac>)
 8008660:	6814      	ldr	r4, [r2, #0]
 8008662:	4621      	mov	r1, r4
 8008664:	b991      	cbnz	r1, 800868c <_malloc_r+0x54>
 8008666:	4c20      	ldr	r4, [pc, #128]	; (80086e8 <_malloc_r+0xb0>)
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	b91b      	cbnz	r3, 8008674 <_malloc_r+0x3c>
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f863 	bl	8008738 <_sbrk_r>
 8008672:	6020      	str	r0, [r4, #0]
 8008674:	4629      	mov	r1, r5
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f85e 	bl	8008738 <_sbrk_r>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d124      	bne.n	80086ca <_malloc_r+0x92>
 8008680:	230c      	movs	r3, #12
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	4630      	mov	r0, r6
 8008686:	f000 f868 	bl	800875a <__malloc_unlock>
 800868a:	e7e4      	b.n	8008656 <_malloc_r+0x1e>
 800868c:	680b      	ldr	r3, [r1, #0]
 800868e:	1b5b      	subs	r3, r3, r5
 8008690:	d418      	bmi.n	80086c4 <_malloc_r+0x8c>
 8008692:	2b0b      	cmp	r3, #11
 8008694:	d90f      	bls.n	80086b6 <_malloc_r+0x7e>
 8008696:	600b      	str	r3, [r1, #0]
 8008698:	50cd      	str	r5, [r1, r3]
 800869a:	18cc      	adds	r4, r1, r3
 800869c:	4630      	mov	r0, r6
 800869e:	f000 f85c 	bl	800875a <__malloc_unlock>
 80086a2:	f104 000b 	add.w	r0, r4, #11
 80086a6:	1d23      	adds	r3, r4, #4
 80086a8:	f020 0007 	bic.w	r0, r0, #7
 80086ac:	1ac3      	subs	r3, r0, r3
 80086ae:	d0d3      	beq.n	8008658 <_malloc_r+0x20>
 80086b0:	425a      	negs	r2, r3
 80086b2:	50e2      	str	r2, [r4, r3]
 80086b4:	e7d0      	b.n	8008658 <_malloc_r+0x20>
 80086b6:	428c      	cmp	r4, r1
 80086b8:	684b      	ldr	r3, [r1, #4]
 80086ba:	bf16      	itet	ne
 80086bc:	6063      	strne	r3, [r4, #4]
 80086be:	6013      	streq	r3, [r2, #0]
 80086c0:	460c      	movne	r4, r1
 80086c2:	e7eb      	b.n	800869c <_malloc_r+0x64>
 80086c4:	460c      	mov	r4, r1
 80086c6:	6849      	ldr	r1, [r1, #4]
 80086c8:	e7cc      	b.n	8008664 <_malloc_r+0x2c>
 80086ca:	1cc4      	adds	r4, r0, #3
 80086cc:	f024 0403 	bic.w	r4, r4, #3
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d005      	beq.n	80086e0 <_malloc_r+0xa8>
 80086d4:	1a21      	subs	r1, r4, r0
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 f82e 	bl	8008738 <_sbrk_r>
 80086dc:	3001      	adds	r0, #1
 80086de:	d0cf      	beq.n	8008680 <_malloc_r+0x48>
 80086e0:	6025      	str	r5, [r4, #0]
 80086e2:	e7db      	b.n	800869c <_malloc_r+0x64>
 80086e4:	20000a84 	.word	0x20000a84
 80086e8:	20000a88 	.word	0x20000a88

080086ec <_realloc_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	4607      	mov	r7, r0
 80086f0:	4614      	mov	r4, r2
 80086f2:	460e      	mov	r6, r1
 80086f4:	b921      	cbnz	r1, 8008700 <_realloc_r+0x14>
 80086f6:	4611      	mov	r1, r2
 80086f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086fc:	f7ff bf9c 	b.w	8008638 <_malloc_r>
 8008700:	b922      	cbnz	r2, 800870c <_realloc_r+0x20>
 8008702:	f000 f82b 	bl	800875c <_free_r>
 8008706:	4625      	mov	r5, r4
 8008708:	4628      	mov	r0, r5
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	f000 f874 	bl	80087f8 <_malloc_usable_size_r>
 8008710:	42a0      	cmp	r0, r4
 8008712:	d20f      	bcs.n	8008734 <_realloc_r+0x48>
 8008714:	4621      	mov	r1, r4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff8e 	bl	8008638 <_malloc_r>
 800871c:	4605      	mov	r5, r0
 800871e:	2800      	cmp	r0, #0
 8008720:	d0f2      	beq.n	8008708 <_realloc_r+0x1c>
 8008722:	4631      	mov	r1, r6
 8008724:	4622      	mov	r2, r4
 8008726:	f7ff ff27 	bl	8008578 <memcpy>
 800872a:	4631      	mov	r1, r6
 800872c:	4638      	mov	r0, r7
 800872e:	f000 f815 	bl	800875c <_free_r>
 8008732:	e7e9      	b.n	8008708 <_realloc_r+0x1c>
 8008734:	4635      	mov	r5, r6
 8008736:	e7e7      	b.n	8008708 <_realloc_r+0x1c>

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4c06      	ldr	r4, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4605      	mov	r5, r0
 8008740:	4608      	mov	r0, r1
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	f7fc ff88 	bl	8005658 <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000a90 	.word	0x20000a90

08008758 <__malloc_lock>:
 8008758:	4770      	bx	lr

0800875a <__malloc_unlock>:
 800875a:	4770      	bx	lr

0800875c <_free_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4605      	mov	r5, r0
 8008760:	2900      	cmp	r1, #0
 8008762:	d045      	beq.n	80087f0 <_free_r+0x94>
 8008764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008768:	1f0c      	subs	r4, r1, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfb8      	it	lt
 800876e:	18e4      	addlt	r4, r4, r3
 8008770:	f7ff fff2 	bl	8008758 <__malloc_lock>
 8008774:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <_free_r+0x98>)
 8008776:	6813      	ldr	r3, [r2, #0]
 8008778:	4610      	mov	r0, r2
 800877a:	b933      	cbnz	r3, 800878a <_free_r+0x2e>
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	6014      	str	r4, [r2, #0]
 8008780:	4628      	mov	r0, r5
 8008782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008786:	f7ff bfe8 	b.w	800875a <__malloc_unlock>
 800878a:	42a3      	cmp	r3, r4
 800878c:	d90c      	bls.n	80087a8 <_free_r+0x4c>
 800878e:	6821      	ldr	r1, [r4, #0]
 8008790:	1862      	adds	r2, r4, r1
 8008792:	4293      	cmp	r3, r2
 8008794:	bf04      	itt	eq
 8008796:	681a      	ldreq	r2, [r3, #0]
 8008798:	685b      	ldreq	r3, [r3, #4]
 800879a:	6063      	str	r3, [r4, #4]
 800879c:	bf04      	itt	eq
 800879e:	1852      	addeq	r2, r2, r1
 80087a0:	6022      	streq	r2, [r4, #0]
 80087a2:	6004      	str	r4, [r0, #0]
 80087a4:	e7ec      	b.n	8008780 <_free_r+0x24>
 80087a6:	4613      	mov	r3, r2
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	b10a      	cbz	r2, 80087b0 <_free_r+0x54>
 80087ac:	42a2      	cmp	r2, r4
 80087ae:	d9fa      	bls.n	80087a6 <_free_r+0x4a>
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	1858      	adds	r0, r3, r1
 80087b4:	42a0      	cmp	r0, r4
 80087b6:	d10b      	bne.n	80087d0 <_free_r+0x74>
 80087b8:	6820      	ldr	r0, [r4, #0]
 80087ba:	4401      	add	r1, r0
 80087bc:	1858      	adds	r0, r3, r1
 80087be:	4282      	cmp	r2, r0
 80087c0:	6019      	str	r1, [r3, #0]
 80087c2:	d1dd      	bne.n	8008780 <_free_r+0x24>
 80087c4:	6810      	ldr	r0, [r2, #0]
 80087c6:	6852      	ldr	r2, [r2, #4]
 80087c8:	605a      	str	r2, [r3, #4]
 80087ca:	4401      	add	r1, r0
 80087cc:	6019      	str	r1, [r3, #0]
 80087ce:	e7d7      	b.n	8008780 <_free_r+0x24>
 80087d0:	d902      	bls.n	80087d8 <_free_r+0x7c>
 80087d2:	230c      	movs	r3, #12
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	e7d3      	b.n	8008780 <_free_r+0x24>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	1821      	adds	r1, r4, r0
 80087dc:	428a      	cmp	r2, r1
 80087de:	bf04      	itt	eq
 80087e0:	6811      	ldreq	r1, [r2, #0]
 80087e2:	6852      	ldreq	r2, [r2, #4]
 80087e4:	6062      	str	r2, [r4, #4]
 80087e6:	bf04      	itt	eq
 80087e8:	1809      	addeq	r1, r1, r0
 80087ea:	6021      	streq	r1, [r4, #0]
 80087ec:	605c      	str	r4, [r3, #4]
 80087ee:	e7c7      	b.n	8008780 <_free_r+0x24>
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	20000a84 	.word	0x20000a84

080087f8 <_malloc_usable_size_r>:
 80087f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fc:	1f18      	subs	r0, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfbc      	itt	lt
 8008802:	580b      	ldrlt	r3, [r1, r0]
 8008804:	18c0      	addlt	r0, r0, r3
 8008806:	4770      	bx	lr

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
