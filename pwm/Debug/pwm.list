
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022cc  080022cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  080022e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080022e8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b7e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000145f  00000000  00000000  00028bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  0002a018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025536  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e2c  00000000  00000000  00050776  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb6a0  00000000  00000000  000575a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  00142cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080022a4 	.word	0x080022a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080022a4 	.word	0x080022a4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f90b 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f001 fd76 	bl	8002038 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f917 	bl	80007a6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f8ed 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	e175      	b.n	8000acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007e0:	2201      	movs	r2, #1
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8164 	bne.w	8000ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b12      	cmp	r3, #18
 800080c:	d123      	bne.n	8000856 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	220f      	movs	r2, #15
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	691a      	ldr	r2, [r3, #16]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4313      	orrs	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	69b9      	ldr	r1, [r7, #24]
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0203 	and.w	r2, r3, #3
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00b      	beq.n	80008aa <HAL_GPIO_Init+0xea>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d007      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089e:	2b11      	cmp	r3, #17
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d130      	bne.n	800090c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 80be 	beq.w	8000ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a64      	ldr	r2, [pc, #400]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b62      	ldr	r3, [pc, #392]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000962:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_GPIO_Init+0x328>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d037      	beq.n	80009fe <HAL_GPIO_Init+0x23e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a56      	ldr	r2, [pc, #344]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d031      	beq.n	80009fa <HAL_GPIO_Init+0x23a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x330>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d02b      	beq.n	80009f6 <HAL_GPIO_Init+0x236>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <HAL_GPIO_Init+0x334>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d025      	beq.n	80009f2 <HAL_GPIO_Init+0x232>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a53      	ldr	r2, [pc, #332]	; (8000af8 <HAL_GPIO_Init+0x338>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d01f      	beq.n	80009ee <HAL_GPIO_Init+0x22e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a52      	ldr	r2, [pc, #328]	; (8000afc <HAL_GPIO_Init+0x33c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d019      	beq.n	80009ea <HAL_GPIO_Init+0x22a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x340>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x226>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a50      	ldr	r2, [pc, #320]	; (8000b04 <HAL_GPIO_Init+0x344>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x222>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <HAL_GPIO_Init+0x348>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x21e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x21a>
 80009d6:	2309      	movs	r3, #9
 80009d8:	e012      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009da:	230a      	movs	r3, #10
 80009dc:	e010      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009de:	2308      	movs	r3, #8
 80009e0:	e00e      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00c      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e6:	2306      	movs	r3, #6
 80009e8:	e00a      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ea:	2305      	movs	r3, #5
 80009ec:	e008      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ee:	2304      	movs	r3, #4
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e004      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fe:	2300      	movs	r3, #0
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	f002 0203 	and.w	r2, r2, #3
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a10:	4934      	ldr	r1, [pc, #208]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	f67f ae86 	bls.w	80007e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40021400 	.word	0x40021400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	40022400 	.word	0x40022400
 8000b10:	40013c00 	.word	0x40013c00

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e25e      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 8087 	beq.w	8000c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b38:	4b96      	ldr	r3, [pc, #600]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d00c      	beq.n	8000b5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b44:	4b93      	ldr	r3, [pc, #588]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f003 030c 	and.w	r3, r3, #12
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d112      	bne.n	8000b76 <HAL_RCC_OscConfig+0x62>
 8000b50:	4b90      	ldr	r3, [pc, #576]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b5c:	d10b      	bne.n	8000b76 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5e:	4b8d      	ldr	r3, [pc, #564]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d06c      	beq.n	8000c44 <HAL_RCC_OscConfig+0x130>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d168      	bne.n	8000c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e238      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b7e:	d106      	bne.n	8000b8e <HAL_RCC_OscConfig+0x7a>
 8000b80:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a83      	ldr	r2, [pc, #524]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e02e      	b.n	8000bec <HAL_RCC_OscConfig+0xd8>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x9c>
 8000b96:	4b7f      	ldr	r3, [pc, #508]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a7e      	ldr	r2, [pc, #504]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b7c      	ldr	r3, [pc, #496]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a7b      	ldr	r2, [pc, #492]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e01d      	b.n	8000bec <HAL_RCC_OscConfig+0xd8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb8:	d10c      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xc0>
 8000bba:	4b76      	ldr	r3, [pc, #472]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a75      	ldr	r2, [pc, #468]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	4b73      	ldr	r3, [pc, #460]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a72      	ldr	r2, [pc, #456]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e00b      	b.n	8000bec <HAL_RCC_OscConfig+0xd8>
 8000bd4:	4b6f      	ldr	r3, [pc, #444]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a6e      	ldr	r2, [pc, #440]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a6b      	ldr	r2, [pc, #428]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d013      	beq.n	8000c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcf2 	bl	80005dc <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fcee 	bl	80005dc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e1ec      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f0      	beq.n	8000bfc <HAL_RCC_OscConfig+0xe8>
 8000c1a:	e014      	b.n	8000c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fcde 	bl	80005dc <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fcda 	bl	80005dc <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e1d8      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f0      	bne.n	8000c24 <HAL_RCC_OscConfig+0x110>
 8000c42:	e000      	b.n	8000c46 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d069      	beq.n	8000d26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c52:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d11c      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x190>
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d116      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <HAL_RCC_OscConfig+0x17a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e1ac      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	493d      	ldr	r1, [pc, #244]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	e040      	b.n	8000d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d023      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a38      	ldr	r2, [pc, #224]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc90 	bl	80005dc <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc8c 	bl	80005dc <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e18a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4929      	ldr	r1, [pc, #164]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
 8000cf2:	e018      	b.n	8000d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d00:	f7ff fc6c 	bl	80005dc <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d08:	f7ff fc68 	bl	80005dc <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e166      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d038      	beq.n	8000da4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d019      	beq.n	8000d6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d46:	f7ff fc49 	bl	80005dc <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc45 	bl	80005dc <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e143      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x23a>
 8000d6c:	e01a      	b.n	8000da4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_RCC_OscConfig+0x280>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fc2f 	bl	80005dc <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d80:	e00a      	b.n	8000d98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d82:	f7ff fc2b 	bl	80005dc <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d903      	bls.n	8000d98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e129      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
 8000d94:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d98:	4b95      	ldr	r3, [pc, #596]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ee      	bne.n	8000d82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80a4 	beq.w	8000efa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db2:	4b8f      	ldr	r3, [pc, #572]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b8c      	ldr	r3, [pc, #560]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a8b      	ldr	r2, [pc, #556]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b89      	ldr	r3, [pc, #548]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dda:	4b86      	ldr	r3, [pc, #536]	; (8000ff4 <HAL_RCC_OscConfig+0x4e0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d118      	bne.n	8000e18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000de6:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <HAL_RCC_OscConfig+0x4e0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a82      	ldr	r2, [pc, #520]	; (8000ff4 <HAL_RCC_OscConfig+0x4e0>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000df2:	f7ff fbf3 	bl	80005dc <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dfa:	f7ff fbef 	bl	80005dc <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b64      	cmp	r3, #100	; 0x64
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e0ed      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e0c:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <HAL_RCC_OscConfig+0x4e0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x31a>
 8000e20:	4b73      	ldr	r3, [pc, #460]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e24:	4a72      	ldr	r2, [pc, #456]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2c:	e02d      	b.n	8000e8a <HAL_RCC_OscConfig+0x376>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x33c>
 8000e36:	4b6e      	ldr	r3, [pc, #440]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3a:	4a6d      	ldr	r2, [pc, #436]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	6713      	str	r3, [r2, #112]	; 0x70
 8000e42:	4b6b      	ldr	r3, [pc, #428]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e46:	4a6a      	ldr	r2, [pc, #424]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4e:	e01c      	b.n	8000e8a <HAL_RCC_OscConfig+0x376>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d10c      	bne.n	8000e72 <HAL_RCC_OscConfig+0x35e>
 8000e58:	4b65      	ldr	r3, [pc, #404]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5c:	4a64      	ldr	r2, [pc, #400]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6713      	str	r3, [r2, #112]	; 0x70
 8000e64:	4b62      	ldr	r3, [pc, #392]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	4a61      	ldr	r2, [pc, #388]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e70:	e00b      	b.n	8000e8a <HAL_RCC_OscConfig+0x376>
 8000e72:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e76:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a5b      	ldr	r2, [pc, #364]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d015      	beq.n	8000ebe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e92:	f7ff fba3 	bl	80005dc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	e00a      	b.n	8000eb0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9a:	f7ff fb9f 	bl	80005dc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e09b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0ee      	beq.n	8000e9a <HAL_RCC_OscConfig+0x386>
 8000ebc:	e014      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fb8d 	bl	80005dc <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fb89 	bl	80005dc <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e085      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1ee      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d105      	bne.n	8000efa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eee:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d071      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d069      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d14b      	bne.n	8000fae <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a35      	ldr	r2, [pc, #212]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb5b 	bl	80005dc <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb57 	bl	80005dc <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e055      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f0      	bne.n	8000f2a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	019b      	lsls	r3, r3, #6
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	3b01      	subs	r3, #1
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	071b      	lsls	r3, r3, #28
 8000f74:	491e      	ldr	r1, [pc, #120]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb29 	bl	80005dc <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb25 	bl	80005dc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e023      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0x47a>
 8000fac:	e01b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb0f 	bl	80005dc <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb0b 	bl	80005dc <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e009      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x4ae>
 8000fe0:	e001      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0ce      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d910      	bls.n	8001040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 020f 	bic.w	r2, r3, #15
 8001026:	4964      	ldr	r1, [pc, #400]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0b6      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001058:	4b58      	ldr	r3, [pc, #352]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	4b52      	ldr	r3, [pc, #328]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800107a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	494c      	ldr	r1, [pc, #304]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d040      	beq.n	800111c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e07d      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e071      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e069      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 0203 	bic.w	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010ec:	f7ff fa76 	bl	80005dc <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	e00a      	b.n	800110a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f7ff fa72 	bl	80005dc <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e051      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 020c 	and.w	r2, r3, #12
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	429a      	cmp	r2, r3
 800111a:	d1eb      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d210      	bcs.n	800114c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 020f 	bic.w	r2, r3, #15
 8001132:	4921      	ldr	r1, [pc, #132]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e030      	b.n	80011ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4915      	ldr	r1, [pc, #84]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	490d      	ldr	r1, [pc, #52]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800118a:	f000 f81d 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 800118e:	4601      	mov	r1, r0
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_RCC_ClockConfig+0x1c8>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	fa21 f303 	lsr.w	r3, r1, r3
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_RCC_ClockConfig+0x1cc>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff f9d4 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	080022bc 	.word	0x080022bc
 80011c4:	20000008 	.word	0x20000008

080011c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d007      	beq.n	80011fa <HAL_RCC_GetSysClockFreq+0x32>
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d008      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x38>
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 808d 	bne.w	800130e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011f6:	60bb      	str	r3, [r7, #8]
       break;
 80011f8:	e08c      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011fa:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <HAL_RCC_GetSysClockFreq+0x160>)
 80011fc:	60bb      	str	r3, [r7, #8]
      break;
 80011fe:	e089      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001200:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001208:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d023      	beq.n	800125e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	099b      	lsrs	r3, r3, #6
 800121c:	f04f 0400 	mov.w	r4, #0
 8001220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	ea03 0501 	and.w	r5, r3, r1
 800122c:	ea04 0602 	and.w	r6, r4, r2
 8001230:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_RCC_GetSysClockFreq+0x160>)
 8001232:	fb02 f106 	mul.w	r1, r2, r6
 8001236:	2200      	movs	r2, #0
 8001238:	fb02 f205 	mul.w	r2, r2, r5
 800123c:	440a      	add	r2, r1
 800123e:	493a      	ldr	r1, [pc, #232]	; (8001328 <HAL_RCC_GetSysClockFreq+0x160>)
 8001240:	fba5 0101 	umull	r0, r1, r5, r1
 8001244:	1853      	adds	r3, r2, r1
 8001246:	4619      	mov	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0400 	mov.w	r4, #0
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	f7fe fff1 	bl	8000238 <__aeabi_uldivmod>
 8001256:	4603      	mov	r3, r0
 8001258:	460c      	mov	r4, r1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e049      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	099b      	lsrs	r3, r3, #6
 8001264:	f04f 0400 	mov.w	r4, #0
 8001268:	f240 11ff 	movw	r1, #511	; 0x1ff
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	ea03 0501 	and.w	r5, r3, r1
 8001274:	ea04 0602 	and.w	r6, r4, r2
 8001278:	4629      	mov	r1, r5
 800127a:	4632      	mov	r2, r6
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	f04f 0400 	mov.w	r4, #0
 8001284:	0154      	lsls	r4, r2, #5
 8001286:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800128a:	014b      	lsls	r3, r1, #5
 800128c:	4619      	mov	r1, r3
 800128e:	4622      	mov	r2, r4
 8001290:	1b49      	subs	r1, r1, r5
 8001292:	eb62 0206 	sbc.w	r2, r2, r6
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	f04f 0400 	mov.w	r4, #0
 800129e:	0194      	lsls	r4, r2, #6
 80012a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012a4:	018b      	lsls	r3, r1, #6
 80012a6:	1a5b      	subs	r3, r3, r1
 80012a8:	eb64 0402 	sbc.w	r4, r4, r2
 80012ac:	f04f 0100 	mov.w	r1, #0
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	00e2      	lsls	r2, r4, #3
 80012b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012ba:	00d9      	lsls	r1, r3, #3
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	195b      	adds	r3, r3, r5
 80012c2:	eb44 0406 	adc.w	r4, r4, r6
 80012c6:	f04f 0100 	mov.w	r1, #0
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	02a2      	lsls	r2, r4, #10
 80012d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012d4:	0299      	lsls	r1, r3, #10
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f04f 0400 	mov.w	r4, #0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	f7fe ffa6 	bl	8000238 <__aeabi_uldivmod>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_GetSysClockFreq+0x158>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	3301      	adds	r3, #1
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	60bb      	str	r3, [r7, #8]
      break;
 800130c:	e002      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001310:	60bb      	str	r3, [r7, #8]
      break;
 8001312:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001314:	68bb      	ldr	r3, [r7, #8]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	00f42400 	.word	0x00f42400
 8001328:	017d7840 	.word	0x017d7840

0800132c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e01d      	b.n	800137a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fe94 	bl	8002080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3304      	adds	r3, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f000 f9be 	bl	80016ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fca6 	bl	8001ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_TIM_PWM_Start+0x7c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_TIM_PWM_Start+0x2c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <HAL_TIM_PWM_Start+0x80>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_TIM_PWM_Start+0x30>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_TIM_PWM_Start+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_PWM_Start+0x84>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b06      	cmp	r3, #6
 80013da:	d00b      	beq.n	80013f4 <HAL_TIM_PWM_Start+0x70>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d007      	beq.n	80013f4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400
 8001408:	00010007 	.word	0x00010007

0800140c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fc62 	bl	8001ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_TIM_PWM_Stop+0xa8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_TIM_PWM_Stop+0x2c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_TIM_PWM_Stop+0xac>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_TIM_PWM_Stop+0x30>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_TIM_PWM_Stop+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d017      	beq.n	8001472 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	f241 1311 	movw	r3, #4369	; 0x1111
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_TIM_PWM_Stop+0x66>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	f240 4344 	movw	r3, #1092	; 0x444
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d107      	bne.n	8001472 <HAL_TIM_PWM_Stop+0x66>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	f241 1311 	movw	r3, #4369	; 0x1111
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_TIM_PWM_Stop+0x96>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	f240 4344 	movw	r3, #1092	; 0x444
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d107      	bne.n	80014a2 <HAL_TIM_PWM_Stop+0x96>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e105      	b.n	80016e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2202      	movs	r2, #2
 80014e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b14      	cmp	r3, #20
 80014ea:	f200 80f0 	bhi.w	80016ce <HAL_TIM_PWM_ConfigChannel+0x212>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001549 	.word	0x08001549
 80014f8:	080016cf 	.word	0x080016cf
 80014fc:	080016cf 	.word	0x080016cf
 8001500:	080016cf 	.word	0x080016cf
 8001504:	08001589 	.word	0x08001589
 8001508:	080016cf 	.word	0x080016cf
 800150c:	080016cf 	.word	0x080016cf
 8001510:	080016cf 	.word	0x080016cf
 8001514:	080015cb 	.word	0x080015cb
 8001518:	080016cf 	.word	0x080016cf
 800151c:	080016cf 	.word	0x080016cf
 8001520:	080016cf 	.word	0x080016cf
 8001524:	0800160b 	.word	0x0800160b
 8001528:	080016cf 	.word	0x080016cf
 800152c:	080016cf 	.word	0x080016cf
 8001530:	080016cf 	.word	0x080016cf
 8001534:	0800164d 	.word	0x0800164d
 8001538:	080016cf 	.word	0x080016cf
 800153c:	080016cf 	.word	0x080016cf
 8001540:	080016cf 	.word	0x080016cf
 8001544:	0800168d 	.word	0x0800168d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f96c 	bl	800182c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0208 	orr.w	r2, r2, #8
 8001562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0204 	bic.w	r2, r2, #4
 8001572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6999      	ldr	r1, [r3, #24]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	619a      	str	r2, [r3, #24]
      break;
 8001586:	e0a3      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f9be 	bl	8001910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6999      	ldr	r1, [r3, #24]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	021a      	lsls	r2, r3, #8
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	619a      	str	r2, [r3, #24]
      break;
 80015c8:	e082      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fa15 	bl	8001a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0208 	orr.w	r2, r2, #8
 80015e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0204 	bic.w	r2, r2, #4
 80015f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69d9      	ldr	r1, [r3, #28]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	61da      	str	r2, [r3, #28]
      break;
 8001608:	e062      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fa6b 	bl	8001aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69da      	ldr	r2, [r3, #28]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69d9      	ldr	r1, [r3, #28]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	61da      	str	r2, [r3, #28]
      break;
 800164a:	e041      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 faa2 	bl	8001b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800168a:	e021      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fad4 	bl	8001c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	021a      	lsls	r2, r3, #8
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80016cc:	e000      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80016ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <TIM_Base_SetConfig+0x114>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <TIM_Base_SetConfig+0x40>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170a:	d00f      	beq.n	800172c <TIM_Base_SetConfig+0x40>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <TIM_Base_SetConfig+0x118>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00b      	beq.n	800172c <TIM_Base_SetConfig+0x40>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <TIM_Base_SetConfig+0x11c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d007      	beq.n	800172c <TIM_Base_SetConfig+0x40>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3b      	ldr	r2, [pc, #236]	; (800180c <TIM_Base_SetConfig+0x120>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d003      	beq.n	800172c <TIM_Base_SetConfig+0x40>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <TIM_Base_SetConfig+0x124>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <TIM_Base_SetConfig+0x114>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02b      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d027      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a2c      	ldr	r2, [pc, #176]	; (8001804 <TIM_Base_SetConfig+0x118>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d023      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a2b      	ldr	r2, [pc, #172]	; (8001808 <TIM_Base_SetConfig+0x11c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <TIM_Base_SetConfig+0x120>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01b      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <TIM_Base_SetConfig+0x124>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d017      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a28      	ldr	r2, [pc, #160]	; (8001814 <TIM_Base_SetConfig+0x128>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <TIM_Base_SetConfig+0x12c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00f      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a26      	ldr	r2, [pc, #152]	; (800181c <TIM_Base_SetConfig+0x130>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00b      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <TIM_Base_SetConfig+0x134>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <TIM_Base_SetConfig+0x138>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <TIM_Base_SetConfig+0xb2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <TIM_Base_SetConfig+0x13c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d108      	bne.n	80017b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <TIM_Base_SetConfig+0x114>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <TIM_Base_SetConfig+0xf8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <TIM_Base_SetConfig+0x124>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d103      	bne.n	80017ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	615a      	str	r2, [r3, #20]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40000400 	.word	0x40000400
 8001808:	40000800 	.word	0x40000800
 800180c:	40000c00 	.word	0x40000c00
 8001810:	40010400 	.word	0x40010400
 8001814:	40014000 	.word	0x40014000
 8001818:	40014400 	.word	0x40014400
 800181c:	40014800 	.word	0x40014800
 8001820:	40001800 	.word	0x40001800
 8001824:	40001c00 	.word	0x40001c00
 8001828:	40002000 	.word	0x40002000

0800182c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	f023 0201 	bic.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <TIM_OC1_SetConfig+0xd8>)
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <TIM_OC1_SetConfig+0xdc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d003      	beq.n	8001890 <TIM_OC1_SetConfig+0x64>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a20      	ldr	r2, [pc, #128]	; (800190c <TIM_OC1_SetConfig+0xe0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d10c      	bne.n	80018aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f023 0308 	bic.w	r3, r3, #8
 8001896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <TIM_OC1_SetConfig+0xdc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d003      	beq.n	80018ba <TIM_OC1_SetConfig+0x8e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <TIM_OC1_SetConfig+0xe0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d111      	bne.n	80018de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	621a      	str	r2, [r3, #32]
}
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	fffeff8f 	.word	0xfffeff8f
 8001908:	40010000 	.word	0x40010000
 800190c:	40010400 	.word	0x40010400

08001910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	f023 0210 	bic.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <TIM_OC2_SetConfig+0xe4>)
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f023 0320 	bic.w	r3, r3, #32
 800195a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <TIM_OC2_SetConfig+0xe8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d003      	beq.n	8001978 <TIM_OC2_SetConfig+0x68>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <TIM_OC2_SetConfig+0xec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d10d      	bne.n	8001994 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <TIM_OC2_SetConfig+0xe8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d003      	beq.n	80019a4 <TIM_OC2_SetConfig+0x94>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <TIM_OC2_SetConfig+0xec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d113      	bne.n	80019cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	621a      	str	r2, [r3, #32]
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	feff8fff 	.word	0xfeff8fff
 80019f8:	40010000 	.word	0x40010000
 80019fc:	40010400 	.word	0x40010400

08001a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <TIM_OC3_SetConfig+0xe0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <TIM_OC3_SetConfig+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_OC3_SetConfig+0x66>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <TIM_OC3_SetConfig+0xe8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <TIM_OC3_SetConfig+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <TIM_OC3_SetConfig+0x92>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <TIM_OC3_SetConfig+0xe8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d113      	bne.n	8001aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	621a      	str	r2, [r3, #32]
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	fffeff8f 	.word	0xfffeff8f
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010400 	.word	0x40010400

08001aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <TIM_OC4_SetConfig+0xa4>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	031b      	lsls	r3, r3, #12
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <TIM_OC4_SetConfig+0xa8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <TIM_OC4_SetConfig+0x68>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <TIM_OC4_SetConfig+0xac>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d109      	bne.n	8001b68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	621a      	str	r2, [r3, #32]
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	feff8fff 	.word	0xfeff8fff
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40010400 	.word	0x40010400

08001b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <TIM_OC5_SetConfig+0x98>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001bdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <TIM_OC5_SetConfig+0x9c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <TIM_OC5_SetConfig+0x5e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <TIM_OC5_SetConfig+0xa0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d109      	bne.n	8001c0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	621a      	str	r2, [r3, #32]
}
 8001c28:	bf00      	nop
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	fffeff8f 	.word	0xfffeff8f
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40010400 	.word	0x40010400

08001c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <TIM_OC6_SetConfig+0x9c>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <TIM_OC6_SetConfig+0xa0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <TIM_OC6_SetConfig+0x60>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <TIM_OC6_SetConfig+0xa4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	621a      	str	r2, [r3, #32]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	feff8fff 	.word	0xfeff8fff
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	621a      	str	r2, [r3, #32]
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e045      	b.n	8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d108      	bne.n	8001d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001daa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40010400 	.word	0x40010400

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b08f      	sub	sp, #60	; 0x3c
 8001df0:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f7fe fba1 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 f821 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f000 f8d5 	bl	8001fa8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001dfe:	f000 f879 	bl	8001ef4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // PIN D9
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e02:	210c      	movs	r1, #12
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <main+0x4c>)
 8001e06:	f7ff fabd 	bl	8001384 <HAL_TIM_PWM_Start>

  setPWM(htim4, TIM_CHANNEL_4, 400);
 8001e0a:	4e0b      	ldr	r6, [pc, #44]	; (8001e38 <main+0x4c>)
 8001e0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e10:	930d      	str	r3, [sp, #52]	; 0x34
 8001e12:	230c      	movs	r3, #12
 8001e14:	930c      	str	r3, [sp, #48]	; 0x30
 8001e16:	466d      	mov	r5, sp
 8001e18:	f106 0410 	add.w	r4, r6, #16
 8001e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e28:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e30:	f000 f8d9 	bl	8001fe6 <setPWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e34:	e7fe      	b.n	8001e34 <main+0x48>
 8001e36:	bf00      	nop
 8001e38:	2000002c 	.word	0x2000002c

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	; 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	2234      	movs	r2, #52	; 0x34
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fa22 	bl	8002294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <SystemClock_Config+0xb0>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <SystemClock_Config+0xb0>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <SystemClock_Config+0xb0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <SystemClock_Config+0xb4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <SystemClock_Config+0xb4>)
 8001e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <SystemClock_Config+0xb4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fe33 	bl	8000b14 <HAL_RCC_OscConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001eb4:	f000 f890 	bl	8001fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb8:	230f      	movs	r3, #15
 8001eba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f890 	bl	8000ff8 <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ede:	f000 f87b 	bl	8001fd8 <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3750      	adds	r7, #80	; 0x50
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000

08001ef4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	615a      	str	r2, [r3, #20]
 8001f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f1a:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <MX_TIM4_Init+0xb0>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f2c:	f240 321f 	movw	r2, #799	; 0x31f
 8001f30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f3e:	4818      	ldr	r0, [pc, #96]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f40:	f7ff f9f4 	bl	800132c <HAL_TIM_PWM_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001f4a:	f000 f845 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f5e:	f7ff fee9 	bl	8001d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001f68:	f000 f836 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6c:	2360      	movs	r3, #96	; 0x60
 8001f6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	220c      	movs	r2, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f84:	f7ff fa9a 	bl	80014bc <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f8e:	f000 f823 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM4_Init+0xac>)
 8001f94:	f000 f894 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000002c 	.word	0x2000002c
 8001fa4:	40000800 	.word	0x40000800

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_GPIO_Init+0x2c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <MX_GPIO_Init+0x2c>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_GPIO_Init+0x2c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]

}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <setPWM>:
#include "stm32f7xx_hal.h"
#include <stdint.h>

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse) {
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001ff2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ff8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001ffc:	f7ff fa06 	bl	800140c <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002000:	2360      	movs	r3, #96	; 0x60
 8002002:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse; // set the pulse duration
 8002004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002008:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002016:	4619      	mov	r1, r3
 8002018:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800201c:	f7ff fa4e 	bl	80014bc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8002020:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002022:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002026:	f7ff f9ad 	bl	8001384 <HAL_TIM_PWM_Start>
}
 800202a:	bf00      	nop
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002034:	b004      	add	sp, #16
 8002036:	4770      	bx	lr

08002038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_MspInit+0x44>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_MspInit+0x44>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_MspInit+0x44>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_MspInit+0x44>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_MspInit+0x44>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_MspInit+0x44>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_TIM_PWM_MspInit+0x38>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10b      	bne.n	80020aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_TIM_MspPostInit+0x64>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11c      	bne.n	800211c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800210c:	2302      	movs	r3, #2
 800210e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_TIM_MspPostInit+0x6c>)
 8002118:	f7fe fb52 	bl	80007c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40000800 	.word	0x40000800
 8002128:	40023800 	.word	0x40023800
 800212c:	40020c00 	.word	0x40020c00

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f7fe fa16 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <SystemInit+0x5c>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <SystemInit+0x5c>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <SystemInit+0x60>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <SystemInit+0x60>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <SystemInit+0x60>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <SystemInit+0x60>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	490d      	ldr	r1, [pc, #52]	; (80021ec <SystemInit+0x60>)
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <SystemInit+0x64>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <SystemInit+0x60>)
 80021c0:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <SystemInit+0x68>)
 80021c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <SystemInit+0x60>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <SystemInit+0x60>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x60>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SystemInit+0x5c>)
 80021d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021dc:	609a      	str	r2, [r3, #8]
#endif
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	fef6ffff 	.word	0xfef6ffff
 80021f4:	24003010 	.word	0x24003010

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002230 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021fe:	e003      	b.n	8002208 <LoopCopyDataInit>

08002200 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002202:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002204:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002206:	3104      	adds	r1, #4

08002208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800220c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002210:	d3f6      	bcc.n	8002200 <CopyDataInit>
  ldr  r2, =_sbss
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002214:	e002      	b.n	800221c <LoopFillZerobss>

08002216 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002216:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002218:	f842 3b04 	str.w	r3, [r2], #4

0800221c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800221e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002220:	d3f9      	bcc.n	8002216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002222:	f7ff ffb3 	bl	800218c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002226:	f000 f811 	bl	800224c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7ff fddf 	bl	8001dec <main>
  bx  lr    
 800222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002234:	080022dc 	.word	0x080022dc
  ldr  r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800223c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002240:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002244:	2000006c 	.word	0x2000006c

08002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC_IRQHandler>
	...

0800224c <__libc_init_array>:
 800224c:	b570      	push	{r4, r5, r6, lr}
 800224e:	4e0d      	ldr	r6, [pc, #52]	; (8002284 <__libc_init_array+0x38>)
 8002250:	4c0d      	ldr	r4, [pc, #52]	; (8002288 <__libc_init_array+0x3c>)
 8002252:	1ba4      	subs	r4, r4, r6
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	2500      	movs	r5, #0
 8002258:	42a5      	cmp	r5, r4
 800225a:	d109      	bne.n	8002270 <__libc_init_array+0x24>
 800225c:	4e0b      	ldr	r6, [pc, #44]	; (800228c <__libc_init_array+0x40>)
 800225e:	4c0c      	ldr	r4, [pc, #48]	; (8002290 <__libc_init_array+0x44>)
 8002260:	f000 f820 	bl	80022a4 <_init>
 8002264:	1ba4      	subs	r4, r4, r6
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	2500      	movs	r5, #0
 800226a:	42a5      	cmp	r5, r4
 800226c:	d105      	bne.n	800227a <__libc_init_array+0x2e>
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002274:	4798      	blx	r3
 8002276:	3501      	adds	r5, #1
 8002278:	e7ee      	b.n	8002258 <__libc_init_array+0xc>
 800227a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800227e:	4798      	blx	r3
 8002280:	3501      	adds	r5, #1
 8002282:	e7f2      	b.n	800226a <__libc_init_array+0x1e>
 8002284:	080022d4 	.word	0x080022d4
 8002288:	080022d4 	.word	0x080022d4
 800228c:	080022d4 	.word	0x080022d4
 8002290:	080022d8 	.word	0x080022d8

08002294 <memset>:
 8002294:	4402      	add	r2, r0
 8002296:	4603      	mov	r3, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <memset+0xa>
 800229c:	4770      	bx	lr
 800229e:	f803 1b01 	strb.w	r1, [r3], #1
 80022a2:	e7f9      	b.n	8002298 <memset+0x4>

080022a4 <_init>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr

080022b0 <_fini>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr
